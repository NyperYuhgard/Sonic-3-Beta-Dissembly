; ---------------------------------------------------------------------------
; Sonic the Hedgehog 3 - November 3, 1993 GitHub disassembly
;
; Based on Esrael L.G. Neto's disassembly
; Current editors: NyperYuhgard, MarkeyJester, and Alex Field
; ROM released by hiddenpalace.org on November 16, 2019, by drx
; ---------------------------------------------------------------------------
; Quick Guildlines for Labels (to keep consistency)
; - 'Temporary' labels (those prefixed with '@') are to start with a lowercase letter
;     e.g. "@notLeft"
; - Object name format is Obj_NAME, or ObjXX_NAME if it has an ID
;     e.g. 'Obj_Sonic' and 'Obj38_ClassicShield'
; - Object label format for internal functions is 'NAME_FUNCITON'; don't include the ObjXX_ prefix!
;     e.g. "Sonic_CheckForSpindash" and 'ThrownRing_Main'
; - Generally limit the '_' in labels to one maximum
;     e.g. "Tails_TestForFlight', NOT "Tails_Test_For_Flight'
; ---------------------------------------------------------------------------
; Dados n�o usados (left over ???):
; 0x00F972 - Obj_Classic_Shield
; 0x010C60 - Obj_S1_0x4B_Big_Ring
; 0x010D26 - Obj_S1_0x7C_Big_Ring_Flash
; 0x010FC2 - Obj_S2_0xDC_Slot_Machine_Ring
; 0x024BCC - Obj_S2_0x6F_Special_Stage_Results
; 0x04C3A6 - Itens n�o linkados na lista de objetos do debug da Lava Reef
; 0x080DE0 - Art_Invincibility 
; 0x0EF1DD - C�digo n�o linkado
; 0x10687E - Art_Horizontal_Spring
; 0x106CB0 - Art_Head_Up_Display
; 0x109B4A - Art_Result_Font_2P
; 0x10ADA2 - Art_Seal
; 0x10AEBE - Art_Pig
; 0x10DCE6 - Mapeamento n�o referenciado
; 0x10DFC4 - Script din�mico n�o referenciado ( Obj 0x97 - Cluckoid )
; 0x10E18E - Script din�mico n�o referenciado ( Obj 0x96 - Butterdroid )
; 0x10E2C4 - Script din�mico n�o referenciado ( Obj 0x90 - Fireworm )
; 0x10E5B6 - Ponteiro de mapeamento sobrescrito
; 0x132802 - Art_Hz_Enemies
; 0x1885CA - Chunks n�o usados na Launch Base
; 0x1E9814 - Segunda linha da paleta do Sonic n�o � usada
; ---------------------------------------------------------------------------
		include	"Macros - Setup.asm"
		include	"Macros - More CPUs.asm"
		CPU 68000
		include	"Macros - Functions.asm"

		include	"vars.asm"

StartOfRom:
                dc.l    StackPointer            ; Initial stack pointer value
Prog_Start_Vector:                 
                dc.l    ROM_Prog_Start          ; Start of our program in ROM
                dc.l    ($02<<$18)|Check_Interrupt ; BusError                ; Bus error
                dc.l    ($03<<$18)|Check_Interrupt ; AddressError            ; Address error
                dc.l    ($04<<$18)|Check_Interrupt ; IllegalInstr            ; Illegal instruction
                dc.l    ($05<<$18)|Check_Interrupt ; ZeroDivide              ; Division by zero
                dc.l    ($06<<$18)|Check_Interrupt ; ChkInstr                ; CHK exception
                dc.l    ($07<<$18)|Check_Interrupt ; TrapvInstr              ; TRAPV exception
                dc.l    ($08<<$18)|Check_Interrupt ; PrivilegeViolation      ; Privilege violation
                dc.l    ($09<<$18)|Check_Interrupt ; Trace                   ; TRACE exception

                dc.l    Line1010Emu             ; Line-A emulator
                dc.l    Line1111Emu             ; Line-F emulator
Interrupt_0C:                
                dc.l    ErrorException          ; Unused (reserved)
Interrupt_0D:                
                dc.l    ErrorException          ; Unused (reserved)
                dc.l    ErrorException          ; Unused (reserved)
                dc.l    ErrorException          ; Unused (reserved)
                dc.l    ErrorException          ; Unused (reserved)
                dc.l    ErrorException          ; Unused (reserved)
                dc.l    ErrorException          ; Unused (reserved)
                dc.l    ErrorException          ; Unused (reserved)
                dc.l    ErrorException          ; Unused (reserved)
                dc.l    ErrorException          ; Unused (reserved)
                dc.l    ErrorException          ; Unused (reserved)
                dc.l    ErrorException          ; Unused (reserved)
                dc.l    ErrorException          ; Spurious exception
                dc.l    ErrorTrap               ; IRQ level 1
                dc.l    ErrorTrap               ; IRQ level 2
                dc.l    ErrorTrap               ; IRQ level 3
                dc.l    HBlank                  ; IRQ level 4 -> HBlankInterrupt (horizontal retrace interrupt)
                dc.l    ErrorTrap               ; IRQ level 5
                dc.l    VBlank                  ; IRQ level 6 -> VBlankInterrupt (vertical retrace interrupt)
                dc.l    ErrorTrap               ; IRQ level 7
                dc.l    ($20<<$18)|(Check_Interrupt-$04) ; ErrorTrap               ; TRAP #$00 exception
                dc.l    ErrorTrap               ; TRAP #$01 exception
                dc.l    ErrorTrap               ; TRAP #$02 exception
                dc.l    ErrorTrap               ; TRAP #$03 exception
                dc.l    ErrorTrap               ; TRAP #$04 exception
                dc.l    ErrorTrap               ; TRAP #$05 exception
                dc.l    ErrorTrap               ; TRAP #$06 exception
                dc.l    ErrorTrap               ; TRAP #$07 exception
                dc.l    ErrorTrap               ; TRAP #$08 exception
                dc.l    ErrorTrap               ; TRAP #$09 exception
                dc.l    ErrorTrap               ; TRAP #$0A exception
                dc.l    ErrorTrap               ; TRAP #$0B exception
                dc.l    ErrorTrap               ; TRAP #$0C exception
                dc.l    ErrorTrap               ; TRAP #$0D exception
                dc.l    ErrorTrap               ; TRAP #$0E exception
                dc.l    Trap_0x0F               ; TRAP #$0F exception
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)   
Console:	dc.b	'SEGA GENESIS    (C)'
Date:		dc.b	'SEGA 1993.OCT'
Title_Local:	dc.b	'SONIC THE             HEDGEHOG 3                '
Title_Int:	dc.b	'SONIC THE             HEDGEHOG 3                '
ROMSerial:	dc.b	'GM 00001079-00' 
Checksum:	dc.w	$1019
IOSupport:	dc.b	'J               '
ROMStartLoc:	dc.l	StartOfRom
ROMEndLoc:	dc.l	EndOfRom-1
RAMStart:	dc.l	$FF0000
RAMEnd:		dc.l	$FFFFFF
SRAMSupport:	dc.b	'                '
Notes:                  
                dc.b    $00, $01, $02, $03, $04, $05, $06, $07
                dc.b    $08, $09, $0A, $0B, $0C, $0D, $0E, $0F              
                dc.b    '                                '
Region:		dc.b	'JUE             '
EndOfHeader:

;-------------------------------------------------------------------------------
ROM_Data_Start:                                                ; Offset_0x000200
ErrorTrap:                                                     
Line1010Emu:
Line1111Emu:
ErrorException:
                nop                                                             
                nop                                                             
                bra.s   ErrorTrap                              ; Offset_0x000200
;===============================================================================                
ROM_Prog_Start:                                                ; Offset_0x000206
                lea     (Stack_Area_End).w, A7                       ; $FFFFFE00
                tst.l   (IO_Port_0_Control)                          ; $00A10008
                bne.s   PortA_OK                               ; Offset_0x000218
                tst.w   (IO_Expansion_Control)                       ; $00A1000C
PortA_OK:                                                      ; Offset_0x000218
                bne.s   PortC_OK                               ; Offset_0x000296
                lea     InitValues(PC), A5                     ; Offset_0x000298
                movem.w (A5)+, D5-D7
                movem.l (A5)+, A0-A4
                move.b  -$10FF(A1), D0
                andi.b  #$0F, D0
                beq.s   SkipSecurity                           ; Offset_0x000238
                move.l  #'SEGA', $2F00(A1)
SkipSecurity:                                                  ; Offset_0x000238
                move.w  (A4), D0
                moveq   #$00, D0
                move.l  D0, A6
                move.l    A6, USP
                moveq   #$17, D1
VDPInitLoop:                                                   ; Offset_0x000242
                move.b  (A5)+, D5
                move.w  D5, (A4)
                add.w   D7, D5
                dbra    D1, VDPInitLoop                        ; Offset_0x000242                
                move.l  (A5)+, (A4)
                move.w  D0, (A3)
                move.w  D7, (A1)
                move.w  D7, (A2)
WaitForZ80:                                                    ; Offset_0x000254
                btst    D0, (A1)
                bne.s   WaitForZ80                             ; Offset_0x000254                
                moveq   #$25, D2
Z80InitLoop:                                                   ; Offset_0x00025A
                move.b  (A5)+, (A0)+
                dbra    D2, Z80InitLoop                        ; Offset_0x00025A
                move.w  D0, (A2)
                move.w  D0, (A1)
                move.w  D7, (A2)
ClearRAMLoop:                                                  ; Offset_0x000266
                move.l  D0, -(A6)
                dbra    D6, ClearRAMLoop                       ; Offset_0x000266
                move.l  (A5)+, (A4)
                move.l  (A5)+, (A4)
                moveq   #$1F, D3
ClearCRAMLoop:                                                 ; Offset_0x000272
                move.l  D0, (A3)
                dbra    D3, ClearCRAMLoop                      ; Offset_0x000272
                move.l  (A5)+, (A4)
                moveq   #$13, D4
ClearVSRAMLoop:                                                ; Offset_0x00027C
                move.l  D0, (A3)
                dbra    D4, ClearVSRAMLoop                     ; Offset_0x00027C
                moveq   #$03, D5
PSGInitLoop:                                                   ; Offset_0x000284
                move.b  (A5)+, $0011(A3)
                dbra    D5, PSGInitLoop                        ; Offset_0x000284
                move.w  D0, (A2)
                movem.l (A6), D0-D7/A0-A6
                move    #$2700, SR
PortC_OK:                                                      ; Offset_0x000296
                bra.s   GameProgram                           ; Offset_0x000304                
;-------------------------------------------------------------------------------
InitValues:                                                    ; Offset_0x000298                 
                dc.w    $8000, $3FFF, $0100 
                dc.l    Z80_RAM_Start               ; $00A00000
                dc.l    Z80_Bus_Request             ; $00A11100
                dc.l    Z80_Reset                   ; $00A11200
                dc.l    VDP_Data_Port               ; $00C00000
                dc.l    VDP_Control_Port            ; $00C00004                      
                dc.b    $04, $14, $30, $3C, $07, $6C, $00, $00
                dc.b    $00, $00, $FF, $00, $81, $37, $00, $01
                dc.b    $01, $00, $00, $FF, $FF, $00, $00, $80
                dc.b    $40, $00, $00, $80, $AF, $01, $D9, $1F 
                dc.b    $11, $27, $00, $21, $26, $00, $F9, $77
                dc.b    $ED, $B0, $DD, $E1, $FD, $E1, $ED, $47 
                dc.b    $ED, $4F, $D1, $E1, $F1, $08, $D9, $C1
                dc.b    $D1, $E1, $F1, $F9, $F3, $ED, $56, $36 
                dc.b    $E9, $E9, $81, $04, $8F, $02
                dc.l    Color_RAM_Address           ; $C0000000
                dc.l    $40000010
                dc.b    $9F, $BF, $DF, $FF          ; PSG Data
; ===========================================================================
; Offset_0x000304:
GameProgram:
		tst.w	(VDP_Control_Port).l
; Offset_00030A:
WaitForVDP:
		move.w	(VDP_Control_Port),d1
		btst	#1,d1
		bne.s	WaitForVDP
		btst	#6,(IO_Expansion_Control+1).l
		beq.s	ChecksumCheck
		cmpi.l	#'init',(Init_Flag).w
		beq.w	AlreadyInit
; Offset_00032C:
ChecksumCheck:
		movea.l	#EndOfHeader,a0
		movea.l	#ROMEndLoc,a1
		move.l	(a1),d0
		moveq	#0,d1
		add.w	(a0)+,d1
		cmp.l	a0,d0
		nop
		nop
		move.l	#Checksum,a1
		cmp.w	(a1),d1
		nop
		nop
		lea	(Stack_Area_End).w,a6
		moveq	#0,d7
		move.w	#$7F,d6
; Offset_0x00035A:
ClearSomeRAMLoop:
		move.l	d7,(a6)+
		dbra	d6,ClearSomeRAMLoop
		move.b	(IO_Hardware_Version),d0
		andi.b	#$C0,d0
		move.b	d0,(Hardware_Id).w
		move.l	#'init',(Init_Flag).w
; Offset_0x000376:
AlreadyInit:
		bsr.w	Check_VDP_Frequency
		lea	(M68K_RAM_Start&$FFFFFF).l,a6
		moveq	#0,d7
		move.w	#(Stack_Area_End>>2-M68K_RAM_Start>>2)-1,d6
; Offset_0x000386:
ClearRemainingRAMLoop:
		move.l	d7,(a6)+
		dbra	d6,ClearRemainingRAMLoop

		bsr.w	VDPRegSetup
		bsr.w	SoundDriverLoad
		bsr.w	JoypadInit
		move.b	#gm_SEGALogo,(Game_Mode).w
; Offset_0x00039E:
MainGameLoop:                       
		move.b	(Game_Mode).w,d0
		andi.w	#$3C,d0
		jsr	GameModeArray(pc,d0.w)
		bra.s	MainGameLoop
; ===========================================================================
; Offset_0x0003AC:
GameModeArray:
		bra.w	SEGA_Screen
		bra.w	TitleScreen
		bra.w	Level
		bra.w	Level
		bra.w	S2_Special_Stage
		bra.w	S2_Continue
		bra.w	S2_Two_Player_Results
		bra.w	S2_Versus_Mode_Menu
		bra.w	S2_Ending_Sequence
		bra.w	S2_Options_Menu
		bra.w	S2_Level_Select_Menu
		bra.w	Special_Stage_Test_1
		bra.w	Special_Stage_Test_2
; ===========================================================================

S2_Special_Stage:
S2_Continue:
S2_Two_Player_Results:
S2_Ending_Sequence:
Run_SEGA_Screen:                                               ; Offset_0x0003E0
                move.b  #gm_SEGALogo, (Game_Mode).w             ; $00, $FFFFF600
                rts
;=============================================================================== 
ChecksumError:                                                 ; Offset_0x0003E8
                move.l  D1, -(A7)
                bsr     VDPRegSetup                            ; Offset_0x000F52
                move.l  (A7)+, D1
ChecksumError_Inf_Loop:                                        ; Offset_0x0003F0
                move.l  #Color_RAM_Address, (VDP_Control_Port) ; $C0000000, $00C00004
                move.w  D7, (VDP_Data_Port)                          ; $00C00000
                addq.w  #$01, D7
                bra.s   ChecksumError_Inf_Loop                 ; Offset_0x0003F0   
;=============================================================================== 
Show_Red_Screen:                                               ; Offset_0x000404
                move.l  #Color_RAM_Address, (VDP_Control_Port) ; $C0000000, $00C00004
                moveq   #$3F, D7
Fill_Red_Loop:                                                 ; Offset_0x000410
                move.w  #$000E, (VDP_Data_Port)                      ; $00C00000
                dbra    D7, Fill_Red_Loop                      ; Offset_0x000410
Show_Red_Screen_Inf_Loop:                                      ; Offset_0x00041C
                bra.s   Show_Red_Screen_Inf_Loop               ; Offset_0x00041C    
;===============================================================================                
Check_VDP_Frequency:                                           ; Offset_0x00041E
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.w  #$8174, (A5)
                moveq   #$00, D0
Offset_0x00042A:
                move.w  (A5), D1
                andi.w  #$0008, D1
                beq.s   Offset_0x00042A
Offset_0x000432:
                move.w  (A5), D1
                andi.w  #$0008, D1
                bne.s   Offset_0x000432
Offset_0x00043A:
                addq.w  #$01, D0
                move.w  (A5), D1
                andi.w  #$0008, D1
                beq.s   Offset_0x00043A
                move.w  D0, (Vertical_Frequency).w                   ; $FFFFFFF6
                rts                
;===============================================================================  

;===============================================================================                  
; Interrup��o Vertical
; ->>>                           
;===============================================================================   
VBlank:                                                        ; Offset_0x00044A
                nop
                movem.l D0-D7/A0-A6, -(A7)
                tst.b   (VBlank_Index).w                             ; $FFFFF62A
                beq     Default_VBlank                         ; Offset_0x0004CA
Offset_0x000458:
                move.w  (VDP_Control_Port), D0                       ; $00C00004
                andi.w  #$0008, D0
                beq.s   Offset_0x000458
                move.l  #$40000010, (VDP_Control_Port)               ; $00C00004
                move.l  (Vertical_Scroll_Value).w, (VDP_Data_Port)   ; $FFFFF616
                btst    #$06, (Hardware_Id).w                        ; $FFFFFFF8
                beq.s   Offset_0x000486
                move.w  #$0700, D0
Offset_0x000482:
                dbra    D0, Offset_0x000482
Offset_0x000486:
                move.b  (VBlank_Index).w, D0                         ; $FFFFF62A
                move.b  #$00, (VBlank_Index).w                       ; $FFFFF62A
                move.w  #$0001, (Horizontal_Interrupt_Flag).w        ; $FFFFF644
                andi.w  #$003E, D0
                move.w  VBlank_List(PC, D0), D0                ; Offset_0x0004AC
                jsr     VBlank_List(PC, D0)                    ; Offset_0x0004AC
VBlank_Finalize:                                               ; Offset_0x0004A2               
                addq.l  #$01, (Vint_runcount).w           ; $FFFFFE0C
                movem.l (A7)+, D0-D7/A0-A6
                rte    
;-------------------------------------------------------------------------------
VBlank_List:                                                   ; Offset_0x0004AC
                dc.w    VBlank_00-VBlank_List                  ; Offset_0x0004C8
                dc.w    VBlank_02-VBlank_List                  ; Offset_0x000656
                dc.w    VBlank_04-VBlank_List                  ; Offset_0x0006C8
                dc.w    VBlank_06-VBlank_List                  ; Offset_0x0006E2
                dc.w    VBlank_08-VBlank_List                  ; Offset_0x0006E8
                dc.w    VBlank_0A-VBlank_List                  ; Offset_0x000898
                dc.w    VBlank_0C-VBlank_List                  ; Offset_0x000898
                dc.w    VBlank_0E-VBlank_List                  ; Offset_0x00096C
                dc.w    VBlank_10-VBlank_List                  ; Offset_0x0006E8
                dc.w    VBlank_12-VBlank_List                  ; Offset_0x000978
                dc.w    VBlank_14-VBlank_List                  ; Offset_0x000692
                dc.w    VBlank_16-VBlank_List                  ; Offset_0x000AD2
                dc.w    VBlank_18-VBlank_List                  ; Offset_0x000984
                dc.w    VBlank_1A-VBlank_List                  ; Offset_0x000B76
;-------------------------------------------------------------------------------                                                                             
VBlank_00:                                                     ; Offset_0x0004C8
                addq.w  #$04, A7
Default_VBlank:                                                ; Offset_0x0004CA
                addq.w  #$01, (VBlank_0_Run_Count).w                 ; $FFFFF628
                cmpi.b  #$80|gm_DemoMode, (Game_Mode).w         ; $88, $FFFFF600
                beq.s   Offset_0x00050E
                cmpi.b  #$80|gm_PlayMode, (Game_Mode).w         ; $8C, $FFFFF600
                beq.s   Offset_0x00050E
                cmpi.b  #gm_DemoMode, (Game_Mode).w             ; $08, $FFFFF600
                beq.s   Offset_0x00050E
                cmpi.b  #gm_PlayMode, (Game_Mode).w             ; $0C, $FFFFF600
                beq.s   Offset_0x00050E
		stopZ80
		bsr.w	SoundDriverInput_Null
		startZ80
                bra.s   VBlank_Finalize                        ; Offset_0x0004A2
Offset_0x00050E:
                tst.b   (Water_Level_Flag).w                         ; $FFFFF730
                beq     Offset_0x0005A8
                move.w  (VDP_Control_Port), D0                       ; $00C00004
                btst    #$06, (Hardware_Id).w                        ; $FFFFFFF8
                beq.s   Offset_0x00052C
                move.w  #$0700, D0
Offset_0x000528:
                dbra    D0, Offset_0x000528
Offset_0x00052C:
                move.w  #$0001, (Horizontal_Interrupt_Flag).w        ; $FFFFF644
		stopZ80
                tst.b   (Underwater_Flag).w                          ; $FFFFF64E
                bne.s   Offset_0x000570
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94009340, (A5)
                move.l  #$96F69580, (A5)
                move.w  #$977F, (A5)
                move.w  #$C000, (A5)
                move.w  #$0080, (DMA_Trigger).w                      ; $FFFFF640
                move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
                bra.s   Offset_0x000594
Offset_0x000570:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94009340, (A5)
                move.l  #$96F89540, (A5)
                move.w  #$977F, (A5)
                move.w  #$C000, (A5)
                move.w  #$0080, (DMA_Trigger).w                      ; $FFFFF640
                move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
Offset_0x000594:
                move.w  (Horizontal_Int_Count_Cmd).w, (A5)           ; $FFFFF624
		bsr.w	SoundDriverInput_Null
		startZ80
                bra     VBlank_Finalize                        ; Offset_0x0004A2
Offset_0x0005A8:
                move.w  (VDP_Control_Port), D0                       ; $00C00004
                btst    #$06, (Hardware_Id).w                        ; $FFFFFFF8
                beq.s   Offset_0x0005BE
                move.w  #$0700, D0
Offset_0x0005BA:
                dbra    D0, Offset_0x0005BA
Offset_0x0005BE:
                move.w  #$0001, (Horizontal_Interrupt_Flag).w        ; $FFFFF644
                move.w  (Horizontal_Int_Count_Cmd).w, (VDP_Control_Port) ; $FFFFF624
		stopZ80
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq.s   Offset_0x000646
                move.l  #$40000010, (VDP_Control_Port)               ; $00C00004
                move.l  (Vertical_Scroll_Value).w, (VDP_Data_Port)   ; $FFFFF616
                tst.w   (Use_Normal_Sprite_Table).w                  ; $FFFFEF3C
                beq.s   Offset_0x000622
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94019340, (A5)
                move.l  #$96FC9500, (A5)
                move.w  #$977F, (A5)
                move.w  #$7800, (A5)
                move.w  #$0083, (DMA_Trigger).w                      ; $FFFFF640
                move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
                bra.s   Offset_0x000646
Offset_0x000622:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94019340, (A5)
                move.l  #$96BC9540, (A5)
                move.w  #$977F, (A5)
                move.w  #$7800, (A5)
                move.w  #$0083, (DMA_Trigger).w                      ; $FFFFF640
                move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
Offset_0x000646:
		bsr.w	SoundDriverInput_Null
		startZ80
                bra     VBlank_Finalize                        ; Offset_0x0004A2
;-------------------------------------------------------------------------------
VBlank_02:                                                     ; Offset_0x000656
                bsr     Offset_0x000B80
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$940193C0, (A5)
                move.l  #$96F09500, (A5)
                move.w  #$977F, (A5)
                move.w  #$7000, (A5)
                move.w  #$0083, (DMA_Trigger).w                      ; $FFFFF640
                move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
                jsr     (VInt_SEGA_Screen)                     ; Offset_0x034926
                tst.w   (Demo_Timer).w                               ; $FFFFF614
                beq     Offset_0x000690
                subq.w  #$01, (Demo_Timer).w                         ; $FFFFF614
Offset_0x000690:
                rts     
;-------------------------------------------------------------------------------
VBlank_14:                                                     ; Offset_0x000692
                move.b  (Vint_runcount+$03).w, D0         ; $FFFFFE0F
                andi.w  #$000F, D0
                bne.s   Offset_0x0006BA
		stopZ80
                bsr     Control_Ports_Read                     ; Offset_0x000F16
		startZ80
Offset_0x0006BA:
                tst.w   (Demo_Timer).w                               ; $FFFFF614
                beq     Offset_0x0006C6
                subq.w  #$01, (Demo_Timer).w                         ; $FFFFF614
Offset_0x0006C6:
                rts
;-------------------------------------------------------------------------------
VBlank_04:                                                     ; Offset_0x0006C8
                bsr     VInt_Title_Screen                      ; Offset_0x00359A
                bsr     Offset_0x000B80
                bsr     Process_Nemesis_Queue                  ; Offset_0x0015AE
                tst.w   (Demo_Timer).w                               ; $FFFFF614
                beq     Offset_0x0006E0
                subq.w  #$01, (Demo_Timer).w                         ; $FFFFF614
Offset_0x0006E0:
                rts
;-------------------------------------------------------------------------------                
VBlank_06:                                                     ; Offset_0x0006E2
                bsr     Offset_0x000B80
                rts             
;------------------------------------------------------------------------------- 
VBlank_08:                                                     ; Offset_0x0006E8
VBlank_10:                                                           
		stopZ80
                bsr     Control_Ports_Read                     ; Offset_0x000F16
                tst.b   (S2_Teleport_Timer).w                        ; $FFFFF622
                beq.s   Offset_0x00075A
                lea     (VDP_Control_Port), A5                       ; $00C00004
                tst.w   (Pause_Status).w                             ; $FFFFF63A
                bne     Offset_0x0007AA
                subq.b  #$01, (S2_Teleport_Timer).w                  ; $FFFFF622
                bne.s   Offset_0x00071E
                move.b  #$00, (S2_Teleport_Flag).w                   ; $FFFFF623
Offset_0x00071E:
                cmpi.b  #$10, (S2_Teleport_Timer).w                  ; $FFFFF622
                bcs.s   Offset_0x00075A
                lea     (VDP_Data_Port), A6                          ; $00C00000
                move.l  #$C0000000, (VDP_Control_Port)               ; $00C00004
                move.w  #$0EEE, D0
                move.w  #$001F, D1
Offset_0x00073E:
                move.w  D0, (A6)
                dbra    D1, Offset_0x00073E
                move.l  #$C0420000, (VDP_Control_Port)               ; $00C00004
                move.w  #$001F, D1
Offset_0x000752:
                move.w  D0, (A6)
                dbra    D1, Offset_0x000752
                bra.s   Offset_0x0007AA
Offset_0x00075A:
                tst.b   (Underwater_Flag).w                          ; $FFFFF64E
                bne.s   Offset_0x000786
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94009340, (A5)
                move.l  #$96F69580, (A5)
                move.w  #$977F, (A5)
                move.w  #$C000, (A5)
                move.w  #$0080, (DMA_Trigger).w                      ; $FFFFF640
                move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
                bra.s   Offset_0x0007AA
Offset_0x000786:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94009340, (A5)
                move.l  #$96F89540, (A5)
                move.w  #$977F, (A5)
                move.w  #$C000, (A5)
                move.w  #$0080, (DMA_Trigger).w                      ; $FFFFF640
                move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
Offset_0x0007AA:
                move.w  (Horizontal_Int_Count_Cmd).w, (A5)           ; $FFFFF624
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$940193C0, (A5)
                move.l  #$96F09500, (A5)
                move.w  #$977F, (A5)
                move.w  #$7000, (A5)
                move.w  #$0083, (DMA_Trigger).w                      ; $FFFFF640
                move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq.s   Offset_0x000814
                tst.w   (Normal_Sprite_Table_Flag).w                 ; $FFFFEF3E
                beq.s   Offset_0x0007E8
                clr.w   (Normal_Sprite_Table_Flag).w                 ; $FFFFEF3E
                eori.w  #$FFFF, (Use_Normal_Sprite_Table).w          ; $FFFFEF3C
Offset_0x0007E8:
                tst.w   (Use_Normal_Sprite_Table).w                  ; $FFFFEF3C
                bne.s   Offset_0x000814
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94019340, (A5)
                move.l  #$96BC9540, (A5)
                move.w  #$977F, (A5)
                move.w  #$7800, (A5)
                move.w  #$0083, (DMA_Trigger).w                      ; $FFFFF640
                move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
                bra.s   Offset_0x000838
Offset_0x000814:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94019340, (A5)
                move.l  #$96FC9500, (A5)
                move.w  #$977F, (A5)
                move.w  #$7800, (A5)
                move.w  #$0083, (DMA_Trigger).w                      ; $FFFFF640
                move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
Offset_0x000838:
                bsr     Process_DMA                            ; Offset_0x00135E
                move.l  (Vertical_Scroll_Value_P2).w, (Vertical_Scroll_Value_P2_2).w ; $FFFFF61E, $FFFFEE3A
                jsr     (Special_Vint)                         ; Offset_0x02F6BC
                jsr     (Vint_Draw_Level)                      ; Offset_0x02F636
		bsr.w	SoundDriverInput_Null
		startZ80
                move    #$2300, SR
                cmpi.b  #$5C, (Scanline_Counter).w                   ; $FFFFF625
                bcc.s   Offset_0x000872
                move.b  #$01, (H_Int_Update_Flag).w                  ; $FFFFF64F
                jmp     (Set_Kos_Bookmark)                ; Offset_0x0019C6
Offset_0x000872:
                bsr.s   Offset_0x00087A
                jmp     (Set_Kos_Bookmark)                ; Offset_0x0019C6
Offset_0x00087A:
                jsr     (HUD_Update)                           ; Offset_0x007B34
                move.w  #$0000, (VBlank_0_Run_Count).w               ; $FFFFF628
                bsr     Process_Nemesis_Queue_2                ; Offset_0x0015CA
                tst.w   (Demo_Timer).w                               ; $FFFFF614
                beq     Offset_0x000896
                subq.w  #$01, (Demo_Timer).w                         ; $FFFFF614
Offset_0x000896:
                rts 
;-------------------------------------------------------------------------------
VBlank_0A:                                                     ; Offset_0x000898
VBlank_0C:
		stopZ80
                bsr     Control_Ports_Read                     ; Offset_0x000F16
                tst.b   (Underwater_Flag).w                          ; $FFFFF64E
                bne.s   Offset_0x0008DA
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94009340, (A5)
                move.l  #$96F69580, (A5)
                move.w  #$977F, (A5)
                move.w  #$C000, (A5)
                move.w  #$0080, (DMA_Trigger).w                      ; $FFFFF640
                move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
                bra.s   Offset_0x0008FE
Offset_0x0008DA:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94009340, (A5)
                move.l  #$96F89540, (A5)
                move.w  #$977F, (A5)
                move.w  #$C000, (A5)
                move.w  #$0080, (DMA_Trigger).w                      ; $FFFFF640
                move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
Offset_0x0008FE:
                move.w  (Horizontal_Int_Count_Cmd).w, (A5)           ; $FFFFF624
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$940193C0, (A5)
                move.l  #$96F09500, (A5)
                move.w  #$977F, (A5)
                move.w  #$7000, (A5)
                move.w  #$0083, (DMA_Trigger).w                      ; $FFFFF640
                move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94019340, (A5)
                move.l  #$96FC9500, (A5)
                move.w  #$977F, (A5)
                move.w  #$7800, (A5)
                move.w  #$0083, (DMA_Trigger).w                      ; $FFFFF640
                move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
                bsr     Process_DMA                            ; Offset_0x00135E
                move.l  (Vertical_Scroll_Value_P2).w, (Vertical_Scroll_Value_P2_2).w ; $FFFFF61E, $FFFFEE3A
		jsr	(SoundDriverInput_Null).l
		startZ80
                bsr     Process_Nemesis_Queue                  ; Offset_0x0015AE
                jmp     (Set_Kos_Bookmark)                ; Offset_0x0019C6
;-------------------------------------------------------------------------------
VBlank_0E:                                                     ; Offset_0x00096C
                bsr     Offset_0x000B80
                move.b  #$0E, (VBlank_Index).w                       ; $FFFFF62A
                rts          
;-------------------------------------------------------------------------------
VBlank_12:                                                     ; Offset_0x000978
                bsr     Offset_0x000B80
                move.w  (Horizontal_Int_Count_Cmd).w, (A5)           ; $FFFFF624
                bra     Process_Nemesis_Queue                  ; Offset_0x0015AE 
;-------------------------------------------------------------------------------
VBlank_18:                                                     ; Offset_0x000984
		stopZ80
                bsr     Control_Ports_Read                     ; Offset_0x000F16
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94009340, (A5)
                move.l  #$96F69580, (A5)
                move.w  #$977F, (A5)
                move.w  #$C000, (A5)
                move.w  #$0080, (DMA_Trigger).w                      ; $FFFFF640
                move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94019340, (A5)
                move.l  #$96FC9500, (A5)
                move.w  #$977F, (A5)
                move.w  #$7800, (A5)
                move.w  #$0083, (DMA_Trigger).w                      ; $FFFFF640
                move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$940193C0, (A5)
                move.l  #$96F09500, (A5)
                move.w  #$977F, (A5)
                move.w  #$7000, (A5)
                move.w  #$0083, (DMA_Trigger).w                      ; $FFFFF640
                move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
                bsr     Process_DMA                            ; Offset_0x00135E
		bsr.w	SoundDriverInput_Null
		startZ80
                rts     
;-------------------------------------------------------------------------------
; Offset_0x000A18:
                ori.b   #$34, D4
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.w  #$8F01, (A5)
                move.l  #$941F93FF, (A5)
                move.w  #$9780, (A5)
                move.l  #$40000083, (A5)
                move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
Offset_0x000A3E:
                move.w  (A5), D1
                btst    #$01, D1
                bne.s   Offset_0x000A3E
                move.w  #$8F02, (A5)
                rts        
;-------------------------------------------------------------------------------
; Offset_0x000A4C:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.w  #$8F01, (A5)
                move.l  #$941F93FF, (A5)
                move.w  #$9780, (A5)
                move.l  #$40000081, (A5)
                move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
Offset_0x000A6E:
                move.w  (A5), D1
                btst    #$01, D1
                bne.s   Offset_0x000A6E
                move.w  #$8F02, (A5)
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.w  #$8F01, (A5)
                move.l  #$941F93FF, (A5)
                move.w  #$9780, (A5)
                move.l  #$40000083, (A5)
                move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
Offset_0x000A9C:
                move.w  (A5), D1
                btst    #$01, D1
                bne.s   Offset_0x000A9C
                move.w  #$8F02, (A5)
                lea     (VDP_Control_Port), A6                       ; $00C00004
                move.w  #$8B00, (A6)
                move.w  #$8402, (A6)
                move.w  #$9011, (A6)
                lea     (M68K_RAM_Start), A1                         ; $FFFF0000
                move.l  #$50AC0003, D0
                moveq   #$16, D1
                moveq   #$0E, D2
                jsr     (ShowVDPGraphics)                      ; Offset_0x0012BC
                rts   
;-------------------------------------------------------------------------------
VBlank_16:                                                     ; Offset_0x000AD2
		stopZ80
                bsr     Control_Ports_Read                     ; Offset_0x000F16
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94009340, (A5)
                move.l  #$96F69580, (A5)
                move.w  #$977F, (A5)
                move.w  #$C000, (A5)
                move.w  #$0080, (DMA_Trigger).w                      ; $FFFFF640
                move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94019340, (A5)
                move.l  #$96FC9500, (A5)
                move.w  #$977F, (A5)
                move.w  #$7800, (A5)
                move.w  #$0083, (DMA_Trigger).w                      ; $FFFFF640
                move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$940193C0, (A5)
                move.l  #$96F09500, (A5)
                move.w  #$977F, (A5)
                move.w  #$7000, (A5)
                move.w  #$0083, (DMA_Trigger).w                      ; $FFFFF640
                move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
                bsr     Process_DMA                            ; Offset_0x00135E
		bsr.w	SoundDriverInput_Null
		startZ80
                bsr     Process_Nemesis_Queue                  ; Offset_0x0015AE
                tst.w   (Demo_Timer).w                               ; $FFFFF614
                beq     Offset_0x000B74
                subq.w  #$01, (Demo_Timer).w                         ; $FFFFF614
Offset_0x000B74:
                rts  
;-------------------------------------------------------------------------------
VBlank_1A:                                                     ; Offset_0x000B76
                bsr     Offset_0x000B80
                bsr     Process_Nemesis_Queue                  ; Offset_0x0015AE
                rts
;-------------------------------------------------------------------------------                
Offset_0x000B80:
		stopZ80
                bsr     Control_Ports_Read                     ; Offset_0x000F16
                tst.b   (Underwater_Flag).w                          ; $FFFFF64E
                bne.s   Offset_0x000BC2
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94009340, (A5)
                move.l  #$96F69580, (A5)
                move.w  #$977F, (A5)
                move.w  #$C000, (A5)
                move.w  #$0080, (DMA_Trigger).w                      ; $FFFFF640
                move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
                bra.s   Offset_0x000BE6
Offset_0x000BC2:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94009340, (A5)
                move.l  #$96F89540, (A5)
                move.w  #$977F, (A5)
                move.w  #$C000, (A5)
                move.w  #$0080, (DMA_Trigger).w                      ; $FFFFF640
                move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
Offset_0x000BE6:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94019340, (A5)
                move.l  #$96FC9500, (A5)
                move.w  #$977F, (A5)
                move.w  #$7800, (A5)
                move.w  #$0083, (DMA_Trigger).w                      ; $FFFFF640
                move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$940193C0, (A5)
                move.l  #$96F09500, (A5)
                move.w  #$977F, (A5)
                move.w  #$7000, (A5)
                move.w  #$0083, (DMA_Trigger).w                      ; $FFFFF640
                move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
                bsr     Process_DMA                            ; Offset_0x00135E
		bsr.w	SoundDriverInput_Null
		startZ80
                rts      
;===============================================================================                  
; Interrup��o Vertical
; <<<-                           
;===============================================================================                   

;===============================================================================                  
; Interrup��o Horizontal
; ->>>                           
;=============================================================================== 
HBlank:                                                        ; Offset_0x000C40
                jmp     (HBlank_Ptr).w                               ; $FFFFF608
;-------------------------------------------------------------------------------                
HBlank_00:                                                     ; Offset_0x000C44
                tst.w   (Horizontal_Interrupt_Flag).w                ; $FFFFF644
                beq     Offset_0x000D0A
                move.w  #$0000, (Horizontal_Interrupt_Flag).w        ; $FFFFF644
                move.l  A5, -(A7)
                move.l  D0, -(A7)
Offset_0x000C56:
                move.w  (VDP_Control_Port), D0                       ; $00C00004
                andi.w  #$0004, D0
                beq.s   Offset_0x000C56
                move.w  (VDP_Register_1_Command).w, D0               ; $FFFFF60E
                andi.b  #$BF, D0
                move.w  D0, (VDP_Control_Port)                       ; $00C00004
                move.l  #$40000010, (VDP_Control_Port)               ; $00C00004
                move.l  (Vertical_Scroll_Value_P2_2).w, (VDP_Data_Port) ; $FFFFEE3A
		stopZ80
                tst.w   (Use_Normal_Sprite_Table).w                  ; $FFFFEF3C
                beq.s   Offset_0x000CC0
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94019340, (A5)
                move.l  #$96BD9580, (A5)
                move.w  #$977F, (A5)
                move.w  #$7800, (A5)
                move.w  #$0083, (DMA_Trigger).w                      ; $FFFFF640
                move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
                bra.s   Offset_0x000CE4
Offset_0x000CC0:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94019340, (A5)
                move.l  #$96BE95C0, (A5)
                move.w  #$977F, (A5)
                move.w  #$7800, (A5)
                move.w  #$0083, (DMA_Trigger).w                      ; $FFFFF640
                move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
Offset_0x000CE4:
		startZ80
Offset_0x000CEC:
                move.w  (VDP_Control_Port), D0                       ; $00C00004
                andi.w  #$0004, D0
                beq.s   Offset_0x000CEC
                move.w  (VDP_Register_1_Command).w, D0               ; $FFFFF60E
                ori.b   #$40, D0
                move.w  D0, (VDP_Control_Port)                       ; $00C00004
                move.l  (A7)+, D0
                move.l  (A7)+, A5
Offset_0x000D0A:
                rte     
;-------------------------------------------------------------------------------
HBlank_01:                                                     ; Offset_0x000D0C
                tst.w   (Horizontal_Interrupt_Flag).w                ; $FFFFF644
                beq.s   Offset_0x000D8A
                move.w  #$0000, (Horizontal_Interrupt_Flag).w        ; $FFFFF644
                movem.l D0/D1/A0-A2, -(A7)
                lea     (VDP_Data_Port), A1                          ; $00C00000
                move.w  #$8AFF, $0004(A1)
		stopZ80
                move.l  (Palette_Underwater_Ptr).w, A2               ; $FFFFF62E
                moveq   #$0C, D0
Offset_0x000D40:
                dbra    D0, Offset_0x000D40
                move.w  (A2)+, D1
                move.b  (Scanline_Counter).w, D0                     ; $FFFFF625
                subi.b  #$C8, D0
                bcs.s   Offset_0x000D54
                sub.b   D0, D1
                bcs.s   Offset_0x000D78
Offset_0x000D54:
                move.w  (A2)+, D0
                lea     (Palette_Underwater_Buffer).w, A0            ; $FFFFF080
                adda.w  D0, A0
                addi.w  #$C000, D0
                swap.w  D0
                move.l  D0, $0004(A1)
                move.l  (A0)+, (A1)
                move.w  (A0)+, (A1)
                nop
                nop
                moveq   #$24, D0
Offset_0x000D70:
                dbra    D0, Offset_0x000D70
                dbra    D1, Offset_0x000D54
Offset_0x000D78:
		startZ80
                movem.l (A7)+, D0/D1/A0-A2
                tst.b   (H_Int_Update_Flag).w                        ; $FFFFF64F
                bne.s   Offset_0x000D8C
Offset_0x000D8A:
                rte
Offset_0x000D8C:
                clr.b   (H_Int_Update_Flag).w                        ; $FFFFF64F
                movem.l D0-D7/A0-A6, -(A7)
                jsr     (Offset_0x00087A)
                movem.l (A7)+, D0-D7/A0-A6
                rte      
;-------------------------------------------------------------------------------
HBlank_02:                                                     ; Offset_0x000DA0
                tst.w   (Horizontal_Interrupt_Flag).w                ; $FFFFF644
                beq.s   Offset_0x000D8A
                move.w  #$0000, (Horizontal_Interrupt_Flag).w        ; $FFFFF644
                movem.l D0/D1/A0-A2, -(A7)
                lea     (VDP_Data_Port), A1                          ; $00C00000
                move.w  #$8AFF, $0004(A1)
		stopZ80
                move.l  (Palette_Underwater_Ptr).w, A2               ; $FFFFF62E
                moveq   #$1B, D0
Offset_0x000DD4:
                dbra    D0, Offset_0x000DD4
                move.w  (A2)+, D1
                move.b  (Scanline_Counter).w, D0                     ; $FFFFF625
                subi.b  #$C8, D0
                bcs.s   Offset_0x000DE8
                sub.b   D0, D1
                bcs.s   Offset_0x000E0A
Offset_0x000DE8:
                move.w  (A2)+, D0
                lea     (Palette_Underwater_Buffer).w, A0            ; $FFFFF080
                adda.w  D0, A0
                addi.w  #$C000, D0
                swap.w  D0
                move.l  D0, $0004(A1)
                move.l  (A0)+, (A1)
                move.w  (A0)+, (A1)
                nop
                moveq   #$33, D0
Offset_0x000E02:
                dbra    D0, Offset_0x000E02
                dbra    D1, Offset_0x000DE8
Offset_0x000E0A:
		startZ80
                movem.l (A7)+, D0/D1/A0-A2
                tst.b   (H_Int_Update_Flag).w                        ; $FFFFF64F
                bne.s   Offset_0x000E1E
                rte
Offset_0x000E1E:
                clr.b   (H_Int_Update_Flag).w                        ; $FFFFF64F
                movem.l D0-D7/A0-A6, -(A7)
                jsr     (Offset_0x00087A)
                movem.l (A7)+, D0-D7/A0-A6
                rte     
;-------------------------------------------------------------------------------
Pal_To_ColorRAM:                                               ; Offset_0x000E32
                move    #$2700, SR
                tst.w   (Horizontal_Interrupt_Flag).w                ; $FFFFF644
                beq.s   Offset_0x000EA8
                move.w  #$0000, (Horizontal_Interrupt_Flag).w        ; $FFFFF644
                movem.l A0/A1, -(A7)
                lea     (VDP_Data_Port), A1                          ; $00C00000
                move.w  #$8ADF, $0004(A1)
                lea     (Palette_Underwater_Buffer).w, A0            ; $FFFFF080
                move.l  #$C0000000, $0004(A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                move.l  (A0)+, (A1)
                movem.l (A7)+, A0/A1
                tst.b   (H_Int_Update_Flag).w                        ; $FFFFF64F
                bne.s   Offset_0x000EAA
Offset_0x000EA8:
                rte
Offset_0x000EAA:
                clr.b   (H_Int_Update_Flag).w                        ; $FFFFF64F
                movem.l D0-D7/A0-A6, -(A7)
                bsr     Offset_0x00087A
                movem.l (A7)+, D0-D7/A0-A6
                rte   
;===============================================================================                  
; Interrup��o Horizontal
; <<<-                           
;===============================================================================     

; ===========================================================================
; ---------------------------------------------------------------------------
; Offset_0x000EBC: Null_Sub_1:
SoundDriverInput_Null:
		rts
; ---------------------------------------------------------------------------
; This appears to be the remnants of a 'sound input system' that Sonic 2 used,
; which handled its sound queues on the 68000-side; it seems like the devs
; retained this system when switching over to the new driver before a Z80-led
; sound input system could be implemented. Sonic CD uses a similar system.
		move.b	(Sound_Buffer_Id).w,($A01C0A).l
		move.b	(Sound_Buffer_Id+1).w,($A01C0B).l
		move.b	(Sound_Buffer_Id+2).w,($A01C0C).l
		move.b	(Sound_Buffer_Id+4).w,($A01C10).l
		moveq	#0,d0
		move.l	d0,(Sound_Buffer_Id).w
		rts
; End of function SoundDriverInput_Null

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to initialize joypads
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x000EE6: Control_Ports_Init:
JoypadInit:
		stopZ80
		moveq	#$40,d0
		move.b	d0,(IO_Port_0_Control+1).l		; init port 1 (joypad 1)
		move.b	d0,(IO_Port_1_Control+1).l		; init port 2 (joypad 2)
		move.b	d0,(IO_Expansion_Control+1).l		; init port 3 (expansion/extra)
		startZ80
		rts
; End of function JoypadInit

;===============================================================================                  
; Leitura das portas 0, 1 e expans�o
; ->>>                           
;=============================================================================== 
Control_Ports_Read:                                            ; Offset_0x000F16
                lea     (Control_Ports_Buffer_Data).w, A0            ; $FFFFF604
                lea     (IO_Joypad_Port_0), A1                       ; $00A10003
                bsr.s   Offset_0x000F24
                addq.w  #$02, A1
Offset_0x000F24:
                move.b  #$00, (A1)
                nop
                nop
                move.b  (A1), D0
                lsl.b   #$02, D0
                andi.b  #$C0, D0
                move.b  #$40, (A1)
                nop
                nop
                move.b  (A1), D1
                andi.b  #$3F, D1
                or.b    D1, D0
                not.b   D0
                move.b  (A0), D1
                eor.b   D0, D1
                move.b  D0, (A0)+
                and.b   D0, D1
                move.b  D1, (A0)+
                rts     
;===============================================================================                  
; Leitura das portas 0, 1 e expans�o
; <<<-                           
;===============================================================================   

;===============================================================================                  
; VDPRegSetup
; ->>>                           
;===============================================================================  
VDPRegSetup:                                                   ; Offset_0x000F52
                lea     (VDP_Control_Port), A0                       ; $00C00004
                lea     (VDP_Data_Port), A1                          ; $00C00000
                lea     (VDPRegSetup_Array), A2                ; Offset_0x000FDC
                moveq   #$12, D7
Offset_0x000F66:
                move.w  (A2)+, (A0)
                dbra    D7, Offset_0x000F66
                move.w  (VDPRegSetup_Array+$02), D0            ; Offset_0x000FDE
                move.w  D0, (VDP_Register_1_Command).w               ; $FFFFF60E
                move.w  #$8ADF, (Horizontal_Int_Count_Cmd).w         ; $FFFFF624
                moveq   #$00, D0
                move.l  #$40000010, (VDP_Control_Port)               ; $00C00004
                move.w  D0, (A1)
                move.w  D0, (A1)
                move.l  #$C0000000, (VDP_Control_Port)               ; $00C00004
                move.w  #$003F, D7
Offset_0x000F9A:
                move.w  D0, (A1)
                dbra    D7, Offset_0x000F9A
                clr.l   (Vertical_Scroll_Value).w                    ; $FFFFF616
                clr.l   (Vertical_Scroll_Value_3).w                  ; $FFFFF61A
                move.l  D1, -(A7)
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.w  #$8F01, (A5)
                move.l  #$94FF93FF, (A5)
                move.w  #$9780, (A5)
                move.l  #$40000080, (A5)
                move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
Offset_0x000FCC:
                move.w  (A5), D1
                btst    #$01, D1
                bne.s   Offset_0x000FCC
                move.w  #$8F02, (A5)
                move.l  (A7)+, D1
                rts   
;-------------------------------------------------------------------------------
VDPRegSetup_Array:                                             ; Offset_0x000FDC
                dc.w    $8004  ; H Int
                dc.w    $8134  ; V Int
                dc.w    $8230  ; Scroll A
                dc.w    $8328  ; Window 
                dc.w    $8407  ; Scroll B
                dc.w    $857C  ; Sprite Table
                dc.w    $8600
                dc.w    $8700  ; Background colour index
                dc.w    $8800
                dc.w    $8900
                dc.w    $8A00
                dc.w    $8B00  ; Scroll settings
                dc.w    $8C81  ; Display mode
                dc.w    $8D3C  ; Horizontal scroll table
                dc.w    $8E00
                dc.w    $8F02  ; Auto increment
                dc.w    $9001  ; Scroll planes
                dc.w    $9100
                dc.w    $9200  ; Window Mode
;===============================================================================                  
; VDPRegSetup
; <<<-                           
;===============================================================================  

;===============================================================================                  
; ClearScreen
; ->>>                           
;===============================================================================  
ClearScreen:                                                   ; Offset_0x001002
		stopZ80
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.w  #$8F01, (A5)
                move.l  #$9400933F, (A5)
                move.w  #$9780, (A5)
                move.l  #$40000080, (A5)
                move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
ClearScreen_DMAWait:                                           ; Offset_0x001036
                move.w  (A5), D1
                btst    #$01, D1
                bne.s   ClearScreen_DMAWait                    ; Offset_0x001036
                move.w  #$8F02, (A5)
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq.s   Offset_0x001078
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.w  #$8F01, (A5)
                move.l  #$943F93FF, (A5)
                move.w  #$9780, (A5)
                move.l  #$40000082, (A5)
                move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
ClearScreen_DMAWait_2:                                         ; Offset_0x00106A
                move.w  (A5), D1
                btst    #$01, D1
                bne.s   ClearScreen_DMAWait_2                  ; Offset_0x00106A
                move.w  #$8F02, (A5)
                bra.s   Offset_0x0010D4
Offset_0x001078:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.w  #$8F01, (A5)
                move.l  #$940F93FF, (A5)
                move.w  #$9780, (A5)
                move.l  #$40000083, (A5)
                move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
ClearScreen_DMAWait_3:                                         ; Offset_0x00109A
                move.w  (A5), D1
                btst    #$01, D1
                bne.s   ClearScreen_DMAWait_3                  ; Offset_0x00109A
                move.w  #$8F02, (A5)
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.w  #$8F01, (A5)
                move.l  #$940F93FF, (A5)
                move.w  #$9780, (A5)
                move.l  #$60000083, (A5)
                move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
ClearScreen_DMAWait_4:                                         ; Offset_0x0010C8
                move.w  (A5), D1
                btst    #$01, D1
                bne.s   ClearScreen_DMAWait_4                  ; Offset_0x0010C8
                move.w  #$8F02, (A5)
Offset_0x0010D4:
                clr.l   (Vertical_Scroll_Value).w                    ; $FFFFF616
                clr.l   (Vertical_Scroll_Value_3).w                  ; $FFFFF61A
                lea     (Sprite_Table_Buffer).w, A1                  ; $FFFFF800
                moveq   #$00, D0
                move.w  #$00A0, D1
ClearScreen_ClearBuffer1:                                      ; Offset_0x0010E6
                move.l  D0, (A1)+
                dbra    D1, ClearScreen_ClearBuffer1           ; Offset_0x0010E6
                lea     (Horizontal_Scroll_Buffer).w, A1             ; $FFFFE000
                moveq   #$00, D0
                move.w  #$0100, D1
ClearScreen_ClearBuffer2:                                      ; Offset_0x0010F6
                move.l  D0, (A1)+
                dbra    D1, ClearScreen_ClearBuffer2           ; Offset_0x0010F6
		startZ80
                rts
;===============================================================================                  
; ClearScreen
; <<<-                           
;===============================================================================

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to load the sound driver into Z80 memory
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x001106:
SoundDriverLoad:
		nop
		move.w	#$100,(Z80_Bus_Request).l
		move.w	#$100,(Z80_Reset).l		; release Z80 reset
		; load SMPS sound driver
		lea	(Z80_Driver).l,a0
		lea	(Z80_RAM_Start).l,a1
		move.w	#$1851,d0

Offset_0x001128:
		move.b	(a0)+, (a1)+
		dbf	d0,Offset_0x001128
		; load default variables
		lea	(Sound_Driver_Init_Data).l,a0
		lea	($A01C00).l,a1
		move.w	#$F,d0

Offset_0x00113E:
		move.b	(a0)+,(a1)+
		dbf	d0,Offset_0x00113E
		; PAL optimization hasn't been added yet
		move.w	#0,(Z80_Reset).l		; reset Z80
		nop
		nop
		nop
		nop
		move.w	#$100,(Z80_Reset).l		; release reset
		startZ80
		rts
; End of function SoundDriverLoad

; ---------------------------------------------------------------------------
; Default Z80 variables; only the fourth value is set to anything
; meaningful (which is more than can be said for the final)
; Offset_0x001166:
Sound_Driver_Init_Data:
		dc.b	$00, $00, $00, $12, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00

;===============================================================================                  
; SoundDriverLoad
; <<<-                           
;===============================================================================

Play_Music:                                                    ; Offset_0x001176
                cmpi.b  #$DA, D0
                bcs.s   Offset_0x00118E
                cmpi.b  #$FF, D0
                beq.s   Offset_0x00118E
                cmpi.b  #$E0, D0
                bcs.s   Exit_Play_Music                        ; Offset_0x0011DE
                cmpi.b  #$E4, D0
                bcc.s   Exit_Play_Music                        ; Offset_0x0011DE
Offset_0x00118E:
		stopZ80
                tst.b   ($00A01C0A)
                bne.s   Offset_0x0011B8
                move.b  D0, ($00A01C0A)
		startZ80
                rts
Offset_0x0011B8:
                tst.b   ($00A01C0B)
                bne.s   Offset_0x0011D0
                move.b  D0, ($00A01C0B)
		startZ80
                rts
Offset_0x0011D0:
                move.b  D0, ($00A01C0C)
		startZ80
Exit_Play_Music:                                               ; Offset_0x0011DE
                rts                 
            
;===============================================================================
; Rotina para tratar o Pause
; ->>>
;===============================================================================            
Pause:                                                         ; Offset_0x0011E0
                nop
                tst.b   (Life_count).w                               ; $FFFFFE12
                beq     Unpause                                ; Offset_0x00128A
                tst.w   (Pause_Status).w                             ; $FFFFF63A
                bne.s   Pause_AlreadyPaused                    ; Offset_0x001200
                move.b  (Control_Ports_Buffer_Data+$0001).w, D0      ; $FFFFF605
                or.b    (Control_Ports_Buffer_Data+$0003).w, D0      ; $FFFFF607
                andi.b  #$80, D0
                beq     Pause_DoNothing                        ; Offset_0x001290
Pause_AlreadyPaused:                                           ; Offset_0x001200
                move.w  #$0001, (Pause_Status).w                     ; $FFFFF63A
		stopZ80
                move.b  #$01, ($00A01C10)
		startZ80
Pause_Loop:                                                    ; Offset_0x001228
                move.b  #$10, (VBlank_Index).w                       ; $FFFFF62A
                bsr     Wait_For_VSync                         ; Offset_0x001AEE
                tst.b   (Slow_Motion_Flag).w                         ; $FFFFFFD1
                beq.s   Pause_CheckStart                       ; Offset_0x00125A
                btst    #$06, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
                beq.s   Pause_CheckBC                          ; Offset_0x00124A
                move.b  #gm_TitleScreen, (Game_Mode).w          ; $04, $FFFFF600
                nop
                bra.s   Offset_0x001268
Pause_CheckBC:                                                 ; Offset_0x00124A
                btst    #$04, (Control_Ports_Buffer_Data).w          ; $FFFFF604
                bne.s   Pause_SlowMotion                       ; Offset_0x001292
                btst    #$05, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
                bne.s   Pause_SlowMotion                       ; Offset_0x001292
Pause_CheckStart:                                              ; Offset_0x00125A
                move.b  (Control_Ports_Buffer_Data+$0001).w, D0      ; $FFFFF605
                or.b    (Control_Ports_Buffer_Data+$0003).w, D0      ; $FFFFF607
                andi.b  #$80, D0
                beq.s   Pause_Loop                             ; Offset_0x001228
Offset_0x001268:
		stopZ80
                move.b  #$80, ($00A01C10)
		startZ80
Unpause:                                                       ; Offset_0x00128A
                move.w  #$0000, (Pause_Status).w                     ; $FFFFF63A
Pause_DoNothing:                                               ; Offset_0x001290
                rts
Pause_SlowMotion:                                              ; Offset_0x001292
                move.w  #$0001, (Pause_Status).w                     ; $FFFFF63A
		stopZ80
                move.b  #$80, ($00A01C10)
		startZ80
                rts  
;===============================================================================
; Rotina para tratar o Pause
; <<<-
;===============================================================================   
           
;===============================================================================
; Rotina para carregar os mapeamentos para a VDP
; ->>>
;===============================================================================
ShowVDPGraphics:                                               ; Offset_0x0012BC
                lea     (VDP_Data_Port), A6                          ; $00C00000
                move.l  #$00800000, D4
ShowVDPGraphics_LineLoop:                                      ; Offset_0x0012C8
                move.l  D0, $0004(A6)
                move.w  D1, D3
ShowVDPGraphics_TileLoop:                                      ; Offset_0x0012CE
                move.w  (A1)+, (A6)
                dbra    D3, ShowVDPGraphics_TileLoop           ; Offset_0x0012CE
                add.l   D4, D0
                dbra    D2, ShowVDPGraphics_LineLoop           ; Offset_0x0012C8
                rts    
;===============================================================================
; Rotina para carregar os mapeamentos para a VDP
; <<<-
;===============================================================================

;===============================================================================
; Rotina para carregar os mapeamentos para a VDP no Special Stage
; ->>>
;===============================================================================
ShowVDPGraphics_SS:                                            ; Offset_0x0012DC
                lea     (VDP_Data_Port), A6                          ; $00C00000
                move.l  #$01000000, D4
ShowVDPGraphicsSS_TileLoop:                                    ; Offset_0x0012E8
                move.l  D0, $0004(A6)
                move.w  D1, D3
ShowVDPGraphicsSS_LineLoop:                                    ; Offset_0x0012EE
                move.w  (A1)+, (A6)
                dbra    D3, ShowVDPGraphicsSS_LineLoop         ; Offset_0x0012EE
                add.l   D4, D0
                dbra    D2, ShowVDPGraphicsSS_TileLoop         ; Offset_0x0012E8
                rts 
;===============================================================================
; Rotina para carregar os mapeamentos para a VDP no Special Stage
; <<<-
;===============================================================================

;===============================================================================
; Rotina de transfer�ncia para a VRAM       
; ->>>
;=============================================================================== 
DMA_68KtoVRAM:                                                 ; Offset_0x0012FC
                move.l  (DMA_Buffer_List_End).w, A1                  ; $FFFFE8F8
                cmpa.w  #DMA_Buffer_List_End, A1                         ; $E8F8
                beq.s   Offset_0x00135C
                move.w  #$9300, D0
                move.b  D3, D0
                move.w  D0, (A1)+
                move.w  #$9400, D0
                lsr.w   #$08, D3
                move.b  D3, D0
                move.w  D0, (A1)+
                move.w  #$9500, D0
                lsr.l   #$01, D1
                move.b  D1, D0
                move.w  D0, (A1)+
                move.w  #$9600, D0
                lsr.l   #$08, D1
                move.b  D1, D0
                move.w  D0, (A1)+
                move.w  #$9700, D0
                lsr.l   #$08, D1
                andi.b  #$7F, D1
                move.b  D1, D0
                move.w  D0, (A1)+
                andi.l  #$0000FFFF, D2
                lsl.l   #$02, D2
                lsr.w   #$02, D2
                swap.w  D2
                ori.l   #$40000080, D2
                move.l  D2, (A1)+
                move.l  A1, (DMA_Buffer_List_End).w                  ; $FFFFE8F8
                cmpa.w  #DMA_Buffer_List_End, A1                         ; $E8F8
                beq.s   Offset_0x00135C
                move.w  #$0000, (A1)
Offset_0x00135C:
                rts 
;===============================================================================
; Rotina de transfer�ncia para a VRAM       
; <<<-
;=============================================================================== 
             
;===============================================================================
; Rotina de processamento do DMA
; ->>>
;=============================================================================== 
Process_DMA:                                                   ; Offset_0x00135E
                lea     (VDP_Control_Port), A5                       ; $00C00004
                lea     (DMA_Buffer_List).w, A1                      ; $FFFFE700
Process_DMA_Loop:                                              ; Offset_0x001368
                move.w  (A1)+, D0
                beq.s   Process_DMA_End                        ; Offset_0x001380
                move.w  D0, (A5)
                move.w  (A1)+, (A5)
                move.w  (A1)+, (A5)
                move.w  (A1)+, (A5)
                move.w  (A1)+, (A5)
                move.w  (A1)+, (A5)
                move.w  (A1)+, (A5)
                cmpa.w  #DMA_Buffer_List_End, A1                         ; $E8F8
                bne.s   Process_DMA_Loop                       ; Offset_0x001368
Process_DMA_End:                                               ; Offset_0x001380
                move.w  #$0000, (DMA_Buffer_List).w                  ; $FFFFE700
                move.l  #DMA_Buffer_List, (DMA_Buffer_List_End).w  ; $FFFFE700, $FFFFE8F8
                rts
;===============================================================================
; Rotina de processamento do DMA
; <<<-
;===============================================================================              
          
;===============================================================================
; Rotina de descompress�o no formato Nemesis
; ->>>
;=============================================================================== 
NemesisDec:                                                    ; Offset_0x001390
                movem.l D0-D7/A0/A1/A3-A5, -(A7)
                lea     (NemesisDec_Output), A3                ; Offset_0x001452
                lea     (VDP_Data_Port), A4                          ; $00C00000
                bra.s   NemesisDec_Main                        ; Offset_0x0013AC 
;-------------------------------------------------------------------------------
NemesisDecToRAM:                                               ; Offset_0x0013A2
                movem.l D0-D7/A0/A1/A3-A5, -(A7)
                lea     (NemesisDec_OutputToRAM), A3           ; Offset_0x001468
NemesisDec_Main:                                               ; Offset_0x0013AC                
                lea     (NemesisDec_Data_Buffer).w, A1               ; $FFFFAA00
                move.w  (A0)+, D2
                lsl.w   #$01, D2
                bcc.s   Offset_0x0013BA
              ; Aponta A3 para NemesisDec_Output_XOR se A3 = NemesisDec_Output ou
              ; Aponta A3 para NemesisDec_OutputRAM_XOR se A3 = NemesisDec_OutputRAM  
                adda.w  #(NemesisDec_Output_XOR-NemesisDec_Output), A3   ; $000A
Offset_0x0013BA:
                lsl.w   #$02, D2
                move.w  D2, A5
                moveq   #$08, D3
                moveq   #$00, D2
                moveq   #$00, D4
                bsr     NemesisDec_4                           ; Offset_0x00147E
                move.b  (A0)+, D5
                asl.w   #$08, D5
                move.b  (A0)+, D5
                move.w  #$0010, D6
                bsr.s   NemesisDec_2                           ; Offset_0x0013DA
                movem.l (A7)+, D0-D7/A0/A1/A3-A5
                rts
;-------------------------------------------------------------------------------                
NemesisDec_2:                                                  ; Offset_0x0013DA
                move.w  D6, D7
                subq.w  #$08, D7
                move.w  D5, D1
                lsr.w   D7, D1
                cmpi.b  #$FC, D1
                bcc.s   Offset_0x001426
                andi.w  #$00FF, D1
                add.w   D1, D1
                move.b  $00(A1, D1), D0
                ext.w   D0
                sub.w   D0, D6
                cmpi.w  #$0009, D6
                bcc.s   Offset_0x001402
                addq.w  #$08, D6
                asl.w   #$08, D5
                move.b  (A0)+, D5
Offset_0x001402:
                move.b  $01(A1, D1), D1
                move.w  D1, D0
                andi.w  #$000F, D1
                andi.w  #$00F0, D0
NemesisDec_SubType:                                            ; Offset_0x001410                
                lsr.w   #$04, D0
NemesisDec_Loop_SubType:                                       ; Offset_0x001412                
                lsl.l   #$04, D4
                or.b    D1, D4
                subq.w  #$01, D3
                bne.s   Offset_0x001420
              ; A3 Cont�m uma das rotinas de descompress�o no formato Nemesis.  
              ; ( NemesisDec_Output_XOR ou NemesisDec_OutputRAM_XOR ) 
                jmp     (A3)
;-------------------------------------------------------------------------------
NemesisDec_3:                                                  ; Offset_0x00141C
                moveq   #$00, D4
                moveq   #$08, D3
Offset_0x001420:                
                dbra    D0, NemesisDec_Loop_SubType            ; Offset_0x001412
                bra.s   NemesisDec_2  
;-------------------------------------------------------------------------------
Offset_0x001426:
                subq.w  #$06, D6
                cmpi.w  #$0009, D6
                bcc.s   Offset_0x001434
                addq.w  #$08, D6
                asl.w   #$08, D5
                move.b  (A0)+, D5
Offset_0x001434:
                subq.w  #$07, D6
                move.w  D5, D1
                lsr.w   D6, D1
                move.w  D1, D0
                andi.w  #$000F, D1
                andi.w  #$0070, D0
                cmpi.w  #$0009, D6
                bcc.s   NemesisDec_SubType                     ; Offset_0x001410
                addq.w  #$08, D6
                asl.w   #$08, D5
                move.b  (A0)+, D5
                bra.s   NemesisDec_SubType                     ; Offset_0x001410
;-------------------------------------------------------------------------------
NemesisDec_Output:                                             ; Offset_0x001452
                move.l  D4, (A4)
                subq.w  #$01, A5
                move.w  A5, D4
                bne.s   NemesisDec_3                           ; Offset_0x00141C
                rts           
;-------------------------------------------------------------------------------
NemesisDec_Output_XOR:                                         ; Offset_0x00145C
                eor.l   D4, D2
                move.l  D2, (A4)
                subq.w  #$01, A5
                move.w  A5, D4
                bne.s   NemesisDec_3                           ; Offset_0x00141C
                rts    
;-------------------------------------------------------------------------------
NemesisDec_OutputToRAM:                                        ; Offset_0x001468
                move.l  D4, (A4)+
                subq.w  #$01, A5
                move.w  A5, D4
                bne.s   NemesisDec_3                           ; Offset_0x00141C
                rts           
;-------------------------------------------------------------------------------
NemesisDec_Output_XORToRAM:                                    ; Offset_0x001472
                eor.l   D4, D2
                move.l  D2, (A4)+
                subq.w  #$01, A5
                move.w  A5, D4
                bne.s   NemesisDec_3                           ; Offset_0x00141C
                rts   
;-------------------------------------------------------------------------------
NemesisDec_4:                                                  ; Offset_0x00147E
                move.b  (A0)+, D0
Offset_0x001480:
                cmpi.b  #$FF, D0
                bne.s   Offset_0x001488
                rts
Offset_0x001488:
                move.w  D0, D7
Offset_0x00148A:
                move.b  (A0)+, D0
                cmpi.b  #$80, D0
                bcc.s   Offset_0x001480
                move.b  D0, D1
                andi.w  #$000F, D7
                andi.w  #$0070, D1
                or.w    D1, D7
                andi.w  #$000F, D0
                move.b  D0, D1
                lsl.w   #$08, D1
                or.w    D1, D7
                moveq   #$08, D1
                sub.w   D0, D1
                bne.s   Offset_0x0014B8
                move.b  (A0)+, D0
                add.w   D0, D0
                move.w  D7, $00(A1, D0)
                bra.s   Offset_0x00148A
Offset_0x0014B8:
                move.b  (A0)+, D0
                lsl.w   D1, D0
                add.w   D0, D0
                moveq   #$01, D5
                lsl.w   D1, D5
                subq.w  #$01, D5
Offset_0x0014C4:
                move.w  D7, $00(A1, D0)
                addq.w  #$02, D0
                dbra    D5, Offset_0x0014C4
                bra.s   Offset_0x00148A                                                                                         
;===============================================================================
; Rotina de descompress�o no formato Nemesis
; <<<-
;=============================================================================== 

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to load pattern load cues in RAM
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x0014D0:
LoadPLC:
		movem.l	a1/a2,-(sp)
		lea	(ArtLoadCues).l,a1
		add.w	d0,d0
		move.w	(a1,d0.w),d0
		lea	(a1,d0.w),a1
		lea	(PLC_Data_Buffer).w,a2
; Offset_0x0014E8:
@findFreeSlot:
		tst.l	(a2)					; is the current slot on the queue free?
		beq.s	@getPieceCount				; if yes, branch
		addq.w	#6,a2					; otherwise skip past and check the next slot
		bra.s	@findFreeSlot
; ---------------------------------------------------------------------------
; Offset_0x0014F0:
@getPieceCount:
		move.w	(a1)+,d0
		bmi.s	@done
; Offset_0x0014F4:
@queuePieces:
		move.l	(a1)+,(a2)+				; store compressed data location
		move.w	(a1)+,(a2)+				; store destination in VRAM
		dbf	d0,@queuePieces
; Offset_0x0014FC:
@done:
		movem.l	(sp)+,a1/a2
		rts
; End of function LoadPLC

; ---------------------------------------------------------------------------
; Subroutine to load a pattern load cue directly, rather than from an index
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x001502: LoadPLC_A1:
LoadPLC_Direct:
		lea	(PLC_Data_Buffer).w,a2
; Offset_0x001506:
@findFreeSlot:
		tst.l	(a2)					; is the current slot on the queue free?
		beq.s	@getPieceCount				; if yes, branch
		addq.w	#6,a2					; otherwise skip past and check the next slot
		bra.s	@findFreeSlot
; ---------------------------------------------------------------------------
; Offset_0x00150E:
@getPieceCount:
		move.w	(a1)+,d0
		bmi.s	@done
; Offset_0x001512:
@queuePieces:
		move.l	(a1)+,(a2)+				; store compressed data location
		move.w	(a1)+,(a2)+				; store destination in VRAM
		dbf	d0,@queuePieces
; Offset_0x00151A:
@done:
		rts
; End of function LoadPLC_Direct

; ---------------------------------------------------------------------------
; Subroutine to load pattern load cues after clearing it first
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x00151C:
LoadPLC2:
		movem.l	a1/a2,-(sp)
		lea	(ArtLoadCues).l,a1
		add.w	d0,d0
		move.w	(a1,d0.w),d0
		lea	(a1,d0.w),a1
		bsr.s	ClearPLC
		lea	(PLC_Data_Buffer).w,a2
		move.w	(a1)+,d0
		bmi.s	@done
; Offset_0x00153A:
@queuePieces:
		move.l	(a1)+,(a2)+				; store compressed data location
		move.w	(a1)+,(a2)+				; store destination in VRAM
		dbf	d0,@queuePieces
; Offset_0x001542:
@done:
		movem.l	(sp)+,a1/a2
		rts
; End of function LoadPLC2

; ---------------------------------------------------------------------------
; Subroutine to clear the pattern load cue
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x001548:
ClearPLC:
		lea	(PLC_Data_Buffer).w,a2
		moveq	#(PLC_Data_Buffer_End>>2-PLC_Data_Buffer>>2)-1,d0

Offset_0x00154E:
		clr.l	(a2)+
		dbf	d0,Offset_0x00154E
		rts                         
; End of function ClearPLC

; ---------------------------------------------------------------------------
; Subroutine to use graphics listed in a pattern load cue
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x001556: RunPLC:
RunPLC_RAM:
		tst.l	(PLC_Data_Buffer).w
		beq.s	Offset_0x0015AC
		tst.w	(PLC_Data_Count).w
		bne.s	Offset_0x0015AC
		move.l	(PLC_Data_Buffer).w,a0
		lea	(NemesisDec_Output).l,a3
		nop
		lea	(NemesisDec_Data_Buffer).w,a1
		move.w	(A0)+, D2
		bpl.s	Offset_0x00157A
		adda.w	#NemesisDec_Output_XOR-NemesisDec_Output,a3

Offset_0x00157A:
		andi.w	#$7FFF,d2
		move.w	d2,(PLC_Data_Count).w
		bsr.w	NemesisDec_4
		move.b	(a0)+,d5
		asl.w	#8,d5
		move.b	(a0)+,d5
		moveq	#$10,d6
		moveq	#0,d0
		move.l	a0,(PLC_Data_Buffer).w
		move.l	a3,(Nemesis_Decomp_Vars).w
		move.l	d0,(Nemesis_Repeat_Count).w
		move.l	d0,(Nemesis_Palette_Index).w
		move.l	d0,(Nemesis_Previous_Row).w
		move.l	d5,(Nemesis_Data_Word).w
		move.l	d6,(Nemesis_Shift_Value).w

Offset_0x0015AC:
                rts
; End of function RunPLC_RAM

;===============================================================================
; Rotina para descompactar os itens na lista de carga dos gr�ficos
; <<<-
;=============================================================================== 

Process_Nemesis_Queue:                                         ; Offset_0x0015AE
                tst.w   (PLC_Data_Count).w                           ; $FFFFF6F8
                beq     Offset_0x001646
                move.w  #$0006, (Nemesis_Frame_Pattern_Left).w       ; $FFFFF6FA
                moveq   #$00, D0
                move.w  (Nemesis_Decomp_Destination).w, D0           ; $FFFFF684
                addi.w  #$00C0, (Nemesis_Decomp_Destination).w       ; $FFFFF684
                bra.s   Offset_0x0015E2
;-------------------------------------------------------------------------------
Process_Nemesis_Queue_2:                                       ; Offset_0x0015CA
                tst.w   (PLC_Data_Count).w                           ; $FFFFF6F8
                beq.s   Offset_0x001646
                move.w  #$0003, (Nemesis_Frame_Pattern_Left).w       ; $FFFFF6FA
                moveq   #$00, D0
                move.w  (Nemesis_Decomp_Destination).w, D0           ; $FFFFF684
                addi.w  #$0060, (Nemesis_Decomp_Destination).w       ; $FFFFF684
Offset_0x0015E2:
                lea     (VDP_Control_Port), A4                       ; $00C00004
                lsl.l   #$02, D0
                lsr.w   #$02, D0
                ori.w   #$4000, D0
                swap.w  D0
                move.l  D0, (A4)
                subq.w  #$04, A4
                move.l  (PLC_Data_Buffer).w, A0                      ; $FFFFF680
                move.l  (Nemesis_Decomp_Vars).w, A3                  ; $FFFFF6E0
                move.l  (Nemesis_Repeat_Count).w, D0                 ; $FFFFF6E4
                move.l  (Nemesis_Palette_Index).w, D1                ; $FFFFF6E8
                move.l  (Nemesis_Previous_Row).w, D2                 ; $FFFFF6EC
                move.l  (Nemesis_Data_Word).w, D5                    ; $FFFFF6F0
                move.l  (Nemesis_Shift_Value).w, D6                  ; $FFFFF6F4
                lea     (NemesisDec_Data_Buffer).w, A1               ; $FFFFAA00
Offset_0x001616:
                move.w  #$0008, A5
                bsr     NemesisDec_3                           ; Offset_0x00141C
                subq.w  #$01, (PLC_Data_Count).w                     ; $FFFFF6F8
                beq.s   Offset_0x001648
                subq.w  #$01, (Nemesis_Frame_Pattern_Left).w         ; $FFFFF6FA
                bne.s   Offset_0x001616
                move.l  A0, (PLC_Data_Buffer).w                      ; $FFFFF680
                move.l  A3, (Nemesis_Decomp_Vars).w                  ; $FFFFF6E0
                move.l  D0, (Nemesis_Repeat_Count).w                 ; $FFFFF6E4
                move.l  D1, (Nemesis_Palette_Index).w                ; $FFFFF6E8
                move.l  D2, (Nemesis_Previous_Row).w                 ; $FFFFF6EC
                move.l  D5, (Nemesis_Data_Word).w                    ; $FFFFF6F0
                move.l  D6, (Nemesis_Shift_Value).w                  ; $FFFFF6F4
Offset_0x001646:
                rts
Offset_0x001648:
                lea     (PLC_Data_Buffer).w, A0                      ; $FFFFF680
                moveq   #$15, D0
Offset_0x00164E:
                move.l  $0006(A0), (A0)+
                dbra    D0, Offset_0x00164E
                rts   

; ---------------------------------------------------------------------------
; Subroutine to execute a pattern load cue directly from the ROM
; rather than loading them into the queue first; unused here and in S3
; final, only ever used for Blue Spheres in S&K
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x001658:
RunPLC_ROM:
		lea	(ArtLoadCues).l,a1
		add.w	d0,d0
		move.w	(a1,d0.w),d0
		lea	(a1,d0.w),a1
		move.w	(a1)+,d1
; Offset_0x00166A:
RunPLC_ROM_Loop:
		move.l	(a1)+,a0
		moveq	#0,d0
		move.w	(a1)+,d0
		lsl.l	#2,d0
		lsr.w	#2,d0
		ori.w	#$4000,d0
		swap.w	d0
		move.l	d0,(VDP_Control_Port).l
		bsr.w	NemesisDec
		dbf	d1,RunPLC_ROM_Loop
		rts 
; End of function RunPLC_ROM

;===============================================================================
; Rotina de descompress�o no formato Enigma
; ->>>
;===============================================================================  
EnigmaDec:                                                     ; Offset_0x00168A
                movem.l D0-D7/A1-A5, -(A7)
                move.w  D0, A3
                move.b  (A0)+, D0
                ext.w   D0
                move.w  D0, A5
                move.b  (A0)+, D4
                lsl.b   #$03, D4
                move.w  (A0)+, A2
                adda.w  A3, A2
                move.w  (A0)+, A4
                adda.w  A3, A4
                move.b  (A0)+, D5
                asl.w   #$08, D5
                move.b  (A0)+, D5
                moveq   #$10, D6
EnigmaDec_Loop:                                                ; Offset_0x0016AA     
                moveq   #$07, D0
                move.w  D6, D7
                sub.w   D0, D7
                move.w  D5, D1
                lsr.w   D7, D1
                andi.w  #$007F, D1
                move.w  D1, D2
                cmpi.w  #$0040, D1
                bcc.s   Offset_0x0016C4
                moveq   #$06, D0
                lsr.w   #$01, D2
Offset_0x0016C4:
                bsr     Enigma_Dec_Fetch_Byte                  ; Offset_0x0017F8
                andi.w  #$000F, D2
                lsr.w   #$04, D1
                add.w   D1, D1
                jmp     Enigma_Dec_Routines(PC, D1)            ; Offset_0x001720
;-------------------------------------------------------------------------------
Enigma_Dec_00:                                                 ; Offset_0x0016D4
                move.w  A2, (A1)+
                addq.w  #$01, A2
                dbra    D2, Enigma_Dec_00                      ; Offset_0x0016D4
                bra.s   EnigmaDec_Loop                         ; Offset_0x0016AA
;-------------------------------------------------------------------------------
Enigma_Dec_01:                                                 ; Offset_0x0016DE
                move.w  A4, (A1)+
                dbra    D2, Enigma_Dec_01                      ; Offset_0x0016DE
                bra.s   EnigmaDec_Loop                         ; Offset_0x0016AA
;-------------------------------------------------------------------------------
Enigma_Dec_02:                                                 ; Offset_0x0016E6
                bsr     Enigma_Dec_Fetch                       ; Offset_0x001748
Offset_0x0016EA:
                move.w  D1, (A1)+
                dbra    D2, Offset_0x0016EA
                bra.s   EnigmaDec_Loop                         ; Offset_0x0016AA
;-------------------------------------------------------------------------------
Enigma_Dec_03:                                                 ; Offset_0x0016F2
                bsr     Enigma_Dec_Fetch                       ; Offset_0x001748
Offset_0x0016F6:
                move.w  D1, (A1)+
                addq.w  #$01, D1
                dbra    D2, Offset_0x0016F6
                bra.s   EnigmaDec_Loop                         ; Offset_0x0016AA
;-------------------------------------------------------------------------------
Enigma_Dec_04:                                                 ; Offset_0x001700
                bsr     Enigma_Dec_Fetch                       ; Offset_0x001748
Offset_0x001704:
                move.w  D1, (A1)+
                subq.w  #$01, D1
                dbra    D2, Offset_0x001704
                bra.s   EnigmaDec_Loop                         ; Offset_0x0016AA
;-------------------------------------------------------------------------------
Enigma_Dec_05:                                                 ; Offset_0x00170E
                cmpi.w  #$000F, D2
                beq.s   Enigma_Dec_Finalize                    ; Offset_0x001730
Offset_0x001714:
                bsr     Enigma_Dec_Fetch                       ; Offset_0x001748
                move.w  D1, (A1)+
                dbra    D2, Offset_0x001714
                bra.s   EnigmaDec_Loop                         ; Offset_0x0016AA
;-------------------------------------------------------------------------------
Enigma_Dec_Routines                                            ; Offset_0x001720
                bra.s   Enigma_Dec_00                          ; Offset_0x0016D4
                bra.s   Enigma_Dec_00                          ; Offset_0x0016D4
                bra.s   Enigma_Dec_01                          ; Offset_0x0016DE
                bra.s   Enigma_Dec_01                          ; Offset_0x0016DE
                bra.s   Enigma_Dec_02                          ; Offset_0x0016E6
                bra.s   Enigma_Dec_03                          ; Offset_0x0016F2
                bra.s   Enigma_Dec_04                          ; Offset_0x001700
                bra.s   Enigma_Dec_05                          ; Offset_0x00170E   
;-------------------------------------------------------------------------------
Enigma_Dec_Finalize:                                           ; Offset_0x001730
                subq.w  #$01, A0
                cmpi.w  #$0010, D6
                bne.s   Offset_0x00173A
                subq.w  #$01, A0
Offset_0x00173A:
                move.w  A0, D0
                lsr.w   #$01, D0
                bcc.s   Offset_0x001742
                addq.w  #$01, A0
Offset_0x001742:
                movem.l (A7)+, D0-D7/A1-A5
                rts
;-------------------------------------------------------------------------------                
Enigma_Dec_Fetch:                                              ; Offset_0x001748
                move.w  A3, D3
                move.b  D4, D1
                add.b   D1, D1
                bcc.s   Offset_0x00175A
                subq.w  #$01, D6
                btst    D6, D5
                beq.s   Offset_0x00175A
                ori.w   #$8000, D3
Offset_0x00175A:
                add.b   D1, D1
                bcc.s   Offset_0x001768
                subq.w  #$01, D6
                btst    D6, D5
                beq.s   Offset_0x001768
                addi.w  #$4000, D3
Offset_0x001768:
                add.b   D1, D1
                bcc.s   Offset_0x001776
                subq.w  #$01, D6
                btst    D6, D5
                beq.s   Offset_0x001776
                addi.w  #$2000, D3
Offset_0x001776:
                add.b   D1, D1
                bcc.s   Offset_0x001784
                subq.w  #$01, D6
                btst    D6, D5
                beq.s   Offset_0x001784
                ori.w   #$1000, D3
Offset_0x001784:
                add.b   D1, D1
                bcc.s   Offset_0x001792
                subq.w  #$01, D6
                btst    D6, D5
                beq.s   Offset_0x001792
                ori.w   #$0800, D3
Offset_0x001792:
                move.w  D5, D1
                move.w  D6, D7
                sub.w   A5, D7
                bcc.s   Offset_0x0017C2
                move.w  D7, D6
                addi.w  #$0010, D6
                neg.w   D7
                lsl.w   D7, D1
                move.b  (A0), D5
                rol.b   D7, D5
                add.w   D7, D7
                and.w   Enigma_Dec_Mask-$02(PC, D7), D5        ; Offset_0x0017D6
                add.w   D5, D1
Offset_0x0017B0:
                move.w  A5, D0
                add.w   D0, D0
                and.w   Enigma_Dec_Mask-$02(PC, D0), D1        ; Offset_0x0017D6
                add.w   D3, D1
                move.b  (A0)+, D5
                lsl.w   #$08, D5
                move.b  (A0)+, D5
                rts
Offset_0x0017C2:
                beq.s   Offset_0x0017D4
                lsr.w   D7, D1
                move.w  A5, D0
                add.w   D0, D0
                and.w   Enigma_Dec_Mask-$02(PC, D0), D1        ; Offset_0x0017D6
                add.w   D3, D1
                move.w  A5, D0
                bra.s   Enigma_Dec_Fetch_Byte                  ; Offset_0x0017F8
Offset_0x0017D4:
                moveq   #$10, D6
                bra.s   Offset_0x0017B0     
;-------------------------------------------------------------------------------
Enigma_Dec_Mask:                                               ; Offset_0x0017D8
                dc.w    $0001, $0003, $0007, $000F, $001F, $003F, $007F, $00FF
                dc.w    $01FF, $03FF, $07FF, $0FFF, $1FFF, $3FFF, $7FFF, $FFFF  
;-------------------------------------------------------------------------------
Enigma_Dec_Fetch_Byte:                                         ; Offset_0x0017F8
                sub.w   D0, D6
                cmpi.w  #$0009, D6
                bcc.s   Offset_0x001806
                addq.w  #$08, D6
                asl.w   #$08, D5
                move.b  (A0)+, D5
Offset_0x001806:
                rts                                                                                                                       
;===============================================================================
; Rotina de descompress�o no formato Enigma
; <<<-
;===============================================================================  
               
;===============================================================================
; Rotina de descompress�o no formato Kosinski
; ->>>
;=============================================================================== 
KosinskiDec:                                                   ; Offset_0x001808
                subq.l  #$02, A7
                move.b  (A0)+, $0001(A7)
                move.b  (A0)+, (A7)
                move.w  (A7), D5
                moveq   #$0F, D4
Offset_0x001814:
                lsr.w   #$01, D5
                move    SR, D6
                dbra    D4, Offset_0x001826
                move.b  (A0)+, $0001(A7)
                move.b  (A0)+, (A7)
                move.w  (A7), D5
                moveq   #$0F, D4
Offset_0x001826:
                move    D6, CCR
                bcc.s   Offset_0x00182E
                move.b  (A0)+, (A1)+
                bra.s   Offset_0x001814
Offset_0x00182E:
                moveq   #$00, D3
                lsr.w   #$01, D5
                move    SR, D6
                dbra    D4, Offset_0x001842
                move.b  (A0)+, $0001(A7)
                move.b  (A0)+, (A7)
                move.w  (A7), D5
                moveq   #$0F, D4
Offset_0x001842:
                move    D6, CCR
                bcs.s   Offset_0x001872
                lsr.w   #$01, D5
                dbra    D4, Offset_0x001856
                move.b  (A0)+, $0001(A7)
                move.b  (A0)+, (A7)
                move.w  (A7), D5
                moveq   #$0F, D4
Offset_0x001856:
                roxl.w  #$01, D3
                lsr.w   #$01, D5
                dbra    D4, Offset_0x001868
                move.b  (A0)+, $0001(A7)
                move.b  (A0)+, (A7)
                move.w  (A7), D5
                moveq   #$0F, D4
Offset_0x001868:
                roxl.w  #$01, D3
                addq.w  #$01, D3
                moveq   #-$01, D2
                move.b  (A0)+, D2
                bra.s   Offset_0x001888
Offset_0x001872:
                move.b  (A0)+, D0
                move.b  (A0)+, D1
                moveq   #-$01, D2
                move.b  D1, D2
                lsl.w   #$05, D2
                move.b  D0, D2
                andi.w  #$0007, D1
                beq.s   Offset_0x001894
                move.b  D1, D3
                addq.w  #$01, D3
Offset_0x001888:
                move.b  $00(A1, D2), D0
                move.b  D0, (A1)+
                dbra    D3, Offset_0x001888
                bra.s   Offset_0x001814
Offset_0x001894:
                move.b  (A0)+, D1
                beq.s   Offset_0x0018A4
                cmpi.b  #$01, D1
                beq     Offset_0x001814
                move.b  D1, D3
                bra.s   Offset_0x001888
Offset_0x0018A4:
                addq.l  #$02, A7
                rts 
;===============================================================================
; Rotina de descompress�o no formato Kosinski
; <<<-
;=============================================================================== 

; ===========================================================================
; ---------------------------------------------------------------------------
; Adds a Kosinski Moduled archive to the module queue
; Inputs:
; a1 = address of the archive
; d2 = destination in VRAM
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x0018A8: Kosinski_Moduled_Dec:
Queue_Kos_Module:
                lea	(Kosinski_Mod_Queue).w,a2
                tst.l	(a2)			; is the first slot free?
                beq.s	Process_Kos_Module_Queue_Init		; if yes, branch
                addq.w	#6,a2			; otherwise, check next slot
; Offset_0x0018B2:
@findFreeSlot:
                tst.l	(a2)
                beq.s	@freeSlotFound
                addq.w	#6,a2
                bra.s	@findFreeSlot
; ---------------------------------------------------------------------------
; Offset_0x0018BA:
@freeSlotFound:
		move.l  a1,(a2)+		; store source address
		move.w  d2,(a2)+		; store destination VRAM address
		rts
; End of function Queue_Kos_Module

; ---------------------------------------------------------------------------
; Initializes processing of the first module on the queue
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x0018C0:
Process_Kos_Module_Queue_Init:
		move.w	(a1)+,d3		; get uncompressed size
		cmpi.w	#$A000,d3
		bne.s	@gotSize
		move.w	#$8000,d3		; $A000 means $8000 for some reason
; Offset_0x0018CC:
@gotSize:
		lsr.w	#1,d3
		move.w	d3,d0
		rol.w	#5,d0
		andi.w	#$1F,d0			; get number of complete modules
		move.b	d0,(Kosinski_Modules_Left).w
		andi.l	#$7FF,d3		; get size of last module in words
		bne.s	@gotLeftover		; branch if it's non-zero
		subq.b	#1,(Kosinski_Modules_Left).w	; otherwise decrement the number of modules
		move.l	#$800,d3	; and take the size of the last module to be $800 words
; Offset_0x0018EC:
@gotLeftover:
		move.w	d3,(Kosinski_Module_Size).w
		move.w	d2,(Kosinski_Mod_Destination).w
		move.l	a1,(Kosinski_Mod_Queue).w
		addq.b	#1,(Kosinski_Modules_Left).w	; store total number of modules
		rts
; End of function Process_Kos_Module_Queue_Init

; ---------------------------------------------------------------------------
; Processes the first module on the queue
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x0018FE: Process_Kosinski_Queue:
Process_Kos_Module_Queue:
		tst.b	(Kosinski_Modules_Left).w
		bne.s	@modulesLeft
; Offset_0x001904:
@done:
		rts
; ---------------------------------------------------------------------------
; Offset_0x001906:
@modulesLeft:
		bmi.s	@decompressionStarted
		cmpi.w	#4,(Kosinski_Mod_Queue_Count).w
		bcc.s	@done					; branch if the Kosinski decompression queue is full
		move.l	(Kosinski_Mod_Queue).w,a1
		lea	(Kosinski_Decomp_Buffer).w,a2
		bsr.w	Queue_Kos				; add current module to decompression queue
		ori.b	#$80, (Kosinski_Modules_Left).w		; and set bit to signify decompression in progress
		rts
; ---------------------------------------------------------------------------
; Offset_0x001924:
@decompressionStarted:
		tst.w	(Kosinski_Mod_Queue_Count).w
		bne.s	@done					; branch if the decompression isn't complete

		; otherwise, DMA the decompressed data to VRAM
		andi.b	#$7F,(Kosinski_Modules_Left).w
		move.l	#$800,d3
		subq.b	#1,(Kosinski_Modules_Left).w
		bne.s	@skip					; branch if it isn't the last module
		move.w	(Kosinski_Module_Size).w,d3
; Offset_0x001940:
@skip:
		move.w	(Kosinski_Mod_Destination).w,d2
		move.w	d2,d0
		add.w	d3,d0
		add.w	d3,d0
		move.w	d0,(Kosinski_Mod_Destination).w		; set new destination
		move.l	(Kosinski_Mod_Queue).w,d0
		move.l	(Kosinski_Decomp_Queue).w,d1
		sub.l	d1,d0
		andi.l	#$F,d0
		add.l	d0,d1					; round to the nearest $10 boundary
		move.l	d1,(Kosinski_Mod_Queue).w		; and set new source
		move.l	#Kosinski_Decomp_Buffer,d1
		andi.l	#$FFFFFF,d1
		jsr	(DMA_68KtoVRAM).l
		tst.b	(Kosinski_Modules_Left).w
		bne.s	@exit					; return if this wasn't the last module
		lea	(Kosinski_Mod_Queue).w,a0
		lea	(Kosinski_Mod_Queue+6).w,a1
		move.l	(a1)+,(a0)+				; otherwise, shift all entries up
		move.w	(a1)+,(a0)+
		move.l	(a1)+,(a0)+
		move.w	(a1)+,(a0)+
		move.l	(a1)+,(a0)+
		move.w	(a1)+,(a0)+
		move.l	#0,(a0)+				; and mark the last slot as free
		move.w	#0,(a0)+
		move.l	(Kosinski_Mod_Queue).w,d0
		beq.s	@exit					; return if the queue is now empty
		move.l	d0,a1
		move.w	(Kosinski_Mod_Destination).w,d2
		jmp	(Process_Kos_Module_Queue_Init).l
; Offset_0x0019AC:
@exit:
                rts
; End of function Process_Kos_Module_Queue

; ---------------------------------------------------------------------------
; Adds Kosinski-compressed data to the decompression queue
; Inputs:
; a1 = compressed data address
; a2 = decompression destination in RAM
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x0019AE: Update_Kosinski_Queue_Count:
Queue_Kos:
		move.w	(Kosinski_Mod_Queue_Count).w,d0
		lsl.w	#3,d0
		lea	(Kosinski_Decomp_Queue).w,a3
		move.l	a1,(a3,d0.w)				; store source
		move.l	a2,4(a3,d0.w)				; store destination
		addq.w	#1,(Kosinski_Mod_Queue_Count).w
		rts
; End of function Queue_Kos

; ---------------------------------------------------------------------------
; Checks if V-int occured in the middle of Kosinski queue processing
; and stores the location from which processing is to resume if it did
; ---------------------------------------------------------------------------

; Offset_0x0019C6: Set_Kosinski_Bookmark:
Set_Kos_Bookmark:
                tst.w	(Kosinski_Mod_Queue_Count).w
                bpl.s	@return					; branch if decompression wasn't in progress
                move.l	$42(sp),d0				; check address V-int is supposed to return to
                cmpi.l	#Process_Kos_Queue,d0
                bcs.s	@return
                cmpi.l	#Process_Kos_Queue_Done,d0
                bcc.s	@return
                move.l	$42(sp),(Kosinski_Bookmark).w
                move.l	#Backup_Kos_Registers,$42(sp)	; force V-int to return here instead if needed
; Offset_0x0019EE:
@return:
                rts
; End of function Set_Kos_Bookmark

; ---------------------------------------------------------------------------
; Processes the first entry in the Kosinski decompression queue
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x0019F0: Process_Kosinski_Queue_Main:
Process_Kos_Queue:
		tst.w	(Kosinski_Mod_Queue_Count).w
		beq.w	Process_Kos_Queue_Done
		bmi.w	Restore_Kos_Bookmark			; branch if decompression was interrupted by V-int
		ori.w	#$8000,(Kosinski_Mod_Queue_Count).w	; set sign bit to signify decompression in progress
		move.l	(Kosinski_Decomp_Queue).w,a0
		move.l	(Kosinski_Decomp_Destination).w,a1

		; what follows is identical to the normal Kosinski decompressor except for using Kosinski_Description_Field instead of the stack
		lea	(Kosinski_Description_Field).w,a2
		move.b	(a0)+,1(a2)
		move.b	(a0)+,(a2)
		move.w	(a2),d5
		moveq	#$F,d4
; Offset_0x001A18:
Process_Kos_Queue_Loop:
		lsr.w	#1,d5
		move	sr,d6
		dbf	d4,Process_Kos_Queue_ChkBit
		move.b	(a0)+,1(a2)
		move.b	(a0)+,(a2)
		move.w	(a2),d5
		moveq	#$F,d4
; Offset_0x001A2A:
Process_Kos_Queue_ChkBit:
		move	d6,ccr
		bcc.s	Process_Kos_Queue_RLE
		move.b	(a0)+,(a1)+
		bra.s	Process_Kos_Queue_Loop
; ---------------------------------------------------------------------------
; Offset_0x001A32:
Process_Kos_Queue_RLE:
		moveq	#0,d3
		lsr.w	#1,d5
		move	sr,d6
		dbf	d4,Process_Kos_Queue_ChkBit2
		move.b	(a0)+,1(a2)
		move.b	(a0)+,(a2)
		move.w	(a2),d5
		moveq	#$F,d4
; Offset_0x001A46:
Process_Kos_Queue_ChkBit2:
		move	d6,ccr
		bcs.s	Process_Kos_Queue_SeparateRLE
		lsr.w	#1,d5
		dbf	d4,Offset_0x001A5A
		move.b	(a0)+,1(a2)
		move.b	(a0)+,(a2)
		move.w	(a2),d5
		moveq	#$F,d4

Offset_0x001A5A:
		roxl.w	#1,d3
		lsr.w	#1,d5
		dbf	d4,Offset_0x001A6C
		move.b	(a0)+,1(a2)
		move.b	(a0)+,(a2)
		move.w	(a2),d5
		moveq	#$F,d4

Offset_0x001A6C:
		roxl.w	#1,d3
		addq.w	#1,d3
		moveq	#-1,d2
		move.b	(a0)+,d2
		bra.s	Process_Kos_Queue_RLELoop
; ---------------------------------------------------------------------------
; Offset_0x001A76:
Process_Kos_Queue_SeparateRLE:
		move.b	(a0)+,d0
		move.b	(a0)+,d1
		moveq	#-1,d2
		move.b	d1,d2
		lsl.w	#5,d2
		move.b	d0,d2
		andi.w	#7,d1
		beq.s	Process_Kos_Queue_SeparateRLE2
		move.b	d1,d3
		addq.w	#1,d3
; Offset_0x001A8C:
Process_Kos_Queue_RLELoop:
		move.b	(a1,d2.w),d0
		move.b	d0,(a1)+
		dbf	d3,Process_Kos_Queue_RLELoop
		bra.s	Process_Kos_Queue_Loop
; ---------------------------------------------------------------------------
; Offset_0x001A98:
Process_Kos_Queue_SeparateRLE2:
		move.b	(a0)+,d1
		beq.s	Process_Kos_Queue_EndReached
		cmpi.b	#1,d1
		beq.w	Process_Kos_Queue_Loop
		move.b	d1,d3
		bra.s	Process_Kos_Queue_RLELoop
; ---------------------------------------------------------------------------
; Offset_0x001AA8:
Process_Kos_Queue_EndReached:
		move.l	a0,(Kosinski_Decomp_Queue).w
		move.l	a1,(Kosinski_Decomp_Destination).w
		andi.w	#$7FFF,(Kosinski_Mod_Queue_Count).w	; clear decompression in progress bit
		subq.w	#1,(Kosinski_Mod_Queue_Count).w
		beq.s	Process_Kos_Queue_Done			; branch if there aren't any entries remaining in the queue
		lea	(Kosinski_Decomp_Queue).w,a0
		lea	(Kosinski_Decomp_Queue+8).w,a1		; otherwise, shift all entries up
		move.l	(a1)+,(a0)+
		move.l	(a1)+,(a0)+
		move.l	(a1)+,(a0)+
		move.l	(a1)+,(a0)+
		move.l	(a1)+,(a0)+
		move.l	(a1)+,(a0)+
; Offset_0x001AD0: Exit_Process_Kosinski_Queue_Main:
Process_Kos_Queue_Done:
		rts
; ---------------------------------------------------------------------------
; Offset_0x001AD2:
Restore_Kos_Bookmark:
		movem.l	(Kosinski_Saved_Registers).w,d0-d6/a0-a2
		move.l	(Kosinski_Bookmark).w,-(sp)
		move.w	(Kosinski_Saved_SR).w,-(sp)
		rte  
;-------------------------------------------------------------------------------
; Offset_0x001AE2: Kosinski_Save_Registers:
Backup_Kos_Registers:
		move    sr,(Kosinski_Saved_SR).w
		movem.l d0-d6/a0-a2,(Kosinski_Saved_Registers).w
		rts
; End of function Process_Kos_Queue

;===============================================================================
; Aguarda pela conclus�o do procedimento de interrup��o vertical
; ->>>
;=============================================================================== 
Wait_For_VSync:                                                ; Offset_0x001AEE
                move    #$2300, SR
Wait_For_VSync_Inf_Loop:                                       ; Offset_0x001AF2
                tst.b   (VBlank_Index).w                             ; $FFFFF62A
                bne.s   Wait_For_VSync_Inf_Loop                ; Offset_0x001AF2
                rts
;===============================================================================
; Aguarda pela conclus�o do procedimento de interrup��o vertical
; <<<-
;=============================================================================== 

;===============================================================================
; Gera��o de n�meros pseudo aleat�rios
; ->>>
;===============================================================================
PseudoRandomNumber:                                            ; Offset_0x001AFA
                move.l  (Random_Seed).w, D1                          ; $FFFFF636
                bne.s   Offset_0x001B06
                move.l  #$2A6D365A, D1
Offset_0x001B06:
                move.l  D1, D0
                asl.l   #$02, D1
                add.l   D0, D1
                asl.l   #$03, D1
                add.l   D0, D1
                move.w  D1, D0
                swap.w  D1
                add.w   D1, D0
                move.w  D0, D1
                swap.w  D1
                move.l  D1, (Random_Seed).w                          ; $FFFFF636
                rts 
;===============================================================================
; Gera��o de n�meros pseudo aleat�rios
; <<<-
;===============================================================================

;===============================================================================
; Rotina para calcular o Seno usando tabela pr�-calculada
; ->>>
;===============================================================================   
CalcSine:                                                      ; Offset_0x001B20
                andi.w  #$00FF, D0
                add.w   D0, D0
                addi.w  #$0080, D0
                move.w  Sine_Table(PC, D0), D1                 ; Offset_0x001B38
                subi.w  #$0080, D0
                move.w  Sine_Table(PC, D0), D0                 ; Offset_0x001B38
                rts 
;-------------------------------------------------------------------------------
Sine_Table:                                                    ; Offset_0x001B38
                dc.w    $0000, $0006, $000C, $0012, $0019, $001F, $0025, $002B
                dc.w    $0031, $0038, $003E, $0044, $004A, $0050, $0056, $005C
                dc.w    $0061, $0067, $006D, $0073, $0078, $007E, $0083, $0088
                dc.w    $008E, $0093, $0098, $009D, $00A2, $00A7, $00AB, $00B0
                dc.w    $00B5, $00B9, $00BD, $00C1, $00C5, $00C9, $00CD, $00D1
                dc.w    $00D4, $00D8, $00DB, $00DE, $00E1, $00E4, $00E7, $00EA
                dc.w    $00EC, $00EE, $00F1, $00F3, $00F4, $00F6, $00F8, $00F9
                dc.w    $00FB, $00FC, $00FD, $00FE, $00FE, $00FF, $00FF, $00FF
                dc.w    $0100, $00FF, $00FF, $00FF, $00FE, $00FE, $00FD, $00FC
                dc.w    $00FB, $00F9, $00F8, $00F6, $00F4, $00F3, $00F1, $00EE
                dc.w    $00EC, $00EA, $00E7, $00E4, $00E1, $00DE, $00DB, $00D8
                dc.w    $00D4, $00D1, $00CD, $00C9, $00C5, $00C1, $00BD, $00B9
                dc.w    $00B5, $00B0, $00AB, $00A7, $00A2, $009D, $0098, $0093
                dc.w    $008E, $0088, $0083, $007E, $0078, $0073, $006D, $0067
                dc.w    $0061, $005C, $0056, $0050, $004A, $0044, $003E, $0038
                dc.w    $0031, $002B, $0025, $001F, $0019, $0012, $000C, $0006
                dc.w    $0000, $FFFA, $FFF4, $FFEE, $FFE7, $FFE1, $FFDB, $FFD5
                dc.w    $FFCF, $FFC8, $FFC2, $FFBC, $FFB6, $FFB0, $FFAA, $FFA4
                dc.w    $FF9F, $FF99, $FF93, $FF8B, $FF88, $FF82, $FF7D, $FF78
                dc.w    $FF72, $FF6D, $FF68, $FF63, $FF5E, $FF59, $FF55, $FF50
                dc.w    $FF4B, $FF47, $FF43, $FF3F, $FF3B, $FF37, $FF33, $FF2F
                dc.w    $FF2C, $FF28, $FF25, $FF22, $FF1F, $FF1C, $FF19, $FF16
                dc.w    $FF14, $FF12, $FF0F, $FF0D, $FF0C, $FF0A, $FF08, $FF07
                dc.w    $FF05, $FF04, $FF03, $FF02, $FF02, $FF01, $FF01, $FF01
                dc.w    $FF00, $FF01, $FF01, $FF01, $FF02, $FF02, $FF03, $FF04
                dc.w    $FF05, $FF07, $FF08, $FF0A, $FF0C, $FF0D, $FF0F, $FF12
                dc.w    $FF14, $FF16, $FF19, $FF1C, $FF1F, $FF22, $FF25, $FF28
                dc.w    $FF2C, $FF2F, $FF33, $FF37, $FF3B, $FF3F, $FF43, $FF47
                dc.w    $FF4B, $FF50, $FF55, $FF59, $FF5E, $FF63, $FF68, $FF6D
                dc.w    $FF72, $FF78, $FF7D, $FF82, $FF88, $FF8B, $FF93, $FF99
                dc.w    $FF9F, $FFA4, $FFAA, $FFB0, $FFB6, $FFBC, $FFC2, $FFC8
                dc.w    $FFCF, $FFD5, $FFDB, $FFE1, $FFE7, $FFEE, $FFF4, $FFFA
                dc.w    $0000, $0006, $000C, $0012, $0019, $001F, $0025, $002B
                dc.w    $0031, $0038, $003E, $0044, $004A, $0050, $0056, $005C
                dc.w    $0061, $0067, $006D, $0073, $0078, $007E, $0083, $0088
                dc.w    $008E, $0093, $0098, $009D, $00A2, $00A7, $00AB, $00B0
                dc.w    $00B5, $00B9, $00BD, $00C1, $00C5, $00C9, $00CD, $00D1
                dc.w    $00D4, $00D8, $00DB, $00DE, $00E1, $00E4, $00E7, $00EA
                dc.w    $00EC, $00EE, $00F1, $00F3, $00F4, $00F6, $00F8, $00F9
                dc.w    $00FB, $00FC, $00FD, $00FE, $00FE, $00FF, $00FF, $00FF 
;===============================================================================
; Rotina para calcular o Seno usando tabela pr�-calculada
; <<<-
;===============================================================================

;===============================================================================
; Rotina para calcular o �ngulo usando tabela pr�-calculada
; ->>>
;===============================================================================
CalcAngle:                                                     ; Offset_0x001DB8
                movem.l D3/D4, -(A7)
                moveq   #$00, D3
                moveq   #$00, D4
                move.w  D1, D3
                move.w  D2, D4
                or.w    D3, D4
                beq.s   Offset_0x001E0A
                move.w  D2, D4
                tst.w   D3
                bpl.s   Offset_0x001DD0
                neg.w   D3
Offset_0x001DD0:
                tst.w   D4
                bpl.s   Offset_0x001DD6
                neg.w   D4
Offset_0x001DD6:
                cmp.w   D3, D4
                bcc.s   Offset_0x001DE6
                lsl.l   #$08, D4
                divu.w  D3, D4
                moveq   #$00, D0
                move.b  Angle_Table(PC, D4), D0                ; Offset_0x001E14
                bra.s   Offset_0x001DF0
Offset_0x001DE6:
                lsl.l   #$08, D3
                divu.w  D4, D3
                moveq   #$40, D0
                sub.b   Angle_Table(PC, D3), D0                ; Offset_0x001E14
Offset_0x001DF0:
                tst.w   D1
                bpl.s   Offset_0x001DFA
                neg.w   D0
                addi.w  #$0080, D0
Offset_0x001DFA:
                tst.w   D2
                bpl.s   Offset_0x001E04
                neg.w   D0
                addi.w  #$0100, D0
Offset_0x001E04:
                movem.l (A7)+, D3/D4
                rts
Offset_0x001E0A:
                move.w  #$0040, D0
                movem.l (A7)+, D3/D4
                rts 
;-------------------------------------------------------------------------------
Angle_Table:                                                   ; Offset_0x001E14
                dc.b    $00, $00, $00, $00, $01, $01, $01, $01
                dc.b    $01, $01, $02, $02, $02, $02, $02, $02
                dc.b    $03, $03, $03, $03, $03, $03, $03, $04
                dc.b    $04, $04, $04, $04, $04, $05, $05, $05
                dc.b    $05, $05, $05, $06, $06, $06, $06, $06
                dc.b    $06, $06, $07, $07, $07, $07, $07, $07
                dc.b    $08, $08, $08, $08, $08, $08, $08, $09
                dc.b    $09, $09, $09, $09, $09, $0A, $0A, $0A
                dc.b    $0A, $0A, $0A, $0A, $0B, $0B, $0B, $0B
                dc.b    $0B, $0B, $0B, $0C, $0C, $0C, $0C, $0C
                dc.b    $0C, $0C, $0D, $0D, $0D, $0D, $0D, $0D
                dc.b    $0D, $0E, $0E, $0E, $0E, $0E, $0E, $0E
                dc.b    $0F, $0F, $0F, $0F, $0F, $0F, $0F, $10
                dc.b    $10, $10, $10, $10, $10, $10, $11, $11
                dc.b    $11, $11, $11, $11, $11, $11, $12, $12
                dc.b    $12, $12, $12, $12, $12, $13, $13, $13
                dc.b    $13, $13, $13, $13, $13, $14, $14, $14
                dc.b    $14, $14, $14, $14, $14, $15, $15, $15
                dc.b    $15, $15, $15, $15, $15, $15, $16, $16
                dc.b    $16, $16, $16, $16, $16, $16, $17, $17
                dc.b    $17, $17, $17, $17, $17, $17, $17, $18
                dc.b    $18, $18, $18, $18, $18, $18, $18, $18
                dc.b    $19, $19, $19, $19, $19, $19, $19, $19
                dc.b    $19, $19, $1A, $1A, $1A, $1A, $1A, $1A
                dc.b    $1A, $1A, $1A, $1B, $1B, $1B, $1B, $1B
                dc.b    $1B, $1B, $1B, $1B, $1B, $1C, $1C, $1C
                dc.b    $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1C
                dc.b    $1D, $1D, $1D, $1D, $1D, $1D, $1D, $1D
                dc.b    $1D, $1D, $1D, $1E, $1E, $1E, $1E, $1E
                dc.b    $1E, $1E, $1E, $1E, $1E, $1E, $1F, $1F
                dc.b    $1F, $1F, $1F, $1F, $1F, $1F, $1F, $1F
                dc.b    $1F, $1F, $20, $20, $20, $20, $20, $20
                dc.b    $20, $00                                                                           
;===============================================================================
; Rotina para calcular o �ngulo usando tabela pr�-calculada
; <<<-
;===============================================================================

; ---------------------------------------------------------------------------
; Subroutine to load palette cycles
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x001F16:
PalCycle_Load:
		bsr.w	PalCycle_SuperSonic
		moveq	#0,d2
		moveq	#0,d0
		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#1,d0
		lsr.w	#6,d0
		move.w	PalCycle_Load_List(pc,d0.w),d0
		jmp	PalCycle_Load_List(pc,d0.w)
		rts
; ===========================================================================
PalCycle_Load_List:                                            ; Offset_0x001F30
                dc.w    PalCycle_AIz_1-PalCycle_Load_List      ; Offset_0x001F92
                dc.w    PalCycle_AIz_2-PalCycle_Load_List      ; Offset_0x00204A
                dc.w    PalCycle_Hz_1-PalCycle_Load_List       ; Offset_0x002102
                dc.w    PalCycle_Hz_2-PalCycle_Load_List       ; Offset_0x002150
                dc.w    PalCycle_MGz_1-PalCycle_Load_List      ; Offset_0x001F90
                dc.w    PalCycle_MGz_2-PalCycle_Load_List      ; Offset_0x001F90
                dc.w    PalCycle_CNz_1-PalCycle_Load_List      ; Offset_0x002152
                dc.w    PalCycle_CNz_2-PalCycle_Load_List      ; Offset_0x002152
                dc.w    PalCycle_FBz_1-PalCycle_Load_List      ; Offset_0x0021DE
                dc.w    PalCycle_FBz_2-PalCycle_Load_List      ; Offset_0x0021DE
                dc.w    PalCycle_Iz_1-PalCycle_Load_List       ; Offset_0x0021E0
                dc.w    PalCycle_Iz_2-PalCycle_Load_List       ; Offset_0x0021E0
                dc.w    PalCycle_LBz_1-PalCycle_Load_List      ; Offset_0x00229A
                dc.w    PalCycle_LBz_2-PalCycle_Load_List      ; Offset_0x0022A2
                dc.w    PalCycle_MVz_1-PalCycle_Load_List      ; Offset_0x001F90
                dc.w    PalCycle_MVz_2-PalCycle_Load_List      ; Offset_0x001F90
                dc.w    PalCycle_Sz_1-PalCycle_Load_List       ; Offset_0x001F90
                dc.w    PalCycle_Sz_2-PalCycle_Load_List       ; Offset_0x001F90
                dc.w    PalCycle_LRz_1-PalCycle_Load_List      ; Offset_0x0022D8
                dc.w    PalCycle_LRz_2-PalCycle_Load_List      ; Offset_0x002330
                dc.w    PalCycle_SSz_1-PalCycle_Load_List      ; Offset_0x001F90
                dc.w    PalCycle_SSz_2-PalCycle_Load_List      ; Offset_0x001F90
                dc.w    PalCycle_DEz_1-PalCycle_Load_List      ; Offset_0x001F90
                dc.w    PalCycle_DEz_2-PalCycle_Load_List      ; Offset_0x001F90
                dc.w    PalCycle_TDz_1-PalCycle_Load_List      ; Offset_0x001F90
                dc.w    PalCycle_TDz_2-PalCycle_Load_List      ; Offset_0x001F90
                dc.w    PalCycle_End_Seq_1-PalCycle_Load_List  ; Offset_0x001F90
                dc.w    PalCycle_End_Seq_2-PalCycle_Load_List  ; Offset_0x001F90
                dc.w    PalCycle_ALz_1-PalCycle_Load_List      ; Offset_0x001F90
                dc.w    PalCycle_ALz_2-PalCycle_Load_List      ; Offset_0x001F90
                dc.w    PalCycle_BPz_1-PalCycle_Load_List      ; Offset_0x002332
                dc.w    PalCycle_BPz_2-PalCycle_Load_List      ; Offset_0x002332
                dc.w    PalCycle_DPz_1-PalCycle_Load_List      ; Offset_0x001F90
                dc.w    PalCycle_DPz_2-PalCycle_Load_List      ; Offset_0x001F90
                dc.w    PalCycle_CGz_1-PalCycle_Load_List      ; Offset_0x00239C
                dc.w    PalCycle_CGz_2-PalCycle_Load_List      ; Offset_0x00239C
                dc.w    PalCycle_EMz_1-PalCycle_Load_List      ; Offset_0x0023D2
                dc.w    PalCycle_EMz_2-PalCycle_Load_List      ; Offset_0x0023D2
                dc.w    PalCycle_BS_GM_1-PalCycle_Load_List    ; Offset_0x001F90
                dc.w    PalCycle_BS_GM_2-PalCycle_Load_List    ; Offset_0x001F90
                dc.w    PalCycle_BS_GS_1-PalCycle_Load_List    ; Offset_0x001F90
                dc.w    PalCycle_BS_GS_2-PalCycle_Load_List    ; Offset_0x001F90
                dc.w    PalCycle_BS_SM_1-PalCycle_Load_List    ; Offset_0x001F90
                dc.w    PalCycle_BS_SM_2-PalCycle_Load_List    ; Offset_0x001F90
                dc.w    PalCycle_LRz_Boss-PalCycle_Load_List   ; Offset_0x001F90
                dc.w    PalCycle_HPz-PalCycle_Load_List        ; Offset_0x001F90
                dc.w    PalCycle_DEz_Boss-PalCycle_Load_List   ; Offset_0x001F90
                dc.w    PalCycle_HPz_Portal-PalCycle_Load_List ; Offset_0x001F90
;-------------------------------------------------------------------------------
PalCycle_MGz_1:                                                ; Offset_0x001F90
PalCycle_MGz_2:
PalCycle_MVz_1:
PalCycle_MVz_2:
PalCycle_Sz_1:
PalCycle_Sz_2:
PalCycle_SSz_1:
PalCycle_SSz_2:
PalCycle_DEz_1:
PalCycle_DEz_2:
PalCycle_TDz_1:
PalCycle_TDz_2:
PalCycle_End_Seq_1:
PalCycle_End_Seq_2:
PalCycle_ALz_1:
PalCycle_ALz_2:
PalCycle_DPz_1:    
PalCycle_DPz_2:
PalCycle_BS_GM_1:
PalCycle_BS_GM_2:
PalCycle_BS_GS_1:
PalCycle_BS_GS_2:
PalCycle_BS_SM_1:
PalCycle_BS_SM_2:
PalCycle_LRz_Boss:
PalCycle_HPz:
PalCycle_DEz_Boss:
PalCycle_HPz_Portal:
		rts
;-------------------------------------------------------------------------------
PalCycle_AIz_1:                                                ; Offset_0x001F92
                move.b  (Palette_Cycle_Flag).w, D0                   ; $FFFFF72E
                beq.s   Offset_0x001FEC
                subq.w  #$01, (Palette_Cycle_Count_1).w              ; $FFFFF634
                bpl.s   Offset_0x001FEA
                move.w  #$0007, (Palette_Cycle_Count_1).w            ; $FFFFF634
                move.w  (Palette_Cycle_Count_0).w, D0                ; $FFFFF632
                addq.w  #$08, (Palette_Cycle_Count_0).w              ; $FFFFF632
                andi.w  #$0018, D0
                lea     (Pal_AIz1_Cyc1), A0                    ; Offset_0x002430
                move.l  $00(A0, D0), (Palette_Row_2_Offset+$16).w    ; $FFFFED56
                move.l  $04(A0, D0), (Palette_Row_2_Offset+$1A).w    ; $FFFFED5A
                move.w  (Palette_Cycle_Counters+$02).w, D0           ; $FFFFF652
                addq.w  #$06, (Palette_Cycle_Counters+$02).w         ; $FFFFF652
                cmpi.w  #$0030, (Palette_Cycle_Counters+$02).w       ; $FFFFF652
                bcs.s   Offset_0x001FD8
                move.w  #$0000, (Palette_Cycle_Counters+$02).w       ; $FFFFF652
Offset_0x001FD8:
                lea     (Pal_AIz1_Cyc4), A0                    ; Offset_0x002530
                move.l  $00(A0, D0), (Palette_Row_3_Offset+$18).w    ; $FFFFED78
                move.w  $04(A0, D0), (Palette_Row_3_Offset+$1C).w    ; $FFFFED7C
Offset_0x001FEA:
                rts
Offset_0x001FEC:
                subq.w  #$01, (Palette_Cycle_Count_1).w              ; $FFFFF634
                bpl.s   Offset_0x002048
                move.w  #$0009, (Palette_Cycle_Count_1).w            ; $FFFFF634
                move.w  (Palette_Cycle_Count_0).w, D0                ; $FFFFF632
                addq.w  #$08, (Palette_Cycle_Count_0).w              ; $FFFFF632
                cmpi.w  #$0050, (Palette_Cycle_Count_0).w            ; $FFFFF632
                bcs.s   Offset_0x00200E
                move.w  #$0000, (Palette_Cycle_Count_0).w            ; $FFFFF632
Offset_0x00200E:
                lea     (Pal_AIz1_Cyc2), A0                    ; Offset_0x002450
                move.l  $00(A0, D0), (Palette_Row_3_Offset+$04).w    ; $FFFFED64
                move.l  $04(A0, D0), (Palette_Row_3_Offset+$08).w    ; $FFFFED68
                move.w  (Palette_Cycle_Counters+$02).w, D0           ; $FFFFF652
                addq.w  #$06, (Palette_Cycle_Counters+$02).w         ; $FFFFF652
                cmpi.w  #$003C, (Palette_Cycle_Counters+$02).w       ; $FFFFF652
                bcs.s   Offset_0x002036
                move.w  #$0000, (Palette_Cycle_Counters+$02).w       ; $FFFFF652
Offset_0x002036:
                lea     (Pal_AIz1_Cyc3), A0                    ; Offset_0x0024D0
                move.l  $00(A0, D0), (Palette_Row_3_Offset+$1A).w    ; $FFFFED7A
                move.w  $04(A0, D0), (Palette_Row_3_Offset+$1E).w    ; $FFFFED7E
Offset_0x002048:
                rts         
;-------------------------------------------------------------------------------
PalCycle_AIz_2:                                                ; Offset_0x00204A
                subq.w  #$01, (Palette_Cycle_Count_1).w              ; $FFFFF634
                bpl.s   Offset_0x0020C4
                move.w  #$0005, (Palette_Cycle_Count_1).w            ; $FFFFF634
                move.w  (Palette_Cycle_Count_0).w, D0                ; $FFFFF632
                addq.w  #$08, (Palette_Cycle_Count_0).w              ; $FFFFF632
                andi.w  #$0018, D0
                lea     (Pal_AIz2_Cyc1), A0                    ; Offset_0x002560
                move.l  $00(A0, D0), (Palette_Row_3_Offset+$18).w    ; $FFFFED78
                move.l  $04(A0, D0), (Palette_Row_3_Offset+$1C).w    ; $FFFFED7C
                move.w  (Palette_Cycle_Counters+$02).w, D0           ; $FFFFF652
                addq.w  #$06, (Palette_Cycle_Counters+$02).w         ; $FFFFF652
                cmpi.w  #$0030, (Palette_Cycle_Counters+$02).w       ; $FFFFF652
                bcs.s   Offset_0x00208A
                move.w  #$0000, (Palette_Cycle_Counters+$02).w       ; $FFFFF652
Offset_0x00208A:
                lea     (Pal_AIz2_Cyc2), A0                    ; Offset_0x002580
                cmpi.w  #$3800, (Camera_X).w                         ; $FFFFEE78
                bcs.s   Offset_0x00209E
                lea     (Pal_AIz2_Cyc3), A0                    ; Offset_0x0025B0
Offset_0x00209E:
                move.w  $00(A0, D0), (Palette_Row_2_Offset+$08).w    ; $FFFFED48
                move.w  $02(A0, D0), (Palette_Row_2_Offset+$10).w    ; $FFFFED50
                move.w  $04(A0, D0), (Palette_Row_3_Offset+$16).w    ; $FFFFED76
                move.w  #$0A0E, (Palette_Row_2_Offset+$1C).w         ; $FFFFED5C
                cmpi.w  #$01C0, (Camera_X).w                         ; $FFFFEE78
                bcc.s   Offset_0x0020C4
                move.w  $04(A0, D0), (Palette_Row_2_Offset+$1C).w    ; $FFFFED5C
Offset_0x0020C4:
                subq.w  #$01, (Palette_Cycle_Counters+$08).w         ; $FFFFF658
                bpl.s   Offset_0x002100
                move.w  #$0001, (Palette_Cycle_Counters+$08).w       ; $FFFFF658
                move.w  (Palette_Cycle_Counters+$04).w, D0           ; $FFFFF654
                addq.w  #$02, (Palette_Cycle_Counters+$04).w         ; $FFFFF654
                cmpi.w  #$0034, (Palette_Cycle_Counters+$04).w       ; $FFFFF654
                bcs.s   Offset_0x0020E6
                move.w  #$0000, (Palette_Cycle_Counters+$04).w       ; $FFFFF654
Offset_0x0020E6:
                lea     (Pal_AIz2_Cyc4), A0                    ; Offset_0x0025E0
                cmpi.w  #$3800, (Camera_X).w                         ; $FFFFEE78
                bcs.s   Offset_0x0020FA
                lea     (Pal_AIz2_Cyc5), A0                    ; Offset_0x002614
Offset_0x0020FA:
                move.w  $00(A0, D0), (Palette_Row_3_Offset+$02).w    ; $FFFFED62
Offset_0x002100:
                rts     
;-------------------------------------------------------------------------------
PalCycle_Hz_1:                                                 ; Offset_0x002102
                subq.w  #$01, (Palette_Cycle_Count_1).w              ; $FFFFF634
                bpl.s   Offset_0x00214E
                move.w  #$0007, (Palette_Cycle_Count_1).w            ; $FFFFF634
                tst.b   (Palette_Cycle_Counters).w                   ; $FFFFF650
                beq.s   Offset_0x00211A
                move.w  #$0000, (Palette_Cycle_Count_1).w            ; $FFFFF634
Offset_0x00211A:
                lea     (Pal_Hz1_Cyc), A0                      ; Offset_0x002648
                move.w  (Palette_Cycle_Count_0).w, D0                ; $FFFFF632
                addq.w  #$08, (Palette_Cycle_Count_0).w              ; $FFFFF632
                cmpi.w  #$0020, (Palette_Cycle_Count_0).w            ; $FFFFF632
                bcs.s   Offset_0x002136
                move.w  #$0000, (Palette_Cycle_Count_0).w            ; $FFFFF632
Offset_0x002136:
                move.l  $00(A0, D0), (Palette_Row_2_Offset+$06).w    ; $FFFFED46
                move.l  $04(A0, D0), (Palette_Row_2_Offset+$0A).w    ; $FFFFED4A
                move.l  $00(A0, D0), (Palette_UW_Row_2_Offset+$06).w ; $FFFFF0C6
                move.l  $04(A0, D0), (Palette_UW_Row_2_Offset+$0A).w ; $FFFFF0CA
Offset_0x00214E:
                rts 
;-------------------------------------------------------------------------------
PalCycle_Hz_2:                                                 ; Offset_0x002150
                rts             
;-------------------------------------------------------------------------------
PalCycle_CNz_1:                                                ; Offset_0x002152
PalCycle_CNz_2:  
                subq.w  #$01, (Palette_Cycle_Count_1).w              ; $FFFFF634
                bpl.s   Offset_0x002186
                move.w  #$0003, (Palette_Cycle_Count_1).w            ; $FFFFF634
                lea     (Pal_CNz_Cyc1), A0                     ; Offset_0x002668
                move.w  (Palette_Cycle_Count_0).w, D0                ; $FFFFF632
                addq.w  #$06, (Palette_Cycle_Count_0).w              ; $FFFFF632
                cmpi.w  #$0060, (Palette_Cycle_Count_0).w            ; $FFFFF632
                bcs.s   Offset_0x00217A
                move.w  #$0000, (Palette_Cycle_Count_0).w            ; $FFFFF632
Offset_0x00217A:
                move.l  $00(A0, D0), (Palette_Row_3_Offset+$12).w    ; $FFFFED72
                move.w  $04(A0, D0), (Palette_Row_3_Offset+$16).w    ; $FFFFED76
Offset_0x002186:
                lea     (Pal_CNz_Cyc2), A0                     ; Offset_0x0026C8
                move.w  (Palette_Cycle_Counters+$02).w, D0           ; $FFFFF652
                addq.w  #$06, (Palette_Cycle_Counters+$02).w         ; $FFFFF652
                cmpi.w  #$00B4, (Palette_Cycle_Counters+$02).w       ; $FFFFF652
                bcs.s   Offset_0x0021A2
                move.w  #$0000, (Palette_Cycle_Counters+$02).w       ; $FFFFF652
Offset_0x0021A2:
                move.l  $00(A0, D0), (Palette_Row_2_Offset+$12).w    ; $FFFFED52
                move.w  $04(A0, D0), (Palette_Row_2_Offset+$16).w    ; $FFFFED56
                subq.w  #$01, (Palette_Cycle_Counters+$08).w         ; $FFFFF658
                bpl.s   Offset_0x0021DC
                move.w  #$0002, (Palette_Cycle_Counters+$08).w       ; $FFFFF658
                lea     (Pal_CNz_Cyc3), A0                     ; Offset_0x00277C
                move.w  (Palette_Cycle_Counters+$04).w, D0           ; $FFFFF654
                addq.w  #$04, (Palette_Cycle_Counters+$04).w         ; $FFFFF654
                cmpi.w  #$0040, (Palette_Cycle_Counters+$04).w       ; $FFFFF654
                bcs.s   Offset_0x0021D6
                move.w  #$0000, (Palette_Cycle_Counters+$04).w       ; $FFFFF654
Offset_0x0021D6:
                move.l  $00(A0, D0), (Palette_Row_2_Offset+$0E).w    ; $FFFFED4E
Offset_0x0021DC:
                rts    
;-------------------------------------------------------------------------------
PalCycle_FBz_1:                                                ; Offset_0x0021DE
PalCycle_FBz_2: 
                rts
;-------------------------------------------------------------------------------
PalCycle_Iz_1:                                                 ; Offset_0x0021E0
PalCycle_Iz_2:
                subq.w  #$01, (Palette_Cycle_Count_1).w              ; $FFFFF634
                bpl.s   Offset_0x00220E
                move.w  #$0005, (Palette_Cycle_Count_1).w            ; $FFFFF634
                lea     (Pal_Iz_Cyc1), A0                      ; Offset_0x0027BC
                move.w  (Palette_Cycle_Count_0).w, D0                ; $FFFFF632
                addq.w  #$04, (Palette_Cycle_Count_0).w              ; $FFFFF632
                cmpi.w  #$0040, (Palette_Cycle_Count_0).w            ; $FFFFF632
                bcs.s   Offset_0x002208
                move.w  #$0000, (Palette_Cycle_Count_0).w            ; $FFFFF632
Offset_0x002208:
                move.l  $00(A0, D0), (Palette_Row_2_Offset+$1C).w    ; $FFFFED5C
Offset_0x00220E:
                subq.w  #$01, (Palette_Cycle_Counters+$08).w         ; $FFFFF658
                bpl.s   Offset_0x002242
                move.w  #$0009, (Palette_Cycle_Counters+$08).w       ; $FFFFF658
                lea     (Pal_Iz_Cyc2), A0                      ; Offset_0x0027FC
                move.w  (Palette_Cycle_Counters+$02).w, D0           ; $FFFFF652
                addq.w  #$04, (Palette_Cycle_Counters+$02).w         ; $FFFFF652
                cmpi.w  #$0048, (Palette_Cycle_Counters+$02).w       ; $FFFFF652
                bcs.s   Offset_0x002236
                move.w  #$0000, (Palette_Cycle_Counters+$02).w       ; $FFFFF652
Offset_0x002236:
                tst.w   (Background_Events+$16).w                    ; $FFFFEEE8
                beq.s   Offset_0x002242
                move.l  $00(A0, D0), (Palette_Row_3_Offset+$1C).w    ; $FFFFED7C
Offset_0x002242:
                subq.w  #$01, (Palette_Cycle_Counters+$0A).w         ; $FFFFF65A
                bpl.s   Offset_0x002298
                move.w  #$0007, (Palette_Cycle_Counters+$0A).w       ; $FFFFF65A
                lea     (Pal_Iz_Cyc3), A0                      ; Offset_0x002844
                move.w  (Palette_Cycle_Counters+$04).w, D0           ; $FFFFF654
                addq.w  #$04, (Palette_Cycle_Counters+$04).w         ; $FFFFF654
                cmpi.w  #$0018, (Palette_Cycle_Counters+$04).w       ; $FFFFF654
                bcs.s   Offset_0x00226A
                move.w  #$0000, (Palette_Cycle_Counters+$04).w       ; $FFFFF654
Offset_0x00226A:
                tst.w   (Background_Events+$16).w                    ; $FFFFEEE8
                beq.s   Offset_0x002276
                move.l  $00(A0, D0), (Palette_Row_3_Offset+$18).w    ; $FFFFED78
Offset_0x002276:
                lea     (Pal_Iz_Cyc4), A0                      ; Offset_0x00285C
                move.w  (Palette_Cycle_Counters+$06).w, D0           ; $FFFFF656
                addq.w  #$04, (Palette_Cycle_Counters+$06).w         ; $FFFFF656
                cmpi.w  #$0040, (Palette_Cycle_Counters+$06).w       ; $FFFFF656
                bcs.s   Offset_0x002292
                move.w  #$0000, (Palette_Cycle_Counters+$06).w       ; $FFFFF656
Offset_0x002292:
                move.l  $00(A0, D0), (Palette_Row_2_Offset+$18).w    ; $FFFFED58
Offset_0x002298:
                rts    
;-------------------------------------------------------------------------------
PalCycle_LBz_1:                                                ; Offset_0x00229A
                lea     (Pal_LBz1_Cyc), A0                     ; Offset_0x00289C
                bra.s   PalCycle_LBz_Main                      ; Offset_0x0022A8            
;-------------------------------------------------------------------------------
PalCycle_LBz_2:                                                ; Offset_0x0022A2
                lea     (Pal_LBz2_Cyc), A0                     ; Offset_0x0028AE
PalCycle_LBz_Main:                
                subq.w  #$01, (Palette_Cycle_Count_1).w              ; $FFFFF634
                bpl.s   Offset_0x0022D6
                move.w  #$0003, (Palette_Cycle_Count_1).w            ; $FFFFF634
                move.w  (Palette_Cycle_Count_0).w, D0                ; $FFFFF632
                addq.w  #$06, (Palette_Cycle_Count_0).w              ; $FFFFF632
                cmpi.w  #$0012, (Palette_Cycle_Count_0).w            ; $FFFFF632
                bcs.s   Offset_0x0022CA
                move.w  #$0000, (Palette_Cycle_Count_0).w            ; $FFFFF632
Offset_0x0022CA:
                move.l  $00(A0, D0), (Palette_Row_2_Offset+$10).w    ; $FFFFED50
                move.w  $04(A0, D0), (Palette_Row_2_Offset+$14).w    ; $FFFFED54
Offset_0x0022D6:
                rts  
;-------------------------------------------------------------------------------
PalCycle_LRz_1:                                                ; Offset_0x0022D8
                subq.w  #$01, (Palette_Cycle_Count_1).w              ; $FFFFF634
                bpl.s   Offset_0x00232E
                move.w  #$000F, (Palette_Cycle_Count_1).w            ; $FFFFF634
                move.w  (Palette_Cycle_Count_0).w, D0                ; $FFFFF632
                addq.w  #$08, (Palette_Cycle_Count_0).w              ; $FFFFF632
                cmpi.w  #$0080, (Palette_Cycle_Count_0).w            ; $FFFFF632
                bcs.s   Offset_0x0022FA
                move.w  #$0000, (Palette_Cycle_Count_0).w            ; $FFFFF632
Offset_0x0022FA:
                lea     (Pal_LRz1_Cyc1), A0                    ; Offset_0x0028C0
                move.l  $00(A0, D0), (Palette_Row_2_Offset+$02).w    ; $FFFFED42
                move.l  $04(A0, D0), (Palette_Row_2_Offset+$06).w    ; $FFFFED46
                move.w  (Palette_Cycle_Counters+$02).w, D0           ; $FFFFF652
                addq.w  #$04, (Palette_Cycle_Counters+$02).w         ; $FFFFF652
                cmpi.w  #$001C, (Palette_Cycle_Counters+$02).w       ; $FFFFF652
                bcs.s   Offset_0x002322
                move.w  #$0000, (Palette_Cycle_Counters+$02).w       ; $FFFFF652
Offset_0x002322:
                lea     (Pal_LRz1_Cyc2), A0                    ; Offset_0x002940
                move.l  $00(A0, D0), (Palette_Row_3_Offset+$02).w    ; $FFFFED62
Offset_0x00232E:
                rts      
;-------------------------------------------------------------------------------
PalCycle_LRz_2:                                                ; Offset_0x002330
                rts      
;-------------------------------------------------------------------------------
PalCycle_BPz_1:                                                ; Offset_0x002332
PalCycle_BPz_2:
                subq.w  #$01, (Palette_Cycle_Count_1).w              ; $FFFFF634
                bpl.s   Offset_0x002366
                move.w  #$0007, (Palette_Cycle_Count_1).w            ; $FFFFF634
                lea     (Pal_BPz_Cyc1), A0                     ; Offset_0x002964
                move.w  (Palette_Cycle_Count_0).w, D0                ; $FFFFF632
                addq.w  #$06, (Palette_Cycle_Count_0).w              ; $FFFFF632
                cmpi.w  #$0012, (Palette_Cycle_Count_0).w            ; $FFFFF632
                bcs.s   Offset_0x00235A
                move.w  #$0000, (Palette_Cycle_Count_0).w            ; $FFFFF632
Offset_0x00235A:
                move.l  $00(A0, D0), (Palette_Row_2_Offset+$1A).w    ; $FFFFED5A
                move.w  $04(A0, D0), (Palette_Row_2_Offset+$1E).w    ; $FFFFED5E
Offset_0x002366:
                subq.w  #$01, (Palette_Cycle_Counters+$08).w         ; $FFFFF658
                bpl.s   Offset_0x00239A
                move.w  #$0011, (Palette_Cycle_Counters+$08).w       ; $FFFFF658
                lea     (Pal_BPz_Cyc2), A0                     ; Offset_0x002976
                move.w  (Palette_Cycle_Counters+$02).w, D0           ; $FFFFF652
                addq.w  #$06, (Palette_Cycle_Counters+$02).w         ; $FFFFF652
                cmpi.w  #$007E, (Palette_Cycle_Counters+$02).w       ; $FFFFF652
                bcs.s   Offset_0x00238E
                move.w  #$0000, (Palette_Cycle_Counters+$02).w       ; $FFFFF652
Offset_0x00238E:
                move.l  $00(A0, D0), (Palette_Row_3_Offset+$04).w    ; $FFFFED64
                move.w  $04(A0, D0), (Palette_Row_3_Offset+$08).w    ; $FFFFED68
Offset_0x00239A:
                rts 
;-------------------------------------------------------------------------------
PalCycle_CGz_1:                                                ; Offset_0x00239C
PalCycle_CGz_2:
                subq.w  #$01, (Palette_Cycle_Count_1).w              ; $FFFFF634
                bpl.s   Offset_0x0023D0
                move.w  #$0009, (Palette_Cycle_Count_1).w            ; $FFFFF634
                lea     (Pal_CGz_Cyc), A0                      ; Offset_0x0029F4
                move.w  (Palette_Cycle_Count_0).w, D0                ; $FFFFF632
                addq.w  #$08, (Palette_Cycle_Count_0).w              ; $FFFFF632
                cmpi.w  #$0050, (Palette_Cycle_Count_0).w            ; $FFFFF632
                bcs.s   Offset_0x0023C4
                move.w  #$0000, (Palette_Cycle_Count_0).w            ; $FFFFF632
Offset_0x0023C4:
                move.l  $00(A0, D0), (Palette_Row_2_Offset+$04).w    ; $FFFFED44
                move.l  $04(A0, D0), (Palette_Row_2_Offset+$08).w    ; $FFFFED48
Offset_0x0023D0:
                rts      
;-------------------------------------------------------------------------------
PalCycle_EMz_1:                                                ; Offset_0x0023D2
PalCycle_EMz_2:
                subq.w  #$01, (Palette_Cycle_Count_1).w              ; $FFFFF634
                bpl.s   Offset_0x002400
                move.w  #$0007, (Palette_Cycle_Count_1).w            ; $FFFFF634
                lea     (Pal_EMz_Cyc1), A0                     ; Offset_0x002A44
                move.w  (Palette_Cycle_Count_0).w, D0                ; $FFFFF632
                addq.w  #$02, (Palette_Cycle_Count_0).w              ; $FFFFF632
                cmpi.w  #$003C, (Palette_Cycle_Count_0).w            ; $FFFFF632
                bcs.s   Offset_0x0023FA
                move.w  #$0000, (Palette_Cycle_Count_0).w            ; $FFFFF632
Offset_0x0023FA:
                move.w  $04(A0, D0), (Palette_Row_2_Offset+$1C).w    ; $FFFFED5C
Offset_0x002400:
                subq.w  #$01, (Palette_Cycle_Counters+$08).w         ; $FFFFF658
                bpl.s   Offset_0x00242E
                move.w  #$001F, (Palette_Cycle_Counters+$08).w       ; $FFFFF658
                lea     (Pal_EMz_Cyc2), A0                     ; Offset_0x002A80
                move.w  (Palette_Cycle_Counters+$02).w, D0           ; $FFFFF652
                addq.w  #$04, (Palette_Cycle_Counters+$02).w         ; $FFFFF652
                cmpi.w  #$0034, (Palette_Cycle_Counters+$02).w       ; $FFFFF652
                bcs.s   Offset_0x002428
                move.w  #$0000, (Palette_Cycle_Counters+$02).w       ; $FFFFF652
Offset_0x002428:
                move.l  $00(A0, D0), (Palette_Row_3_Offset+$12).w    ; $FFFFED72
Offset_0x00242E:
                rts  
;-------------------------------------------------------------------------------
Pal_AIz1_Cyc1:                                                 ; Offset_0x002430
                dc.w    $0EE8, $0EE2, $0EA4, $0E64, $0EE2, $0EA4, $0E64, $0EE8
                dc.w    $0EA4, $0E64, $0EE8, $0EE2, $0E64, $0EE8, $0EE2, $0EA4 
;-------------------------------------------------------------------------------
Pal_AIz1_Cyc2:                                                 ; Offset_0x002450
                dc.w    $0EEC, $0EEE, $0EE8, $0E40, $0EEC, $0EE8, $0EE8, $0EEE
                dc.w    $0EEA, $0E86, $0EE8, $0EE8, $0EE8, $0E40, $0EE8, $0E86
                dc.w    $0EE6, $0EEE, $0EE8, $0E40, $0EEA, $0EE8, $0EE8, $0EEE
                dc.w    $0EE8, $0E86, $0EE8, $0EE8, $0EE8, $0E40, $0EE8, $0E86
                dc.w    $0EE6, $0EEE, $0EE8, $0E40, $0EE8, $0EE8, $0EE8, $0EEE
                dc.w    $0EEA, $0E86, $0EE8, $0EE8, $0EEC, $0E40, $0EE8, $0E86
                dc.w    $0EEC, $0EEE, $0EE8, $0E40, $0EEC, $0EE8, $0EE8, $0EEE
                dc.w    $0EEC, $0E86, $0EE8, $0EE8, $0EEC, $0E40, $0EE8, $0E86   
;-------------------------------------------------------------------------------
Pal_AIz1_Cyc3:                                                 ; Offset_0x0024D0
                dc.w    $0CEC, $0CEE, $0EEE, $0CEE, $0EEE, $0EEE, $0EEE, $0EEE
                dc.w    $0EEE, $0EEE, $0EEE, $0EEE, $0EEE, $0EEE, $0EEE, $0EEE
                dc.w    $0EEE, $0EEE, $0EEE, $0EEE, $0EEE, $0EE8, $0EEE, $0EEE
                dc.w    $0EE8, $0EE8, $0EEE, $0EE8, $0EE8, $0EE8, $0EE8, $0EE8
                dc.w    $0EE8, $0EE8, $0EE8, $0EE8, $0EE8, $0EE8, $0EE8, $0EE8
                dc.w    $0EE8, $0AEC, $0EE8, $0AEC, $0CEC, $0AEC, $0CEC, $0CEC 
;-------------------------------------------------------------------------------
Pal_AIz1_Cyc4:                                                 ; Offset_0x002530
                dc.w    $0EA4, $0E60, $0EE2, $0EA4, $0EE8, $0EA4, $0E60, $0EE8
                dc.w    $0EEE, $0E60, $0EE2, $0EE2, $0EE8, $0EA4, $0EA4, $0EE2
                dc.w    $0E60, $0E60, $0EE2, $0E60, $0EEE, $0EE2, $0E60, $0EE8  
;-------------------------------------------------------------------------------
Pal_AIz2_Cyc1:                                                 ; Offset_0x002560
                dc.w    $0EE8, $0EE2, $0EC4, $0EA4, $0EE2, $0EC4, $0EA4, $0EE8
                dc.w    $0EC4, $0EA4, $0EE8, $0EE2, $0EA4, $0EE8, $0EE2, $0EC4  
;-------------------------------------------------------------------------------
Pal_AIz2_Cyc2:                                                 ; Offset_0x002580
                dc.w    $0024, $0044, $008E, $0026, $0046, $00AE, $0024, $0048
                dc.w    $008E, $0026, $004A, $00AE, $0024, $004C, $008E, $0026
                dc.w    $004A, $00AE, $0024, $0048, $008E, $0024, $0046, $008E   
;-------------------------------------------------------------------------------
Pal_AIz2_Cyc3:                                                 ; Offset_0x0025B0
                dc.w    $0024, $0044, $000C, $0026, $0046, $000E, $0024, $0048
                dc.w    $000C, $0026, $004A, $000E, $0024, $004C, $000C, $0026
                dc.w    $004A, $000E, $0024, $0048, $000C, $0024, $0046, $000C  
;-------------------------------------------------------------------------------
Pal_AIz2_Cyc4:                                                 ; Offset_0x0025E0
                dc.w    $006E, $006E, $006E, $006E, $028E, $04AE, $06AE, $08CE
                dc.w    $08EE, $0AEE, $0AEE, $0AEE, $0AEE, $0AEE, $08EE, $08EE
                dc.w    $08EE, $08EE, $08CE, $08CE, $08CE, $06AE, $06AE, $04AE
                dc.w    $04AE, $028E     
;-------------------------------------------------------------------------------
Pal_AIz2_Cyc5:                                                 ; Offset_0x002614
                dc.w    $000C, $000C, $000C, $000C, $002C, $000E, $002E, $004E
                dc.w    $006E, $008E, $008E, $008E, $008E, $008E, $006E, $004E
                dc.w    $004E, $004E, $002E, $002E, $002E, $000E, $000E, $002C
                dc.w    $002C, $002C                             
;-------------------------------------------------------------------------------
Pal_Hz1_Cyc:                                                   ; Offset_0x002648
                dc.w    $0EC8, $0EC0, $0EA0, $0E80, $0EC0, $0EA0, $0E80, $0EC8
                dc.w    $0EA0, $0E80, $0EC8, $0EC0, $0E80, $0EC8, $0EC0, $0EA0 
;-------------------------------------------------------------------------------
Pal_CNz_Cyc1:                                                  ; Offset_0x002668
                dc.w    $0000, $0066, $00EE, $0022, $0044, $00CC, $0044, $0022
                dc.w    $00AA, $0066, $0000, $0088, $0088, $0000, $0066, $00AA
                dc.w    $0022, $0044, $00CC, $0044, $0022, $00EE, $0066, $0000
                dc.w    $00EE, $0088, $0000, $00CC, $00AA, $0022, $00AA, $00CC
                dc.w    $0044, $0088, $00EE, $0066, $0066, $00EE, $0088, $0044
                dc.w    $00CC, $00AA, $0022, $00AA, $00CC, $0000, $0088, $00EE 
;-------------------------------------------------------------------------------
Pal_CNz_Cyc2:                                                  ; Offset_0x0026C8
                dc.w    $0E20, $008A, $0C0E, $0C42, $006C, $0E0E, $0A64, $004C
                dc.w    $0E0C, $0884, $002E, $0E0A, $06A6, $000E, $0E08, $04C6
                dc.w    $020E, $0E06, $02E8, $040E, $0E04, $00E8, $060E, $0E02
                dc.w    $00C8, $080E, $0E00, $00AA, $0A0E, $0E00, $008A, $0C0E
                dc.w    $0E20, $006C, $0E0E, $0C42, $004C, $0E0C, $0A64, $002E
                dc.w    $0E0A, $0884, $000E, $0E08, $06A6, $020E, $0E06, $04C6
                dc.w    $040E, $0E04, $02E8, $060E, $0E02, $00E8, $080E, $0E00
                dc.w    $00C8, $0A0E, $0E00, $00AA, $0C0E, $0E20, $008A, $0E0E
                dc.w    $0C42, $006C, $0E0C, $0A64, $004C, $0E0A, $0884, $002E
                dc.w    $0E08, $06A6, $000E, $0E06, $04C6, $020E, $0E04, $02E8
                dc.w    $040E, $0E02, $00E8, $060E, $0E00, $00C8, $080E, $0E00
                dc.w    $00AA, $0A0E  
;-------------------------------------------------------------------------------
Pal_CNz_Cyc3:                                                  ; Offset_0x00277C
                dc.w    $02E0, $0ECE, $04E2, $0EAC, $06E4, $0E8A, $08E6, $0E68
                dc.w    $0AE8, $0E46, $0CEA, $0E24, $0EEC, $0E02, $0EEE, $0E00
                dc.w    $0EEC, $0E02, $0CEA, $0E24, $0AE8, $0E46, $08E6, $0E68
                dc.w    $06E4, $0E8A, $04E2, $0EAC, $02E0, $0ECE, $00E0, $0EEE 
;-------------------------------------------------------------------------------
Pal_Iz_Cyc1:                                                   ; Offset_0x0027BC
                dc.w    $0E62, $0E20, $0E44, $0E20, $0E44, $0E00, $0E42, $0E00
                dc.w    $0E62, $0C00, $0E82, $0A00, $0EA2, $0C00, $0EC0, $0E00
                dc.w    $0EE0, $0E20, $0EE4, $0E00, $0EE4, $0C00, $0EE4, $0A00
                dc.w    $0EE0, $0800, $0EC2, $0A00, $0EA2, $0C00, $0E82, $0E20
;-------------------------------------------------------------------------------
Pal_Iz_Cyc2:                                                   ; Offset_0x0027FC
                dc.w    $0E06, $0E08, $0E04, $0E06, $0C04, $0E04, $0C02, $0C04
                dc.w    $0A02, $0C02, $0A00, $0A02, $0800, $0A00, $0600, $0800
                dc.w    $0600, $0800, $0600, $0800, $0600, $0800, $0800, $0A00
                dc.w    $0A00, $0A02, $0A02, $0C02, $0C02, $0C04, $0C04, $0E04
                dc.w    $0E04, $0E06, $0E06, $0E08  
;-------------------------------------------------------------------------------
Pal_Iz_Cyc3:                                                   ; Offset_0x002844
                dc.w    $0840, $0EEA, $0860, $0EE0, $0A80, $0EC0, $0EC0, $0A80
                dc.w    $0A80, $0EC0, $0860, $0EE0      
;-------------------------------------------------------------------------------
Pal_Iz_Cyc4:                                                   ; Offset_0x00285C
                dc.w    $00E8, $0CEC, $00C8, $0AEA, $00C8, $0AEA, $00A6, $06E8
                dc.w    $00A6, $06E8, $0084, $00E8, $0084, $00E8, $0082, $00C8
                dc.w    $0064, $00A6, $0064, $00A6, $0082, $00C8, $0084, $00E8
                dc.w    $00A6, $06E8, $00C8, $0AEA, $00E8, $0CEC, $00E8, $0CEC  
;-------------------------------------------------------------------------------
Pal_LBz1_Cyc:                                                  ; Offset_0x00289C
                dc.w    $08E0, $00C0, $0080, $00C0, $0080, $08E0, $0080, $08E0
                dc.w    $00C0   
;-------------------------------------------------------------------------------
Pal_LBz2_Cyc:                                                  ; Offset_0x0028AE
                dc.w    $0EEA, $0EA4, $0C62, $0EA4, $0C62, $0EEA, $0C62, $0EEA
                dc.w    $0EA4   
;-------------------------------------------------------------------------------
Pal_LRz1_Cyc1:                                                 ; Offset_0x0028C0
                dc.w    $00EE, $00AE, $006E, $000E, $00AE, $006E, $000E, $00EE
                dc.w    $006E, $000E, $00EE, $02CE, $002E, $08EE, $04EE, $006E
                dc.w    $0AEE, $06EE, $008E, $004E, $04EE, $006E, $002E, $08EE
                dc.w    $006E, $000E, $00EE, $02CE, $000E, $00EE, $02CE, $006E
                dc.w    $00EE, $00AE, $006E, $000E, $008E, $004E, $000C, $00CE
                dc.w    $002E, $000A, $00AC, $006E, $0008, $008E, $004C, $000C
                dc.w    $00AC, $006E, $002E, $000A, $008E, $004E, $000C, $00CE
                dc.w    $006E, $000E, $00EE, $00AE, $000E, $00EE, $00AE, $006E  
;-------------------------------------------------------------------------------
Pal_LRz1_Cyc2:                                                 ; Offset_0x002940
                dc.w    $0224, $0224, $0224, $0424, $0224, $0426, $0426, $0224
                dc.w    $0424, $0224, $0224, $0224, $0224, $0224, $0224, $0422
                dc.w    $0422, $0422     
;-------------------------------------------------------------------------------
Pal_BPz_Cyc1:                                                  ; Offset_0x002964
                dc.w    $00EE, $00AE, $006C, $00AE, $006E, $00EE, $006E, $00EE
                dc.w    $00AE    
;-------------------------------------------------------------------------------
Pal_BPz_Cyc2:                                                  ; Offset_0x002976
                dc.w    $0EE0, $0E0E, $00EE, $0EA0, $0A0E, $00EA, $0E60, $060E
                dc.w    $00E6, $0E20, $020E, $00E2, $0E02, $002E, $02E0, $0E06
                dc.w    $006E, $06E0, $0E0A, $00AE, $0AE0, $0E0E, $00EE, $0EE0
                dc.w    $0A0E, $00EA, $0EA0, $060E, $00E6, $0E60, $020E, $00E2
                dc.w    $0E20, $002E, $02E0, $0E02, $006E, $06E0, $0E06, $00AE
                dc.w    $0AE0, $0E0A, $00EE, $0EE0, $0E0E, $00EA, $0EA0, $0A0E
                dc.w    $00E6, $0E60, $060E, $00E2, $0E20, $020E, $02E0, $0E02
                dc.w    $002E, $06E0, $0E06, $006E, $0AE0, $0E0A, $00AE  
;-------------------------------------------------------------------------------
Pal_CGz_Cyc:                                                   ; Offset_0x0029F4
                dc.w    $000E, $0008, $0004, $0EEE, $000C, $0006, $0002, $0CCE
                dc.w    $000A, $0004, $0000, $0AAE, $0008, $0002, $0000, $088E
                dc.w    $0006, $0000, $0000, $066E, $0004, $0000, $0000, $044E
                dc.w    $0006, $0000, $0000, $066E, $0008, $0002, $0000, $088E
                dc.w    $000A, $0004, $0002, $0AAE, $000C, $0006, $0004, $0CCE  
;-------------------------------------------------------------------------------
Pal_EMz_Cyc1:                                                  ; Offset_0x002A44
                dc.w    $0006, $0008, $000A, $000C, $000E, $000E, $000E, $000E
                dc.w    $000C, $000A, $0008, $0006, $0006, $0006, $0006, $0008
                dc.w    $000A, $000C, $000E, $000E, $000E, $000C, $000A, $0008
                dc.w    $0006, $0008, $000A, $000A, $000A, $0008  
;-------------------------------------------------------------------------------
Pal_EMz_Cyc2:                                                  ; Offset_0x002A80
                dc.w    $0000, $000E, $0002, $000C, $0004, $000A, $0006, $0008
                dc.w    $0008, $0006, $000A, $0004, $000C, $0002, $000E, $0000
                dc.w    $000C, $0002, $000A, $0004, $0008, $0006, $0006, $0008
                dc.w    $0004, $000A, $0002, $000C   
;-------------------------------------------------------------------------------
PalCycle_SuperSonic:                                           ; Offset_0x002AB8
                move.b  (Super_Sonic_Palette_Status).w, D0           ; $FFFFF65F
                beq.s   Offset_0x002B00
                bmi     Offset_0x002B50
                subq.b  #$01, D0
                bne.s   Offset_0x002B02
                subq.b  #$01, (Super_Sonic_Palette_Timer).w          ; $FFFFF65E
                bpl.s   Offset_0x002B00
                move.b  #$03, (Super_Sonic_Palette_Timer).w          ; $FFFFF65E
                lea     (Pal_SuperSonic_Cyc), A0               ; Offset_0x002BA0
                move.w  (Super_Sonic_Palette_Frame).w, D0            ; $FFFFF65C
                addq.w  #$08, (Super_Sonic_Palette_Frame).w          ; $FFFFF65C
                cmpi.w  #$0030, (Super_Sonic_Palette_Frame).w        ; $FFFFF65C
                bcs.s   Offset_0x002AF4
                move.b  #$FF, (Super_Sonic_Palette_Status).w         ; $FFFFF65F
                move.b  #$00, (Obj_Player_One+Obj_Timer).w           ; $FFFFB02E
Offset_0x002AF4:
                lea     (Palette_Row_0_Offset+$04).w, A1             ; $FFFFED04
                move.l  $00(A0, D0), (A1)+
                move.w  $04(A0, D0), (A1)
Offset_0x002B00:
                rts
Offset_0x002B02:
                subq.b  #$01, (Super_Sonic_Palette_Timer).w          ; $FFFFF65E
                bpl.s   Offset_0x002B00
                move.b  #$03, (Super_Sonic_Palette_Timer).w          ; $FFFFF65E
                lea     (Pal_SuperSonic_Cyc), A0               ; Offset_0x002BA0
                move.w  (Super_Sonic_Palette_Frame).w, D0            ; $FFFFF65C
                subq.w  #$08, (Super_Sonic_Palette_Frame).w          ; $FFFFF65C
                bcc.s   Offset_0x002B2A
                move.b  #$00, (Super_Sonic_Palette_Frame).w          ; $FFFFF65C
                move.b  #$00, (Super_Sonic_Palette_Status).w         ; $FFFFF65F
Offset_0x002B2A:
                lea     (Palette_Row_0_Offset+$04).w, A1             ; $FFFFED04
                move.l  $00(A0, D0), (A1)+
                move.w  $04(A0, D0), (A1)
                lea     (Pal_SuperSonic_Underwater_Cyc), A0    ; Offset_0x002C20
                tst.b   (Water_Level_Flag).w                         ; $FFFFF730
                beq.s   Offset_0x002B00
                lea     (Palette_UW_Row_0_Offset+$04).w, A1          ; $FFFFF084
                move.l  $00(A0, D0), (A1)+
                move.w  $04(A0, D0), (A1)
                rts
Offset_0x002B50:
                subq.b  #$01, (Super_Sonic_Palette_Timer).w          ; $FFFFF65E
                bpl.s   Offset_0x002B00
                move.b  #$07, (Super_Sonic_Palette_Timer).w          ; $FFFFF65E
                lea     (Pal_SuperSonic_Cyc), A0               ; Offset_0x002BA0
                move.w  (Super_Sonic_Palette_Frame).w, D0            ; $FFFFF65C
                addq.w  #$08, (Super_Sonic_Palette_Frame).w          ; $FFFFF65C
                cmpi.w  #$0078, (Super_Sonic_Palette_Frame).w        ; $FFFFF65C
                bcs.s   Offset_0x002B78
                move.w  #$0030, (Super_Sonic_Palette_Frame).w        ; $FFFFF65C
Offset_0x002B78:
                lea     (Palette_Row_0_Offset+$04).w, A1             ; $FFFFED04
                move.l  $00(A0, D0), (A1)+
                move.w  $04(A0, D0), (A1)
                lea     (Pal_SuperSonic_Underwater_Cyc), A0    ; Offset_0x002C20
                tst.b   (Water_Level_Flag).w                         ; $FFFFF730
                beq     Offset_0x002B00
                lea     (Palette_UW_Row_0_Offset+$04).w, A1          ; $FFFFF084
                move.l  $00(A0, D0), (A1)+
                move.w  $04(A0, D0), (A1)
                rts   
;-------------------------------------------------------------------------------
Pal_SuperSonic_Cyc:                                            ; Offset_0x002BA0
                dc.w    $0A22, $0C42, $0E44, $0E66, $0844, $0A64, $0E66, $0E88
                dc.w    $0666, $0A86, $0E88, $0EAA, $0488, $0AA8, $0EAA, $0ECC
                dc.w    $04AA, $0ACA, $0ECC, $0EEE, $04CC, $0AEC, $0EEE, $0EEE
                dc.w    $04EE, $0AEE, $0EEE, $0EEE, $06EE, $0EEE, $0EEE, $0EEE
                dc.w    $08EE, $0EEE, $0EEE, $0EEE, $06EE, $0CEE, $0EEE, $0EEE
                dc.w    $04EE, $0AEE, $0EEE, $0EEE, $02EE, $08EE, $0CEE, $0EEE
                dc.w    $00EE, $06EE, $0AEE, $0EEE, $00EE, $04EE, $08EE, $0CEE
                dc.w    $00EE, $06EE, $0AEE, $0EEE, $00EE, $08EE, $0CEE, $0EEE 
;-------------------------------------------------------------------------------
Pal_SuperSonic_Underwater_Cyc:                                 ; Offset_0x002C20
                dc.w    $0E08, $0E28, $0E2A, $0E4C, $0C2A, $0E4A, $0E4C, $0E6E
                dc.w    $0A4C, $0E6C, $0E6E, $0E8E, $0A6E, $0E8E, $0E8E, $0E8E
                dc.w    $0A6E, $0E8E, $0E8E, $0E8E, $0A6E, $0E8E, $0E8E, $0E8E
                dc.w    $0A6E, $0E8E, $0E8E, $0E8E, $0A6E, $0E8E, $0E8E, $0E8E
                dc.w    $0C8E, $0EAE, $0EAE, $0EAE, $0C8E, $0EAE, $0EAE, $0EAE
                dc.w    $0EAE, $0EAE, $0EAE, $0EAE, $0EAE, $0EAE, $0EAE, $0EAE
                dc.w    $0EAE, $0EAE, $0EAE, $0EAE, $0EAE, $0EAE, $0EAE, $0EAE
                dc.w    $0EAE, $0EAE, $0EAE, $0EAE, $0EAE, $0EAE, $0EAE, $0EAE
                dc.w    $0A24, $0C44, $0E46, $0E68, $0C46, $0E66, $0E68, $0E8A
                dc.w    $0E68, $0E88, $0E8A, $0EAC, $0E68, $0E88, $0E8A, $0EAC
                dc.w    $0E88, $0EAA, $0EAC, $0ECC, $0E88, $0EAA, $0EAC, $0ECC
                dc.w    $0EA8, $0ECC, $0ECC, $0ECC, $0EA8, $0ECC, $0ECC, $0ECC
                dc.w    $0EA8, $0ECC, $0ECC, $0ECC, $0ECA, $0ECC, $0ECC, $0ECC
                dc.w    $0ECC, $0ECC, $0ECC, $0ECC, $0ECC, $0ECC, $0ECC, $0ECC
                dc.w    $0ECC, $0ECC, $0ECC, $0ECC, $0ECC, $0ECC, $0ECC, $0ECC
                dc.w    $0ECA, $0ECC, $0ECC, $0ECC, $0EA8, $0ECC, $0ECC, $0ECC                                                                                                                                                                                                                                                                                                                                                                                                                    
;===============================================================================
; Rotina para execu��o das paletas animadas. Ex: luzes piscando, fogo etc...
; <<<-        
;===============================================================================  

;===============================================================================
; Rotinas para escurecer / clarear a tela progressivamente
; ->>>
;=============================================================================== 
Pal_FadeTo:                                                    ; Offset_0x002D20
                move.w  #$003F, (Palette_Fade_Info).w                ; $FFFFF626
                jsr     Pal_Clear(PC)                          ; Offset_0x002DB0
                move.w  #$0015, D4
Pal_FadeTo_Loop:                                               ; Offset_0x002D2E
                move.b  #$12, (VBlank_Index).w                       ; $FFFFF62A
                bsr     Wait_For_VSync                         ; Offset_0x001AEE
                bsr.s   Pal_FadeIn                             ; Offset_0x002D44
                bsr     RunPLC_RAM                                 ; Offset_0x001556
                dbra    D4, Pal_FadeTo_Loop                    ; Offset_0x002D2E
                rts
;-------------------------------------------------------------------------------
Pal_FadeIn:                                                    ; Offset_0x002D44
                moveq   #$00, D0
                lea     (Palette_Buffer).w, A0                       ; $FFFFED00
                lea     (Palette_Data_Target).w, A1                  ; $FFFFED80
                move.b  (Palette_Fade_Info).w, D0                    ; $FFFFF626
                adda.w  D0, A0
                adda.w  D0, A1
                move.b  (Palette_Fade_Count).w, D0                   ; $FFFFF627
Offset_0x002D5A:
                bsr.s   Pal_AddColor                           ; Offset_0x002D84
                dbra    D0, Offset_0x002D5A
                tst.b   (Water_Level_Flag).w                         ; $FFFFF730
                beq.s   Offset_0x002D82
                moveq   #$00, D0
                lea     (Palette_Underwater_Buffer).w, A0            ; $FFFFF080
                lea     (Palette_Underwater_Target).w, A1            ; $FFFFF000
                move.b  (Palette_Fade_Info).w, D0                    ; $FFFFF626
                adda.w  D0, A0
                adda.w  D0, A1
                move.b  (Palette_Fade_Count).w, D0                   ; $FFFFF627
Offset_0x002D7C:        
                bsr.s   Pal_AddColor                           ; Offset_0x002D84
                dbra    D0, Offset_0x002D7C
Offset_0x002D82:
                rts
;-------------------------------------------------------------------------------                
Pal_AddColor:                                                  ; Offset_0x002D84
                move.w  (A1)+, D2
                move.w  (A0), D3
                cmp.w   D2, D3
                beq.s   Pal_NoAdd                              ; Offset_0x002DAC
                move.w  D3, D1
; Pal_AddBlue:                
                addi.w  #$0200, D1
                cmp.w   D2, D1
                bhi.s   Pal_AddGreen                           ; Offset_0x002D9A
                move.w  D1, (A0)+
                rts
Pal_AddGreen:                                                  ; Offset_0x002D9A
                move.w  D3, D1
                addi.w  #$0020, D1
                cmp.w   D2, D1
                bhi.s   Pal_AddRed                             ; Offset_0x002DA8
                move.w  D1, (A0)+
                rts
Pal_AddRed:                                                    ; Offset_0x002DA8
                addq.w  #$02, (A0)+
                rts
Pal_NoAdd:                                                     ; Offset_0x002DAC
                addq.w  #$02, A0
                rts   
;-------------------------------------------------------------------------------
Pal_Clear:                                                     ; Offset_0x002DB0
                moveq   #$00, D0
                lea     (Palette_Buffer).w, A0                       ; $FFFFED00
                move.b  (Palette_Fade_Info).w, D0                    ; $FFFFF626
                adda.w  D0, A0
                moveq   #$00, D1
                move.b  (Palette_Fade_Count).w, D0                   ; $FFFFF627
Offset_0x002DC2:
                move.w  D1, (A0)+
                tst.b   (Water_Level_Flag).w                         ; $FFFFF730
                beq.s   Offset_0x002DCE
                move.w  D1, $037E(A0)
Offset_0x002DCE:
                dbra    D0, Offset_0x002DC2
                rts   

; ---------------------------------------------------------------------------
; Subroutine to run the palette timer
; ---------------------------------------------------------------------------

; Offset_0x002DD4:
AnimatePalette:
		tst.w	(Palette_Fade_Timer).w
		beq.s	Run_PaletteCycle
		subq.w	#1,(Palette_Fade_Timer).w
		bra.w	Pal_FadeIn
; ---------------------------------------------------------------------------
; Offset_0x002DE2:
Run_PaletteCycle:
		jmp	(PalCycle_Load).l
; End of function AnimatePalette

;------------------------------------------------------------------------------- 
Pal_FadeFrom:                                                  ; Offset_0x002DE8
                move.w  #$003F, (Palette_Fade_Info).w                ; $FFFFF626
                move.w  #$0015, D4
Pal_FadeFrom_Loop:                                             ; Offset_0x002DF2
                move.b  #$12, (VBlank_Index).w                       ; $FFFFF62A
                bsr     Wait_For_VSync                         ; Offset_0x001AEE
                bsr.s   Pal_FadeOut                            ; Offset_0x002E08
                bsr     RunPLC_RAM                                 ; Offset_0x001556
                dbra    D4, Pal_FadeFrom_Loop                  ; Offset_0x002DF2
                rts
;-------------------------------------------------------------------------------
Pal_FadeOut:                                                   ; Offset_0x002E08
                moveq   #$00, D0
                lea     (Palette_Buffer).w, A0                       ; $FFFFED00
                move.b  (Palette_Fade_Info).w, D0                    ; $FFFFF626
                adda.w  D0, A0
                move.b  (Palette_Fade_Count).w, D0                   ; $FFFFF627
Offset_0x002E18:
                bsr.s   Pal_DecColor                           ; Offset_0x002E36
                dbra    D0, Offset_0x002E18
                moveq   #$00, D0
                lea     (Palette_Underwater_Buffer).w, A0            ; $FFFFF080
                move.b  (Palette_Fade_Info).w, D0                    ; $FFFFF626
                adda.w  D0, A0
                move.b  (Palette_Fade_Count).w, D0                   ; $FFFFF627
Offset_0x002E2E:
                bsr.s   Pal_DecColor                           ; Offset_0x002E36
                dbra    D0, Offset_0x002E2E
                rts
Pal_DecColor:                                                  ; Offset_0x002E36
                move.w  (A0), D2
                beq.s   Pal_NoDec                              ; Offset_0x002E62
Pal_DecRed:                 
                move.w  D2, D1
                andi.w  #$000E, D1
                beq.s   Pal_DecGreen                           ; Offset_0x002E46
                subq.w  #$02, (A0)+
                rts
Pal_DecGreen:                                                  ; Offset_0x002E46
                move.w  D2, D1
                andi.w  #$00E0, D1
                beq.s   Pal_DecBlue                            ; Offset_0x002E54
                subi.w  #$0020, (A0)+
                rts
Pal_DecBlue:                                                   ; Offset_0x002E54
                move.w  D2, D1
                andi.w  #$0E00, D1
                beq.s   Pal_NoDec                              ; Offset_0x002E62
                subi.w  #$0200, (A0)+
                rts
Pal_NoDec:                                                     ; Offset_0x002E62
                addq.w  #$02, A0
                rts              
;-------------------------------------------------------------------------------
Pal_MakeWhite: ; Usado pelo Special Stage                      ; Offset_0x002E66
                move.w  #$003F, (Palette_Fade_Info).w                ; $FFFFF626
                moveq   #$00, D0
                lea     (Palette_Buffer).w, A0                       ; $FFFFED00
                move.b  (Palette_Fade_Info).w, D0                    ; $FFFFF626
                adda.w  D0, A0
                move.w  #$0EEE, D1
                move.b  (Palette_Fade_Count).w, D0                   ; $FFFFF627
Offset_0x002E80:
                move.w  D1, (A0)+
                dbra    D0, Offset_0x002E80
                move.w  #$0015, D4
Offset_0x002E8A:
                move.b  #$12, (VBlank_Index).w                       ; $FFFFF62A
                bsr     Wait_For_VSync                         ; Offset_0x001AEE
                bsr.s   Pal_WhiteToBlack                       ; Offset_0x002EA0
                bsr     RunPLC_RAM                                 ; Offset_0x001556
                dbra    D4, Offset_0x002E8A
                rts
;-------------------------------------------------------------------------------                
Pal_WhiteToBlack:                                              ; Offset_0x002EA0
                moveq   #$00, D0
                lea     (Palette_Buffer).w, A0                       ; $FFFFED00
                lea     (Palette_Data_Target).w, A1                  ; $FFFFED80
                move.b  (Palette_Fade_Info).w, D0                    ; $FFFFF626
                adda.w  D0, A0
                adda.w  D0, A1
                move.b  (Palette_Fade_Count).w, D0                   ; $FFFFF627
Offset_0x002EB6:
                bsr.s   Pal_DecColor_2                         ; Offset_0x002EE0
                dbra    D0, Offset_0x002EB6
                tst.b   (Water_Level_Flag).w                         ; $FFFFF730
                beq.s   Offset_0x002EDE
                moveq   #$00, D0
                lea     (Palette_Underwater_Buffer).w, A0            ; $FFFFF080
                lea     (Palette_Underwater_Target).w, A1            ; $FFFFF000
                move.b  (Palette_Fade_Info).w, D0                    ; $FFFFF626
                adda.w  D0, A0
                adda.w  D0, A1
                move.b  (Palette_Fade_Count).w, D0                   ; $FFFFF627
Offset_0x002ED8:
                bsr.s   Pal_DecColor_2                         ; Offset_0x002EE0
                dbra    D0, Offset_0x002ED8
Offset_0x002EDE:
                rts
;-------------------------------------------------------------------------------  
Pal_DecColor_2:                                                ; Offset_0x002EE0
                move.w  (A1)+, D2
                move.w  (A0), D3
                cmp.w   D2, D3
                beq.s   Pal_NoDec_2                            ; Offset_0x002F0C
Pal_DecBlue_2:                
                move.w  D3, D1
                subi.w  #$0200, D1
                bcs.s   Pal_DecGreen_2                         ; Offset_0x002EF8
                cmp.w   D2, D1
                bcs.s   Pal_DecGreen_2                         ; Offset_0x002EF8
                move.w  D1, (A0)+
                rts
Pal_DecGreen_2:                                                ; Offset_0x002EF8
                move.w  D3, D1
                subi.w  #$0020, D1
                bcs.s   Pal_DecRed_2                           ; Offset_0x002F08
                cmp.w   D2, D1
                bcs.s   Pal_DecRed_2                           ; Offset_0x002F08
                move.w  D1, (A0)+
                rts
Pal_DecRed_2:                                                  ; Offset_0x002F08
                subq.w  #$02, (A0)+
                rts
Pal_NoDec_2:                                                   ; Offset_0x002F0C
                addq.w  #$02, A0
                rts   
;-------------------------------------------------------------------------------
Pal_MakeFlash:  ; Usado pelo Special Stage                     ; Offset_0x002F10
                move.w  #$003F, (Palette_Fade_Info).w                ; $FFFFF626
                move.w  #$0015, D4
Offset_0x002F1A:
                move.b  #$12, (VBlank_Index).w                       ; $FFFFF62A
                bsr     Wait_For_VSync                         ; Offset_0x001AEE
                bsr.s   Pal_ToWhite                            ; Offset_0x002F30
                bsr     RunPLC_RAM                                 ; Offset_0x001556
                dbra    D4, Offset_0x002F1A
                rts
Pal_ToWhite:                                                   ; Offset_0x002F30
                moveq   #$00, D0
                lea     (Palette_Buffer).w, A0                       ; $FFFFED00
                move.b  (Palette_Fade_Info).w, D0                    ; $FFFFF626
                adda.w  D0, A0
                move.b  (Palette_Fade_Count).w, D0                   ; $FFFFF627
Offset_0x002F40:
                bsr.s   Pal_AddColor_2                         ; Offset_0x002F5E
                dbra    D0, Offset_0x002F40
                moveq   #$00, D0
                lea     (Palette_Underwater_Buffer).w, A0            ; $FFFFF080
                move.b  (Palette_Fade_Info).w, D0                    ; $FFFFF626
                adda.w  D0, A0
                move.b  (Palette_Fade_Count).w, D0                   ; $FFFFF627
Offset_0x002F56:
                bsr.s   Pal_AddColor_2                         ; Offset_0x002F5E
                dbra    D0, Offset_0x002F56
                rts
Pal_AddColor_2:                                                ; Offset_0x002F5E
                move.w  (A0), D2
                cmpi.w  #$0EEE, D2
                beq.s   Pal_NoAdd_2                            ; Offset_0x002F9A
Pal_AddRed_2:                
                move.w  D2, D1
                andi.w  #$000E, D1
                cmpi.w  #$000E, D1
                beq.s   Pal_AddGreen_2                         ; Offset_0x002F76
                addq.w  #$02, (A0)+
                rts
Pal_AddGreen_2:                                                ; Offset_0x002F76
                move.w  D2, D1
                andi.w  #$00E0, D1
                cmpi.w  #$00E0, D1
                beq.s   Pal_AddBlue_2                          ; Offset_0x002F88
                addi.w  #$0020, (A0)+
                rts
Pal_AddBlue_2:                                                 ; Offset_0x002F88
                move.w  D2, D1
                andi.w  #$0E00, D1
                cmpi.w  #$0E00, D1
                beq.s   Pal_NoAdd_2                            ; Offset_0x002F9A
                addi.w  #$0200, (A0)+
                rts
Pal_NoAdd_2:                                                   ; Offset_0x002F9A
                addq.w  #$02, A0
                rts                                                                              
;===============================================================================
; Rotinas para escurecer / clarear a tela progressivamente
; <<<-
;===============================================================================

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutines to load the palette for various circumstances
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x002F9E: PalLoad1:
PalLoad_ForFade:
		lea	(PalPointers).l,a1
		lsl.w	#3,d0
		adda.w	d0,a1
		move.l	(a1)+,a2
		move.w	(a1)+,a3
		adda.w	#$80,a3
		move.w	(a1)+,d7
; Offset_0x002FB2: PalLoad1_Loop:
@loop:
		move.l	(a2)+,(a3)+
		dbf	d7,@loop
		rts
; End of function PalLoad_ForFade

; ---------------------------------------------------------------------------
; Offset_0x002FBA: PalLoad2:
PalLoad_Now:
		lea	(PalPointers).l,a1
		lsl.w	#3,d0
		adda.w	d0,a1
		move.l	(a1)+,a2
		move.w	(a1)+,a3
		move.w	(a1)+,d7
; Offset_0x002FCA: PalLoad2_Loop:
@loop:
		move.l	(a2)+,(a3)+
		dbf	d7,@loop
		rts
; End of function PalLoad_Now

; ---------------------------------------------------------------------------
; Offset_0x002FD2: PalLoad3_Water:
PalLoad_Water_Now:
		lea	(PalPointers).l,a1
		lsl.w	#3,d0
		adda.w	d0,a1
		move.l	(a1)+,a2
		move.w	(a1)+,a3
		adda.w	#$380,a3
		move.w	(a1)+,d7
; Offset_0x02FE6:
PalLoad3_Loop:
		move.l	(a2)+,(a3)+
		dbf	d7,PalLoad3_Loop
		rts
; End of function PalLoad_Water_Now

; ---------------------------------------------------------------------------
; Offset_0x002FEE: PalLoad4_Water:
PalLoad_Water_ForFade:
		lea	(PalPointers).l,a1
		lsl.w	#3,d0
		adda.w	d0,a1
		move.l	(a1)+,a2
		move.w	(a1)+,a3
		adda.w	#$300,a3
		move.w	(a1)+,d7
; Offset_0x003002:
PalLoad4_Loop:
		move.l	(a2)+,(a3)+
		dbf	d7,PalLoad4_Loop
		rts
; End of function PalLoad_Water_ForFade

;===============================================================================
; Logo da SEGA
; ->>>
;=============================================================================== 
Sega_Screen:                                                   ; Offset_0x00300A
                moveq   #Stop_Sound, D0                                   ; -$1F
                bsr     Play_Music                             ; Offset_0x001176
                bsr     ClearPLC                               ; Offset_0x001548
                bsr     Pal_FadeFrom                           ; Offset_0x002DE8
                lea     (Miles_Control_Vars).w, A1                   ; $FFFFF700
                moveq   #$00, D0
                move.w  #$003F, D1
Offset_0x003022:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x003022
                lea     (Obj_Memory_Address).w, A1                   ; $FFFFB000
                moveq   #$00, D0
                move.w  #$07FF, D1
Offset_0x003032:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x003032
                lea     (VDP_Control_Port), A6                       ; $00C00004
                move.w  #$8004, (A6)
                move.w  #$8230, (A6)
                move.w  #$8405, (A6)
                move.w  #$8700, (A6)
                move.w  #$8B03, (A6)
                move.w  #$8C81, (A6)
                move.w  #$9003, (A6)
                clr.b   (Underwater_Flag).w                          ; $FFFFF64E
                clr.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                move    #$2700, SR
                move.w  (VDP_Register_1_Command).w, D0               ; $FFFFF60E
                andi.b  #$BF, D0
                move.w  D0, (VDP_Control_Port)                       ; $00C00004
                bsr     ClearScreen                            ; Offset_0x001002
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.w  #$8F01, (A5)
                move.l  #$941F93FF, (A5)
                move.w  #$9780, (A5)
                move.l  #$40000083, (A5)
                move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
Offset_0x00309A:
                move.w  (A5), D1
                btst    #$01, D1
                bne.s   Offset_0x00309A
                move.w  #$8F02, (A5)
                move.l  #$40200000, (VDP_Control_Port)               ; $00C00004
                lea     (Art_SEGA), A0                         ; Offset_0x10417A
                bsr     NemesisDec                             ; Offset_0x001390
                move.l  #$50000000, (VDP_Control_Port)               ; $00C00004
                lea     (Art_SEGA_Some_Blocks), A0             ; Offset_0x1045FA
                bsr     NemesisDec                             ; Offset_0x001390
                lea     (M68K_RAM_Start), A1                         ; $FFFF0000
                lea     (SEGA_Mappings), A0                    ; Offset_0x104612
                move.w  #$0000, D0
                bsr     EnigmaDec                              ; Offset_0x00168A
                lea     (M68K_RAM_Start), A1                         ; $FFFF0000
                move.l  #$60000002, D0
                moveq   #$27, D1
                moveq   #$1B, D2
                bsr     Offset_0x0031B4
                tst.b   (Hardware_Id).w                              ; $FFFFFFF8
                bmi.s   Offset_0x00310C
                lea     (Obj_02_Mem_Address).w, A1                   ; $FFFFB094
                move.l  #Obj_S2_0xB1_Sonic_Sega_Logo, (A1)     ; Offset_0x0346BC
                move.b  #$4E, Obj_Subtype(A1)                            ; $002C
Offset_0x00310C:
                moveq   #$00, D0
                bsr     PalLoad_Now                               ; Offset_0x002FBA
                move.w  #$FFF6, (Palette_Cycle_Count_0).w            ; $FFFFF632
                move.w  #$0000, (Palette_Cycle_Count_1).w            ; $FFFFF634
                move.w  #$0000, (VBlank_Subroutine).w                ; $FFFFF662
                move.w  #$0000, (PalCycle_Done_Flag).w               ; $FFFFF660
                lea     (Obj_Player_Two).w, A1                       ; $FFFFB04A
                move.l  #Obj_S2_0xB0_Sonic_Sega_Logo, (A1)     ; Offset_0x034488
                move.b  #$4C, Obj_Subtype(A1)                            ; $002C
                move.w  #$00F0, (Demo_Timer).w                       ; $FFFFF614
                jsr     (Init_Sprite_Table)                    ; Offset_0x011042
                move.w  (VDP_Register_1_Command).w, D0               ; $FFFFF60E
                ori.b   #$40, D0
                move.w  D0, (VDP_Control_Port)                       ; $00C00004
Offset_0x003154:
                move.b  #$02, (VBlank_Index).w                       ; $FFFFF62A
                bsr     Wait_For_VSync                         ; Offset_0x001AEE
                jsr     (RunObjects)                         ; Offset_0x0110AE
                jsr     (Build_Sprites)                        ; Offset_0x011296
                tst.b   (PalCycle_Done_Flag).w                       ; $FFFFF660
                beq.s   Offset_0x003154
                moveq   #Sega_PCM, D0                                     ; -$01
                bsr     Play_Music                             ; Offset_0x001176
                move.b  #$02, (VBlank_Index).w                       ; $FFFFF62A
                bsr     Wait_For_VSync                         ; Offset_0x001AEE
                move.w  #$00B4, (Demo_Timer).w                       ; $FFFFF614
Offset_0x003186:
                move.b  #$14, (VBlank_Index).w                       ; $FFFFF62A
                bsr     Wait_For_VSync                         ; Offset_0x001AEE
                tst.w   (Demo_Timer).w                               ; $FFFFF614
                beq.s   Offset_0x0031A4
                move.b  (Control_Ports_Buffer_Data+$0001).w, D0      ; $FFFFF605
                or.b    (Control_Ports_Buffer_Data+$0003).w, D0      ; $FFFFF607
                andi.b  #$80, D0
                beq.s   Offset_0x003186
Offset_0x0031A4:
                clr.w   (PalCycle_Done_Flag).w                       ; $FFFFF660
                clr.w   (VBlank_Subroutine).w                        ; $FFFFF662
                move.b  #gm_TitleScreen, (Game_Mode).w          ; $04, $FFFFF600
                rts
Offset_0x0031B4:
                lea     (VDP_Data_Port), A6                          ; $00C00000
                move.l  #$01000000, D4
Offset_0x0031C0:
                move.l  D0, $0004(A6)
                move.w  D1, D3
Offset_0x0031C6:
                move.w  (A1)+, (A6)
                dbra    D3, Offset_0x0031C6
                add.l   D4, D0
                dbra    D2, Offset_0x0031C0
                rts    
;===============================================================================
; Logo da SEGA
; <<<-
;===============================================================================

; ===========================================================================
; Offset_0x0031D4:
TitleScreen:
		moveq	#Volume_Down,d0
		bsr.w	Play_Music
		bsr.w	ClearPLC
		bsr.w	Pal_FadeFrom
		move	#$2700,sr
		lea	(VDP_Control_Port),a6
		move.w	#$8004,(a6)
		move.w	#$8230,(a6)
		move.w	#$8407,(a6)
		move.w	#$9011,(a6)
		move.w	#$9200,(a6)
		move.w	#$8B03,(a6)
		move.w	#$8720,(a6)
		clr.b	(Underwater_Flag).w
		move.w	#$8C81,(a6)
		bsr.w	ClearScreen
		lea	(Sprite_Table_Input).w,a1
		moveq	#0,d0
		move.w	#$FF,d1

Offset_0x00321E:
		move.l	d0,(a1)+
		dbf	d1, Offset_0x00321E
		lea	(Obj_Memory_Address).w,a1
		moveq	#0,d0
		move.w	#$7FF,d1

Offset_0x00322E:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x00322E
                lea     (Miles_Control_Vars).w, A1                   ; $FFFFF700
                moveq   #$00, D0
                move.w  #$003F, D1

Offset_0x00323E:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x00323E
                lea     (Camera_RAM).w, A1                           ; $FFFFEE00
                moveq   #$00, D0
                move.w  #$003F, D1

Offset_0x00324E:
		move.l	d0,(a1)+
		dbf	d1, Offset_0x00324E
		jsr	(Init_Sprite_Table).l
		lea	(Palette_Buffer).w,a1
		moveq	#0,d0
		move.w	#$3F,d1

Offset_0x003264:
		move.l	d0,(a1)+
		dbf	d1, Offset_0x003264

		move.b	#0,(Saved_Level_Flag).w
		move.b	#0,(Saved_Level_Flag_P2).w
		move.w	#0,(Debug_Mode_Flag_Index).w
		move.w	#0,(Auto_Control_Player_Flag).w
		move.w	#0,(Palette_Cycle_Count_1).w
		move.w	#0,(Two_Player_Flag).w
		move.b	#0,(Title_Card_Flag).w
		move.b	#0,(Debug_Mode_Active).w
		move.w	#0,(Two_Player_Flag).w
		move.w	#$167,(Demo_Timer).w
		clr.w	(DMA_Buffer_List).w
		move.l	#DMA_Buffer_List,(DMA_Buffer_List_End).w

		lea	(TitleBanner_Frames).l,a2
		move.l	(a2)+,d0
		andi.l	#$FFFFFF,d0
		move.l	d0,a0
		lea	(M68K_RAM_Start),a1
		bsr.w	KosinskiDec
		move.w	a1,d3
		lsr.w	#1,d3
		move.l	#M68K_RAM_Start,d1
		move.w	#$8000,d2
		andi.l	#$FFFFFF,d1
		jsr	(DMA_68KtoVRAM).l
		move.l	(a2)+,a0
		lea	(Palette_Row_3_Offset).w,a1
		moveq	#7,d0

Offset_0x0032EE:
		move.l	(a0)+,(a1)+
		dbf	D0, Offset_0x0032EE
		lea	(M68K_RAM_Start+$4000).l,a1
		moveq	#0,d0
		move.w	#$4FF,d1

Offset_0x003300:
		move.l	d0,(a1)+
		dbf	d1,Offset_0x003300
		lea	(M68K_RAM_Start+$4000),a1
		move.l	(a2)+,a0
		move.w	#$6400,d0
		bsr.w	EnigmaDec
		lea	(M68K_RAM_Start+$4000),a1
		move.l	#$40000003,d0
		moveq	#$27,d1
		moveq	#$3F,d2
		jsr	(ShowVDPGraphics).l

		move.b	#2,(Title_Screen_Animate_Delay).w
		move.w	#$FFA0,(Vertical_Scroll_Value).w
		move.w	#$400,(Vertical_Scrolling).w
		move.l	#$FFA00000,(Camera_Y).w
		move.b	#4,(VBlank_Index).w
		bsr.w	Wait_For_VSync
		move.b	#$FF,(Title_Screen_Animate_Buffer).w
		move.b	#1,(Title_Screen_Animate_Delay).w
		move.w	#1,(Title_Screen_Animate_Frame).w
		moveq	#0,d0
		bsr.w	TitleSonic_LoadFrame
		move.b	#4,(VBlank_Index).w
		bsr.w	Wait_For_VSync
		moveq	#0,d0
		bsr.w	LoadPLC2

		move.w	#0,(Secret_Code_Input_Entries).w
		move.w	#0,(Secret_Code_Input_Entries_2).w
		move.w	#$101,(Level_Select_Flag).w		; enable level select without cheats
		nop
		nop
		nop
		moveq	#Title_Screen_Snd,d0
		bsr.w	Play_Music
		move.w	(VDP_Register_1_Command).w,d0
		ori.b	#$40,d0
		move.w	d0,(VDP_Control_Port)
; Offset_0x0033A4:
TitleScreen_Loop:
		move.b	#4,(VBlank_Index).w
		bsr.w	Wait_For_VSync
		bsr.w	Iterate_TitleSonicFrame
		jsr	(RunObjects).l
		jsr	(Build_Sprites).l
		bsr.w	RunPLC_RAM
		bsr.w	Secret_Codes_Test
		tst.w	(Demo_Timer).w
		beq.w	Offset_0x0034D2
		move.b	(Control_Ports_Buffer_Data+1).w,d0
		or.b	(Control_Ports_Buffer_Data+3).w,d0
		andi.b	#$80,d0
		beq.w	TitleScreen_Loop
		move.b	#gm_PlayMode, (Game_Mode).w
		move.b	#3,(Life_count).w
		move.b	#3,(Life_Count_P2).w
		moveq	#0,d0
		move.w	d0,(Ring_count).w
		move.l	d0,(Timer).w
		move.l	d0,(Score_Count_Address).w
		move.w	d0,(Ring_Count_Address_P2).w
		move.l	d0,(Time_Count_Address_P2).w
		move.l	d0,(Score_Count_Address_P2).w
		move.b	d0,(Continue_count).w
		move.l	#$1388,(Next_Extra_Life_Score).w
		move.l	#$1388,(Next_Extra_Life_Score_P2).w
		moveq	#Volume_Down,d0
		bsr.w	Play_Music
		; leftover from Sonic 2's title menu
		moveq	#0,d0
		move.b	(Title_Screen_Menu_Cursor).w,d0
		bne.s	Title_Screen_Check_2_Player_Vs
		moveq	#0,d0
		move.w	d0,(Two_Player_Flag_2).w
		move.w	d0,(Two_Player_Flag).w
		move.w	d0,(Current_ZoneAndAct).w
		move.w	d0,(Apparent_ZoneAndAct).w
		move.w	#AIz_Act_1,(Current_ZoneAndAct).w
		move.w	#AIz_Act_1,(Apparent_ZoneAndAct).w
		tst.b	(Level_Select_Flag).w
		beq.s	TitleScreen_ClrSpecStg
		move.b	#gm_Level_Select_Menu, (Game_Mode).w
; TitleScreen_SonicAndTails:
		btst	#Btn_A,(Control_Ports_Buffer_Data).w
		beq.s	TitleScreen_SonicAlone
		move.w	#Sonic_And_Miles, (Player_Select_Flag).w
		rts
; ---------------------------------------------------------------------------
; Offset_0x003466:
TitleScreen_SonicAlone:
		btst	#Btn_B,(Control_Ports_Buffer_Data).w
		beq.s	TitleScreen_TailsAlone
		move.w	#Sonic_Alone,(Player_Select_Flag).w
		rts
; ---------------------------------------------------------------------------
; Offset_0x003476:
TitleScreen_TailsAlone:
		btst	#Btn_C,(Control_Ports_Buffer_Data).w
		beq.s	Offset_0x003486
		move.w	#Miles_Alone,(Player_Select_Flag).w
		rts

Offset_0x003486:
		rts
; ---------------------------------------------------------------------------
; Offset_0x003488:
TitleScreen_ClrSpecStg:
		move.w	d0,(Current_SpecialStage).w
		move.w	d0,(SS_Completed_Flag).w
		move.l	d0,(Emerald_Collected_Flag_List).w
		move.l	d0,(Emerald_Collected_Flag_List+4).w
		rts
; ===========================================================================
; Leftovers from Sonic 2
; Offset_0x00349A:
Title_Screen_Check_2_Player_Vs:
		subq.b	#1,d0
		bne.s	Title_Screen_Load_Options_Menu
		moveq	#1,d1
		move.w	d1,(Two_Player_Flag_2).w
		move.w	d1,(Two_Player_Flag).w
		moveq	#0,d0
		move.w	d0,(SS_Completed_Flag).w
		move.l	d0,(Emerald_Collected_Flag_List).w
		move.l	d0,(Emerald_Collected_Flag_List+4).w
		move.b	#gm_S2_Versus_Mode_Menu,(Game_Mode).w
		move.b	#0,(Level_Id_2P).w
		rts
; ---------------------------------------------------------------------------
; Offset_0x0034C4:
Title_Screen_Load_Options_Menu:
		move.b	#gm_S2_Options_Menu, (Game_Mode).w
		move.b	#0,(Options_Menu_Cursor).w
		rts
; ===========================================================================

Offset_0x0034D2:
                moveq   #Volume_Down, D0                                  ; -$20
                bsr     Play_Music                             ; Offset_0x001176
                move.w  (Demo_Sequence_Idx).w, D0                    ; $FFFFFFF2
                andi.w  #$0007, D0
                add.w   D0, D0
                move.w  Demo_Mode_Level_Array(PC, D0), D0      ; Offset_0x003544
                move.w  D0, (Current_ZoneAndAct).w                             ; $FFFFFE10
                move.w  D0, (Apparent_ZoneAndAct).w                           ; $FFFFEE54
                addq.w  #$01, (Demo_Sequence_Idx).w                  ; $FFFFFFF2
                cmpi.w  #$0004, (Demo_Sequence_Idx).w                ; $FFFFFFF2
                bcs.s   Offset_0x003500
                move.w  #$0000, (Demo_Sequence_Idx).w                ; $FFFFFFF2
Offset_0x003500:
                move.w  #$0001, (Auto_Control_Player_Flag).w         ; $FFFFFFF0
                move.b  #gm_DemoMode, (Game_Mode).w             ; $08, $FFFFF600
                move.b  #$03, (Life_count).w                         ; $FFFFFE12
                move.b  #$03, (Life_Count_P2).w                      ; $FFFFFEC6
                moveq   #$00, D0
                move.w  D0, (Ring_count).w                   ; $FFFFFE20
                move.l  D0, (Timer).w                   ; $FFFFFE22
                move.l  D0, (Score_Count_Address).w                  ; $FFFFFE26
                move.w  D0, (Ring_Count_Address_P2).w                ; $FFFFFED0
                move.l  D0, (Time_Count_Address_P2).w                ; $FFFFFED2
                move.l  D0, (Score_Count_Address_P2).w               ; $FFFFFED6
                move.l  #$00001388, (Next_Extra_Life_Score).w        ; $FFFFFFC0
                move.l  #$00001388, (Next_Extra_Life_Score_P2).w     ; $FFFFFFC4
                rts 
;-------------------------------------------------------------------------------
Demo_Mode_Level_Array:                                         ; Offset_0x003544
                dc.w    AIz_Act_1                                        ; $0000
                dc.w    AIz_Act_1                                        ; $0000
                dc.w    AIz_Act_1                                        ; $0000
                dc.w    AIz_Act_1                                        ; $0000
;-------------------------------------------------------------------------------                
S2_Demo_Mode_Level_Array:                                      ; Offset_0x00354C
                dc.w    S2_EHz_Act_1  ; Emerald Hill S2 Left over        ; $0000
                dc.w    S2_CPz_Act_1  ; Chemical Plant S2 Left over      ; $0D00
                dc.w    S2_ARz_Act_1  ; Aquatic Ruin Left over           ; $0F00 
                dc.w    S2_CNz_Act_1  ; Casino Night S2 Left over        ; $0C00     
;-------------------------------------------------------------------------------
Secret_Codes_Test:                                             ; Offset_0x003554
                lea     (Secret_Code_Sequence), A0             ; Offset_0x003592
                move.w  (Secret_Code_Input_Entries).w, D0            ; $FFFFFFD4
                adda.w  D0, A0
                move.b  (Control_Ports_Buffer_Data+$0001).w, D0      ; $FFFFF605
                andi.b  #$0F, D0
                beq.s   Offset_0x003590
                cmp.b   (A0), D0
                bne.s   Code_NoMatch                           ; Offset_0x00358A
                addq.w  #$01, (Secret_Code_Input_Entries).w          ; $FFFFFFD4
                tst.b   $0001(A0)
                bne.s   Offset_0x003590
                move.w  #$0101, (Level_Select_Flag).w                ; $FFFFFFD0
                move.w  #$0101, (Debug_Mode_Flag).w                  ; $FFFFFFD2
                moveq   #Ring_Sfx, D0                                      ; $32
                bsr     Play_Music                             ; Offset_0x001176
Code_NoMatch:                                                  ; Offset_0x00358A
                move.w  #$0000, (Secret_Code_Input_Entries).w        ; $FFFFFFD4
Offset_0x003590:
                rts   
;-------------------------------------------------------------------------------                    
Secret_Code_Sequence:                                          ; Offset_0x003592
                dc.b    Btn_Up+$01                                         ; $01
                dc.b    Btn_Up+$01                                         ; $01
                dc.b    Btn_Down+$01                                       ; $02
                dc.b    Btn_Down+$01                                       ; $02
                dc.b    Btn_Up+$01                                         ; $01
                dc.b    Btn_Up+$01                                         ; $01
                dc.b    $00, $00          
;-------------------------------------------------------------------------------
VInt_Title_Screen:                                             ; Offset_0x00359A
                tst.b   (Title_Screen_Animate_Delay).w               ; $FFFFFFBD
                bne.s   Offset_0x0035E4
                move.b  #$02, (Title_Screen_Animate_Delay).w         ; $FFFFFFBD
                cmpi.w  #$0010, (Title_Screen_Animate_Frame).w       ; $FFFFFFBE
                bcs.s   Offset_0x0035B4
                move.b  #$02, (Title_Screen_Animate_Delay).w         ; $FFFFFFBD
Offset_0x0035B4:
                lea     (Palette_Data_Target+$40).w, A0              ; $FFFFEDC0
                lea     (Palette_Row_2_Offset).w, A1                 ; $FFFFED40
                moveq   #$07, D0
Offset_0x0035BE:
                move.l  (A0)+, (A1)+
                dbra    D0, Offset_0x0035BE
                eori.b  #$FF, (Title_Screen_Animate_Buffer).w        ; $FFFFFFBC
                tst.b   (Title_Screen_Animate_Buffer).w              ; $FFFFFFBC
                beq.s   Offset_0x0035DA
                move.w  #$8407, (VDP_Control_Port)                   ; $00C00004
                rts
Offset_0x0035DA:
                move.w  #$8405, (VDP_Control_Port)                   ; $00C00004
                rts
Offset_0x0035E4:
                subq.b  #$01, (Title_Screen_Animate_Delay).w         ; $FFFFFFBD
                rts
; ==============================================================================
; Offset_0x0035EA:
Iterate_TitleSonicFrame:
		cmpi.b	#1,(Title_Screen_Animate_Delay).w
		bne.s	Offset_0x003606
		move.w	(Title_Screen_Animate_Frame).w,d0
		move.b	SonicFrameIndex(pc,d0.w),d0
		ext.w	d0
		bmi.s	Offset_0x003608
		bsr.w	TitleSonic_LoadFrame
		addq.w	#1,(Title_Screen_Animate_Frame).w

Offset_0x003606:
		rts
;-------------------------------------------------------------------------------

Offset_0x003608:
		move.b	#2,(Title_Screen_Animate_Delay).w
		bra.w	TitleBanner_Raise
; ==============================================================================
; Offset_0x003612:
SonicFrameIndex:
		dc.b	$2A, $FF, $00, $01, $02, $03, $00, $01
		dc.b	$02, $03, $04, $05, $06, $07, $08, $09
		dc.b	$0A, $0B, $0C, $0D, $0E, $0F, $10, $11
		dc.b	$12, $13, $14, $15, $16, $17, $18, $19
		dc.b	$1A, $1B, $1C, $1D, $1E, $1F, $20, $21
		dc.b	$22, $23, $24, $25, $26, $27, $28, $29
		dc.b	$2A, $FF
		even
; ===========================================================================
; Lift the banner up; this is still in the final, unused at $3AB4
; Offset_0x003644:
TitleBanner_Raise:
		move.b	(Title_Screen_Animate_Buffer).w,d2
		cmpi.b	#1,d2
		beq.s	Offset_0x00369C
		move.w	(Vertical_Scrolling).w,d0
		ext.l	d0
		lsl.l	#8,d0
		add.l	d0,(Camera_Y).w
		move.w	(Camera_Y).w,d0
		move.w	d0,(Vertical_Scroll_Value).w
		move.b	#0,(Title_Screen_Animate_Buffer).w
		move.w	#$40,d1
		cmpi.w	#0,d0
		blt.s	Offset_0x00368E
		bne.s	Offset_0x003684
		cmpi.w	#$FFA5,(Vertical_Scrolling).w
		bne.s	Offset_0x003684
		move.b	#1,(Title_Screen_Animate_Buffer).w
		bra.s	Offset_0x00369C
; ---------------------------------------------------------------------------

Offset_0x003684:
		move.b	#$FF,(Title_Screen_Animate_Buffer).w
		move.w	#$FFC0,d1

Offset_0x00368E:
		add.w	d1,(Vertical_Scrolling).w
		cmp.b	(Title_Screen_Animate_Buffer).w,d2
		beq.s	Offset_0x00369C
		asr.w	(Vertical_Scrolling).w

Offset_0x00369C:
		rts
; End of function Iterate_TitleSonicFrame

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to animate Sonic on the title screen
; Effectively useless at this point since there's only one frame
; ---------------------------------------------------------------------------

; Offset_0x00369E:
TitleSonic_LoadFrame:
		add.w	d0,d0
		add.w	d0,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		lea	(TitleSonic_Frames).l,a2
		lea	(a2,d0.w),a2
		move.l	(a2)+,d0
		andi.l	#$FFFFFF,d0
		move.l	d0,a0
		lea	(M68K_RAM_Start).l,a1
		bsr.w	KosinskiDec
		move.w	a1,d3
		lsr.w	#1,d3
		move.l	#M68K_RAM_Start,d1
		move.w	#0,d2
		tst.b	(Title_Screen_Animate_Buffer).w
		beq.s	Offset_0x0036DE
		move.w	#$4000,d2

Offset_0x0036DE:
		andi.l	#$FFFFFF,d1
		jsr	(DMA_68KtoVRAM).l
		move.l	(a2)+,a0
		lea	(Palette_Data_Target+$40).w,a1
		moveq	#7,d0

Offset_0x0036F2:
		move.l	(a0)+,(a1)+
		dbf	d0,Offset_0x0036F2
		tst.b	(Title_Screen_Animate_Buffer).w
		bne.s	Offset_0x00372E
		lea	(M68K_RAM_Start+$4000).l,a1
		move.l	(a2)+,a0
		move.w	#$4000,d0
		bsr.w	EnigmaDec
		move	#$2700,sr
		lea	(M68K_RAM_Start+$4000).l,a1
		move.l	#$60000003,d0
		moveq	#$27,d1
		moveq	#$1B,d2
		jsr	(ShowVDPGraphics).l
		move	#$2300,sr
		rts
; ---------------------------------------------------------------------------

Offset_0x00372E:
		lea	(M68K_RAM_Start+$4000).l,a1
		move.l	(a2)+,a0
		move.w	#$4200,d0
		bsr.w	EnigmaDec
		move	#$2700,sr
		lea	(M68K_RAM_Start+$4000).l,a1
		move.l	#$60000002,d0
		moveq	#$27,d1
		moveq	#$1B,d2
		jsr	(ShowVDPGraphics).l
		move	#$2300,sr
		rts
; End of function TitleSonic_LoadFrame

; ===========================================================================
; Offset_0x00375E: Title_Screen_Sonic_3_Data:
TitleBanner_Frames:
		dc.l	Art_Title_Screen_Sonic_3
		dc.l	Pal_Title_Screen_Sonic_3
		dc.l	Map_Title_Screen_Sonic_3
; ===========================================================================
; Offset_0x00376A: Title_Screen_Sonic_Data:
TitleSonic_Frames:
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic                                                                                       

;===============================================================================
; Modo de jogo ou demonstra��o das fases 
; ->>>
;===============================================================================
PlayList:                                                      ; Offset_0x00396E
                dc.b    Angel_Island_1_Snd                                 ; $01
                dc.b    Angel_Island_2_Snd                                 ; $02
                dc.b    Hydrocity_1_Snd                                    ; $03
                dc.b    Hydrocity_2_Snd                                    ; $04
                dc.b    Marble_Garden_1_Snd                                ; $05
                dc.b    Marble_Garden_2_Snd                                ; $06
                dc.b    Carnival_Night_1_Snd                               ; $07
                dc.b    Carnival_Night_2_Snd                               ; $08
                dc.b    Flying_Battery_1_Snd                               ; $09
                dc.b    Flying_Battery_2_Snd                               ; $0A
                dc.b    Icecap_1_Snd                                       ; $0B
                dc.b    Icecap_2_Snd                                       ; $0C
                dc.b    Launch_Base_1_Snd                                  ; $0D
                dc.b    Launch_Base_2_Snd                                  ; $0E
                dc.b    Mushroom_Valley_1_Snd                              ; $0F
                dc.b    Mushroom_Valley_2_Snd                              ; $10
                dc.b    Sandopolis_1_Snd                                   ; $11
                dc.b    Sandopolis_2_Snd                                   ; $12
                dc.b    Lava_Reef_1_Snd                                    ; $13
                dc.b    Lava_Reef_2_Snd                                    ; $14
                dc.b    Sky_Sanctuary_Snd                                  ; $15
                dc.b    Death_Egg_1_Snd                                    ; $16
                dc.b    Death_Egg_2_Snd                                    ; $17
                dc.b    Death_Egg_2_Snd                                    ; $17
                dc.b    The_Doomsday_Snd                                   ; $1A
                dc.b    The_Doomsday_Snd                                   ; $1A
                dc.b    Special_Stage_Snd                                  ; $1C
                dc.b    Special_Stage_Snd                                  ; $1C
                dc.b    Azure_Lake_Snd                                     ; $20
                dc.b    Azure_Lake_Snd                                     ; $20
                dc.b    Balloon_Park_Snd                                   ; $21
                dc.b    Balloon_Park_Snd                                   ; $21
                dc.b    Desert_Palace_Snd                                  ; $22
                dc.b    Desert_Palace_Snd                                  ; $22
                dc.b    Chrome_Gadget_Snd                                  ; $23
                dc.b    Chrome_Gadget_Snd                                  ; $23
                dc.b    Endless_Mine_Snd                                   ; $24
                dc.b    Endless_Mine_Snd                                   ; $24
                dc.b    Special_Stage_Snd                                  ; $1C
                dc.b    Special_Stage_Snd                                  ; $1C
                dc.b    BS_Slot_Machine_Snd                                ; $1D
                dc.b    BS_Slot_Machine_Snd                                ; $1D
                dc.b    BS_Gumball_Machine_Snd                             ; $1E
                dc.b    BS_Gumball_Machine_Snd                             ; $1E
                dc.b    Special_Stage_Snd                                  ; $1C
                dc.b    Special_Stage_Snd                                  ; $1C
                dc.b    Special_Stage_Snd                                  ; $1C
                dc.b    Special_Stage_Snd                                  ; $1C 
; ===========================================================================
; Offset_0x00399E:
Level:
		bset	#7,(Game_Mode).w
		tst.w	(Auto_Control_Player_Flag).w
		bmi.s	Offset_0x0039B2
		move.b	#Stop_Sound,d0
		bsr.w	Play_Music

Offset_0x0039B2:
		clr.w	(Kosinski_Mod_Queue_Count).w
		lea	(Kosinski_Saved_Registers).w,a1
		moveq	#0,d0
		move.w	#$1A,d1

Offset_0x0039C0:
		move.l	d0,(a1)+
		dbf	d1,Offset_0x0039C0
		bsr.w	ClearPLC
		bsr.w	Pal_FadeFrom
		tst.w	(Auto_Control_Player_Flag).w
		bmi.s	Offset_0x003A32
		move	#$2700,sr
		bsr.w	ClearScreen
		move	#$2300,sr
		moveq	#0,d0
		move.w	d0,(Level_Frame_Count).w
		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#1,d0
		lsr.w	#4,d0
		andi.w	#$1F8,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d0,d1
		lea	(TilesMainTable).l,a2
		moveq	#0,d0
		move.b	(a2,d1.w),d0
		beq.s	Offset_0x003A0A
		bsr.w	LoadPLC

Offset_0x003A0A:
		bsr.w	Level_SetPlayerMode
		moveq	#6,d0
		tst.w	(Two_Player_Flag).w
		bne.s	Offset_0x003A2E
		moveq	#1,d0
		bsr.w	LoadPLC
		cmpi.w	#2,(Player_Selected_Flag).w
		bne.s	Offset_0x003A32
		addq.w	#1,d0
		; for some reason, Sonic 3 final is missing this and the Miles
		; graphic, meaning it displays Tails even on a Japanese console
		tst.b	(Hardware_Id).w
		bpl.s	Offset_0x003A2E
		addq.w	#2,d0

Offset_0x003A2E:
		bsr.w	LoadPLC

Offset_0x003A32:
                lea     (Sprite_Table_Input).w, A1                   ; $FFFFAC00
                moveq   #$00, D0
                move.w  #$00FF, D1
Offset_0x003A3C:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x003A3C
                lea     (Obj_Player_One).w, A1                       ; $FFFFB000
                moveq   #$00, D0
                move.w  #$07FF, D1
Offset_0x003A4C:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x003A4C
                lea     (VBlank_0_Run_Count).w, A1                   ; $FFFFF628
                moveq   #$00, D0
                move.w  #$0015, D1
Offset_0x003A5C:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x003A5C
                lea     (Miles_Control_Vars).w, A1                   ; $FFFFF700
                moveq   #$00, D0
                move.w  #$003F, D1
Offset_0x003A6C:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x003A6C
                lea     (Oscillate_Data_Buffer+$02).w, A1            ; $FFFFFE60
                moveq   #$00, D0
                move.w  #$0013, D1
Offset_0x003A7C:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x003A7C
                lea     (Boss_Data_Buffer).w, A1                     ; $FFFFFA80
                moveq   #$00, D0
                move.w  #$001F, D1
Offset_0x003A8C:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x003A8C

		jsr	(Init_Sprite_Table).l
		lea	(VDP_Control_Port).l,a6
		move.w	#$8B03,(a6)
		move.w	#$8230,(a6)
		move.w	#$8407,(a6)
		move.w	#$857C,(a6)
		move.w	#$9001,(a6)
		move.w	#$8004,(a6)
		move.w	#$8720,(a6)
		move.w	#$8C81,(a6)
		tst.b	(Debug_Mode_Flag).w
		beq.s	Level_ChkMode
; Level_ChkNight:
		btst	#5,(Control_Ports_Buffer_Data).w
		beq.s	Level_ChkDebug
		move.w  #$8C89,(a6)
; Offset_0x003AD0:
Level_ChkDebug:
		btst	#6,(Control_Ports_Buffer_Data).w
		beq.s	Level_ChkMode
		move.b	#1,(Debug_Mode_Active).w
; Offset_0x003ADE:
Level_ChkMode:
		move.w	#$8AFF,(Horizontal_Int_Count_Cmd).w
		tst.w	(Two_Player_Flag).w
		beq.s	Level_LoadPal
		move.w	#$4EF9,(HBlank_Ptr).w
		move.l	#HBlank_00,(HBlank_Ptr+$02).w
		move.w	#$8014,(a6)
		move.w	#$8220,(a6)
		move.w	#$8405,(a6)
		move.w	#$8A6B,(Horizontal_Int_Count_Cmd).w
		move.w	#$9003,(a6)
		cmpi.b	#BPz_Id,(Current_Zone).w
		bne.s	Level_LoadPal
                move.w	#$9011,(a6)
; Offset_0x003B1A:
Level_LoadPal:
		move.w	(Horizontal_Int_Count_Cmd).w,(a6)
		clr.w	(DMA_Buffer_List).w
		move.l	#DMA_Buffer_List,(DMA_Buffer_List_End).w
		moveq	#3,d0
		bsr.w	PalLoad_Now
		bsr.w	Level_InitWaterLevels
		tst.b	(Water_Level_Flag).w
		beq.s	Level_GetBgm
		move.w	#$8014,(a6)
; Offset_0x003B3E:
Level_GetBgm:
		tst.w	(Auto_Control_Player_Flag).w
		bmi.s	Offset_0x003BAE
		moveq	#0,d0
		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#1,d0
		lsr.w	#7,d0
		lea	(PlayList).l,a1
		move.b	(a1,d0.w),d0
		move.w	d0,(Level_Music_Buffer).w
		bsr.w	Play_Music
		move.b	#0,(Title_Card_Flag).w
		cmpi.b	#DDz_Id,(Current_Zone).w	; is this Doomsday Zone?
		bhi.s	Level_CreateHUD			; if not (but is Zone 0D or above), branch
		move.l	#Obj_TitleCard,(Obj_08_Mem_Address).w
; Offset_0x003B76:
Level_TtlCard:
		move.b	#$C,(VBlank_Index).w
		jsr	(Process_Kos_Queue).l
		bsr.w	Wait_For_VSync
		jsr	(RunObjects).l
		jsr	(Build_Sprites).l
		bsr.w	RunPLC_RAM
		jsr	(Process_Kos_Module_Queue).l
		tst.w	(Obj_08_Mem_Address+Obj_Respaw_Ref).w
		beq.s	Level_TtlCard
		tst.l	(PLC_Data_Buffer).w
		bne.s	Level_TtlCard
; Offset_0x003BA8:
Level_CreateHUD:
                jsr	(Head_Up_Display_Base).l

Offset_0x003BAE:
 		moveq	#3,d0
		bsr.w	PalLoad_ForFade
		jsr	(LevelSizeLoad).l
		jsr	(DeformBgLayer).l
		bsr.w	LoadZoneTiles
		jsr	(LoadZoneBlockMaps).l
		jsr	(Animate_Counters_Init).l
		move	#$2700,sr
		jsr	(JmpTo_Setup_TileDrawing).l
		move	#$2300,sr
		jsr	(S2_FloorLog_Unk).l
		bsr.w	LoadCollisionIndex
		bsr.w	WaterEffects
		bsr.w	InitPlayers
		move.w	(Control_Ports_Buffer_Data+2).w,(Tmp_FF7C).w
		move.w	#0,(Control_Ports_Logical_Data).w
		move.w	#0,(Control_Ports_Logical_Data_2).w
		move.w	#0,(Control_Ports_Buffer_Data).w
		move.w	#0,(Control_Ports_Buffer_Data+2).w
		move.b	#1,(Control_Locked_Flag_P1).w
		move.b	#1,(Control_Locked_Flag_P2).w
		move.b	#0,(Title_Card_Flag).w
; Level_ChkWater:
		tst.b	(Water_Level_Flag).w
		beq.s	Level_ClrHUD
		cmpi.b	#Hz_Id,(Current_Zone).w
		beq.s	Offset_0x003C36
		cmpi.b	#Hz_Id,(Current_Zone).w
		bne.s	Level_ClrHUD

Offset_0x003C36:
		move.l	#Obj_Wave_Splash, (Obj_04_Mem_Address).w
		move.l	#Obj_0x6D_Hz_Water_Splash, (Obj_05_Mem_Address).w
		move.b	#1,(Obj_05_Mem_Address+Obj_Subtype).w
; Offset_0x003C4C:
Level_ClrHUD:
		moveq	#0,d0
		tst.b	(Saved_Level_Flag).w
		bne.s	Level_FromCheckpoint
		move.w	d0,(Ring_count).w
		move.l	d0,(Timer).w
		move.b	d0,(Extra_life_flags).w
		move.w	d0,(Ring_Count_Address_P2).w
		move.l	d0,(Time_Count_Address_P2).w
		move.b	d0,(Ring_Status_Flag_P2).w
; Offset_0x003C6C:
Level_FromCheckpoint:
		move.b	d0,(Time_Over_flag).w
		move.b	d0,(Time_Over_Flag_P2).w
		move.w	d0,(Debug_Mode_Flag_Index).w
		move.w	d0,(Restart_Level_Flag).w
		move.b	d0,(S2_Teleport_Timer).w
		move.b	d0,(S2_Teleport_Flag).w
		move.w	d0,(Total_Ring_Count_Address).w
		move.w	d0,(Total_Ring_Count_Address_P2).w
		move.w	d0,(Monitors_Broken).w
		move.w	d0,(Monitors_Broken_P2).w
		move.w	d0,(Loser_Timer_Left).w
		move.b	d0,(LRz_Rocks_Routine).w
		bsr.w	Oscillate_Num_Init
		move.b	#1,(Update_HUD_score).w
		move.b	#1,(Update_HUD_rings).w
		move.b	#1,(Update_HUD_timer).w
		move.b	#1,(HUD_Timer_Refresh_Flag_P2).w
		tst.w	(Auto_Control_Player_Flag).w
		beq.s	Offset_0x003CCC
		tst.w	(Current_ZoneAndAct).w
		bne.s	Offset_0x003CCC
		move.l	#Obj_AIz_Intro_Surfboard,(Obj_05_Mem_Address).w

Offset_0x003CCC:
		jsr	(ObjectsManager).l
		jsr	(Load_Ring_Pos).l
		jsr	(S2_Load_Triangle_Pos).l
		jsr	(LRz_Load_Rock_Pos).l
		jsr	(RunObjects).l
		jsr	(Build_Sprites).l
		jsr	(AnimateStageTiles).l
		bsr.w	Clear_End_Level_Art_Load_Flag
		move.w	#0,(Demo_Button_Index).w
		move.w	#0,(Demo_Button_Index_2P).w
		lea	(Demo_Index),a1
		moveq	#0,d0
		move.b	(Current_Zone).w,d0
		lsl.w	#2,d0
		move.l	(a1,d0.w),a1
		tst.w	(Auto_Control_Player_Flag).w
		bpl.s	Offset_0x003D30
		lea	(Demo_End_Index),a1
		move.w	(End_Demo_Sequence_Idx).w,d0
		subq.w	#1,d0
		lsl.w	#2,d0
		move.l	(a1,d0.w),a1

Offset_0x003D30:
		move.b	1(a1),(Demo_Button_Press_Counter).w
		tst.b	(Current_Zone).w
		bne.s	Offset_0x003D48
		lea	(Demo_Angel_Island),a1
		move.b	1(a1),(Demo_Button_Press_Counter_2P).w

Offset_0x003D48:
		move.w	#$1194,(Demo_Timer).w
		tst.w	(Auto_Control_Player_Flag).w
		bpl.s	Offset_0x003D68
		move.w	#$21C,(Demo_Timer).w
		cmpi.w	#4,(End_Demo_Sequence_Idx).w
		bne.s	Offset_0x003D68
		move.w	#$1FE,(Demo_Timer).w

Offset_0x003D68:
		bsr.w	LevelInit_UndewaterPalette
		move.b	#0,(Control_Locked_Flag_P1).w
		move.b	#0,(Control_Locked_Flag_P2).w
		move.b	#1,(Title_Card_Flag).w
		tst.w	(Two_Player_Flag).w
		bne.w	Offset_0x003EE2
		cmpi.b	#ALz_Id,(Current_Zone).w
		bcc.s	Level_StartGame
		moveq	#2,d0
		bsr.w	LoadPLC
; Offset_0x003D94:
Level_StartGame:
		move.w	#$202F,(Palette_Fade_Info).w
		jsr	(Pal_Clear).l
		move.w	#$16,(Palette_Fade_Timer).w
		move.w	#$16,(Obj_08_Mem_Address+Obj_Timer).w
		bclr	#7,(Game_Mode).w

; ---------------------------------------------------------------------------
; Main level loop (when all title card and loading sequences are finished)
; ---------------------------------------------------------------------------
; Offset_0x003DB2:
Level_MainLoop:
		bsr.w	Pause
		move.b	#8,(VBlank_Index).w
		jsr	(Process_Kos_Queue).l
		bsr.w	Wait_For_VSync
		addq.w	#1,(Level_Frame_Count).w
		bsr.w	Init_Demo_Control
		jsr	(AnimatePalette).l
		jsr	(Repeat_TileDrawing).l
		jsr	(RunObjects).l
		tst.w	(Restart_Level_Flag).w
		bne.w	Level
		jsr	(DeformBgLayer).l
		jsr	(Run_TileDrawing).l
		bsr.w	WaterEffects
		bsr.w	UpdateWaterSurface
		jsr	(Load_Ring_Pos).l
		cmpi.b	#S2_CNz_Id,(Current_Zone).w
		bne.s	Offset_0x003E10
		jsr	(S2_Load_Triangle_Pos).l

Offset_0x003E10:
		cmpi.b	#LRz_Id,(Current_Zone).w
		bne.s	Offset_0x003E1E
		jsr	(LRz_Load_Rock_Pos).l

Offset_0x003E1E:
		jsr	(AnimateStageTiles).l
		bsr.w	RunPLC_RAM
		jsr	(Process_Kos_Module_Queue).l
		bsr.w	Oscillate_Num_Do
		bsr.w	ChangeRingFrame
		bsr.w	CheckLoadSignpostArt
		jsr	(Build_Sprites).l
		jsr	(ObjectsManager).l
		cmpi.b	#gm_DemoMode,(Game_Mode).w
		beq.s	Offset_0x003E5A
		cmpi.b	#gm_PlayMode,(Game_Mode).w
		beq.w	Level_MainLoop
		rts
; ---------------------------------------------------------------------------

Offset_0x003E5A:
		tst.w	(Restart_Level_Flag).w
		bne.s	Offset_0x003E78
		tst.w	(Demo_Timer).w
		beq.s	Offset_0x003E78
		cmpi.b	#gm_DemoMode,(Game_Mode).w
		beq.w	Level_MainLoop
		move.b	#gm_SEGALogo,(Game_Mode).w
		rts
; ---------------------------------------------------------------------------

Offset_0x003E78:
                cmpi.b  #gm_DemoMode, (Game_Mode).w             ; $08, $FFFFF600
                bne.s   Offset_0x003E88
                move.b  #gm_SEGALogo, (Game_Mode).w             ; $00, $FFFFF600
                rts
Offset_0x003E88:
                move.w  #$003C, (Demo_Timer).w                       ; $FFFFF614
                move.w  #$003F, (Palette_Fade_Info).w                ; $FFFFF626
                clr.w   (Demo_Pal_FadeOut_Counter).w                 ; $FFFFF794
Offset_0x003E98:
                move.b  #$08, (VBlank_Index).w                       ; $FFFFF62A
                bsr     Wait_For_VSync                         ; Offset_0x001AEE
                bsr     Init_Demo_Control                      ; Offset_0x0047F6
                jsr     (RunObjects)                         ; Offset_0x0110AE
                jsr     (DeformBgLayer)              ; Offset_0x0120D4
                jsr     (Run_TileDrawing)              ; Offset_0x02F2EA
                jsr     (Build_Sprites)                        ; Offset_0x011296
                jsr     (ObjectsManager)                      ; Offset_0x011BF8
                jsr     (Process_Kos_Module_Queue)               ; Offset_0x0018FE
                subq.w  #$01, (Demo_Pal_FadeOut_Counter).w           ; $FFFFF794
                bpl.s   Offset_0x003EDA
                move.w  #$0002, (Demo_Pal_FadeOut_Counter).w         ; $FFFFF794
                bsr     Pal_FadeOut                            ; Offset_0x002E08
Offset_0x003EDA:
                tst.w   (Demo_Timer).w                               ; $FFFFF614
                bne.s   Offset_0x003E98
                rts
Offset_0x003EE2:
                move.w  #$0000, (Tmp_FF7E).w                         ; $FFFFFF7E
                move.b  (Tmp_FF7C).w, D0                             ; $FFFFFF7C
                cmpi.b  #$A0, D0
                bne.s   Offset_0x003EFC
                move.w  (Sound_Test_Sound).w, D0                     ; $FFFFFF84
                lsl.w   #$08, D0
                move.w  D0, (Tmp_FF7E).w                             ; $FFFFFF7E
Offset_0x003EFC:
                move.w  #$003F, (Palette_Fade_Info).w                ; $FFFFF626
                jsr     (Pal_Clear)                            ; Offset_0x002DB0
                move.w  #$0016, (Palette_Fade_Timer).w               ; $FFFFEE56
                move.w  #$0000, (Tmp_FF7C).w                         ; $FFFFFF7C
                bclr    #$07, (Game_Mode).w                          ; $FFFFF600
Level_Main_Loop:                                               ; Offset_0x003F1A                
                bsr     Pause                                  ; Offset_0x0011E0
                move.b  #$08, (VBlank_Index).w                       ; $FFFFF62A
                jsr     (Process_Kos_Queue)          ; Offset_0x0019F0
                bsr     Wait_For_VSync                         ; Offset_0x001AEE
                addq.w  #$01, (Level_Frame_Count).w                  ; $FFFFFE04
                move.w  #$0004, -(A7)
                bra.s   Offset_0x003F7C      
;-------------------------------------------------------------------------------
Offset_0x003F38:
                move.w  (Tmp_FF7E).w, D0                             ; $FFFFFF7E
                add.w   D0, (Tmp_FF7C).w                             ; $FFFFFF7C
                bcc.s   Offset_0x003F8C
                bsr     Pause                                  ; Offset_0x0011E0
		; ??? incomplete Z80 stop?
                move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
                bsr     Control_Ports_Read                     ; Offset_0x000F16
		startZ80
                move.w  #$0000, (DMA_Buffer_List).w                  ; $FFFFE700
                move.l  #DMA_Buffer_List, (DMA_Buffer_List_End).w ; $FFFFE700, $FFFFE8F8
                lea     (Sprite_Table_Input).w, A5                   ; $FFFFAC00
Offset_0x003F6C:
                move.w  #$0000, (A5)
                lea     $0080(A5), A5
                cmpa.l  #Obj_Player_One, A5                          ; $FFFFB000
                bcs.s   Offset_0x003F6C
Offset_0x003F7C:
                bsr     Init_Demo_Control                      ; Offset_0x0047F6
                jsr     (RunObjects)                         ; Offset_0x0110AE
                jsr     (DeformBgLayer)              ; Offset_0x0120D4
Offset_0x003F8C:
                subq.w  #$01, (A7)
                bne.s   Offset_0x003F38
                addq.w  #$02, A7
                tst.w   (Restart_Level_Flag).w                       ; $FFFFFE02
                bne     Level                                  ; Offset_0x00399E
                jsr     (Run_TileDrawing)              ; Offset_0x02F2EA
                jsr     (AnimateStageTiles)                     ; Offset_0x01E85A
                jsr     (Build_Sprites)                        ; Offset_0x011296
                jsr     (AnimatePalette)                      ; Offset_0x002DD4
                bsr     RunPLC_RAM                                 ; Offset_0x001556
                jsr     (Process_Kos_Module_Queue)               ; Offset_0x0018FE
                cmpi.b  #gm_DemoMode, (Game_Mode).w             ; $08, $FFFFF600
                beq.s   Offset_0x003FD0
                cmpi.b  #gm_PlayMode, (Game_Mode).w             ; $0C, $FFFFF600
                beq     Level_Main_Loop                        ; Offset_0x003F1A
                rts
Offset_0x003FD0:
                tst.w   (Restart_Level_Flag).w                       ; $FFFFFE02
                bne.s   Offset_0x003FEE
                tst.w   (Demo_Timer).w                               ; $FFFFF614
                beq.s   Offset_0x003FEE
                cmpi.b  #gm_DemoMode, (Game_Mode).w             ; $08, $FFFFF600
                beq     Level_Main_Loop                        ; Offset_0x003F1A
                move.b  #gm_SEGALogo, (Game_Mode).w             ; $00, $FFFFF600
                rts
Offset_0x003FEE:
                cmpi.b  #gm_DemoMode, (Game_Mode).w             ; $08, $FFFFF600
                bne.s   Offset_0x003FFE
                move.b  #gm_SEGALogo, (Game_Mode).w             ; $00, $FFFFF600
                rts
Offset_0x003FFE:
                move.w  #$003C, (Demo_Timer).w                       ; $FFFFF614
                move.w  #$003F, (Palette_Fade_Info).w                ; $FFFFF626
                clr.w   (Demo_Pal_FadeOut_Counter).w                 ; $FFFFF794
Offset_0x00400E:
                move.b  #$08, (VBlank_Index).w                       ; $FFFFF62A
                bsr     Wait_For_VSync                         ; Offset_0x001AEE
                bsr     Init_Demo_Control                      ; Offset_0x0047F6
                jsr     (RunObjects)                         ; Offset_0x0110AE
                jsr     (DeformBgLayer)              ; Offset_0x0120D4
                jsr     (Run_TileDrawing)              ; Offset_0x02F2EA
                jsr     (Build_Sprites)                        ; Offset_0x011296
                jsr     (ObjectsManager)                      ; Offset_0x011BF8
                jsr     (Process_Kos_Module_Queue)               ; Offset_0x0018FE
                subq.w  #$01, (Demo_Pal_FadeOut_Counter).w           ; $FFFFF794
                bpl.s   Offset_0x004050
                move.w  #$0002, (Demo_Pal_FadeOut_Counter).w         ; $FFFFF794
                bsr     Pal_FadeOut                            ; Offset_0x002E08
Offset_0x004050:
                tst.w   (Demo_Timer).w                               ; $FFFFF614
                bne.s   Offset_0x00400E
                rts

; ---------------------------------------------------------------------------
; Subroutine to set the player mode, which is forced to Sonic and Tails in
; the demo mode and in 2P mode
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x004058: Init_Player_Selected:
Level_SetPlayerMode:
		cmpi.b	#($80|gm_DemoMode),(Game_Mode).w
		beq.s	Offset_0x00406E
		tst.w	(Two_Player_Flag).w
		bne.s	Offset_0x00406E
		move.w	(Player_Select_Flag).w,(Player_Selected_Flag).w
		rts

Offset_0x00406E:
		move.w	#0,(Player_Selected_Flag).w
		rts
; End of function Level_SetPlayerMode

; ---------------------------------------------------------------------------
; Subroutine to load the player selected
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x004076: Load_Player_Selected:
InitPlayers:
		move.l	#Obj_Clear_Collision_Response_List,(Obj_02_Mem_Address).w
		tst.w	(Two_Player_Flag).w
		bne.s	Offset_0x0040F2
		move.w	(Player_Selected_Flag).w,d0
		bne.s	InitPlayers_Alone
		move.l	#Obj_Sonic,(Obj_Player_One).w
		move.l	#Obj_Dust_Water_Splash,(Obj_P1_Dust_Water_Splash).w
		move.l	#Obj_Miles, (Obj_Player_Two).w 
		move.w	(Obj_Player_One+Obj_X).w,(Obj_Player_Two+Obj_X).w
		move.w	(Obj_Player_One+Obj_Y).w,(Obj_Player_Two+Obj_Y).w
		subi.w	#$20,(Obj_Player_Two+Obj_X).w
		addi.w	#4,(Obj_Player_Two+Obj_Y).w
		move.l	#Obj_Dust_Water_Splash,(Obj_P2_Dust_Water_Splash).w
		rts
; ===========================================================================
; Offset_0x0040C4:
InitPlayers_Alone:
		subq.w	#1,d0
		bne.s	InitPlayers_TailsAlone
		move.l	#Obj_Sonic,(Obj_Player_One).w
		move.l	#Obj_Dust_Water_Splash,(Obj_P1_Dust_Water_Splash).w
		rts
; ===========================================================================
; Offset_0x0040DA:
InitPlayers_TailsAlone:
		move.l	#Obj_Miles,(Obj_Player_One).w
		move.l	#Obj_Dust_Water_Splash,(Obj_P2_Dust_Water_Splash).w
		addi.w	#4,(Obj_Player_One+Obj_Y).w
		rts
; End of function InitPlayers


Offset_0x0040F2:
                move.b  (Menu_Player_One_Cursor).w, D0               ; $FFFFFFDA
                bsr.s   Offset_0x004130
                move.l  D1, (Obj_Player_One).w                       ; $FFFFB000
                move.b  (Menu_Player_Two_Cursor).w, D0               ; $FFFFFFDB
                bsr.s   Offset_0x004130
                move.l  D1, (Obj_Player_Two).w                       ; $FFFFB04A
                move.b  (Menu_Player_One_Cursor).w, (Obj_Player_One+Obj_Player_Selected).w ; $FFFFFFDA, $FFFFB038
                move.b  (Menu_Player_Two_Cursor).w, (Obj_Player_Two+Obj_Player_Selected).w ; $FFFFFFDB, $FFFFB082
                move.w  (Obj_Player_One+Obj_X).w, (Obj_Player_Two+Obj_X).w ; $FFFFB010, $FFFFB05A
                move.w  (Obj_Player_One+Obj_Y).w, (Obj_Player_Two+Obj_Y).w ; $FFFFB014, $FFFFB05E
                move.l  #Obj_Dust_Water_Splash_2P, (Obj_P1_Dust_Water_Splash).w ; Offset_0x0100DA, $FFFFCC54
                move.l  #Obj_Dust_Water_Splash_2P, (Obj_P2_Dust_Water_Splash).w ; Offset_0x0100DA, $FFFFCC9E
                bra.s   Offset_0x00414E
Offset_0x004130:
                tst.b   D0
                bne.s   Offset_0x00413A
                move.l  #Obj_Sonic_Knuckles_2P, D1             ; Offset_0x00A552
Offset_0x00413A:
                subq.b  #$01, D0
                bne.s   Offset_0x004146
                move.l  #Obj_Miles_2P, D1                      ; Offset_0x00CC0A
                rts
Offset_0x004146:
                move.l  #Obj_Sonic_Knuckles_2P, D1             ; Offset_0x00A552
                rts
Offset_0x00414E:
                lea     (Palette_Row_1_Data_Target).w, A2            ; $FFFFEDA0
                lea     (Pal_Level_2P), A1                     ; Offset_0x004164
                move.w  #$000F, D0
Offset_0x00415C:
                move.w  (A1)+, (A2)+
                dbra    D0, Offset_0x00415C
                rts    
;-------------------------------------------------------------------------------
Pal_Level_2P:                                                  ; Offset_0x004164
                dc.w    $0A86, $0EEE, $084E, $040C, $0206, $0080, $000E, $0008
                dc.w    $00AE, $008E, $08AE, $046A, $0ECC, $0CAA, $0866, $0222
;-------------------------------------------------------------------------------
; Rotina para carregar o jogador selecionado no modo 1 PLAYER
; <<<- Sonic And Miles / Sonic Alone / Miles Alone
;-------------------------------------------------------------------------------                 

Obj_Clear_Collision_Response_List:                             ; Offset_0x004184
                move.w  #$0000, (Collision_Response_List).w          ; $FFFFE380
                rts               

; ---------------------------------------------------------------------------
; Subroutine to move the water or oil surface sprites to where the screen is at
; Leftover from Sonic 2, and useless since the objects themselves handle this now
; ---------------------------------------------------------------------------

; Offset_0x00418A: S2_Change_Water_Surface_Pos:
UpdateWaterSurface:
		rts
; ---------------------------------------------------------------------------
		tst.b	(Water_Level_Flag).w
		beq.s	Offset_0x0041AE
		move.w	(Camera_X).w,d1
		btst	#0,(Level_Frame_Count+1).w
		beq.s	Offset_0x0041A4
		addi.w	#$20,d1

Offset_0x0041A4:
		move.w	d1,d0
		addi.w	#$60,d0
		addi.w	#$120,d1

Offset_0x0041AE:
		rts
; End of function UpdateWaterSurface

; ---------------------------------------------------------------------------
; Subroutine to do special water effects
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x0041B0:
WaterEffects:
		tst.b	(Water_Level_Flag).w
		beq.w	Offset_0x004236
		tst.b	(Rasters_Flag).w
		bne.s	MoveWater
		cmpi.b	#6,(Obj_Player_One+Obj_Routine).w	; is the player dead?
		bcc.s	MoveWater				; if yes, branch
		bsr.w	Hz_Wind_Tunnels
		bsr.w	Dynamic_Water_Height
; Offset_0x0041CE:
MoveWater:
		clr.b	(Underwater_Flag).w
		moveq	#0,d0
		cmpi.b	#Aiz_Id,(Current_Zone).w
		beq.s	Offset_0x0041F2
		cmpi.b	#Hz_Id,(Current_Zone).w
		beq.s	Offset_0x0041F2
		cmpi.b	#LBz_Id,(Current_Zone).w
		beq.s	Offset_0x0041F2
		move.b	(Oscillate_Data_Buffer+2).w,d0
		lsr.w	#1,d0

Offset_0x0041F2:
		add.w	(Current_Water_Level).w,d0
		move.w	d0,(Water_Level_Move).w
		cmpi.w	#Hz_Act_1,(Current_ZoneAndAct).w
		bne.s	Offset_0x00420A
		cmpi.w	#$900,(Camera_X).w
		bcs.s	Offset_0x004220

Offset_0x00420A:
		; calculate distance between water surface and top of screen
		move.w	(Water_Level_Move).w,d0
		sub.w	(Camera_Y).w,d0
		beq.s	Offset_0x00421A
		bcc.s	Offset_0x004228
		tst.w	d0
		bpl.s	Offset_0x004228

Offset_0x00421A:
		move.b	#1,(Underwater_Flag).w

Offset_0x004220:
		move.b	#-1,(Scanline_Counter).w		; H-INT every 224th scanline
		rts
; ---------------------------------------------------------------------------

Offset_0x004228:
		cmpi.w	#224-1,d0
		bcs.s	Offset_0x004232
		move.w	#256-1,d0

Offset_0x004232:
		move.b	d0,(Scanline_Counter).w

Offset_0x004236:
		bsr.w	Level_Slides
		rts
; End of function WaterEffects

;------------------------------------------------------------------------------- 
; Rotina para controlar os efeitos da �gua. Ex: Mudan�a de n�vel
; <<<-   
;-------------------------------------------------------------------------------  
    
;-------------------------------------------------------------------------------
; Rotina para mudar a altura da �gua dinamicamente
; ->>>
;------------------------------------------------------------------------------- 
Water_Height_Array:                                            ; Offset_0x00423C
                dc.w    $0504, $0528 ; AIz
                dc.w    $0500, $0700 ; Hz
                dc.w    $0600, $0600 ; MGz
                dc.w    $0600, $0A90 ; CNz
                dc.w    $0600, $0600 ; FBz
                dc.w    $0600, $0600 ; Iz
                dc.w    $0A80, $065E ; LBz
                dc.w    $0600, $0600 ; MVz
                dc.w    $0600, $0600 ; Sz
                dc.w    $0600, $0600 ; LRz
                dc.w    $0600, $0600 ; SSz
                dc.w    $0600, $0600 ; DEz
                dc.w    $0600, $0600 ; TDz
                dc.w    $0600, $0710 ; Ending
                dc.w    $0600, $0600 ; ALz
                dc.w    $0410, $0510 ; BPz
;------------------------------------------------------------------------------- 
Dynamic_Water_Height:                                          ; Offset_0x00427C
                moveq   #$00, D0
                move.w  (Current_ZoneAndAct).w, D0                             ; $FFFFFE10
                ror.b   #$01, D0
                lsr.w   #$06, D0
                andi.w  #$FFFE, D0
                move.w  Dynamic_Water_Index(PC, D0), D0        ; Offset_0x0042AC
                jsr     Dynamic_Water_Index(PC, D0)            ; Offset_0x0042AC
                moveq   #$00, D1
                move.b  (Water_Level_Change_Speed).w, D1             ; $FFFFF64C
                move.w  (Target_Water_Level).w, D0                   ; $FFFFF64A
                sub.w   (Current_Water_Level).w, D0                  ; $FFFFF648
                beq.s   Offset_0x0042AA
                bcc.s   Offset_0x0042A6
                neg.w   D1
Offset_0x0042A6:
                add.w   D1, (Current_Water_Level).w                  ; $FFFFF648
Offset_0x0042AA:
                rts     
;-------------------------------------------------------------------------------
Dynamic_Water_Index:                                           ; Offset_0x0042AC
                dc.w    Dynamic_AIz1_Water-Dynamic_Water_Index ; Offset_0x0042EC
                dc.w    Dynamic_AIz2_Water-Dynamic_Water_Index ; Offset_0x0042EE
                dc.w    Dynamic_Hz1_Water-Dynamic_Water_Index  ; Offset_0x00434A
                dc.w    Dynamic_Hz2_Water-Dynamic_Water_Index  ; Offset_0x004362
                dc.w    Dynamic_MGz1_Water-Dynamic_Water_Index ; Offset_0x004372
                dc.w    Dynamic_MGz2_Water-Dynamic_Water_Index ; Offset_0x004372
                dc.w    Dynamic_CNz1_Water-Dynamic_Water_Index ; Offset_0x004372
                dc.w    Dynamic_CNz2_Water-Dynamic_Water_Index ; Offset_0x004372
                dc.w    Dynamic_FBz1_Water-Dynamic_Water_Index ; Offset_0x004372
                dc.w    Dynamic_FBz2_Water-Dynamic_Water_Index ; Offset_0x004372
                dc.w    Dynamic_Iz1_Water-Dynamic_Water_Index  ; Offset_0x004372
                dc.w    Dynamic_Iz2_Water-Dynamic_Water_Index  ; Offset_0x004372
                dc.w    Dynamic_LBz1_Water-Dynamic_Water_Index ; Offset_0x004374
                dc.w    Dynamic_LBz2_Water-Dynamic_Water_Index ; Offset_0x004390
                dc.w    Dynamic_MHz1_Water-Dynamic_Water_Index ; Offset_0x004390
                dc.w    Dynamic_MHz2_Water-Dynamic_Water_Index ; Offset_0x004390
                dc.w    Dynamic_Sz1_Water-Dynamic_Water_Index  ; Offset_0x004390
                dc.w    Dynamic_Sz2_Water-Dynamic_Water_Index  ; Offset_0x004390
                dc.w    Dynamic_LRz1_Water-Dynamic_Water_Index ; Offset_0x004390
                dc.w    Dynamic_LRz2_Water-Dynamic_Water_Index ; Offset_0x004390
                dc.w    Dynamic_SSz1_Water-Dynamic_Water_Index ; Offset_0x004390
                dc.w    Dynamic_SSz2_Water-Dynamic_Water_Index ; Offset_0x004390
                dc.w    Dynamic_DEz1_Water-Dynamic_Water_Index ; Offset_0x004390
                dc.w    Dynamic_DEz2_Water-Dynamic_Water_Index ; Offset_0x004390
                dc.w    Dynamic_TDz1_Water-Dynamic_Water_Index ; Offset_0x004390
                dc.w    Dynamic_TDz2_Water-Dynamic_Water_Index ; Offset_0x004390
                dc.w    Dynamic_ES1_Water-Dynamic_Water_Index  ; Offset_0x004390
                dc.w    Dynamic_ES2_Water-Dynamic_Water_Index  ; Offset_0x004392
                dc.w    Dynamic_ALz1_Water-Dynamic_Water_Index ; Offset_0x004390
                dc.w    Dynamic_ALz2_Water-Dynamic_Water_Index ; Offset_0x004390
                dc.w    Dynamic_BPz1_Water-Dynamic_Water_Index ; Offset_0x004390
                dc.w    Dynamic_BPz2_Water-Dynamic_Water_Index ; Offset_0x004390
;-------------------------------------------------------------------------------
Dynamic_AIz1_Water:                                            ; Offset_0x0042EC
                rts  
;-------------------------------------------------------------------------------
Dynamic_AIz2_Water:                                            ; Offset_0x0042EE
                cmpi.w  #$2440, (Camera_X).w                         ; $FFFFEE78
                bcc.s   Offset_0x00430C
                cmpi.w  #$0618, (Target_Water_Level).w               ; $FFFFF64A
                bne.s   Offset_0x004348
                move.w  #$0528, (Target_Water_Level).w               ; $FFFFF64A
                move.b  #$02, (Water_Level_Change_Speed).w           ; $FFFFF64C
                rts
Offset_0x00430C:
                tst.b   (Level_Trigger_Array).w                      ; $FFFFF7E0
                bne.s   Offset_0x004320
                cmpi.w  #$2850, (Camera_X).w                         ; $FFFFEE78
                bcs.s   Offset_0x004348
                move.b  #$01, (Level_Trigger_Array).w                ; $FFFFF7E0
Offset_0x004320:
                cmpi.w  #$0618, (Target_Water_Level).w               ; $FFFFF64A
                beq.s   Offset_0x004348
                lea     (Level_Layout_Buffer+$1C).w, A3              ; $FFFF801C
                moveq   #$05, D1
Offset_0x00432E:
                move.w  (A3), A1
                move.b  #$00, $004D(A1)
                move.b  #$00, $004E(A1)
                addq.w  #$04, A3
                dbra    D1, Offset_0x00432E
                move.w  #$0618, (Target_Water_Level).w               ; $FFFFF64A
Offset_0x004348:
                rts
;-------------------------------------------------------------------------------
Dynamic_Hz1_Water:                                             ; Offset_0x00434A
                lea     (Offset_0x004352), A1
                bra.s   Offset_0x0043A2
;-------------------------------------------------------------------------------
Offset_0x004352:
                dc.b    $85, $00, $09, $00, $86, $80, $2A, $00
                dc.b    $86, $00, $35, $00, $86, $A0, $FF, $FF  
;-------------------------------------------------------------------------------  
Dynamic_Hz2_Water:                                             ; Offset_0x004362
                lea     (Offset_0x00436A), A1
                bra.s   Offset_0x0043A2 
;-------------------------------------------------------------------------------                                         
Offset_0x00436A:
                dc.b    $07, $00, $3E, $00, $07, $E0, $FF, $FF 
;-------------------------------------------------------------------------------  
Dynamic_MGz1_Water:                                            ; Offset_0x004372
Dynamic_MGz2_Water:
Dynamic_CNz1_Water:
Dynamic_CNz2_Water:
Dynamic_FBz1_Water:
Dynamic_FBz2_Water:
Dynamic_Iz1_Water:
Dynamic_Iz2_Water:                                           
                rts
;-------------------------------------------------------------------------------  
Dynamic_LBz1_Water:                                            ; Offset_0x004374
                lea     (Offset_0x00437C), A1
                bra.s   Offset_0x0043A2         
;-------------------------------------------------------------------------------
Offset_0x00437C:
                dc.b    $8B, $00, $0E, $00, $8A, $00, $19, $80
                dc.b    $8A, $00, $23, $40, $8A, $C8, $2C, $00
                dc.b    $8F, $F0, $FF, $FF   
;------------------------------------------------------------------------------- 
Dynamic_LBz2_Water:                                            ; Offset_0x004390
Dynamic_MHz1_Water:
Dynamic_MHz2_Water:
Dynamic_Sz1_Water:
Dynamic_Sz2_Water:
Dynamic_LRz1_Water:
Dynamic_LRz2_Water:
Dynamic_SSz1_Water:
Dynamic_SSz2_Water:
Dynamic_DEz1_Water:
Dynamic_DEz2_Water:
Dynamic_TDz1_Water:
Dynamic_TDz2_Water:
Dynamic_ES1_Water:  
Dynamic_ALz1_Water:
Dynamic_ALz2_Water:
Dynamic_BPz1_Water:
Dynamic_BPz2_Water:
Dynamic_Null_Water:  
                rts      
;------------------------------------------------------------------------------- 
Dynamic_ES2_Water:                                             ; Offset_0x004392
                cmpi.w  #$1DE0, (Camera_X).w                         ; $FFFFEE78
                bcs.s   Offset_0x0043A0
                move.w  #$0510, (Target_Water_Level).w               ; $FFFFF64A
Offset_0x0043A0:
                rts
Offset_0x0043A2:
                move.w  (Camera_X).w, D0                             ; $FFFFEE78
Offset_0x0043A6:
                move.l  (A1)+, D1
                cmp.w   D1, D0
                bhi.s   Offset_0x0043A6
                swap.w  D1
                tst.w   D1
                bpl.s   Offset_0x0043BA
                andi.w  #$7FFF, D1
                move.w  D1, (Current_Water_Level).w                  ; $FFFFF648
Offset_0x0043BA:
                move.w  D1, (Target_Water_Level).w                   ; $FFFFF64A
                rts  
;-------------------------------------------------------------------------------
Hz_Wind_Tunnels:                                               ; Offset_0x0043C0
                tst.w   (Debug_Mode_Flag_Index).w                    ; $FFFFFE08
                bne     Offset_0x0044A6
                cmpi.w  #Hz_Act_1, (Current_ZoneAndAct).w               ; $0100, $FFFFFE10
                bne     Offset_0x0044A6
                lea     (Sonic_Wind_Flag).w, A3                      ; $FFFFF7C8
                lea     (Obj_Player_One).w, A1                       ; $FFFFB000
                move.b  (Control_Ports_Logical_Data).w, D6           ; $FFFFF602
                moveq   #$00, D5
                bsr.s   Offset_0x0043EE
                addq.w  #$01, A3
                lea     (Obj_Player_Two).w, A1                       ; $FFFFB04A
                move.b  (Control_Ports_Logical_Data_2).w, D6         ; $FFFFF66A
                moveq   #$01, D5
Offset_0x0043EE:
                lea     (Hz_Wind_Tunnels_Data), A2             ; Offset_0x0044A8
                move.w  (A2)+, D2
Offset_0x0043F6:
                move.w  Obj_X(A1), D0                                    ; $0010
                cmp.w   (A2), D0
                bcs     Offset_0x004492
                cmp.w   Obj_Flags(A2), D0                                ; $0004
                bcc     Offset_0x004492
                move.w  Obj_Y(A1), D1                                    ; $0014
                cmp.w   $0002(A2), D1
                bcs     Offset_0x004492
                cmp.w   Obj_Height(A2), D1                               ; $0006
                bcc.s   Offset_0x004492
                cmpi.b  #$04, Obj_Routine(A1)                            ; $0005
                bcc     Offset_0x0044A4
                btst    D5, (Wind_Tunnels_Flag).w                    ; $FFFFF7C7
                bne.s   Offset_0x00447A
                tst.b   Obj_Player_Control(A1)                           ; $002E
                bne.s   Offset_0x0044A4
                move.b  #$01, (A3)
                move.w  Obj_Priority(A2), D0                             ; $0008
                move.w  D0, Obj_Speed_X(A1)                              ; $0018
                ext.l   D0
                lsl.l   #$08, D0
                add.l   D0, Obj_X(A1)                                    ; $0010
                move.w  Obj_Art_VRAM(A2), D1                             ; $000A
                move.w  D1, Obj_Speed_Y(A1)                              ; $001A
                ext.l   D1
                lsl.l   #$08, D1
                add.l   D1, Obj_Y(A1)                                    ; $0014
                move.b  #$0F, Obj_Ani_Number(A1)                         ; $0020
                bset    #$01, Obj_Status(A1)                             ; $002A
                tst.b   Obj_Map(A2)                                      ; $000C
                bne.s   Offset_0x00447C
                btst    #$00, D6
                beq.s   Offset_0x004470
                subq.w  #$01, Obj_Y(A1)                                  ; $0014
Offset_0x004470:
                btst    #$01, D6
                beq.s   Offset_0x00447A
                addq.w  #$01, Obj_Y(A1)                                  ; $0014
Offset_0x00447A:
                rts
Offset_0x00447C:
                btst    #$02, D6
                beq.s   Offset_0x004486
                subq.w  #$01, Obj_X(A1)                                  ; $0010
Offset_0x004486:
                btst    #$03, D6
                beq.s   Offset_0x004490
                addq.w  #$01, Obj_X(A1)                                  ; $0010
Offset_0x004490:
                rts
Offset_0x004492:
                adda.w  #$000E, A2
                dbra    D2, Offset_0x0043F6
                tst.b   (A3)
                beq.s   Offset_0x0044A6
                move.b  #$1A, Obj_Ani_Number(A1)                         ; $0020
Offset_0x0044A4:
                clr.b   (A3)
Offset_0x0044A6:
                rts 
;------------------------------------------------------------------------------- 
Hz_Wind_Tunnels_Data:                                          ; Offset_0x0044A8
                dc.w    $000E
                dc.w    $0380, $0580, $05A0, $05C0, $03F0, $FFE0, $0000
                dc.w    $05A0, $0560, $0A80, $05C0, $03F0, $FFF0, $0000
                dc.w    $1400, $0A80, $15A0, $0AC0, $0400, $0000, $0000
                dc.w    $15A0, $0A40, $1960, $0AC0, $0400, $FFC0, $0000
                dc.w    $1960, $0A10, $19D0, $0A80, $0300, $FD80, $0100
                dc.w    $1990, $0978, $19F0, $0A10, $0080, $FC00, $0100
                dc.w    $1990, $08F8, $19F0, $0978, $FEC0, $FC00, $0100
                dc.w    $1990, $0878, $19F0, $08F8, $0140, $FC00, $0100
                dc.w    $1990, $07F0, $19F0, $0878, $FEC0, $FC00, $0100
                dc.w    $1990, $0780, $19E0, $07F0, $0000, $FC00, $0100
                dc.w    $2B00, $0800, $2C20, $0840, $0400, $0000, $0000
                dc.w    $2C20, $07C0, $2EE0, $0840, $0400, $FFC0, $0000
                dc.w    $2EE0, $0790, $2F50, $0800, $0300, $FD00, $0100
                dc.w    $2F00, $0700, $2F70, $0790, $0100, $FC00, $0100
                dc.w    $2F30, $0680, $2F70, $0700, $0000, $FC00, $0100   
;-------------------------------------------------------------------------------
Level_Slides:                                                  ; Offset_0x00457C
                cmpi.w  #Hz_Act_2, (Current_ZoneAndAct).w               ; $0101, $FFFFFE10
                beq.s   Hz2_Water_Slides                       ; Offset_0x00458E
                cmpi.w  #Iz_Act_1, (Current_ZoneAndAct).w               ; $0500, $FFFFFE10
                beq.s   Iz1_Slides                             ; Offset_0x0045F6
                rts     
;-------------------------------------------------------------------------------
Hz2_Water_Slides:                                              ; Offset_0x00458E
                lea     (Obj_Player_One).w, A1                       ; $FFFFB000
                move.b  (Control_Ports_Logical_Data).w, D2           ; $FFFFF602
                bsr.s   Offset_0x0045A0
                lea     (Obj_Player_Two).w, A1                       ; $FFFFB04A
                move.b  (Control_Ports_Logical_Data_2).w, D2         ; $FFFFF66A
Offset_0x0045A0:
                btst    #$01, Obj_Status(A1)                             ; $002A
                bne.s   Offset_0x0045DC
                cmpi.b  #$0C, Obj_Player_Top_Solid(A1)                   ; $0046
                beq.s   Offset_0x0045DC
                lea     (Fg_Mem_Start_Address).w, A2                 ; $FFFF8000
                move.w  Obj_Y(A1), D0                                    ; $0014
                lsr.w   #$05, D0
                and.w   (Level_Layout_Wrap_Row).w, D0                ; $FFFFEEAE
                move.w  $08(A2, D0), D0
                move.w  Obj_X(A1), D1                                    ; $0010
                lsr.w   #$07, D1
                add.w   D1, D0
                move.w  D0, A2
                move.b  (A2), D0
                lea     (Hz2_Slide_Action_Data+$0A)(PC), A2    ; Offset_0x004724
                moveq   #$09, D1
Offset_0x0045D4:
                cmp.b   -(A2), D0
                dbeq    D1, Offset_0x0045D4
                beq.s   Offset_0x0045F0
Offset_0x0045DC:
                tst.b   Obj_Player_Status(A1)                            ; $002F
                bpl.s   Offset_0x0045EE
                move.w  #$0005, Obj_P_Horiz_Ctrl_Lock(A1)                ; $0032
                andi.b  #$7F, Obj_Player_Status(A1)                      ; $002F
Offset_0x0045EE:
                rts
Offset_0x0045F0:
                moveq   #-$08, D0
                bra     Offset_0x004662
;-------------------------------------------------------------------------------                
Iz1_Slides:                                                    ; Offset_0x0045F6
                lea     (Obj_Player_One).w, A1                       ; $FFFFB000
                move.b  (Control_Ports_Logical_Data).w, D2           ; $FFFFF602
                bsr.s   Offset_0x004608
                lea     (Obj_Player_Two).w, A1                       ; $FFFFB04A
                move.b  (Control_Ports_Logical_Data_2).w, D2         ; $FFFFF66A
Offset_0x004608:
                btst    #$01, Obj_Status(A1)                             ; $002A
                bne.s   Offset_0x004644
                btst    #$03, Obj_Status(A1)                             ; $002A
                bne.s   Offset_0x004644
                lea     (Fg_Mem_Start_Address).w, A2                 ; $FFFF8000
                move.w  Obj_Y(A1), D0                                    ; $0014
                lsr.w   #$05, D0
                and.w   (Level_Layout_Wrap_Row).w, D0                ; $FFFFEEAE
                move.w  $08(A2, D0), D0
                move.w  Obj_X(A1), D1                                    ; $0010
                lsr.w   #$07, D1
                add.w   D1, D0
                move.w  D0, A2
                move.b  (A2), D0
                lea     (Iz_Slide_Tile_Data+$0A)(PC), A2       ; Offset_0x00472E    
                moveq   #$09, D1
Offset_0x00463C:
                cmp.b   -(A2), D0
                dbeq    D1, Offset_0x00463C
                beq.s   Offset_0x004658
Offset_0x004644:
                tst.b   Obj_Player_Status(A1)                            ; $002F
                bpl.s   Offset_0x004656
                move.w  #$0005, Obj_P_Horiz_Ctrl_Lock(A1)                ; $0032
                andi.b  #$7F, Obj_Player_Status(A1)                      ; $002F
Offset_0x004656:
                rts
Offset_0x004658:
                lea     (Iz_Slide_Action_Data), A2             ; Offset_0x004710
                move.b  $00(A2, D1), D0
Offset_0x004662:
                beq.s   Offset_0x0046A0
                move.b  Obj_Inertia(A1), D1                              ; $001C
                tst.b   D0
                bpl.s   Offset_0x004678
                cmp.b   D0, D1
                ble.s   Offset_0x004682
                subi.w  #$0040, Obj_Inertia(A1)                          ; $001C
                bra.s   Offset_0x004682
Offset_0x004678:
                cmp.b   D0, D1
                bge.s   Offset_0x004682
                addi.w  #$0040, Obj_Inertia(A1)                          ; $001C
Offset_0x004682:
                bclr    #$00, Obj_Status(A1)                             ; $002A
                tst.b   D1
                bpl.s   Offset_0x004692
                bset    #$00, Obj_Status(A1)                             ; $002A
Offset_0x004692:
                move.b  #$1B, Obj_Ani_Number(A1)                         ; $0020
                ori.b   #$80, Obj_Player_Status(A1)                      ; $002F
                rts
Offset_0x0046A0:
                move.w  #$0004, D1
                move.w  Obj_Inertia(A1), D0                              ; $001C
                btst    #$02, D2
                beq.s   Offset_0x0046C2
                move.b  #$00, Obj_Ani_Number(A1)                         ; $0020
                bset    #$00, Obj_Status(A1)                             ; $002A
                sub.w   D1, D0
                tst.w   D0
                bpl.s   Offset_0x0046C2
                sub.w   D1, D0
Offset_0x0046C2:
                btst    #$03, D2
                beq.s   Offset_0x0046DC
                move.b  #$00, Obj_Ani_Number(A1)                         ; $0020
                bclr    #$00, Obj_Status(A1)                             ; $002A
                add.w   D1, D0
                tst.w   D0
                bmi.s   Offset_0x0046DC
                add.w   D1, D0
Offset_0x0046DC:
                move.w  #$0004, D1
                tst.w   D0
                beq.s   Offset_0x004704
                bmi.s   Offset_0x0046F6
                sub.w   D1, D0
                bhi.s   Offset_0x0046F4
                move.w  #$0000, D0
                move.b  #$05, Obj_Ani_Number(A1)                         ; $0020
Offset_0x0046F4:
                bra.s   Offset_0x004704
Offset_0x0046F6:
                add.w   D1, D0
                bhi.s   Offset_0x004704
                move.w  #$0000, D0
                move.b  #$05, Obj_Ani_Number(A1)                         ; $0020
Offset_0x004704:
                move.w  D0, Obj_Inertia(A1)                              ; $001C
                ori.b   #$80, Obj_Player_Status(A1)                      ; $002F
                rts   
;-------------------------------------------------------------------------------
Iz_Slide_Action_Data:                                          ; Offset_0x004710
                dc.b    $F8, $F8, $08, $08, $F4, $F4, $F4, $0C
                dc.b    $0C, $0C
Hz2_Slide_Action_Data:                                         ; Offset_0x00471A                
                dc.b    $1B, $71, $80, $81, $88, $8E, $9B, $9C
                dc.b    $A1, $A2   
Iz_Slide_Tile_Data:                                            ; Offset_0x004724
                dc.b    $30, $C0, $35, $BF, $27, $2D, $46, $22
                dc.b    $2A, $2E                                                                                                               
;===============================================================================
; Modo de jogo ou demonstra��o das fases 
; <<<-
;===============================================================================
                
AIz_1_Water_Transistion:                                       ; Offset_0x00472E
                dc.w    $000F
                dc.w    $0002, $0068, $0062, $0042, $0048, $004E, $0054, $0008
                dc.w    $000E, $0014, $001A, $0034, $0022, $003A, $002E, $0028
AIz_2_Water_Transistion:                                       ; Offset_0x004750
                dc.w    $0012
                dc.w    $006E, $0068, $0002, $0048, $0042, $004E, $005A, $0054
                dc.w    $0062, $0074, $0008, $000E, $0014, $001A, $0034, $0022
                dc.w    $003A, $002E, $0028
Hz_Water_Transistion:                                          ; Offset_0x004778
                dc.w    $0013
                dc.w    $0002, $0074, $0062, $0068, $006E, $0042, $0048, $007A
                dc.w    $005A, $0054, $0008, $000E, $0014, $001A, $002E, $0034
                dc.w    $0028, $003A, $0022, $004E
LBz_2_Water_Transistion:                                       ; Offset_0x0047A2
                dc.w    $0013  
                dc.w    $0002, $006E, $0068, $007A, $0062, $0074, $0042, $0048
                dc.w    $005A, $0054, $0008, $000E, $0014, $001A, $002E, $0034
                dc.w    $0028, $003A, $0022, $004E
; Offset_0x0047CC:                
                dc.w    $0013
                dc.w    $0002, $0008, $000E, $0014, $001A, $0042, $0048, $004E
                dc.w    $0054, $005A, $0062, $0068, $006E, $0074, $007A, $0022
                dc.w    $0028, $002E, $0034, $003A                          
;===============================================================================
; Rotina de controle autom�tico do jogador usado no modo de demonstra��o
; ->>>
;===============================================================================               
Init_Demo_Control:                                             ; Offset_0x0047F6
                tst.w   (Auto_Control_Player_Flag).w                 ; $FFFFFFF0
                bne     Run_Demo_Mode                          ; Offset_0x004884
                rts
;-------------------------------------------------------------------------------
; Offset_0x004800: ; Sonic 2 Left over
                lea     (Demo_Index), A1                       ; Offset_0x00491E
                moveq   #$00, D0
                move.b  (Current_Zone).w, D0                             ; $FFFFFE10
                lsl.w   #$02, D0
                move.l  $00(A1, D0), A1
                move.w  (Demo_Button_Index).w, D0                    ; $FFFFF790
                adda.w  D0, A1
                move.b  (Control_Ports_Buffer_Data).w, D0            ; $FFFFF604
                cmp.b   (A1), D0
                bne.s   Offset_0x00482E
                addq.b  #$01, $0001(A1)
                cmpi.b  #$FF, $0001(A1)
                beq.s   Offset_0x00482E
                bra.s   Offset_0x004842
Offset_0x00482E:
                move.b  D0, $0002(A1)
                move.b  #$00, $0003(A1)
                addq.w  #$02, (Demo_Button_Index).w                  ; $FFFFF790
                andi.w  #$03FF, (Demo_Button_Index).w                ; $FFFFF790
Offset_0x004842:
                rts
;-------------------------------------------------------------------------------  
; Offset_0x004844: ; Sonic 2 Left over
                cmpi.b  #S2_EHz_Id, (Current_Zone).w                ; $00, $FFFFFE10
                bne.s   Offset_0x004882
                lea     ((M68K_Dev_RAM_Start+$C000)&$00FFFFFF), A1           ; $00FEC000
                move.w  (Demo_Button_Index_2P).w, D0                 ; $FFFFF732
                adda.w  D0, A1
                move.b  (Control_Ports_Buffer_Data+$02).w, D0        ; $FFFFF606
                cmp.b   (A1), D0
                bne.s   Offset_0x00486E
                addq.b  #$01, $0001(A1)
                cmpi.b  #$FF, $0001(A1)
                beq.s   Offset_0x00486E
                bra.s   Offset_0x004882
Offset_0x00486E:
                move.b  D0, $0002(A1)
                move.b  #$00, $0003(A1)
                addq.w  #$02, (Demo_Button_Index_2P).w               ; $FFFFF732
                andi.w  #$03FF, (Demo_Button_Index_2P).w             ; $FFFFF732
Offset_0x004882:
                rts
;-------------------------------------------------------------------------------               
Run_Demo_Mode:                                                 ; Offset_0x004884
                move.b  (Control_Ports_Buffer_Data+$01).w, D0        ; $FFFFF605
                or.b    (Control_Ports_Buffer_Data+$03).w, D0        ; $FFFFF607
                andi.b  #$80, D0
                beq.s   Offset_0x00489E
                tst.w   (Auto_Control_Player_Flag).w                 ; $FFFFFFF0
                bmi.s   Offset_0x00489E
                move.b  #gm_TitleScreen, (Game_Mode).w          ; $04, $FFFFF600
Offset_0x00489E:
                lea     (Demo_Index), A1                       ; Offset_0x00491E
                moveq   #$00, D0
                move.b  (Current_Zone).w, D0                             ; $FFFFFE10
                lsl.w   #$02, D0
                move.l  $00(A1, D0), A1
                move.w  (Demo_Button_Index).w, D0                    ; $FFFFF790
                adda.w  D0, A1
                move.b  (A1), D0
                andi.b  #$7F, D0
                lea     (Control_Ports_Buffer_Data).w, A0            ; $FFFFF604
                move.b  D0, D1
                moveq   #$00, D2
                eor.b   D2, D0
                move.b  D1, (A0)+
                and.b   D1, D0
                move.b  D0, (A0)+
                subq.b  #$01, (Demo_Button_Press_Counter).w          ; $FFFFF792
                bcc.s   Offset_0x0048DC
                move.b  $0003(A1), (Demo_Button_Press_Counter).w     ; $FFFFF792
                addq.w  #$02, (Demo_Button_Index).w                  ; $FFFFF790
Offset_0x0048DC:
                rts    
;-------------------------------------------------------------------------------
; Offset_0x0048DE: ; Sonic 2 Left Over
                cmpi.b  #S2_EHz_Id, (Current_Zone).w                ; $00, $FFFFFE10
                bne.s   Offset_0x004916
                lea     (Demo_Angel_Island), A1                ; Offset_0x004BEA
                move.w  (Demo_Button_Index_2P).w, D0                 ; $FFFFF732
                adda.w  D0, A1
                move.b  (A1), D0
                lea     (Control_Ports_Buffer_Data+$02).w, A0        ; $FFFFF606
                move.b  D0, D1
                moveq   #$00, D2
                eor.b   D2, D0
                move.b  D1, (A0)+
                and.b   D1, D0
                move.b  D0, (A0)+
                subq.b  #$01, (Demo_Button_Press_Counter_2P).w       ; $FFFFF734
                bcc.s   Offset_0x004914
                move.b  $0003(A1), (Demo_Button_Press_Counter_2P).w  ; $FFFFF734
                addq.w  #$02, (Demo_Button_Index_2P).w               ; $FFFFF732
Offset_0x004914:
                rts
Offset_0x004916:
                move.w  #$0000, (Control_Ports_Buffer_Data+$02).w    ; $FFFFF606
                rts                            
;===============================================================================
; Rotina de controle autom�tico do jogador usado no modo de demonstra��o
; <<<-
;===============================================================================                  

Demo_Index:                                                    ; Offset_0x00491E
                dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
                dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
                dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
                dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
                dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
                dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
                dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
                dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
                dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
                dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
                dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
                dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
                dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
                dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
                dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
                dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
                dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
                dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
                dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
                dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
                dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
                dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
                dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
                dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
                dc.l    Demo_Angel_Island                      ; Offset_0x004BEA 
;-------------------------------------------------------------------------------
Demo_End_Index: ; Left over do Sonic 1                         ; Offset_0x004982
                dc.w    $008B, $0837, $0042, $085C, $006A, $085F, $002F, $082C
                dc.w    $0021, $0803, $2830, $0808, $002E, $0815, $000F, $0846
                dc.w    $001A, $08FF, $08CA, $0000, $0000, $0000, $0000, $0000                                        

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to load collision for 16x16 level blocks
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x0049B2:
LoadCollisionIndex:
		moveq	#0,d0
		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#1,d0
		lsr.w	#5,d0
		lea	(Collision_Index).l,a1
		adda.l	d0,a1
		move.l	(a1),d0
		move.l	d0,(Primary_Collision_Ptr).w		; load first collision set
		addi.l	#$600,d0
		move.l	d0,(Secondary_Collision_Ptr).w		; load second collision set ($600 bytes from start of data)
		move.l	#Primary_Collision_Ptr, (Current_Collision_Ptr).w
		rts
; End of subroutine LoadCollisionIndex

;===============================================================================
; Rotina Oscillate_Num_Init
; ->>>
;===============================================================================
Oscillate_Num_Init:                                            ; Offset_0x0049DE
                lea     (Oscillate_Data_Buffer).w, A1                ; $FFFFFE5E
                lea     (Oscillate_Data), A2                   ; Offset_0x0049F2
                moveq   #$20, D1
Offset_0x0049EA:
                move.w  (A2)+, (A1)+
                dbra    D1, Offset_0x0049EA
                rts
;-------------------------------------------------------------------------------                
Oscillate_Data:                                                ; Offset_0x0049F2  
                dc.w    $007D, $0080, $0000, $0080, $0000, $0080, $0000, $0080
                dc.w    $0000, $0080, $0000, $0080, $0000, $0080, $0000, $0080
                dc.w    $0000, $0080, $0000, $3848, $00EE, $2080, $00B4, $3080
                dc.w    $010E, $5080, $01C2, $7080, $0276, $0080, $0000, $4000
                dc.w    $00FE              
;===============================================================================
; Rotina Oscillate_Num_Init
; <<<-
;===============================================================================

;===============================================================================
; Rotina Oscillate_Num_Do
; ->>>
;===============================================================================
Oscillate_Num_Do:                                             ;  Offset_0x004A34
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                bne.s   Offset_0x004A42
                cmpi.b  #$06, (Obj_Player_One+Obj_Routine).w         ; $FFFFB005
                bcc.s   Offset_0x004A88
Offset_0x004A42:
                lea     (Oscillate_Data_Buffer).w, A1                ; $FFFFFE5E
                lea     (Oscillate_Data2), A2                  ; Offset_0x004A8A
                move.w  (A1)+, D3
                moveq   #$0F, D1
Offset_0x004A50:
                move.w  (A2)+, D2
                move.w  (A2)+, D4
                btst    D1, D3
                bne.s   Offset_0x004A6C
                move.w  $0002(A1), D0
                add.w   D2, D0
                move.w  D0, $0002(A1)
                add.w   D0, (A1)
                cmp.b   (A1), D4
                bhi.s   Offset_0x004A7E
                bset    D1, D3
                bra.s   Offset_0x004A7E
Offset_0x004A6C:
                move.w  $0002(A1), D0
                sub.w   D2, D0
                move.w  D0, $0002(A1)
                add.w   D0, (A1)
                cmp.b   (A1), D4
                bls.s   Offset_0x004A7E
                bclr    D1, D3
Offset_0x004A7E:
                addq.w  #$04, A1
                dbra    D1, Offset_0x004A50
                move.w  D3, (Oscillate_Data_Buffer).w                ; $FFFFFE5E
Offset_0x004A88:
                rts
;-------------------------------------------------------------------------------
Oscillate_Data2:                                               ; Offset_0x004A8A
                dc.w    $0002, $0010, $0002, $0018, $0002, $0020, $0002, $0030
                dc.w    $0004, $0020, $0008, $0008, $0008, $0040, $0004, $0040
                dc.w    $0002, $0038, $0002, $0038, $0002, $0020, $0003, $0030
                dc.w    $0005, $0050, $0007, $0070, $0002, $0040, $0002, $0040                
;===============================================================================
; Rotina Oscillate_Num_Do
; <<<-
;===============================================================================

; ---------------------------------------------------------------------------
; Subroutine to change global object animation variables (rings)
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x004ACA: Change_Object_Frame:
ChangeRingFrame:
		subq.b	#1,(Object_Frame_Timer).w
		bpl.s	Offset_0x004AE0
		move.b	#7,(Object_Frame_Timer).w
		addq.b	#1,(Object_Frame_Buffer).w
		andi.b	#3,(Object_Frame_Buffer).w

Offset_0x004AE0:
		tst.b	(Object_Frame_Anim_Counter).w
		beq.s	Offset_0x004B02
		moveq	#0,d0
		move.b	(Object_Frame_Anim_Counter).w,d0
		add.w	(Object_Frame_Anim_Accum).w,d0
		move.w	d0,(Object_Frame_Anim_Accum).w
		rol.w	#7,d0
		andi.w	#3,d0
		move.b	d0,(Object_Frame_Anim_Frame).w
		subq.b	#1,(Object_Frame_Anim_Counter).w

Offset_0x004B02:
		addi.w	#$180,(Object_Frame_Angle).w
		rts
; End of function ChangeRingFrame

;===============================================================================
; Rotina para fazer os an�is e outros objetos girarem em torno de si
; <<<-
;===============================================================================

Clear_End_Level_Art_Load_Flag:                                 ; Offset_0x004B0A
                move.w  #$0000, (End_Level_Art_Load_Flag).w          ; $FFFFFFC8
                rts

;===============================================================================
; Rotina para testar e setar o flag de carga da arte de fim de fase
; ->>>
;===============================================================================                 
S2_Test_End_Level_Art_Load:                                    ; Offset_0x004B12
                move.w  #$0000, (End_Level_Art_Load_Flag).w          ; $FFFFFFC8
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                bne.s   Set_End_Level_Flag                     ; Offset_0x004B80
                cmpi.w  #S2_EHz_Act_2, (Current_ZoneAndAct).w           ; $0001, $FFFFFE10
                beq     Dont_Set_End_Level_Flag                ; Offset_0x004B86
                cmpi.w  #S2_Mz_Act_3, (Current_ZoneAndAct).w            ; $0500, $FFFFFE10
                beq     Dont_Set_End_Level_Flag                ; Offset_0x004B86
                cmpi.w  #S2_WFz, (Current_ZoneAndAct).w                 ; $0600, $FFFFFE10
                beq     Dont_Set_End_Level_Flag                ; Offset_0x004B86
                cmpi.w  #S2_HTz_Act_2, (Current_ZoneAndAct).w           ; $0701, $FFFFFE10
                beq     Dont_Set_End_Level_Flag                ; Offset_0x004B86
                cmpi.w  #S2_OOz_Act_2, (Current_ZoneAndAct).w           ; $0A01, $FFFFFE10
                beq     Dont_Set_End_Level_Flag                ; Offset_0x004B86
                cmpi.w  #S2_MCz_Act_2, (Current_ZoneAndAct).w           ; $0B01, $FFFFFE10
                beq.s   Dont_Set_End_Level_Flag                ; Offset_0x004B86
                cmpi.w  #S2_CNz_Act_2, (Current_ZoneAndAct).w           ; $0C01, $FFFFFE10
                beq.s   Dont_Set_End_Level_Flag                ; Offset_0x004B86
                cmpi.w  #S2_CPz_Act_2, (Current_ZoneAndAct).w           ; $0D01, $FFFFFE10
                beq.s   Dont_Set_End_Level_Flag                ; Offset_0x004B86
                cmpi.w  #S2_DEz, (Current_ZoneAndAct).w                 ; $0E00, $FFFFFE10
                beq.s   Dont_Set_End_Level_Flag                ; Offset_0x004B86
                cmpi.w  #S2_ARz_Act_2, (Current_ZoneAndAct).w           ; $0F01, $FFFFFE10
                beq.s   Dont_Set_End_Level_Flag                ; Offset_0x004B86
                cmpi.w  #S2_SCz, (Current_ZoneAndAct).w                 ; $1000, $FFFFFE10
                beq.s   Dont_Set_End_Level_Flag                ; Offset_0x004B86
Set_End_Level_Flag:                                            ; Offset_0x004B80
                move.w  #$0001, (End_Level_Art_Load_Flag).w          ; $FFFFFFC8
Dont_Set_End_Level_Flag:                                       ; Offset_0x004B86
                rts
;===============================================================================
; Rotina para testar e setar o flag de carga da arte de fim de fase
; ->>>
;===============================================================================

; ---------------------------------------------------------------------------
; Subroutine to load signpost art when a flag is set (leftover from Sonic 2)
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x004B88: Check_End_Level_Art_Load:
CheckLoadSignpostArt:
		tst.w	(End_Level_Art_Load_Flag).w
		beq.s	SignpostUpdateEnd
		tst.w	(Debug_Mode_Flag_Index).w
		bne.s	SignpostUpdateEnd
		move.w	(Camera_X).w,d0
		move.w	(Sonic_Level_Limits_Max_X).w,d1
		subi.w	#$100,d1
		cmp.w	d1,d0
		blt.s	SignpostUpdateTailsBounds
		tst.b	(Update_HUD_timer).w
		beq.s	SignpostUpdateTailsBounds
		cmp.w	(Sonic_Level_Limits_Min_X).w,d1
		beq.s	SignpostUpdateTailsBounds
		move.w	d1,(Sonic_Level_Limits_Min_X).w
		tst.w	(Two_Player_Flag).w
		bne.s	SignpostUpdateEnd
		rts
; ---------------------------------------------------------------------------
		moveq	#$27,d0
		bra.w	LoadPLC2
; ---------------------------------------------------------------------------
; Offset_0x004BC2: S2_Set_End_Level_Miles_Boundaries: 
SignpostUpdateTailsBounds:
		tst.w	(Two_Player_Flag).w
		beq.s	SignpostUpdateEnd
		move.w	(Camera_X_P2).w,d0
		move.w	(Miles_Level_Limits_Max_X).w,d1
		subi.w	#$100,d1
		cmp.w	d1,d0
		blt.s	SignpostUpdateEnd
		tst.b	(HUD_Timer_Refresh_Flag_P2).w
		beq.s	SignpostUpdateEnd
		cmp.w	(Miles_Level_Limits_Min_X).w,d1
		beq.s	SignpostUpdateEnd
		move.w	d1,(Miles_Level_Limits_Min_X).w
; Offset_0x004BE8 Exit_S2_Check_End_Level_Art_Load:
SignpostUpdateEnd:
		rts
; End of function CheckLoadSignpostArt

;===============================================================================
; Rotina para carregar a arte de fim de fase
; <<<-
;=============================================================================== 

Demo_Angel_Island:                                             ; Offset_0x004BEA
                incbin  'data\aiz\demo.dat'     

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to load stage tiles into VRAM from KosM format
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x004FEA: Main_Level_Load_8x8_Tiles:
LoadZoneTiles:
                move.w	(Current_ZoneAndAct).w,d0
                ror.b	#1,d0
                lsr.w	#4,d0
                andi.w	#$1F8,d0
                move.w	d0,d1
                add.w	d0,d0
                add.w	d1,d0
                lea	(TilesMainTable).l,a4
                lea	(a4,d0.w),a4
                move.l	(a4)+,d0
                andi.l	#$FFFFFF,d0
                move.l	d0,d7
                move.l	d0,a1
                move.w	(a1),d4
                move.w	#0,d2
                jsr	(Queue_Kos_Module).l
                move.l	(a4)+,d0
                andi.l	#$FFFFFF,d0
                cmp.l	d0,d7
                beq.s	Offset_0x005034
                move.l	d0,a1
                move.w	d4,d2
                jsr	(Queue_Kos_Module).l

Offset_0x005034:
		move.b	#$C,(VBlank_Index).w
		jsr	(Process_Kos_Queue).l
		bsr.w	Wait_For_VSync
		bsr.w	RunPLC_RAM
		jsr	(Process_Kos_Module_Queue).l
		tst.b	(Kosinski_Modules_Left).w
		bne.s	Offset_0x005034
		rts
; End of function LoadZoneTiles

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to load water in set levels
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x005056: Init_Water_Levels:
Level_InitWaterLevels:
		cmpi.b	#Aiz_Id,(Current_Zone).w
		beq.s	Offset_0x005076
		cmpi.b	#Hz_Id,(Current_Zone).w
		beq.s	Offset_0x005076
		cmpi.w	#CNz_Act_2,(Current_ZoneAndAct).w
		beq.s	Offset_0x005076
		cmpi.w	#LBz_Act_2,(Current_ZoneAndAct).w
		bne.s	Offset_0x005082

Offset_0x005076:
		move.b	#1,(Water_Level_Flag).w
		move.w	#0,(Two_Player_Flag).w

Offset_0x005082:
		tst.b	(Water_Level_Flag).w
		beq.s	LevelInit_UndewaterPalette
		move.w	#$4EF9,(HBlank_Ptr).w
		move.l	#Pal_To_ColorRAM,(HBlank_Ptr+2).w
		cmpi.b	#Hz_Id,(Current_Zone).w
		beq.s	Offset_0x0050B6
		move.l	#HBlank_01,(HBlank_Ptr+2).w
		cmpi.w	#$1000,(Vertical_Frequency).w
		bcs.s	Offset_0x0050B6
		move.l	#HBlank_02,(HBlank_Ptr+2).w

Offset_0x0050B6:
		move.l	#AIz_1_Water_Transistion,(Palette_Underwater_Ptr).w
		moveq	#0,d0
		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#1,d0
		lsr.w	#6,d0
		andi.w	#$FFFE,d0
		lea	(Water_Height_Array).l,a1
		move.w	(a1,d0.w),d0
		move.w	d0,(Water_Level_Move).w
		move.w	d0,(Current_Water_Level).w
		move.w	d0,(Target_Water_Level).w
		clr.b	(Water_Entered_Counter).w
		clr.b	(Underwater_Flag).w
		move.b	#1,(Water_Level_Change_Speed).w
; Offset_0x0050F0:
LevelInit_UndewaterPalette:
		tst.b	(Water_Level_Flag).w
		beq.s	Offset_0x005174
		moveq	#$2B,d0
		cmpi.w	#AIz_Act_1,(Current_ZoneAndAct).w	; are we in AIZ1?
		beq.s	Offset_0x00515C				; if yes, branch
		moveq	#$2C,d0
		move.l	#AIz_2_Water_Transistion,(Palette_Underwater_Ptr).w
		cmpi.w	#AIz_Act_2,(Current_ZoneAndAct).w	; are we in AIZ2?
		beq.s	Offset_0x00515C				; if yes, branch
		moveq	#$31,d0
		move.l	#Hz_Water_Transistion,(Palette_Underwater_Ptr).w
		cmpi.w	#Hz_Act_1,(Current_ZoneAndAct).w	; are we in HCZ1?
		beq.s	Offset_0x00515C				; if yes, branch
		moveq	#$32,d0
		move.l	#Hz_Water_Transistion,(Palette_Underwater_Ptr).w
		cmpi.w	#Hz_Act_2,(Current_ZoneAndAct).w	; are we in HCZ2?
		beq.s	Offset_0x00515C				; if yes, branch
		moveq	#$2D,d0
		move.l	#Hz_Water_Transistion,(Palette_Underwater_Ptr).w
		cmpi.w	#LBz_Act_1,(Current_ZoneAndAct).w	; are we in LBZ1?
		beq.s	Offset_0x00515C				; if yes, branch
		moveq	#$2E,d0
		move.l	#LBz_2_Water_Transistion,(Palette_Underwater_Ptr).w
		cmpi.w	#LBz_Act_2,(Current_ZoneAndAct).w	; are we in LBZ2?
		beq.s	Offset_0x00515C				; if yes, branch
		nop

Offset_0x00515C:
		move.w	d0,d1
		bsr.w	PalLoad_Water_Now
		move.w	d1,d0
		bsr.w	PalLoad_Water_ForFade
		tst.b	(Saved_Level_Flag).w
		beq.s	Offset_0x005174
		move.b	(Saved_Underwater_Flag).w, (Underwater_Flag).w

Offset_0x005174:
		rts
; End of subroutine Level_InitWaterLevels

;===============================================================================
; Rotina para inicializar as fases com �gua    
; <<<-
;=============================================================================== 

; Offset_0x005176:
                subq.w  #$01, Obj_Ani_Time(A0)                           ; $0024
                bpl.s   Offset_0x0051EE
                move.w  #$0007, Obj_Ani_Time(A0)                         ; $0024
                moveq   #$00, D0
                move.b  Obj_Timer(A0), D0                                ; $002E
                addq.b  #$01, Obj_Timer(A0)                              ; $002E
                move.b  Offset_0x0051FA(PC, D0), D0
                bne.s   Offset_0x00519C
                move.b  #$01, Obj_Timer(A0)                              ; $002E
                move.b  Offset_0x0051FA(PC), D0
Offset_0x00519C:
                lsl.w   #$07, D0
                lea     (M68K_RAM_Start), A1                         ; $FFFF0000
                lea     $00(A1, D0), A1
                lea     (M68K_RAM_Start+$0200), A2                   ; $FFFF0200
                move.w  #$007F, D0
Offset_0x0051B2:
                move.w  (A1)+, (A2)+
                dbra    D0, Offset_0x0051B2
                moveq   #$00, D0
                move.b  $002F(A0), D0
                addq.b  #$01, $002F(A0)
                move.b  Offset_0x005214(PC, D0), D0
                bne.s   Offset_0x0051D2
                move.b  #$01, $002F(A0)
                move.b  Offset_0x005214(PC), D0
Offset_0x0051D2:
                lsl.w   #$07, D0
                lea     (M68K_RAM_Start), A1                         ; $FFFF0000
                lea     $00(A1, D0), A1
                lea     (M68K_RAM_Start+$0F00), A2                   ; $FFFF0F00
                move.w  #$003F, D0
Offset_0x0051E8:
                move.w  (A1)+, (A2)+
                dbra    D0, Offset_0x0051E8
Offset_0x0051EE:
                cmpi.w  #$0006, Obj_Ani_Time(A0)                         ; $0024
                beq     Offset_0x005296
                rts
;-------------------------------------------------------------------------------
Offset_0x0051FA:
                dc.b    $02, $12, $06, $14, $08, $16, $0A, $18
                dc.b    $0C, $18, $0A, $16, $08, $14, $06, $12
                dc.b    $03, $1A, $0E, $1C, $10, $1C, $0E, $1A
                dc.b    $00, $00
;-------------------------------------------------------------------------------
Offset_0x005214:
                dc.b    $02, $1F, $20, $21, $22, $23, $24, $25
                dc.b    $26, $27, $28, $29, $2A, $2B, $2C, $2D
                dc.b    $2E, $2F, $30, $31, $32, $33, $34, $35
                dc.b    $36, $37, $38, $39, $3A, $3B, $3C, $3D
                dc.b    $3E, $3F, $40, $41, $42, $43, $44, $45
                dc.b    $46, $47, $48, $49, $4A, $4B, $4C, $4D
                dc.b    $4E, $4D, $4C, $4B, $4A, $49, $48, $47
                dc.b    $46, $45, $44, $43, $42, $41, $40, $3F
                dc.b    $3E, $3D, $3C, $3B, $3A, $39, $38, $37
                dc.b    $36, $35, $34, $33, $32, $31, $30, $2F
                dc.b    $2E, $2D, $2C, $2B, $2A, $29, $28, $27
                dc.b    $26, $25, $24, $23, $22, $21, $20, $1F
                dc.b    $02, $4F, $50, $51, $52, $53, $54, $55
                dc.b    $56, $57, $58, $59, $5A, $5B, $5C, $5D
                dc.b    $5E, $5D, $5C, $5B, $5A, $59, $58, $57
                dc.b    $56, $55, $54, $53, $52, $51, $50, $4F
                dc.b    $00, $00  
;------------------------------------------------------------------------------- 
Offset_0x005296:
                move    #$2700, SR
                movem.l D0-D7/A0-A6, -(A7)
                lea     (Plane_Buffer).w, A0                         ; $FFFFF100
                lea     (Blocks_Mem_Address).w, A2                   ; $FFFF9000
                lea     (Fg_Mem_Index_Address).w, A3                 ; $FFFF8008
                move.w  #$C000, D7
                move.w  (Camera_X).w, D0                             ; $FFFFEE78
                move.w  D0, D1
                move.w  (Camera_Y).w, D0                             ; $FFFFEE7C
                andi.w  #$0FF0, D0
                jsr     (Refresh_Plane_Full)                   ; Offset_0x02FA7C
                movem.l (A7)+, D0-D7/A0-A6
                move    #$2300, SR
                rts                             
;===============================================================================
; Menu de op��es, menu de sele��o de fases no modo 1 e 2 jogadores 
; ->>>
;===============================================================================
S2_Versus_Mode_Menu: 
S2_Options_Menu:
S2_Level_Select_Menu:
S2_Menus:                                                      ; Offset_0x0052CC
                bsr     Pal_FadeFrom                           ; Offset_0x002DE8
                move    #$2700, SR
                move.w  (VDP_Register_1_Command).w, D0               ; $FFFFF60E
                andi.b  #$BF, D0
                move.w  D0, (VDP_Control_Port)                       ; $00C00004
                bsr     ClearScreen                            ; Offset_0x001002
                lea     (VDP_Control_Port), A6                       ; $00C00004
                move.w  #$8004, (A6)
                move.w  #$8230, (A6)
                move.w  #$8407, (A6)
                move.w  #$8230, (A6)
                move.w  #$8700, (A6)
                move.w  #$8C81, (A6)
                move.w  #$9001, (A6)
                lea     (Sprite_Table_Input).w, A1                   ; $FFFFAC00
                moveq   #$00, D0
                move.w  #$00FF, D1
Offset_0x005312:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x005312
                lea     (Obj_Memory_Address).w, A1                   ; $FFFFB000
                moveq   #$00, D0
                move.w  #$07FF, D1
Offset_0x005322:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x005322
                clr.w   (DMA_Buffer_List).w                          ; $FFFFE700
                move.l  #DMA_Buffer_List, (DMA_Buffer_List_End).w  ; $FFFFE700, $FFFFE8F8
                move.l  #$42000000, (VDP_Control_Port)               ; $00C00004
                lea     (Art_Menu_Font), A0                    ; Offset_0x1095D6
                bsr     NemesisDec                             ; Offset_0x001390
                move.l  #$4E000000, (VDP_Control_Port)               ; $00C00004
                lea     (Art_Menu_Frame), A0                   ; Offset_0x109EC8
                bsr     NemesisDec                             ; Offset_0x001390
                move.l  #$52000000, (VDP_Control_Port)               ; $00C00004
                lea     (Art_Level_Icons), A0                  ; Offset_0x109F48
                bsr     NemesisDec                             ; Offset_0x001390
                lea     (M68K_RAM_Start), A1                         ; $FFFF0000
                lea     (Versus_Menu_Bg_Mappings), A0          ; Offset_0x109D1C
                move.w  #$6000, D0
                bsr     EnigmaDec                              ; Offset_0x00168A
                lea     (M68K_RAM_Start), A1                         ; $FFFF0000
                move.l  #$60000003, D0
                moveq   #$27, D1
                moveq   #$1B, D2
                jsr     (ShowVDPGraphics)                      ; Offset_0x0012BC
                cmpi.b  #gm_S2_Options_Menu, (Game_Mode).w      ; $24, $FFFFF600
                beq     Options_Menu                           ; Offset_0x0056CA
                cmpi.b  #gm_Level_Select_Menu, (Game_Mode).w    ; $28, $FFFFF600   
                beq     Level_Select_Menu                      ; Offset_0x0059F0
;-------------------------------------------------------------------------------                
; Level_Select_Menu_2P:                  
                lea     (M68K_RAM_Start), A1                         ; $FFFF0000
                lea     (Vs_Level_Select_Frame_Mappings), A0   ; Offset_0x006410
                move.w  #$0070, D0
                bsr     EnigmaDec                              ; Offset_0x00168A
                lea     (M68K_RAM_Start+$0198), A1                   ; $FFFF0198
                lea     (Vs_Level_Select_Frame_Mappings), A0   ; Offset_0x006410
                move.w  #$2070, D0
                bsr     EnigmaDec                              ; Offset_0x00168A
                lea     (M68K_RAM_Start+$0330), A1                   ; $FFFF0330
                lea     (Menu_Icons_Mappings), A0              ; Offset_0x0065E2
                move.w  #$0090, D0
                bsr     EnigmaDec                              ; Offset_0x00168A
                lea     (M68K_RAM_Start+$0498), A2                   ; $FFFF0498
                moveq   #$0F, D1
Offset_0x0053F2:
                move.w  #$207B, (A2)+
                dbra    D1, Offset_0x0053F2
                bsr     Offset_0x005580
                addq.b  #$01, (Level_Id_2P).w                        ; $FFFFFF88
                andi.b  #$03, (Level_Id_2P).w                        ; $FFFFFF88
                bsr     Offset_0x00561A
                addq.b  #$01, (Level_Id_2P).w                        ; $FFFFFF88
                andi.b  #$03, (Level_Id_2P).w                        ; $FFFFFF88
                bsr     Offset_0x00561A
                addq.b  #$01, (Level_Id_2P).w                        ; $FFFFFF88
                andi.b  #$03, (Level_Id_2P).w                        ; $FFFFFF88
                bsr     Offset_0x00561A
                addq.b  #$01, (Level_Id_2P).w                        ; $FFFFFF88
                andi.b  #$03, (Level_Id_2P).w                        ; $FFFFFF88
                clr.w   (Player_Selected_Flag).w                     ; $FFFFFF08
                clr.b   (Act_Id_2P).w                                ; $FFFFFF89
                clr.w   (Results_Screen_2P).w                        ; $FFFFFF02
                clr.b   (Title_Card_Flag).w                          ; $FFFFF711
                clr.w   (Animate_Counters).w                         ; $FFFFF7F0
                clr.w   (Game_Over_2P_Flag).w                        ; $FFFFFF98
                lea     (Menu_Animate), A2                     ; Offset_0x006614
                jsr     (Dynamic_Normal)                       ; Offset_0x01F2DE
                moveq   #$04, D0
                bsr     PalLoad_ForFade                               ; Offset_0x002F9E
                lea     (Palette_Row_2_Offset).w, A1                 ; $FFFFED40
                lea     (Palette_Data_Target+$40).w, A2              ; $FFFFEDC0
                moveq   #$07, D1
Offset_0x005466:
                move.l  (A1), (A2)+
                clr.l   (A1)+
                dbra    D1, Offset_0x005466
                move.w  #$0707, (Demo_Timer).w                       ; $FFFFF614
                clr.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                clr.l   (Camera_X).w                                 ; $FFFFEE78
                clr.l   (Camera_Y).w                                 ; $FFFFEE7C
                move.b  #$16, (VBlank_Index).w                       ; $FFFFF62A
                bsr     Wait_For_VSync                         ; Offset_0x001AEE
                move.w  (VDP_Register_1_Command).w, D0               ; $FFFFF60E
                ori.b   #$40, D0
                move.w  D0, (VDP_Control_Port)                       ; $00C00004
                bsr     Pal_FadeTo                             ; Offset_0x002D20
Offset_0x00549C:
                move.b  #$16, (VBlank_Index).w                       ; $FFFFF62A
                bsr     Wait_For_VSync                         ; Offset_0x001AEE
                move    #$2700, SR
                bsr     Offset_0x00561A
                bsr     Offset_0x00555C
                bsr     Offset_0x005580
                move    #$2300, SR
                lea     (Menu_Animate), A2                     ; Offset_0x006614
                jsr     (Dynamic_Normal)                       ; Offset_0x01F2DE
                move.b  (Control_Ports_Buffer_Data+$0001).w, D0      ; $FFFFF605
                or.b    (Control_Ports_Buffer_Data+$0003).w, D0      ; $FFFFF607
                andi.b  #$80, D0
                bne.s   Offset_0x0054D8
                bra     Offset_0x00549C
Offset_0x0054D8:
                bsr     Offset_0x005600
                bmi.s   Offset_0x0054EA
                move.w  #$00ED, D0
                bsr     Play_Music                             ; Offset_0x001176
                bra     Offset_0x00549C
Offset_0x0054EA:
                move.b  #gm_SEGALogo, (Game_Mode).w             ; $00, $FFFFF600
                rts
;-------------------------------------------------------------------------------
Load_Selected_Level_2P:                                        ; Offset_0x0054F2
                moveq   #$00, D0
                move.b  (Level_Id_2P).w, D0                          ; $FFFFFF88
                add.w   D0, D0
                move.w  Menu_Level_Select_Array_2P(PC, D0), D0 ; Offset_0x005554
                bmi.s   Menu_Load_Special_Stage_2P             ; Offset_0x00553C
                move.w  D0, (Current_ZoneAndAct).w                             ; $FFFFFE10
                move.w  D0, (Apparent_ZoneAndAct).w                           ; $FFFFEE54
                move.w  #$0001, (Two_Player_Flag).w                  ; $FFFFFFD8
                move.b  #gm_PlayMode, (Game_Mode).w             ; $0C, $FFFFF600
                move.b  #$00, (Saved_Level_Flag).w                   ; $FFFFFE30
                move.b  #$00, (Saved_Level_Flag_P2).w                ; $FFFFFEE0
                moveq   #$00, D0
                move.l  D0, (Score_Count_Address).w                  ; $FFFFFE26
                move.l  D0, (Score_Count_Address_P2).w               ; $FFFFFED6
                move.l  #$00001388, (Next_Extra_Life_Score).w        ; $FFFFFFC0
                move.l  #$00001388, (Next_Extra_Life_Score_P2).w     ; $FFFFFFC4
                rts
Menu_Load_Special_Stage_2P:                                    ; Offset_0x00553C
                move.b  #$04, (Current_SpecialStage).w                   ; $FFFFFE16
                move.b  #gm_S2_SpecialStage, (Game_Mode).w      ; $10, $FFFFF600
                moveq   #$01, D0
                move.w  D0, (Two_Player_Flag).w                      ; $FFFFFFD8
                move.w  D0, (Two_Player_Flag_2).w                    ; $FFFFFF8A
                rts  
Menu_Level_Select_Array_2P:                                    ; Offset_0x005554               
                dc.w    $0000, $0B00, $0C00, $FFFF   
;-------------------------------------------------------------------------------
Offset_0x00555C:
                move.b  (Control_Ports_Buffer_Data+$0001).w, D0      ; $FFFFF605
                or.b    (Control_Ports_Buffer_Data+$0003).w, D0      ; $FFFFF607
                move.b  D0, D1
                andi.b  #$03, D0
                beq.s   Offset_0x005572
                bchg    #01, (Level_Id_2P).w                         ; $FFFFFF88
Offset_0x005572:
                andi.b  #$0C, D1
                beq.s   Offset_0x00557E
                bchg    #00, (Level_Id_2P).w                         ; $FFFFFF88
Offset_0x00557E:
                rts      
;-------------------------------------------------------------------------------
Offset_0x005580:
                moveq   #$00, D0
                move.b  (Level_Id_2P).w, D0                          ; $FFFFFF88
                lsl.w   #$04, D0
                lea     (Level_Select_Text_2P), A3             ; Offset_0x00567C
                lea     $00(A3, D0), A3
                move.w  #$6000, D0
                lea     (M68K_RAM_Start+$0048), A2                   ; $FFFF0048
                move.l  (A3)+, A1
                bsr     Offset_0x0056BC
                lea     (M68K_RAM_Start+$0094), A2                   ; $FFFF0094
                move.l  (A3)+, A1
                bsr     Offset_0x0056BC
                lea     (M68K_RAM_Start+$00D8), A2                   ; $FFFF00D8
                move.l  $0004(A3), A1
                bsr     Offset_0x005600
                bmi.s   Offset_0x0055C4
                lea     (M68K_RAM_Start+$0468), A1                   ; $FFFF0468
Offset_0x0055C4:
                moveq   #$02, D1
Offset_0x0055C6:
                move.l  (A1)+, (A2)+
                move.l  (A1)+, (A2)+
                lea     $001A(A2), A2
                dbra    D1, Offset_0x0055C6
                lea     (M68K_RAM_Start), A1                         ; $FFFF0000
                move.l  (A3)+, D0
                moveq   #$10, D1
                moveq   #$0B, D2
                bsr     ShowVDPGraphics                        ; Offset_0x0012BC
                lea     (Pal_Levels_Icons), A1                 ; Offset_0x006230
                moveq   #$00, D0
                move.b  (A3), D0
                lsl.w   #$05, D0
                lea     $00(A1, D0), A1
                lea     (Palette_Row_2_Offset).w, A2                 ; $FFFFED40
                moveq   #$07, D1
Offset_0x0055F8:
                move.l  (A1)+, (A2)+
                dbra    D1, Offset_0x0055F8
                rts
Offset_0x005600:
                moveq   #$00, D0
                move.b  (Level_Id_2P).w, D0                          ; $FFFFFF88
                move.w  D0, D1
                add.w   D0, D0
                add.w   D1, D0
                add.w   D0, D0
                lea     $00(A5, D0), A5
                move.w  (A5), D0
                add.w   $0002(A5), D0
                rts        
;-------------------------------------------------------------------------------
Offset_0x00561A:
                moveq   #$00, D0
                move.b  (Level_Id_2P).w, D0                          ; $FFFFFF88
                lsl.w   #$04, D0
                lea     (Level_Select_Text_2P), A3             ; Offset_0x00567C
                lea     $00(A3, D0), A3
                moveq   #$00, D0
                lea     (M68K_RAM_Start+$01E0), A2                   ; $FFFF01E0
                move.l  (A3)+, A1
                bsr     Offset_0x0056BC
                lea     (M68K_RAM_Start+$022C), A2                   ; $FFFF022C
                move.l  (A3)+, A1
                bsr     Offset_0x0056BC
                lea     (M68K_RAM_Start+$0270), A2                   ; $FFFF0270
                lea     (M68K_RAM_Start+$0498), A1                   ; $FFFF0498
                bsr     Offset_0x005600
                bmi.s   Offset_0x00565E
                lea     (M68K_RAM_Start+$0468), A1                   ; $FFFF0468
Offset_0x00565E:
                moveq   #$02, D1
Offset_0x005660:
                move.l  (A1)+, (A2)+
                move.l  (A1)+, (A2)+
                lea     $001A(A2), A2
                dbra    D1, Offset_0x005660
                lea     (M68K_RAM_Start+$0198), A1                   ; $FFFF0198
                move.l  (A3)+, D0
                moveq   #$10, D1
                moveq   #$0B, D2
                bra     ShowVDPGraphics                        ; Offset_0x0012BC 
;-------------------------------------------------------------------------------   
Level_Select_Text_2P:                                          ; Offset_0x00567C               
                dc.l    Map_Emerald_Hill                       ; Offset_0x00610E               
                dc.l    Map_Zone                               ; Offset_0x006150         
                dc.w    $4104, $0003, $00FF, $0330
                dc.l    Map_Mystic_Cave                        ; Offset_0x00611B 
                dc.l    Map_Zone                               ; Offset_0x006150
                dc.w    $412C, $0003, $05FF, $03A8
                dc.l    Map_Casino_Night                       ; Offset_0x006128
                dc.l    Map_Zone                               ; Offset_0x006150
                dc.w    $4784, $0003, $06FF, $03C0
                dc.l    Map_Special                            ; Offset_0x006143
                dc.l    Map_Stage                              ; Offset_0x006156
                dc.w    $47AC, $0003, $0CFF, $0450      
;-------------------------------------------------------------------------------    
Offset_0x0056BC:
                moveq   #$00, D1
                move.b  (A1)+, D1
Offset_0x0056C0:
                move.b  (A1)+, D0
                move.w  D0, (A2)+
                dbra    D1, Offset_0x0056C0
                rts    
;-------------------------------------------------------------------------------
Options_Menu:                                                  ; Offset_0x0056CA
                lea     (M68K_RAM_Start), A1                         ; $FFFF0000
                lea     (Options_Frame_Mappings), A0           ; Offset_0x006462
                move.w  #$0070, D0
                bsr     EnigmaDec                              ; Offset_0x00168A
                lea     (M68K_RAM_Start+$0160), A1                   ; $FFFF0160
                lea     (Options_Frame_Mappings), A0           ; Offset_0x006462
                move.w  #$2070, D0
                bsr     EnigmaDec                              ; Offset_0x00168A
                clr.b   (Options_Menu_Cursor).w                      ; $FFFFFF8C
                bsr     Offset_0x005880
                addq.b  #$01, (Options_Menu_Cursor).w                ; $FFFFFF8C
                bsr     Offset_0x0058F2
                addq.b  #$01, (Options_Menu_Cursor).w                ; $FFFFFF8C
                bsr     Offset_0x0058F2
                clr.b   (Options_Menu_Cursor).w                      ; $FFFFFF8C
                clr.b   (Title_Card_Flag).w                          ; $FFFFF711
                clr.w   (Animate_Counters).w                         ; $FFFFF7F0
                lea     (Menu_Animate), A2                     ; Offset_0x006614
                jsr     (Dynamic_Normal)                       ; Offset_0x01F2DE
                moveq   #$04, D0
                bsr     PalLoad_ForFade                               ; Offset_0x002F9E
                clr.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                clr.l   (Camera_X).w                                 ; $FFFFEE78
                clr.l   (Camera_Y).w                                 ; $FFFFEE7C
                clr.w   (Secret_Code_Input_Entries).w                ; $FFFFFFD4
                clr.w   (Secret_Code_Input_Entries_2).w              ; $FFFFFFD6
                move.b  #$16, (VBlank_Index).w                       ; $FFFFF62A
                bsr     Wait_For_VSync                         ; Offset_0x001AEE
                move.w  (VDP_Register_1_Command).w, D0               ; $FFFFF60E
                ori.b   #$40, D0
                move.w  D0, (VDP_Control_Port)                       ; $00C00004
                bsr     Pal_FadeTo                             ; Offset_0x002D20
Offset_0x005758:
                move.b  #$16, (VBlank_Index).w                       ; $FFFFF62A
                bsr     Wait_For_VSync                         ; Offset_0x001AEE
                move    #$2700, SR
                bsr     Offset_0x0058F2
                bsr     Offset_0x0057DE
                bsr     Offset_0x005880
                move    #$2300, SR
                lea     (Menu_Animate), A2                     ; Offset_0x006614
                jsr     (Dynamic_Normal)                       ; Offset_0x01F2DE
                move.b  (Control_Ports_Buffer_Data+$0001).w, D0      ; $FFFFF605
                or.b    (Control_Ports_Buffer_Data+$0003).w, D0      ; $FFFFF607
                andi.b  #$80, D0
                bne.s   Offset_0x005794
                bra     Offset_0x005758
Offset_0x005794:
                move.b  (Options_Menu_Cursor).w, D0                  ; $FFFFFF8C
                bne.s   Offset_0x0057B4
                moveq   #$00, D0
                move.w  D0, (Two_Player_Flag).w                      ; $FFFFFFD8
                move.w  D0, (Two_Player_Flag_2).w                    ; $FFFFFF8A
                move.w  D0, (Current_ZoneAndAct).w                             ; $FFFFFE10
                move.w  D0, (Apparent_ZoneAndAct).w                           ; $FFFFEE54
                move.b  #gm_PlayMode, (Game_Mode).w             ; $0C, $FFFFF600
                rts
Offset_0x0057B4:
                subq.b  #$01, D0
                bne.s   Offset_0x0057D6
                moveq   #$01, D0
                move.w  D0, (Two_Player_Flag).w                      ; $FFFFFFD8
                move.w  D0, (Two_Player_Flag_2).w                    ; $FFFFFF8A
                move.b  #gm_S2_Versus_Mode_Menu, (Game_Mode).w  ; $1C, $FFFFF600
                move.b  #$00, (Level_Id_2P).w                        ; $FFFFFF88
                move.w  #$0000, (Player_Selected_Flag).w             ; $FFFFFF08
                rts
Offset_0x0057D6:
                move.b  #gm_SEGALogo, (Game_Mode).w             ; $00, $FFFFF600
                rts
Offset_0x0057DE:
                moveq   #$00, D2
                move.b  (Options_Menu_Cursor).w, D2                  ; $FFFFFF8C
                move.b  (Control_Ports_Buffer_Data+$0001).w, D0      ; $FFFFF605
                or.b    (Control_Ports_Buffer_Data+$0003).w, D0      ; $FFFFF607
                btst    #$00, D0
                beq.s   Offset_0x0057FA
                subq.b  #$01, D2
                bcc.s   Offset_0x0057FA
                move.b  #$02, D2
Offset_0x0057FA:
                btst    #$01, D0
                beq.s   Offset_0x00580A
                addq.b  #$01, D2
                cmpi.b  #$03, D2
                bcs.s   Offset_0x00580A
                moveq   #$00, D2
Offset_0x00580A:
                move.b  D2, (Options_Menu_Cursor).w                  ; $FFFFFF8C
                lsl.w   #$02, D2
                move.b  Menu_Options_Boundaries(PC, D2), D3    ; Offset_0x005874
                move.l  Menu_Options_Boundaries(PC, D2), A1    ; Offset_0x005874
                move.w  (A1), D2
                btst    #$02, D0
                beq.s   Offset_0x005826
                subq.b  #$01, D2
                bcc.s   Offset_0x005826
                move.b  D3, D2
Offset_0x005826:
                btst    #$03, D0
                beq.s   Offset_0x005834
                addq.b  #$01, D2
                cmp.b   D3, D2
                bls.s   Offset_0x005834
                moveq   #$00, D2
Offset_0x005834:
                btst    #$06, D0
                beq.s   Offset_0x005844
                addi.b  #$10, D2
                cmp.b   D3, D2
                bls.s   Offset_0x005844
                moveq   #$00, D2
Offset_0x005844:
                move.w  D2, (A1)
                cmpi.b  #$02, (Options_Menu_Cursor).w                ; $FFFFFF8C
                bne.s   Offset_0x005872
                andi.w  #$0030, D0
                beq.s   Offset_0x005872
                move.w  (Sound_Test_Sound).w, D0                     ; $FFFFFF84
                bsr     Play_Music                             ; Offset_0x001176
                lea     (S2_Code_Level_Select), A0             ; Offset_0x006044
                lea     (S2_Code_14_Continues), A2             ; Offset_0x006049
                lea     (Level_Select_Flag).w, A1                    ; $FFFFFFD0
                moveq   #$00, D2
                bsr     Menu_Check_Secret_Codes                ; Offset_0x005FD8
Offset_0x005872:
                rts   
;-------------------------------------------------------------------------------                 
Menu_Options_Boundaries:                                       ; Offset_0x005874
                dc.l    ($02<<$18)|(Player_Select_Flag&$00FFFFFF)    ; Jogador selecionado 
                dc.l    ($01<<$18)|(Two_Player_Items_Mode&$00FFFFFF) ; Op��es do modo 2 Player
                dc.l    ($C9<<$18)|(Sound_Test_Sound&$00FFFFFF)      ; Intervalo do Sound Test
;-------------------------------------------------------------------------------
Offset_0x005880:
                bsr     Offset_0x005962
                moveq   #$00, D1
                move.b  (Options_Menu_Cursor).w, D1                  ; $FFFFFF8C
                lsl.w   #$03, D1
                lea     (Menu_Options_Idx), A3                 ; Offset_0x0059B4
                lea     $00(A3, D1), A3
                move.w  #$6000, D0
                lea     (M68K_RAM_Start+$0030), A2                   ; $FFFF0030
                move.l  (A3)+, A1
                bsr     Offset_0x0056BC
                lea     (M68K_RAM_Start+$00B6), A2                   ; $FFFF00B6
                moveq   #$00, D1
                cmpi.b  #$02, (Options_Menu_Cursor).w                ; $FFFFFF8C
                beq.s   Offset_0x0058C8
                move.b  (Options_Menu_Cursor).w, D1                  ; $FFFFFF8C
                lsl.w   #$02, D1
                lea     Menu_Options_Boundaries(PC), A1        ; Offset_0x005874
                move.l  $00(A1, D1), A1
                move.w  (A1), D1
                lsl.w   #$02, D1
Offset_0x0058C8:
                move.l  $00(A4, D1), A1
                bsr     Offset_0x0056BC
                cmpi.b  #$02, (Options_Menu_Cursor).w                ; $FFFFFF8C
                bne.s   Offset_0x0058E2
                lea     (M68K_RAM_Start+$00C2), A2                   ; $FFFF00C2
                bsr     Offset_0x005990
Offset_0x0058E2:
                lea     (M68K_RAM_Start), A1                         ; $FFFF0000
                move.l  (A3)+, D0
                moveq   #$15, D1
                moveq   #$07, D2
                bra     ShowVDPGraphics                        ; Offset_0x0012BC
;-------------------------------------------------------------------------------
Offset_0x0058F2:
                bsr     Offset_0x005962
                moveq   #$00, D1
                move.b  (Options_Menu_Cursor).w, D1                  ; $FFFFFF8C
                lsl.w   #$03, D1
                lea     (Menu_Options_Idx), A3                 ; Offset_0x0059B4
                lea     $00(A3, D1), A3
                moveq   #$00, D0
                lea     (M68K_RAM_Start+$0190), A2                   ; $FFFF0190
                move.l  (A3)+, A1
                bsr     Offset_0x0056BC
                lea     (M68K_RAM_Start+$0216), A2                   ; $FFFF0216
                moveq   #$00, D1
                cmpi.b  #$02, (Options_Menu_Cursor).w                ; $FFFFFF8C
                beq.s   Offset_0x005938
                move.b  (Options_Menu_Cursor).w, D1                  ; $FFFFFF8C
                lsl.w   #$02, D1
                lea     Menu_Options_Boundaries(PC), A1        ; Offset_0x005874
                move.l  $00(A1, D1), A1
                move.w  (A1), D1
                lsl.w   #$02, D1
Offset_0x005938:
                move.l  $00(A4, D1), A1
                bsr     Offset_0x0056BC
                cmpi.b  #$02, (Options_Menu_Cursor).w                ; $FFFFFF8C
                bne.s   Offset_0x005952
                lea     ($FFFF0222), A2
                bsr     Offset_0x005990
Offset_0x005952:
                lea     (M68K_RAM_Start+$0160), A1                   ; $FFFF0160
                move.l  (A3)+, D0
                moveq   #$15, D1
                moveq   #$07, D2
                bra     ShowVDPGraphics                        ; Offset_0x0012BC
Offset_0x005962:
                lea     (Map_Player_Select_Jap_Idx), A4        ; Offset_0x0059CC
                tst.b   (Hardware_Id).w                              ; $FFFFFFF8
                bpl.s   Offset_0x005974
                lea     (Map_Player_Select_Idx), A4            ; Offset_0x0059D8
Offset_0x005974:
                tst.b   (Options_Menu_Cursor).w                      ; $FFFFFF8C
                beq.s   Offset_0x005980
                lea     (Map_Vs_Mode_Items_Idx), A4            ; Offset_0x0059E4
Offset_0x005980:
                cmpi.b  #$02, (Options_Menu_Cursor).w                ; $FFFFFF8C
                bne.s   Offset_0x00598E
                lea     (Map_Sound_Test_Idx), A4               ; Offset_0x0059EC
Offset_0x00598E:
                rts
Offset_0x005990:
                move.w  (Sound_Test_Sound).w, D1                     ; $FFFFFF84
                move.b  D1, D2
                lsr.b   #$04, D1
                bsr.s   Offset_0x00599C
                move.b  D2, D1
Offset_0x00599C:
                andi.w  #$000F, D1
                cmpi.b  #$0A, D1
                bcs.s   Offset_0x0059AA
                addi.b  #$04, D1
Offset_0x0059AA:
                addi.b  #$10, D1
                move.b  D1, D0
                move.w  D0, (A2)+
                rts    
;-------------------------------------------------------------------------------                
Menu_Options_Idx:                                              ; Offset_0x0059B4
                dc.l    Map_Player_Select_Caption              ; Offset_0x006058
                dc.w    $4192, $0003
                dc.l    Map_Vs_Mode_Items_Caption              ; Offset_0x0060BA       
                dc.w    $4592, $0003
                dc.l    Map_Sound_Test_Caption                 ; Offset_0x0060EC   
                dc.w    $4992, $0003  
;-------------------------------------------------------------------------------                
Map_Player_Select_Jap_Idx:                                     ; Offset_0x0059CC 
                dc.l    Map_Sonic_And_Miles                    ; Offset_0x00606A                 
                dc.l    Map_Sonic_Alone                        ; Offset_0x00608A  
                dc.l    Map_Miles_Alone                        ; Offset_0x00609A    
;-------------------------------------------------------------------------------                
Map_Player_Select_Idx:                                         ; Offset_0x0059D8  
                dc.l    Map_Sonic_And_Tails                    ; Offset_0x00607A 
                dc.l    Map_Sonic_Alone                        ; Offset_0x00608A
                dc.l    Map_Tails_Alone                        ; Offset_0x0060AA  
;-------------------------------------------------------------------------------                
Map_Vs_Mode_Items_Idx:                                         ; Offset_0x0059E4  
                dc.l    Map_All_Kinds_Items                    ; Offset_0x0060CC  
                dc.l    Map_Teleport_Only                      ; Offset_0x0060DC  
;-------------------------------------------------------------------------------                
Map_Sound_Test_Idx:                                            ; Offset_0x0059EC          
                dc.l    Map_Sound_Test_Sound                   ; Offset_0x0060FE   
;-------------------------------------------------------------------------------
Level_Select_Menu:                                             ; Offset_0x0059F0
                lea     (M68K_RAM_Start), A1                         ; $FFFF0000
                lea     (S2_Menu_Level_Select_Text), A0        ; Offset_0x00648E
                move.w  #$0000, D0
                bsr     EnigmaDec                              ; Offset_0x00168A
                lea     (M68K_RAM_Start), A3                         ; $FFFF0000
                move.w  #$031F, D1
Offset_0x005A0E:
                move.w  #$0000, (A3)+
                dbra    D1, Offset_0x005A0E
                lea     (M68K_RAM_Start+$0696), A3                   ; $FFFF0696
                move.w  #$000F, D1
Offset_0x005A20:
                move.w  #$0000, (A3)+
                dbra    D1, Offset_0x005A20
                lea     (M68K_RAM_Start), A3                         ; $FFFF0000
                lea     (Menu_Level_Select_Text), A1           ; Offset_0x00618A
                lea     (Menu_Text_Positions), A5              ; Offset_0x005FB8
                moveq   #$00, D0
                move.w  #$000E, D1
Offset_0x005A40:
                move.w  (A5)+, D3
                lea     $00(A3, D3), A2
                moveq   #$00, D2
                move.b  (A1)+, D2
                move.w  D2, D3
Offset_0x005A4C:
                move.b  (A1)+, D0
                move.w  D0, (A2)+
                dbra    D2, Offset_0x005A4C
                move.w  #$000D, D2
                sub.w   D3, D2
                bcs.s   Offset_0x005A64
Offset_0x005A5C:
                move.w  #$0000, (A2)+
                dbra    D2, Offset_0x005A5C
Offset_0x005A64:
                move.w  #$0011, (A2)
                lea     $0050(A2), A2
                move.w  #$0012, (A2)
                dbra    D1, Offset_0x005A40
                move.w  #$0000, (A2)
                lea     -$50(A2), A2
                move.w  #$001A, (A2)
                lea     (M68K_RAM_Start), A1                         ; $FFFF0000
                move.l  #$40000003, D0
                moveq   #$27, D1
                moveq   #$1B, D2
                jsr     (ShowVDPGraphics)                      ; Offset_0x0012BC
                moveq   #$00, D3
                bsr     Offset_0x005EA6
                lea     (M68K_RAM_Start+$08C0), A1                   ; $FFFF08C0
                lea     (Menu_Icons_Mappings), A0              ; Offset_0x0065E2
                move.w  #$0090, D0
                bsr     EnigmaDec                              ; Offset_0x00168A
                bsr     Offset_0x005ED4
                clr.w   (Player_Selected_Flag).w                     ; $FFFFFF08
                clr.w   (Results_Screen_2P).w                        ; $FFFFFF02
                clr.b   (Title_Card_Flag).w                          ; $FFFFF711
                clr.w   (Animate_Counters).w                         ; $FFFFF7F0
                lea     (Menu_Animate), A2                     ; Offset_0x006614
                jsr     (Dynamic_Normal)                       ; Offset_0x01F2DE
                moveq   #$04, D0
                bsr     PalLoad_ForFade                               ; Offset_0x002F9E
                lea     (Palette_Row_2_Offset).w, A1                 ; $FFFFED40
                lea     (Palette_Data_Target+$40).w, A2              ; $FFFFEDC0
                moveq   #$07, D1
Offset_0x005AE0:
                move.l  (A1), (A2)+
                clr.l   (A1)+
                dbra    D1, Offset_0x005AE0
                move.w  #$0707, (Demo_Timer).w                       ; $FFFFF614
                clr.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                clr.l   (Camera_X).w                                 ; $FFFFEE78
                clr.l   (Camera_Y).w                                 ; $FFFFEE7C
                move.w  #$0101, (Level_Select_Flag).w                ; $FFFFFFD0
                nop
                nop
                nop
                clr.w   (Secret_Code_Input_Entries).w                ; $FFFFFFD4
                clr.w   (Secret_Code_Input_Entries_2).w              ; $FFFFFFD6
                move.b  #$16, (VBlank_Index).w                       ; $FFFFF62A
                bsr     Wait_For_VSync                         ; Offset_0x001AEE
                move.w  (VDP_Register_1_Command).w, D0               ; $FFFFF60E
                ori.b   #$40, D0
                move.w  D0, (VDP_Control_Port)                       ; $00C00004
                bsr     Pal_FadeTo                             ; Offset_0x002D20
Offset_0x005B2A:
                move.b  #$16, (VBlank_Index).w                       ; $FFFFF62A
                bsr     Wait_For_VSync                         ; Offset_0x001AEE
                move    #$2700, SR
                moveq   #$00, D3
                bsr     Offset_0x005DE6
                bsr     Level_Select_Controls                  ; Offset_0x005CBC
                move.w  #$6000, D3
                bsr     Offset_0x005DE6
                bsr     Offset_0x005ED4
                move    #$2300, SR
                lea     (Menu_Animate), A2                     ; Offset_0x006614
                jsr     (Dynamic_Normal)                       ; Offset_0x01F2DE
                move.b  (Control_Ports_Buffer_Data+$0001).w, D0      ; $FFFFF605
                or.b    (Control_Ports_Buffer_Data+$0003).w, D0      ; $FFFFF607
                andi.b  #$80, D0
                bne.s   Offset_0x005B70
                bra     Offset_0x005B2A
Offset_0x005B70:
                move.w  (Level_Select_Menu_Cursor).w, D0             ; $FFFFFF82
                add.w   D0, D0
                move.w  Menu_Level_Select_Array(PC, D0), D0    ; Offset_0x005BF2
                bmi     Menu_Game_Reset                        ; Offset_0x005C2C
                cmpi.w  #Disabled_Level, D0                              ; $5555
                beq     Offset_0x005B2A
                cmpi.w  #SK_Special_Stage, D0                            ; $4001
                beq     Menu_Run_SK_Special_Stage              ; Offset_0x005B9E
                cmpi.w  #S3_Special_Stage, D0                            ; $4000    
                bne     Menu_Load_Level                        ; Offset_0x005C34
                move.b  #gm_S3_Special_Stage, (Game_Mode).w     ; $2C, $FFFFF600
                rts
Menu_Run_SK_Special_Stage:                                     ; Offset_0x005B9E
                move.b  #gm_SK_Special_Stage, (Game_Mode).w     ; $30, $FFFFF600
                rts  
;-------------------------------------------------------------------------------
Menu_Run_S2_Special_Stage:                                     ; Offset_0x005BA6
                move.b  #gm_S2_SpecialStage, (Game_Mode).w      ; $10, $FFFFF600
                clr.w   (Current_ZoneAndAct).w                                 ; $FFFFFE10
                clr.w   (Apparent_ZoneAndAct).w                               ; $FFFFEE54
                move.b  #$03, (Life_count).w                         ; $FFFFFE12
                move.b  #$03, (Life_Count_P2).w                      ; $FFFFFEC6
                moveq   #$00, D0
                move.w  D0, (Ring_count).w                   ; $FFFFFE20
                move.l  D0, (Timer).w                   ; $FFFFFE22
                move.l  D0, (Score_Count_Address).w                  ; $FFFFFE26
                move.w  D0, (Ring_Count_Address_P2).w                ; $FFFFFED0
                move.l  D0, (Time_Count_Address_P2).w                ; $FFFFFED2
                move.l  D0, (Score_Count_Address_P2).w               ; $FFFFFED6
                move.l  #$00001388, (Next_Extra_Life_Score).w        ; $FFFFFFC0
                move.l  #$00001388, (Next_Extra_Life_Score_P2).w     ; $FFFFFFC4
                move.w  (Player_Select_Flag).w, (Player_Selected_Flag).w ; $FFFFFF0A
                rts      
;-------------------------------------------------------------------------------
Menu_Level_Select_Array:                                       ; Offset_0x005BF2
                dc.w    AIz_Act_1                                        ; $0000
                dc.w    AIz_Act_2                                        ; $0001
                dc.w    Hz_Act_1                                         ; $0100
                dc.w    Hz_Act_2                                         ; $0101
                dc.w    MGz_Act_1                                        ; $0200
                dc.w    MGz_Act_2                                        ; $0201
                dc.w    CNz_Act_1                                        ; $0300
                dc.w    CNz_Act_2                                        ; $0301
                dc.w    FBz_Act_1                                        ; $0400
                dc.w    FBz_Act_2                                        ; $0401
                dc.w    Iz_Act_1                                         ; $0500
                dc.w    Iz_Act_2                                         ; $0501
                dc.w    LBz_Act_1                                        ; $0600
                dc.w    LBz_Act_2                                        ; $0601
                dc.w    Disabled_Level                                   ; $5555
                dc.w    Disabled_Level                                   ; $5555
                dc.w    Disabled_Level                                   ; $5555
                dc.w    Disabled_Level                                   ; $5555
                dc.w    Alz_Act_1                                        ; $0E00
                dc.w    BPz_Act_1                                        ; $0F00
                dc.w    DPz_Act_1                                        ; $1000
                dc.w    CGz_Act_1                                        ; $1100
                dc.w    EMz_Act_1                                        ; $1200
                dc.w    GM_BS_Act_1                                      ; $1300
                dc.w    GS_BS_Act_1                                      ; $1400
                dc.w    SM_BS_Act_1                                      ; $1500
                dc.w    S3_Special_Stage                                 ; $4000
                dc.w    SK_Special_Stage                                 ; $4001
                dc.w    Reset_Game                                       ; $FFFF
;------------------------------------------------------------------------------- 
Menu_Game_Reset:                                               ; Offset_0x005C2C
                move.b  #gm_SEGALogo, (Game_Mode).w             ; $00, $FFFFF600
                rts                    
;------------------------------------------------------------------------------- 
Menu_Load_Level:                                               ; Offset_0x005C34
                andi.w  #$3FFF, D0
                move.w  D0, (Current_ZoneAndAct).w                             ; $FFFFFE10
                move.w  D0, (Apparent_ZoneAndAct).w                           ; $FFFFEE54
                cmpi.w  #AIz_Act_2, D0                                   ; $0001
                beq.s   Offset_0x005C4C
                cmpi.w  #Iz_Act_2, D0                                    ; $0501
                bne.s   Offset_0x005C50
Offset_0x005C4C:
                clr.b   (Apparent_Act).w                                 ; $FFFFEE55
Offset_0x005C50:
                move.b  #gm_PlayMode, (Game_Mode).w             ; $0C, $FFFFF600
                move.b  #$03, (Life_count).w                         ; $FFFFFE12
                move.b  #$03, (Life_Count_P2).w                      ; $FFFFFEC6
                moveq   #$00, D0
                move.w  D0, (Ring_count).w                   ; $FFFFFE20
                move.l  D0, (Timer).w                   ; $FFFFFE22
                move.l  D0, (Score_Count_Address).w                  ; $FFFFFE26
                move.w  D0, (Ring_Count_Address_P2).w                ; $FFFFFED0
                move.l  D0, (Time_Count_Address_P2).w                ; $FFFFFED2
                move.l  D0, (Score_Count_Address_P2).w               ; $FFFFFED6
                move.b  D0, (Continue_count).w                       ; $FFFFFE18
                move.l  #$00001388, (Next_Extra_Life_Score).w        ; $FFFFFFC0
                move.l  #$00001388, (Next_Extra_Life_Score_P2).w     ; $FFFFFFC4
                move.b  #Special_Stage_Entry_Sfx, D0                       ; $D0
                jsr     (Play_Music)                           ; Offset_0x001176
                moveq   #$00, D0
                move.w  D0, (Two_Player_Flag_2).w                    ; $FFFFFF8A
                move.w  D0, (Two_Player_Flag).w                      ; $FFFFFFD8
                cmpi.b  #ALz_Id, (Current_Zone).w                   ; $0E, $FFFFFE10
                bcs.s   Offset_0x005CBA
                cmpi.b  #GM_BS_Id, (Current_Zone).w                 ; $13, $FFFFFE10
                bcc.s   Offset_0x005CBA
                move.w  #$0001, (Two_Player_Flag).w                  ; $FFFFFFD8
Offset_0x005CBA:
                rts   
;-------------------------------------------------------------------------------
Level_Select_Controls:                                         ; Offset_0x005CBC
                move.b  (Control_Ports_Buffer_Data+$0001).w, D1      ; $FFFFF605
                andi.b  #$03, D1
                bne.s   Offset_0x005CCC
                subq.w  #$01, (Level_Select_Hold_Timer).w            ; $FFFFFF80
                bpl.s   Offset_0x005D02
Offset_0x005CCC:
                move.w  #$000B, (Level_Select_Hold_Timer).w          ; $FFFFFF80
                move.b  (Control_Ports_Buffer_Data).w, D1            ; $FFFFF604
                andi.b  #$03, D1
                beq.s   Offset_0x005D02
                move.w  (Level_Select_Menu_Cursor).w, D0             ; $FFFFFF82
                btst    #$00, D1
                beq.s   Offset_0x005CEC
                subq.w  #$01, D0
                bcc.s   Offset_0x005CEC
                moveq   #$1C, D0
Offset_0x005CEC:
                btst    #$01, D1
                beq.s   Offset_0x005CFC
                addq.w  #$01, D0
                cmpi.w  #$001D, D0
                bcs.s   Offset_0x005CFC
                moveq   #$00, D0
Offset_0x005CFC:
                move.w  D0, (Level_Select_Menu_Cursor).w             ; $FFFFFF82
                rts
Offset_0x005D02:
                cmpi.w  #$001C, (Level_Select_Menu_Cursor).w         ; $FFFFFF82
                bne.s   Offset_0x005D78
                move.w  (Sound_Test_Sound).w, D0                     ; $FFFFFF84
                move.b  (Control_Ports_Buffer_Data+$0001).w, D1      ; $FFFFF605
                btst    #$02, D1
                beq.s   Offset_0x005D1E
                subq.b  #$01, D0
                bcc.s   Offset_0x005D1E
                moveq   #$00, D0
Offset_0x005D1E:
                btst    #$03, D1
                beq.s   Offset_0x005D2E
                addq.b  #$01, D0
                cmpi.w  #$0100, D0
                bcs.s   Offset_0x005D2E
                moveq   #$00, D0
Offset_0x005D2E:
                btst    #$06, D1
                beq.s   Offset_0x005D3C
                addi.b  #$10, D0
                andi.b  #$FF, D0
Offset_0x005D3C:
                move.w  D0, (Sound_Test_Sound).w                     ; $FFFFFF84
                btst    #$05, D1
                beq.s   Offset_0x005D66
                move.w  (Sound_Test_Sound).w, D0                     ; $FFFFFF84
                jsr     (Play_Music)                           ; Offset_0x001176
                lea     (Code_Debug_Mode), A0                  ; Offset_0x00604E
                lea     (Code_All_Emeralds), A2                ; Offset_0x006053
                lea     (Debug_Mode_Flag).w, A1                      ; $FFFFFFD2
                moveq   #$01, D2
                bra     Menu_Check_Secret_Codes                ; Offset_0x005FD8
Offset_0x005D66:
                btst    #$04, D1
                beq.s   Offset_0x005D76
                move.w  #Error_Sfx, D0                                   ; $00D3
                jsr     (Play_Music)                           ; Offset_0x001176
Offset_0x005D76:
                rts
Offset_0x005D78:
                move.b  (Control_Ports_Buffer_Data+$0001).w, D1      ; $FFFFF605
                andi.b  #$0C, D1
                beq.s   Offset_0x005D8E
                move.w  (Level_Select_Menu_Cursor).w, D0             ; $FFFFFF82
                move.b  Menu_Left_Right_Select(PC, D0), D0     ; Offset_0x005D92
                move.w  D0, (Level_Select_Menu_Cursor).w             ; $FFFFFF82
Offset_0x005D8E:
                bra.s   Offset_0x005DB0  
                rts
;-------------------------------------------------------------------------------
Menu_Left_Right_Select:                                        ; Offset_0x005D92
                dc.b    $12, $13, $14, $15, $16, $17, $18, $19
                dc.b    $1A, $1B, $1C, $1C, $1C, $1C, $1C, $1C
                dc.b    $1C, $1C, $00, $01, $02, $03, $04, $05
                dc.b    $06, $07, $08, $09, $0A, $0B   
;-------------------------------------------------------------------------------
Offset_0x005DB0:
                btst    #$05, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
                beq.s   Offset_0x005DCA
                addq.b  #$01, (Menu_Player_One_Cursor).w             ; $FFFFFFDA
                cmpi.b  #$03, (Menu_Player_One_Cursor).w             ; $FFFFFFDA
                bcs.s   Offset_0x005DCA
                move.b  #$00, (Menu_Player_One_Cursor).w             ; $FFFFFFDA
Offset_0x005DCA:
                btst    #$05, (Control_Ports_Buffer_Data+$0003).w    ; $FFFFF607
                beq.s   Offset_0x005DE4
                addq.b  #$01, (Menu_Player_Two_Cursor).w             ; $FFFFFFDB
                cmpi.b  #$03, (Menu_Player_Two_Cursor).w             ; $FFFFFFDB
                bcs.s   Offset_0x005DE4
                move.b  #$00, (Menu_Player_Two_Cursor).w             ; $FFFFFFDB
Offset_0x005DE4:
                rts     
;-------------------------------------------------------------------------------
Offset_0x005DE6:
                lea     (M68K_RAM_Start), A4                         ; $FFFF0000
                lea     (Menu_Text_Highlight), A5              ; Offset_0x005F44
                lea     (VDP_Data_Port), A6                          ; $00C00000
                moveq   #$00, D0
                move.w  (Level_Select_Menu_Cursor).w, D0             ; $FFFFFF82
                lsl.w   #$02, D0
                lea     $00(A5, D0), A3
                moveq   #$00, D0
                move.b  (A3), D0
                mulu.w  #$0050, D0
                moveq   #$00, D1
                move.b  $0001(A3), D1
                add.w   D1, D0
                lea     $00(A4, D0), A1
                moveq   #$00, D1
                move.b  (A3), D1
                lsl.w   #$07, D1
                add.b   $0001(A3), D1
                addi.w  #$C000, D1
                lsl.l   #$02, D1
                lsr.w   #$02, D1
                ori.w   #$4000, D1
                swap.w  D1
                move.l  D1, $0004(A6)
                moveq   #$0E, D2
Offset_0x005E36:
                move.w  (A1)+, D0
                add.w   D3, D0
                move.w  D0, (A6)
                dbra    D2, Offset_0x005E36
                addq.w  #$02, A3
                moveq   #$00, D0
                move.b  (A3), D0
                beq.s   Offset_0x005E7A
                mulu.w  #$0050, D0
                moveq   #$00, D1
                move.b  $0001(A3), D1
                add.w   D1, D0
                lea     $00(A4, D0), A1
                moveq   #$00, D1
                move.b  (A3), D1
                lsl.w   #$07, D1
                add.b   $0001(A3), D1
                addi.w  #$C000, D1
                lsl.l   #$02, D1
                lsr.w   #$02, D1
                ori.w   #$4000, D1
                swap.w  D1
                move.l  D1, $0004(A6)
                move.w  (A1)+, D0
                add.w   D3, D0
                move.w  D0, (A6)
Offset_0x005E7A:
                cmpi.w  #$001C, (Level_Select_Menu_Cursor).w         ; $FFFFFF82
                bne.s   Offset_0x005E86
                bra     Offset_0x005EA6
Offset_0x005E86:
                move.l  #$41B80003, (VDP_Control_Port)               ; $00C00004
                move.b  (Menu_Player_One_Cursor).w, D0               ; $FFFFFFDA
                bsr.s   Offset_0x005EB4
                move.l  #$41C00003, (VDP_Control_Port)               ; $00C00004
                move.b  (Menu_Player_Two_Cursor).w, D0               ; $FFFFFFDB
                bra.s   Offset_0x005EB4
Offset_0x005EA6:
                move.l  #$48460003, (VDP_Control_Port)               ; $00C00004
                move.w  (Sound_Test_Sound).w, D0                     ; $FFFFFF84
Offset_0x005EB4:
                move.b  D0, D2
                lsr.b   #$04, D0
                bsr.s   Offset_0x005EBC
                move.b  D2, D0
Offset_0x005EBC:
                andi.w  #$000F, D0
                cmpi.b  #$0A, D0
                bcs.s   Offset_0x005ECA
                addi.b  #$04, D0
Offset_0x005ECA:
                addi.b  #$10, D0
                add.w   D3, D0
                move.w  D0, (A6)
                rts     
;-------------------------------------------------------------------------------
Offset_0x005ED4:
                move.w  (Level_Select_Menu_Cursor).w, D0             ; $FFFFFF82
                lea     (Menu_Icon_List), A3                   ; Offset_0x005F26
                lea     $00(A3, D0), A3
                lea     (M68K_RAM_Start+$08C0), A1                   ; $FFFF08C0
                moveq   #$00, D0
                move.b  (A3), D0
                lsl.w   #$03, D0
                move.w  D0, D1
                add.w   D0, D0
                add.w   D1, D0
                lea     $00(A1, D0), A1
                move.l  #$4B360003, D0
                moveq   #$03, D1
                moveq   #$02, D2
                jsr     (ShowVDPGraphics)                      ; Offset_0x0012BC
                lea     (Pal_Levels_Icons), A1                 ; Offset_0x006230
                moveq   #$00, D0
                move.b  (A3), D0
                lsl.w   #$05, D0
                lea     $00(A1, D0), A1
                lea     (Palette_Row_2_Offset).w, A2                 ; $FFFFED40
                moveq   #$07, D1
Offset_0x005F1E:
                move.l  (A1)+, (A2)+
                dbra    D1, Offset_0x005F1E
                rts     
;-------------------------------------------------------------------------------
Menu_Icon_List:                                                ; Offset_0x005F26
                dc.b    $00, $00, $07, $07, $08, $08, $06, $06
                dc.b    $02, $02, $05, $05, $04, $04, $01, $01
                dc.b    $09, $09, $0A, $0A, $03, $03, $0B, $0B
                dc.b    $0B, $0B, $0C, $0C, $0E, $00  
;-------------------------------------------------------------------------------
Menu_Text_Highlight:                                           ; Offset_0x005F44
                dc.w    $0106, $0124, $0106, $0224, $0406, $0424, $0406, $0524
                dc.w    $0706, $0724, $0706, $0824, $0A06, $0A24, $0A06, $0B24
                dc.w    $0D06, $0D24, $0D06, $0E24, $1006, $1024, $1006, $1124
                dc.w    $1306, $1324, $1306, $1424, $1606, $1624, $1606, $1724
                dc.w    $1906, $1924, $1906, $1A24, $012C, $014A, $012C, $024A
                dc.w    $042C, $044A, $042C, $054A, $072C, $074A, $072C, $084A
                dc.w    $0A2C, $0A4A, $0A2C, $0B4A, $0D2C, $0D4A, $0D2C, $0E4A
                dc.w    $102C, $104A 
;-------------------------------------------------------------------------------                
Menu_Text_Positions:                                           ; Offset_0x005FB8
                dc.w    $0056, $0146, $0236, $0326, $0416, $0506, $05F6, $06E6
                dc.w    $07D6, $007C, $016C, $025C, $034C, $043C, $052C, $061C 
;-------------------------------------------------------------------------------
Menu_Check_Secret_Codes:                                       ; Offset_0x005FD8
                move.w  (Secret_Code_Input_Entries).w, D0            ; $FFFFFFD4
                adda.w  D0, A0
                move.w  (Sound_Test_Sound).w, D0                     ; $FFFFFF84
                cmp.b   (A0), D0
                bne.s   Offset_0x005FFC
                addq.w  #$01, (Secret_Code_Input_Entries).w          ; $FFFFFFD4
                tst.b   $0001(A0)
                bne.s   Offset_0x006002
                move.w  #$0101, (A1)
                moveq   #Ring_Sfx, D0                                      ; $32
                jsr     (Play_Music)                           ; Offset_0x001176
Offset_0x005FFC:
                move.w  #$0000, (Secret_Code_Input_Entries).w        ; $FFFFFFD4
Offset_0x006002:
                move.w  (Secret_Code_Input_Entries_2).w, D0          ; $FFFFFFD6
                adda.w  D0, A2
                move.w  (Sound_Test_Sound).w, D0                     ; $FFFFFF84
                cmp.b   (A2), D0
                bne.s   Offset_0x00603C
                addq.w  #$01, (Secret_Code_Input_Entries_2).w        ; $FFFFFFD6
                tst.b   $0001(A2)
                bne.s   Offset_0x006042
                tst.w   D2
                bne.s   Offset_0x00602E
                move.b  #$0F, (Continue_count).w                     ; $FFFFFE18
                moveq   #Continue_Snd, D0                                  ; $28
                jsr     (Play_Music)                           ; Offset_0x001176
                bra.s   Offset_0x00603C
Offset_0x00602E:
                move.w  #$0007, (SS_Completed_Flag).w                ; $FFFFFFB0
                moveq   #Got_Emerald_Snd, D0                               ; $2B
                jsr     (Play_Music)                           ; Offset_0x001176
Offset_0x00603C:
                move.w  #$0000, (Secret_Code_Input_Entries_2).w      ; $FFFFFFD6
Offset_0x006042:
                rts    
;-------------------------------------------------------------------------------                    
S2_Code_Level_Select:                                          ; Offset_0x006044
                dc.b    $19, $65, $09, $17, $00  
;-------------------------------------------------------------------------------                 
S2_Code_14_Continues:                                          ; Offset_0x006049
                dc.b    $01, $01, $02, $04, $00    
;-------------------------------------------------------------------------------                  
Code_Debug_Mode:                                               ; Offset_0x00604E
                dc.b    $01, $03, $05, $07, $00   
;-------------------------------------------------------------------------------                 
Code_All_Emeralds:                                             ; Offset_0x006053
                dc.b    $02, $04, $05, $06, $00  
;-------------------------------------------------------------------------------                  
Map_Player_Select_Caption:                                     ; Offset_0x006058
                dc.b    $10
                dc.b    _st,__,_P,_L,_A,_Y,_E,_R,__,_S,_E,_L,_E,_C,_T,__,_st                   
Map_Sonic_And_Miles:                                           ; Offset_0x00606A
                dc.b    $0E
                dc.b    _S,_O,_N,_I,_C,__,_A,_N,_D,__,_M,_I,_L,_E,_S 
Map_Sonic_And_Tails:                                           ; Offset_0x00607A 
                dc.b    $0E
                dc.b    _S,_O,_N,_I,_C,__,_A,_N,_D,__,_T,_A,_I,_L,_S   
Map_Sonic_Alone:                                               ; Offset_0x00608A
                dc.b    $0E
                dc.b    _S,_O,_N,_I,_C,__,_A,_L,_O,_N,_E,__,__,__,__
Map_Miles_Alone:                                               ; Offset_0x00609A
                dc.b    $0E
                dc.b    _M,_I,_L,_E,_S,__,_A,_L,_O,_N,_E,__,__,__,__
Map_Tails_Alone:                                               ; Offset_0x0060AA
                dc.b    $0E
                dc.b    _T,_A,_I,_L,_S,__,_A,_L,_O,_N,_E,__,__,__,__
;-------------------------------------------------------------------------------     
Map_Vs_Mode_Items_Caption:                                     ; Offset_0x0060BA
                dc.b    $10
                dc.b    _st,__,_V,_S,__,_M,_O,_D,_E,__,_I,_T,_E,_M,_S,__,_st  
Map_All_Kinds_Items:                                           ; Offset_0x0060CC 
                dc.b    $0E
                dc.b    _A,_L,_L,__,_K,_I,_N,_D,_S,__,_I,_T,_E,_M,_S
Map_Teleport_Only:                                             ; Offset_0x0060DC
                dc.b    $0E
                dc.b    _T,_E,_L,_E,_P,_O,_R,_T,__,_O,_N,_L,_Y,__,__                
;---------------------------------------------------------------------                
Map_Sound_Test_Caption:                                        ; Offset_0x0060EC
                dc.b    $10
                dc.b    _st,__,__,_S,_O,_U,_N,_D,__,_T,_E,_S,_T,__,__,__,_st
Map_Sound_Test_Sound:                                          ; Offset_0x0060FE   
                dc.b    $0E
                dc.b    __,__,__,__,__,__,_0,_0,__,__,__,__,__,__,__                    
;-------------------------------------------------------------------------------  
Map_Emerald_Hill:                                              ; Offset_0x00610E
                dc.b    $0B,_E,_M,_E,_R,_A,_L,_D,__,_H,_I,_L,_L              
Map_Mystic_Cave:                                               ; Offset_0x00611B
                dc.b    $0B,__,_M,_Y,_S,_T,_I,_C,__,_C,_A,_V,_E              
Map_Casino_Night:                                              ; Offset_0x006128
                dc.b    $0B,_C,_A,_S,_I,_N,_O,__,_N,_I,_G,_H,_T
; Map_Special_Stage:                                           ; Offset_0x006135
                dc.b    $0C,_S,_P,_E,_C,_I,_A,_L,__,_S,_T,_A,_G,_E  
Map_Special:                                                   ; Offset_0x006143    
                dc.b    $0B,__,__,__,_S,_P,_E,_C,_I,_A,_L,__,__  
Map_Zone:                                                      ; Offset_0x006150
                dc.b    $04,_Z,_O,_N,_E,__ 
Map_Stage:                                                     ; Offset_0x006156
                dc.b    $04,_S,_T,_A,_G,_E                  
; Map_Game_Over: 
                dc.b    $08,_G,_A,_M,_E,__,_O,_V,_E,_R
; Map_Time_Over:              
                dc.b    $08,_T,_I,_M,_E,__,_O,_V,_E,_R
; Map_No_Game: 
                dc.b    $06,_N,_O,__,_G,_A,_M,_E
; Map_Tied:  
                dc.b    $03,_T,_I,_E,_D
; Map_1P:
                dc.b    $02,__,_1,_P
; Map_2P:         
                dc.b    $02,__,_2,_P
; Map_Blank: 
                dc.b    $03,__,__,__,__
;-------------------------------------------------------------------------------                                                                                
Menu_Level_Select_Text:                                        ; Offset_0x00618A
                dc.b    $0B,_A,_N,_G,_E,_L,__,_I,_S,_L,_A,_N,_D 
                dc.b    $08,_H,_Y,_D,_R,_O,_C,_I,_T,_Y
                dc.b    $0C,_M,_A,_R,_B,_L,_E,__,_G,_A,_R,_D,_E,_N
                dc.b    $0D,_C,_A,_R,_N,_I,_V,_A,_L,__,_N,_I,_G,_H,_T
                dc.b    $0D,_F,_L,_Y,_I,_N,_G,__,_B,_A,_T,_T,_E,_R,_Y
                dc.b    $05,_I,_C,_E,_C,_A,_P 
                dc.b    $0A,_L,_A,_U,_N,_C,_H,__,_B,_A,_S,_E 
                dc.b    $0E,_M,_U,_S,_H,_R,_O,_O,_M,__,_V,_A,_L,_L,_E,_Y
                
                dc.b    $09,_S,_A,_N,_D,_O,_P,_O,_L,_I,_S
                dc.b    $04,_2,_P,__,_V,_S
                dc.b    $04,_2,_P,__,_V,_S 
                dc.b    $04,_2,_P,__,_V,_S
                dc.b    $04,_B,_O,_N,_U,_S
                dc.b    $0C,_S,_P,_E,_C,_I,_A,_L,__,_S,_T,_A,_G,_E
                dc.b    $0C,_S,_O,_U,_N,_D,__,_T,_E,_S,_T,__,__,_st,__                    
;------------------------------------------------------------------------------- 
Pal_Levels_Icons:                                              ; Offset_0x006230               
                incbin  'data\menus\lvsicons.pal'  
;------------------------------------------------------------------------------- 
Vs_Level_Select_Frame_Mappings:                                ; Offset_0x006410
                incbin  'data\menus\vsslctmn.eni'                                 
;-------------------------------------------------------------------------------   
Options_Frame_Mappings:                                        ; Offset_0x006462
                incbin  'data\menus\optframe.eni' 
;-------------------------------------------------------------------------------                 
S2_Menu_Level_Select_Text:                                     ; Offset_0x00648E 
                incbin  'data\menus\menutext.eni'  
;-------------------------------------------------------------------------------                
Menu_Icons_Mappings:                                           ; Offset_0x0065E2
                incbin  'data\menus\iconsmap.eni'     
;-------------------------------------------------------------------------------
Menu_Animate:                                                  ; Offset_0x006614
                dc.w    $0000                        ; Total de Anima��es     
                dc.l    ($FF<<$18)|Art_Menu_Sonic_Miles        ; Offset_0x0A8DC0
                dc.w    $0020                        ; VRAM 
                dc.b    $06, $0A                     ; Quadros / Tiles
                dc.b    $00, $C7, $0A, $05, $14, $05 ; Carregar quadro / Tempo do quadro
                dc.b    $1E, $C7, $14, $05, $0A, $05 ; Carregar quadro / Tempo do quadro                                                                                                                                                                                                                                                                                                                                                                                                                                                           
;===============================================================================
; Menu de op��es, menu de sele��o de fases no modo 1 e 2 jogadores 
; <<<-
;=============================================================================== 

;===============================================================================
; Modo de teste para o Special Stage 
; ->>>
;=============================================================================== 
Special_Stage_Test_1:                                          ; Offset_0x00662A
                moveq   #Stop_Sound, D0                                   ; -$1F
                bsr     Play_Music                             ; Offset_0x001176
                bsr     ClearPLC                               ; Offset_0x001548
                bsr     Pal_FadeFrom                           ; Offset_0x002DE8
                move    #$2700, SR
                lea     (VDP_Control_Port), A6                       ; $00C00004
                move.w  #$8004, (A6)
                move.w  #$8230, (A6)
                move.w  #$8407, (A6)
                move.w  #$9011, (A6)
                move.w  #$9200, (A6)
                move.w  #$8B03, (A6)
                move.w  #$8720, (A6)
                clr.b   (Underwater_Flag).w                          ; $FFFFF64E
                move.w  #$8C81, (A6)
                bsr     ClearScreen                            ; Offset_0x001002
                lea     (Sprite_Table_Input).w, A1                   ; $FFFFAC00
                moveq   #$00, D0
                move.w  #$00FF, D1
Offset_0x006674:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x006674
                lea     (Obj_Player_One).w, A1                       ; $FFFFB000
                moveq   #$00, D0
                move.w  #$07FF, D1
Offset_0x006684:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x006684
                jsr     (Init_Sprite_Table)                    ; Offset_0x011042
                lea     (Palette_Buffer).w, A1                       ; $FFFFED00
                moveq   #$00, D0
                move.w  #$003F, D1
Offset_0x00669A:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x00669A
                clr.w   (DMA_Buffer_List).w                          ; $FFFFE700
                move.l  #DMA_Buffer_List, (DMA_Buffer_List_End).w ; $FFFFE700, $FFFFE8F8
                lea     (Pal_Special_Stage_1_Test), A1         ; Offset_0x006750
                lea     (Palette_Data_Target).w, A2                  ; $FFFFED80
                move.w  #$003F, D0
Offset_0x0066BA:
                move.w  (A1)+, (A2)+
                dbra    D0, Offset_0x0066BA
                move.l  #$40000000, (VDP_Control_Port)               ; $00C00004
                lea     (Art_Special_Stage_Globe), A0          ; Offset_0x10C8AE
                bsr     NemesisDec                             ; Offset_0x001390
                move.l  #$40000002, (VDP_Control_Port)               ; $00C00004
                lea     (Art_Scaled_Spheres), A0               ; Offset_0x10B68E
                bsr     NemesisDec                             ; Offset_0x001390
                lea     (Special_Stage_Globe_Mappings), A1     ; Offset_0x10BFEE
                move.l  #$40000003, D0
                moveq   #$27, D1
                moveq   #$1B, D2
                jsr     (ShowVDPGraphics)                      ; Offset_0x0012BC
                move.l  #Obj_Spheres, (Obj_Player_One).w ; Offset_0x006874, $FFFFB000
                move.w  #$00A0, (Obj_Player_One+Obj_X).w             ; $FFFFB010
                move.w  #$0070, (Obj_Player_One+Obj_Y).w             ; $FFFFB014
                move.b  #Special_Stage_Snd, D0                             ; $1C
                bsr     Play_Music                             ; Offset_0x001176
                move.w  (VDP_Register_1_Command).w, D0               ; $FFFFF60E
                ori.b   #$40, D0
                move.w  D0, (VDP_Control_Port)                       ; $00C00004
                bsr     Pal_FadeTo                             ; Offset_0x002D20
Offset_0x00672C:
                move.b  #$1A, (VBlank_Index).w                       ; $FFFFF62A
                bsr     Wait_For_VSync                         ; Offset_0x001AEE
                jsr     (RunObjects)                         ; Offset_0x0110AE
                jsr     (Build_Sprites)                        ; Offset_0x011296
                bsr     RunPLC_RAM                                 ; Offset_0x001556
                cmpi.b  #gm_S3_Special_Stage, (Game_Mode).w     ; $2C, $FFFFF600
                beq.s   Offset_0x00672C
                rts
;------------------------------------------------------------------------------- 
Pal_Special_Stage_1_Test:                                      ; Offset_0x006750
                incbin  'data\ss_test\ss_test.pal'  
;------------------------------------------------------------------------------- 
; Offset_0x0067D0: SS_SingleObjectLoad:
SS_AllocateObject:
                move.l  A0, A1
                move.w  #Obj_Fixed_RAM_End, D0                           ; $CF82
                sub.w   A0, D0
                lsr.w   #$06, D0
                move.b  SS_Sprite_Table(PC, D0), D0            ; Offset_0x0067EC
                bmi.s   Offset_0x0067EA
Offset_0x0067E0:
                lea     Obj_Size(A1), A1                                 ; $004A
                tst.l   (A1)
                dbeq    D0, Offset_0x0067E0
Offset_0x0067EA:
                rts 
;-------------------------------------------------------------------------------
SS_Sprite_Table:                                               ; Offset_0x0067EC
                dc.b    $FF, $00, $01, $02, $03, $04, $05, $06
                dc.b    $06, $07, $08, $09, $0A, $0B, $0C, $0D
                dc.b    $0E, $0E, $0F, $10, $11, $12, $13, $14
                dc.b    $15, $16, $16, $17, $18, $19, $1A, $1B
                dc.b    $1C, $1D, $1E, $1E, $1F, $20, $21, $22
                dc.b    $23, $24, $25, $26, $26, $27, $28, $29
                dc.b    $2A, $2B, $2C, $2D, $2E, $2E, $2F, $30
                dc.b    $31, $32, $33, $34, $35, $36, $36, $37
                dc.b    $38, $39, $3A, $3B, $3C, $3D, $3E, $3E
                dc.b    $3F, $40, $41, $42, $43, $44, $45, $46
                dc.b    $46, $47, $48, $49, $4A, $4B, $4C, $4D
                dc.b    $4E, $4E, $4F, $50, $51, $52, $53, $54
                dc.b    $55, $56, $56, $57, $58, $59, $5A, $5B
                dc.b    $5C, $5D, $5E, $5E, $5F, $60, $61, $62
                dc.b    $63, $64, $65, $66, $66, $67, $68, $69
                dc.b    $6A, $6B, $6C, $6D, $6E, $6E, $6F, $70
                dc.b    $71, $72, $73, $74, $75, $76, $76, $00 
;------------------------------------------------------------------------------- 
Obj_Spheres:                                                   ; Offset_0x006874  
                include 'data\objects\spheres.asm'
;-------------------------------------------------------------------------------
Special_Stage_Test_2:                                          ; Offset_0x0070DC
                moveq   #Stop_Sound, D0                                   ; -$1F
                bsr     Play_Music                             ; Offset_0x001176
                bsr     ClearPLC                               ; Offset_0x001548
                bsr     Pal_FadeFrom                           ; Offset_0x002DE8
                move    #$2700, SR
                lea     (VDP_Control_Port), A6                       ; $00C00004
                move.w  #$8004, (A6)
                move.w  #$8230, (A6)
                move.w  #$8407, (A6)
                move.w  #$9011, (A6)
                move.w  #$9200, (A6)
                move.w  #$8B03, (A6)
                move.w  #$8720, (A6)
                clr.b   (Underwater_Flag).w                          ; $FFFFF64E
                move.w  #$8C81, (A6)
                bsr     ClearScreen                            ; Offset_0x001002
                lea     (Sprite_Table_Input).w, A1                   ; $FFFFAC00
                moveq   #$00, D0
                move.w  #$00FF, D1
Offset_0x007126:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x007126
                lea     (Obj_Player_One).w, A1                       ; $FFFFB000
                moveq   #$00, D0
                move.w  #$07FF, D1
Offset_0x007136:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x007136
                jsr     (Init_Sprite_Table)                    ; Offset_0x011042
                lea     (Palette_Buffer).w, A1                       ; $FFFFED00
                moveq   #$00, D0
                move.w  #$003F, D1
Offset_0x00714C:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x00714C
                clr.w   (DMA_Buffer_List).w                          ; $FFFFE700
                move.l  #DMA_Buffer_List, (DMA_Buffer_List_End).w ; $FFFFE700, $FFFFE8F8
                lea     (Pal_Special_Stage_2_Test), A1         ; Offset_0x0071D6
                lea     (Palette_Data_Target).w, A2                  ; $FFFFED80
                move.w  #$003F, D0
Offset_0x00716C:
                move.w  (A1)+, (A2)+
                dbra    D0, Offset_0x00716C
                move.l  #$40000002, (VDP_Control_Port)               ; $00C00004
                lea     (Art_Scaled_Spheres), A0               ; Offset_0x10B68E
                bsr     NemesisDec                             ; Offset_0x001390
                move.l  #Obj_Spheres_2, (Obj_Player_One).w  ; Offset_0x007256, $FFFFB000
                move.w  #$00A0, (Obj_Player_One+Obj_X).w             ; $FFFFB010
                move.w  #$0070, (Obj_Player_One+Obj_Y).w             ; $FFFFB014
                moveq   #Special_Stage_Snd, D0                             ; $1C
                bsr     Play_Music                             ; Offset_0x001176
                move.w  (VDP_Register_1_Command).w, D0               ; $FFFFF60E
                ori.b   #$40, D0
                move.w  D0, (VDP_Control_Port)                       ; $00C00004
                bsr     Pal_FadeTo                             ; Offset_0x002D20
Offset_0x0071B2:
                move.b  #$1A, (VBlank_Index).w                       ; $FFFFF62A
                bsr     Wait_For_VSync                         ; Offset_0x001AEE
                jsr     (RunObjects)                         ; Offset_0x0110AE
                jsr     (Build_Sprites)                        ; Offset_0x011296
                bsr     RunPLC_RAM                                 ; Offset_0x001556
                cmpi.b  #gm_SK_Special_Stage, (Game_Mode).w     ; $30, $FFFFF600
                beq.s   Offset_0x0071B2
                rts
;------------------------------------------------------------------------------- 
Pal_Special_Stage_2_Test:                                      ; Offset_0x0071D6
                incbin  'data\ss_test\ss_test.pal' 
;------------------------------------------------------------------------------- 
Obj_Spheres_2:                                                 ; Offset_0x007256  
                include 'data\objects\spheres2.asm'                                 
;===============================================================================
; Modo de teste para o Special Stage 
; <<<-
;===============================================================================
                
;===============================================================================
;  Rotina Build_HUD - Rotina para mostrar o HUD na tela    
; ->>>
;===============================================================================   
Build_HUD_2P:                                                  ; Offset_0x00798C
                tst.w   (Debug_Mode_Active).w                        ; $FFFFFFFA
                bne.s   Build_HUD                              ; Offset_0x007994
                rts
Build_HUD:                                                     ; Offset_0x007994
                moveq   #$00, D4
                btst    #$03, (Level_Frame_Count+$01).w              ; $FFFFFE05
                bne.s   Offset_0x0079B0
                tst.w   (Ring_count).w                       ; $FFFFFE20
                bne.s   Offset_0x0079A6
                addq.w  #$02, D4
Offset_0x0079A6:
                cmpi.b  #$09, (Timer_minute).w         ; $FFFFFE23
                bne.s   Offset_0x0079B0
                addq.w  #$04, D4
Offset_0x0079B0:
                move.w  #$0090, D0
                move.w  #$0108, D1
                move.w  #$86CA, D5
                lea     HUD_Mappings(PC), A1                   ; Offset_0x0079D4
                adda.w  $00(A1, D4), A1
                move.w  (A1)+, D4
                subq.w  #$01, D4
                bmi.s   Offset_0x0079D0
                jmp     (Offset_0x0114D6)
Offset_0x0079D0:
                rts
Build_HUD_P2:                                                  ; Offset_0x0079D2                
                rts
;-------------------------------------------------------------------------------
HUD_Mappings:                                                  ; Offset_0x0079D4
                dc.w    HUD_Map_Normal-HUD_Mappings            ; Offset_0x0079DC
                dc.w    HUD_Map_RING_Warning-HUD_Mappings      ; Offset_0x007A1A
                dc.w    HUD_Map_TIME_Warning-HUD_Mappings      ; Offset_0x007A4C
                dc.w    HUD_Map_RING_TIME_Warning-HUD_Mappings ; Offset_0x007A84
HUD_Map_Normal:                                                ; Offset_0x0079DC
                dc.w    $000A
                dc.w    $800D, $2000, $0000
                dc.w    $800D, $2018, $0020
                dc.w    $800D, $2020, $0040
                dc.w    $900D, $2010, $0000
                dc.w    $900D, $2028, $0028
                dc.w    $A00D, $2008, $0000
                dc.w    $A001, $2000, $0020
                dc.w    $A009, $2030, $0030
                dc.w    $4005, $010A, $0000
                dc.w    $400D, $210E, $0010
HUD_Map_RING_Warning:                                          ; Offset_0x007A1A
                dc.w    $0008
                dc.w    $800D, $2000, $0000
                dc.w    $800D, $2018, $0020
                dc.w    $800D, $2020, $0040
                dc.w    $900D, $2010, $0000
                dc.w    $900D, $2028, $0028
                dc.w    $A009, $2030, $0030
                dc.w    $4005, $010A, $0000
                dc.w    $400D, $210E, $0010
HUD_Map_TIME_Warning:                                          ; Offset_0x007A4C
                dc.w    $0009
                dc.w    $800D, $2000, $0000
                dc.w    $800D, $2018, $0020
                dc.w    $800D, $2020, $0040
                dc.w    $900D, $2028, $0028
                dc.w    $A00D, $2008, $0000
                dc.w    $A001, $2000, $0020
                dc.w    $A009, $2030, $0030
                dc.w    $4005, $010A, $0000
                dc.w    $400D, $210E, $0010
HUD_Map_RING_TIME_Warning:                                     ; Offset_0x007A84
                dc.w    $0007
                dc.w    $800D, $2000, $0000
                dc.w    $800D, $2018, $0020
                dc.w    $800D, $2020, $0040
                dc.w    $900D, $2028, $0028
                dc.w    $A009, $2030, $0030
                dc.w    $4005, $010A, $0000
                dc.w    $400D, $210E, $0010                
;===============================================================================
;  Rotina Build_HUD - Rotina para mostrar o HUD na tela    
; <<<-
;===============================================================================  

;===============================================================================
; Rotina para adicionar pontos ao HUD do primeiro jogador
; ->>>
;===============================================================================
Add_Points_P1:                                                 ; Offset_0x007AB0
                move.b  #$01, (Update_HUD_score).w             ; $FFFFFE1F
                lea     (Score_Count_Address).w, A3                  ; $FFFFFE26
                add.l   D0, (A3)
                move.l  #$000F423F, D1
                cmp.l   (A3), D1
                bhi.s   Add_Points_Max_Score_P1                ; Offset_0x007AC8
                move.l  D1, (A3)
Add_Points_Max_Score_P1:                                       ; Offset_0x007AC8
                move.l  (A3), D0
                cmp.l   (Next_Extra_Life_Score).w, D0                ; $FFFFFFC0
                bcs.s   Offset_0x007AEA
                addi.l  #$00001388, (Next_Extra_Life_Score).w        ; $FFFFFFC0
                addq.b  #$01, (Life_count).w                         ; $FFFFFE12
                addq.b  #$01, (Update_HUD_lives).w              ; $FFFFFE1C
                move.w  #S2_Extra_Life_Snd, D0                           ; $0098
                jmp     (Play_Music)                           ; Offset_0x001176
Offset_0x007AEA:
                rts 
;-------------------------------------------------------------------------------
Add_Points:                                                    ; Offset_0x007AEC
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq.s   Add_Points_P1                          ; Offset_0x007AB0
                cmpa.w  #Obj_Player_One, A3                              ; $B000
                beq.s   Add_Points_P1                          ; Offset_0x007AB0
                move.b  #$01, (HUD_Score_Refresh_Flag_P2).w          ; $FFFFFECB
                lea     (Score_Count_Address_P2).w, A3               ; $FFFFFED6
                add.l   D0, (A3)
                move.l  #$000F423F, D1
                cmp.l   (A3), D1
                bhi.s   Add_Points_Max_Score_P2                ; Offset_0x007B10
                move.l  D1, (A3)
Add_Points_Max_Score_P2:                                       ; Offset_0x007B10
                move.l  (A3), D0
                cmp.l   (Next_Extra_Life_Score_P2).w, D0             ; $FFFFFFC4
                bcs.s   Offset_0x007B32
                addi.l  #$00001388, (Next_Extra_Life_Score_P2).w     ; $FFFFFFC4
                addq.b  #$01, (Life_Count_P2).w                      ; $FFFFFEC6
                addq.b  #$01, (HUD_Life_Refresh_Flag_P2).w           ; $FFFFFEC8
                move.w  #S2_Extra_Life_Snd, D0                           ; $0098
                jmp     (Play_Music)                           ; Offset_0x001176
Offset_0x007B32:
                rts
;===============================================================================
; Rotina para adicionar pontos ao HUD do primeiro jogador
; <<<-
;=============================================================================== 
 

;===============================================================================
; Rotina para atualizar os contadores na tela (Pontos, Tempo, Vidas...).
; ->>>
;=============================================================================== 
HUD_Update:                                                    ; Offset_0x007B34
                nop
                lea     (VDP_Data_Port), A6                          ; $00C00000
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                bne     Offset_0x007C9C
                tst.w   (Debug_Mode_Active).w                        ; $FFFFFFFA
                bne     Offset_0x007C12
                tst.b   (Update_HUD_score).w                   ; $FFFFFE1F
                beq.s   Offset_0x007B64
                clr.b   (Update_HUD_score).w                   ; $FFFFFE1F
                move.l  #$5C800003, D0
                move.l  (Score_Count_Address).w, D1                  ; $FFFFFE26
                bsr     HUD_Draw_Six_Digit_Number              ; Offset_0x007EAC
Offset_0x007B64:
                tst.b   (Update_HUD_rings).w                   ; $FFFFFE1D
                beq.s   Offset_0x007B84
                bpl.s   Offset_0x007B70
                bsr     Offset_0x007DC0
Offset_0x007B70:
                clr.b   (Update_HUD_rings).w                   ; $FFFFFE1D
                move.l  #$5F400003, D0
                moveq   #$00, D1
                move.w  (Ring_count).w, D1                   ; $FFFFFE20
                bsr     HUD_Draw_Three_Digit_Number            ; Offset_0x007EA2
Offset_0x007B84:
                tst.b   (Update_HUD_timer).w                   ; $FFFFFE1E
                bpl.s   Offset_0x007B92
                move.b  #$01, (Update_HUD_timer).w             ; $FFFFFE1E
                bra.s   Offset_0x007BCC
Offset_0x007B92:
                beq.s   Offset_0x007BEC
                tst.w   (Pause_Status).w                             ; $FFFFF63A
                bne.s   Offset_0x007BEC
                lea     (Timer).w, A1                   ; $FFFFFE22
                cmpi.l  #$00093B3B, (A1)+
                beq     Timer_Over                             ; Offset_0x007BFC
                addq.b  #$01, -(A1)
                cmpi.b  #$3C, (A1)
                bcs.s   Offset_0x007BEC
                move.b  #$00, (A1)
                addq.b  #$01, -(A1)
                cmpi.b  #$3C, (A1)
                bcs.s   Offset_0x007BCC
                move.b  #$00, (A1)
                addq.b  #$01, -(A1)
                cmpi.b  #$09, (A1)
                bcs.s   Offset_0x007BCC
                move.b  #$09, (A1)
Offset_0x007BCC:
                move.l  #$5E400003, D0
                moveq   #$00, D1
                move.b  (Timer_minute).w, D1           ; $FFFFFE23
                bsr     HUD_Draw_Single_Digit_Number           ; Offset_0x007F7A
                move.l  #$5EC00003, D0
                moveq   #$00, D1
                move.b  (Timer_second).w, D1           ; $FFFFFE24
                bsr     HUD_Draw_Two_Digit_Number              ; Offset_0x007F84
Offset_0x007BEC:
                tst.b   (Update_HUD_lives).w                    ; $FFFFFE1C
                beq.s   Offset_0x007BFA
                clr.b   (Update_HUD_lives).w                    ; $FFFFFE1C
                bsr     HUD_Lives                              ; Offset_0x00804E
Offset_0x007BFA:
                rts
;-------------------------------------------------------------------------------                
Timer_Over:                                                    ; Offset_0x007BFC
                clr.b   (Update_HUD_timer).w                   ; $FFFFFE1E
                lea     (Obj_Player_One).w, A0                       ; $FFFFB000
                move.l  A0, A2
                bsr     Kill_Player                            ; Offset_0x00A4A4
                move.b  #$01, (Time_Over_flag).w                     ; $FFFFFE1A
                rts
;-------------------------------------------------------------------------------                 
Offset_0x007C12:
                bsr     HUD_Debug                              ; Offset_0x007E4A
                tst.b   (Update_HUD_rings).w                   ; $FFFFFE1D
                beq.s   Offset_0x007C36
                bpl.s   Offset_0x007C22
                bsr     Offset_0x007DC0
Offset_0x007C22:
                clr.b   (Update_HUD_rings).w                   ; $FFFFFE1D
                move.l  #$5F400003, D0
                moveq   #$00, D1
                move.w  (Ring_count).w, D1                   ; $FFFFFE20
                bsr     HUD_Draw_Three_Digit_Number            ; Offset_0x007EA2
Offset_0x007C36:
                move.l  #$5E400003, D0
                moveq   #$00, D1
                move.w  (VBlank_0_Run_Count).w, D1                   ; $FFFFF628
                bsr     HUD_Draw_Single_Digit_Number           ; Offset_0x007F7A
                move.l  #$5EC00003, D0
                moveq   #$00, D1
                move.b  (Sprites_Drawn).w, D1                        ; $FFFFF62C
                bsr     HUD_Draw_Two_Digit_Number              ; Offset_0x007F84
                tst.b   (Update_HUD_lives).w                    ; $FFFFFE1C
                beq.s   Offset_0x007C64
                clr.b   (Update_HUD_lives).w                    ; $FFFFFE1C
                bsr     HUD_Lives                              ; Offset_0x00804E
Offset_0x007C64:
                tst.w   (Pause_Status).w                             ; $FFFFF63A
                bne.s   Offset_0x007C9A
                lea     (Timer).w, A1                   ; $FFFFFE22
                cmpi.l  #$00093B3B, (A1)+
                nop
                addq.b  #$01, -(A1)
                cmpi.b  #$3C, (A1)
                bcs.s   Offset_0x007C9A
                move.b  #$00, (A1)
                addq.b  #$01, -(A1)
                cmpi.b  #$3C, (A1)
                bcs.s   Offset_0x007C9A
                move.b  #$00, (A1)
                addq.b  #$01, -(A1)
                cmpi.b  #$09, (A1)
                bcs.s   Offset_0x007C9A
                move.b  #$09, (A1)
Offset_0x007C9A:
                rts
Offset_0x007C9C:
                tst.w   (Debug_Mode_Active).w                        ; $FFFFFFFA
                bne     HUD_Debug                              ; Offset_0x007E4A
                rts
;-------------------------------------------------------------------------------
S2_HUD_Update_2P:                                              ; Offset_0x007CA6
                tst.w   (Pause_Status).w                             ; $FFFFF63A
                bne     Offset_0x007D70
                tst.b   (Update_HUD_timer).w                   ; $FFFFFE1E
                beq.s   Offset_0x007CE6
                lea     (Timer).w, A1                   ; $FFFFFE22
                cmpi.l  #$00093B3B, (A1)+
                beq     Timer_Over_2P_Sonic                    ; Offset_0x007D90
                addq.b  #$01, -(A1)
                cmpi.b  #$3C, (A1)
                bcs.s   Offset_0x007CE6
                move.b  #$00, (A1)
                addq.b  #$01, -(A1)
                cmpi.b  #$3C, (A1)
                bcs.s   Offset_0x007CE6
                move.b  #$00, (A1)
                addq.b  #$01, -(A1)
                cmpi.b  #$09, (A1)
                bcs.s   Offset_0x007CE6
                move.b  #$09, (A1)
Offset_0x007CE6:
                tst.b   (HUD_Timer_Refresh_Flag_P2).w                ; $FFFFFECA
                beq.s   Offset_0x007D1E
                lea     (Time_Count_Address_P2).w, A1                ; $FFFFFED2
                cmpi.l  #$00093B3B, (A1)+
                beq     Timer_Over_2P_Miles                    ; Offset_0x007DAA
                addq.b  #$01, -(A1)
                cmpi.b  #$3C, (A1)
                bcs.s   Offset_0x007D1E
                move.b  #$00, (A1)
                addq.b  #$01, -(A1)
                cmpi.b  #$3C, (A1)
                bcs.s   Offset_0x007D1E
                move.b  #$00, (A1)
                addq.b  #$01, -(A1)
                cmpi.b  #$09, (A1)
                bcs.s   Offset_0x007D1E
                move.b  #$09, (A1)
Offset_0x007D1E:
                tst.b   (Update_HUD_lives).w                    ; $FFFFFE1C
                beq.s   Offset_0x007D2C
                clr.b   (Update_HUD_lives).w                    ; $FFFFFE1C
                bsr     HUD_Lives                              ; Offset_0x00804E
Offset_0x007D2C:
                tst.b   (HUD_Life_Refresh_Flag_P2).w                 ; $FFFFFEC8
                beq.s   Offset_0x007D3A
                clr.b   (HUD_Life_Refresh_Flag_P2).w                 ; $FFFFFEC8
                bsr     HUD_Lives_P2                           ; Offset_0x008040
Offset_0x007D3A:
                move.b  (Update_HUD_timer).w, D0               ; $FFFFFE1E
                or.b    (HUD_Timer_Refresh_Flag_P2).w, D0            ; $FFFFFECA
                beq.s   Offset_0x007D70
                lea     (Loser_Timer_Left).w, A1                     ; $FFFFFEF8
                tst.w   (A1)+
                beq.s   Offset_0x007D70
                subq.b  #$01, -(A1)
                bhi.s   Offset_0x007D70
                move.b  #$3C, (A1)
                cmpi.b  #$0C, -1(A1)
                bne.s   Offset_0x007D66
                move.w  #S2_Panic_Snd, D0                                ; $009F
                jsr     (Play_Music)                           ; Offset_0x001176
Offset_0x007D66:
                subq.b  #$01, -(A1)
                bcc.s   Offset_0x007D70
                move.w  #$0000, (A1)
                bsr.s   Offset_0x007D82
Offset_0x007D70:
                move.l  #$5E400003, D0
                moveq   #$00, D1
                move.w  (VBlank_0_Run_Count).w, D1                   ; $FFFFF628
                bsr     HUD_Draw_Single_Digit_Number           ; Offset_0x007F7A
                rts
Offset_0x007D82:
                tst.b   (Update_HUD_timer).w                   ; $FFFFFE1E
                bne.s   Timer_Over_2P_Sonic                    ; Offset_0x007D90
                tst.b   (HUD_Timer_Refresh_Flag_P2).w                ; $FFFFFECA
                bne.s   Timer_Over_2P_Miles                    ; Offset_0x007DAA
                rts
;-------------------------------------------------------------------------------                
Timer_Over_2P_Sonic:                                           ; Offset_0x007D90
                clr.b   (Update_HUD_timer).w                   ; $FFFFFE1E
                lea     (Obj_Player_One).w, A0                       ; $FFFFB000
                move.l  A0, A2
                bsr     Kill_Player                            ; Offset_0x00A4A4
                move.b  #$01, (Time_Over_flag).w                     ; $FFFFFE1A
                tst.b   (HUD_Timer_Refresh_Flag_P2).w                ; $FFFFFECA
                beq.s   Offset_0x007DBE
;-------------------------------------------------------------------------------                 
Timer_Over_2P_Miles:                                           ; Offset_0x007DAA
                clr.b   (HUD_Timer_Refresh_Flag_P2).w                ; $FFFFFECA
                lea     (Obj_Player_Two).w, A0                       ; $FFFFB04A
                move.l  A0, A2
                bsr     Kill_Player                            ; Offset_0x00A4A4
                move.b  #$01, (Time_Over_Flag_P2).w                  ; $FFFFFECC
Offset_0x007DBE:
                rts
;------------------------------------------------------------------------------- 
Offset_0x007DC0:
                move.l  #$5F400003, (VDP_Control_Port)               ; $00C00004
                lea     HUD_Rings_Mask(PC), A2                 ; Offset_0x007E46
                move.w  #$0002, D2
                bra.s   Offset_0x007DF6                
;------------------------------------------------------------------------------- 
Head_Up_Display_Base:                                          ; Offset_0x007DD4
                lea     (VDP_Data_Port), A6                          ; $00C00000
                bsr     HUD_Lives                              ; Offset_0x00804E
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                bne.s   Offset_0x007E22
                move.l  #$5C400003, (VDP_Control_Port)               ; $00C00004
                lea     HUD_ScoreTime_Mask(PC), A2             ; Offset_0x007E3A
                move.w  #$000E, D2
Offset_0x007DF6:
                lea     HUD_Art_Numbers(PC), A1                ; Offset_0x0080BA
Offset_0x007DFA:
                move.w  #$000F, D1
                move.b  (A2)+, D0
                bmi.s   Offset_0x007E16
                ext.w   D0
                lsl.w   #$05, D0
                lea     $00(A1, D0), A3
Offset_0x007E0A:
                move.l  (A3)+, (A6)
                dbra    D1, Offset_0x007E0A
Offset_0x007E10:
                dbra    D2, Offset_0x007DFA
                rts
Offset_0x007E16:
                move.l  #$00000000, (A6)
                dbra    D1, Offset_0x007E16
                bra.s   Offset_0x007E10
Offset_0x007E22:
                bsr     HUD_Lives_P2                           ; Offset_0x008040
                move.l  #HUD_Art_Numbers, D1                   ; Offset_0x0080BA
                move.w  #$DC40, D2
                move.w  #$0160, D3
                jmp     (DMA_68KtoVRAM)                        ; Offset_0x0012FC   
;-------------------------------------------------------------------------------                
HUD_ScoreTime_Mask:                                            ; Offset_0x007E3A 
                dc.l    $16FFFFFF, $FFFFFF00, $00140000  
HUD_Rings_Mask:                                                ; Offset_0x007E46    
                dc.l    $FFFF0000                               
;-------------------------------------------------------------------------------   
HUD_Debug:                                                     ; Offset_0x007E4A
                move.l  #$5C400003, (VDP_Control_Port)               ; $00C00004
                move.w  (Camera_X).w, D1                             ; $FFFFEE78
                swap.w  D1
                move.w  (Obj_Player_One+Obj_X).w, D1                 ; $FFFFB010
                bsr.s   Offset_0x007E6A
                move.w  (Camera_Y).w, D1                             ; $FFFFEE7C
                swap.w  D1
                move.w  (Obj_Player_One+Obj_Y).w, D1                 ; $FFFFB014
Offset_0x007E6A:
                moveq   #$07, D6
                lea     (HUD_Art_Debug_Numbers), A1            ; Offset_0x0084FA
Offset_0x007E72:
                rol.w   #$04, D1
                move.w  D1, D2
                andi.w  #$000F, D2
                cmpi.w  #$000A, D2
                bcs.s   Offset_0x007E84
                addi.w  #$0007, D2
Offset_0x007E84:
                lsl.w   #$05, D2
                lea     $00(A1, D2), A3
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                swap.w  D1
                dbra    D6, Offset_0x007E72
                rts 
;-------------------------------------------------------------------------------
HUD_Draw_Three_Digit_Number:                                   ; Offset_0x007EA2
                lea     (HUD_Val_000100), A2                   ; Offset_0x007F6E
                moveq   #$02, D6
                bra.s   Offset_0x007EB4    
;-------------------------------------------------------------------------------
HUD_Draw_Six_Digit_Number:                                     ; Offset_0x007EAC
                lea     (HUD_Val_100000), A2                   ; Offset_0x007F62
                moveq   #$05, D6
Offset_0x007EB4:
                moveq   #$00, D4
                lea     HUD_Art_Numbers(PC), A1                ; Offset_0x0080BA
Offset_0x007EBA:
                moveq   #$00, D2
                move.l  (A2)+, D3
Offset_0x007EBE:
                sub.l   D3, D1
                bcs.s   Offset_0x007EC6
                addq.w  #$01, D2
                bra.s   Offset_0x007EBE
Offset_0x007EC6:
                add.l   D3, D1
                tst.w   D2
                beq.s   Offset_0x007ED0
                move.w  #$0001, D4
Offset_0x007ED0:
                tst.w   D4
                beq.s   Offset_0x007EFE
                lsl.w   #$06, D2
                move.l  D0, $0004(A6)
                lea     $00(A1, D2), A3
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
Offset_0x007EFE:
                addi.l  #$00400000, D0
                dbra    D6, Offset_0x007EBA
                rts     
;-------------------------------------------------------------------------------
Timer_Count_Down:                                              ; Offset_0x007F0A
                move.l  #$5F800003, (VDP_Control_Port)               ; $00C00004
                lea     (VDP_Data_Port), A6                          ; $00C00000
                lea     (HUD_Val_000010), A2                   ; Offset_0x007F72
                moveq   #$01, D6
                moveq   #$00, D4
                lea     HUD_Art_Numbers(PC), A1                ; Offset_0x0080BA
Offset_0x007F28:
                moveq   #$00, D2
                move.l  (A2)+, D3
Offset_0x007F2C:
                sub.l   D3, D1
                bcs.s   Offset_0x007F34
                addq.w  #$01, D2
                bra.s   Offset_0x007F2C
Offset_0x007F34:
                add.l   D3, D1
                lsl.w   #$06, D2
                lea     $00(A1, D2), A3
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                dbra    D6, Offset_0x007F28
                rts   
;-------------------------------------------------------------------------------                
HUD_Val_100000:                                                ; Offset_0x007F62 
                dc.l    $000186A0
HUD_Val_010000:
                dc.l    $00002710
HUD_Val_001000:                                                ; Offset_0x007F6A
                dc.l    $000003E8
HUD_Val_000100:                                                ; Offset_0x007F6E 
                dc.l    $00000064
HUD_Val_000010:                                                ; Offset_0x007F72 
                dc.l    $0000000A 
HUD_Val_000001:                                                ; Offset_0x007F76
                dc.l    $00000001                                               
;-------------------------------------------------------------------------------
HUD_Draw_Single_Digit_Number:                                  ; Offset_0x007F7A
                lea     (HUD_Val_000001), A2                   ; Offset_0x007F76
                moveq   #$00, D6
                bra.s   Offset_0x007F8C
;-------------------------------------------------------------------------------
HUD_Draw_Two_Digit_Number:                                     ; Offset_0x007F84
                lea     (HUD_Val_000010), A2                   ; Offset_0x007F72
                moveq   #$01, D6
Offset_0x007F8C:
                moveq   #$00, D4
                lea     HUD_Art_Numbers(PC), A1                ; Offset_0x0080BA
Offset_0x007F92:
                moveq   #$00, D2
                move.l  (A2)+, D3
Offset_0x007F96:
                sub.l   D3, D1
                bcs.s   Offset_0x007F9E
                addq.w  #$01, D2
                bra.s   Offset_0x007F96
Offset_0x007F9E:
                add.l   D3, D1
                tst.w   D2
                beq.s   Offset_0x007FA8
                move.w  #$0001, D4
Offset_0x007FA8:
                lsl.w   #$06, D2
                move.l  D0, $0004(A6)
                lea     $00(A1, D2), A3
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                addi.l  #$00400000, D0
                dbra    D6, Offset_0x007F92
                rts    
;-------------------------------------------------------------------------------
S2_HUD_Level_Results: 
; HUD_Draw_Four_Digit_Number:                                  ; Offset_0x007FDE
                lea     (HUD_Val_001000), A2                   ; Offset_0x007F6A
                moveq   #$03, D6
                moveq   #$00, D4
                lea     HUD_Art_Numbers(PC), A1                ; Offset_0x0080BA
Offset_0x007FEC:
                moveq   #$00, D2
                move.l  (A2)+, D3
Offset_0x007FF0:
                sub.l   D3, D1
                bcs.s   Offset_0x007FF8
                addq.w  #$01, D2
                bra.s   Offset_0x007FF0
Offset_0x007FF8:
                add.l   D3, D1
                tst.w   D2
                beq.s   Offset_0x008002
                move.w  #$0001, D4
Offset_0x008002:
                tst.w   D4
                beq.s   Offset_0x008032
                lsl.w   #$06, D2
                lea     $00(A1, D2), A3
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
Offset_0x00802C:
                dbra    D6, Offset_0x007FEC
                rts
Offset_0x008032:
                moveq   #$0F, D5
Offset_0x008034:
                move.l  #$00000000, (A6)
                dbra    D5, Offset_0x008034
                bra.s   Offset_0x00802C    
;-------------------------------------------------------------------------------   
HUD_Lives_P2:                                                  ; Offset_0x008040
                move.l  #$5FA00003, D0
                moveq   #$00, D1
                move.b  (Life_Count_P2).w, D1                        ; $FFFFFEC6
                bra.s   Offset_0x00805A        
;-------------------------------------------------------------------------------
HUD_Lives:                                                     ; Offset_0x00804E
                move.l  #$7BA00003, D0
                moveq   #$00, D1
                move.b  (Life_count).w, D1                           ; $FFFFFE12
Offset_0x00805A:
                lea     (HUD_Val_000010), A2                   ; Offset_0x007F72
                moveq   #$01, D6
                moveq   #$00, D4
                lea     HUD_Art_Life_Numbers(PC), A1           ; Offset_0x0083BA
Offset_0x008068:
                move.l  D0, $0004(A6)
                moveq   #$00, D2
                move.l  (A2)+, D3
Offset_0x008070:
                sub.l   D3, D1
                bcs.s   Offset_0x008078
                addq.w  #$01, D2
                bra.s   Offset_0x008070
Offset_0x008078:
                add.l   D3, D1
                tst.w   D2
                beq.s   Offset_0x008082
                move.w  #$0001, D4
Offset_0x008082:
                tst.w   D4
                beq.s   Offset_0x0080A8
Offset_0x008086:
                lsl.w   #$05, D2
                lea     $00(A1, D2), A3
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
                move.l  (A3)+, (A6)
Offset_0x00809C:
                addi.l  #$00400000, D0
                dbra    D6, Offset_0x008068
                rts
Offset_0x0080A8:
                tst.w   D6
                beq.s   Offset_0x008086
                moveq   #$07, D5
Offset_0x0080AE:
                move.l  #$00000000, (A6)
                dbra    D5, Offset_0x0080AE
                bra.s   Offset_0x00809C  
;-------------------------------------------------------------------------------
HUD_Art_Numbers:                                               ; Offset_0x0080BA 
                incbin  'data\art\hud_numb.dat'  
HUD_Art_Life_Numbers:                                          ; Offset_0x0083BA 
                incbin  'data\art\hud_num2.dat'                                 
HUD_Art_Debug_Numbers:                                         ; Offset_0x0084FA 
                incbin  'data\art\hud_debg.dat'                                                                                 
;===============================================================================
; Rotina para atualizar os contadores na tela (Pontos, Tempo, Vidas...).
; <<<-
;=============================================================================== 

;===============================================================================
; Rotina para carregar o pocicionamento dos an�is nas fases
; ->>>
;===============================================================================
Load_Ring_Pos:                                                 ; Offset_0x0087DA
                moveq   #$00, D0
                move.b  (Ring_Pos_Routine).w, D0                     ; $FFFFF710
                move.w  Offset_0x0087E8(PC, D0), D0
                jmp     Offset_0x0087E8(PC, D0) 
;-------------------------------------------------------------------------------
Offset_0x0087E8:
                dc.w    Offset_0x0087EC-Offset_0x0087E8
                dc.w    Offset_0x00882A-Offset_0x0087E8    
;-------------------------------------------------------------------------------                
Offset_0x0087EC:
                addq.b  #$02, (Ring_Pos_Routine).w                   ; $FFFFF710
                bsr     Load_Rings_Layout                      ; Offset_0x008966
                move.l  (Ring_Start_Offset_Ptr).w, A1                ; $FFFFEE44
                lea     (Ring_Status_Table).w, A2                    ; $FFFFE900
                move.w  (Camera_X).w, D4                             ; $FFFFEE78
                subq.w  #$08, D4
                bhi.s   Offset_0x00880C
                moveq   #$01, D4
                bra.s   Offset_0x00880C 
Offset_0x008808:
                addq.w  #$04, A1
                addq.w  #$02, A2
Offset_0x00880C:
                cmp.w   (A1), D4
                bhi.s   Offset_0x008808
                move.l  A1, (Ring_Start_Offset_Ptr).w                ; $FFFFEE44
                move.w  A2, (Ring_Offset_Ptr).w                      ; $FFFFEE4C
                addi.w  #$0150, D4
                bra.s   Offset_0x008820 
Offset_0x00881E:
                addq.w  #$04, A1
Offset_0x008820:
                cmp.w   (A1), D4
                bhi.s   Offset_0x00881E
                move.l  A1, (Ring_End_Offset_Ptr).w                  ; $FFFFEE48
                rts   
;-------------------------------------------------------------------------------  
Offset_0x00882A:
                lea     (Ring_Consumption_Table).w, A2               ; $FFFFEF80
                move.w  (A2)+, D1
                subq.w  #$01, D1
                bcs.s   Offset_0x00885E
Offset_0x008834:
                move.w  (A2)+, D0
                beq.s   Offset_0x008834
                move.w  D0, A1
                subq.b  #$01, (A1)
                bne.s   Offset_0x00885A
                move.b  #$06, (A1)
                addq.b  #$01, $0001(A1)
                cmpi.b  #$08, $0001(A1)
                bne.s   Offset_0x00885A
                move.w  #$FFFF, (A1)
                clr.w   -2(A2)
                subq.w  #$01, (Ring_Consumption_Table).w             ; $FFFFEF80
Offset_0x00885A:
                dbra    D1, Offset_0x008834
Offset_0x00885E:
                move.l  (Ring_Start_Offset_Ptr).w, A1                ; $FFFFEE44
                move.w  (Ring_Offset_Ptr).w, A2                      ; $FFFFEE4C
                move.w  (Camera_X).w, D4                             ; $FFFFEE78
                subq.w  #$08, D4
                bhi.s   Offset_0x008876
                moveq   #$01, D4
                bra.s   Offset_0x008876  
Offset_0x008872:
                addq.w  #$04, A1
                addq.w  #$02, A2
Offset_0x008876:
                cmp.w   (A1), D4
                bhi.s   Offset_0x008872
                bra.s   Offset_0x008880    
Offset_0x00887C:
                subq.w  #$04, A1
                subq.w  #$02, A2
Offset_0x008880:
                cmp.w   -4(A1), D4
                bls.s   Offset_0x00887C
                move.l  A1, (Ring_Start_Offset_Ptr).w                ; $FFFFEE44
                move.w  A2, (Ring_Offset_Ptr).w                      ; $FFFFEE4C
                move.l  (Ring_End_Offset_Ptr).w, A2                  ; $FFFFEE48
                addi.w  #$0150, D4
                bra.s   Offset_0x00889A
Offset_0x008898:
                addq.w  #$04, A2
Offset_0x00889A:
                cmp.w   (A2), D4
                bhi.s   Offset_0x008898
                bra.s   Offset_0x0088A2
Offset_0x0088A0:
                subq.w  #$04, A2
Offset_0x0088A2:
                cmp.w   -4(A2), D4
                bls.s   Offset_0x0088A0
                move.l  A2, (Ring_End_Offset_Ptr).w                  ; $FFFFEE48
                rts                                                                                                            
;===============================================================================
; Rotina para carregar o pocicionamento dos an�is nas fases
; <<<-
;===============================================================================
      
;===============================================================================
; Rotinas para responder ao toque dos an�is pelo jogador
; ->>>
;===============================================================================
TouchRings:                                                    ; Offset_0x0088AE
                cmpi.b  #$5A, Obj_P_Invunerblt_Time(A0)                  ; $0034
                bcc     Offset_0x00894E
                move.l  (Ring_Start_Offset_Ptr).w, A1                ; $FFFFEE44
                move.l  (Ring_End_Offset_Ptr).w, A2                  ; $FFFFEE48
                cmpa.l  A1, A2
                beq     Offset_0x00894E
                move.w  (Ring_Offset_Ptr).w, A4                      ; $FFFFEE4C
                move.w  Obj_X(A0), D2                                    ; $0010
                move.w  Obj_Y(A0), D3                                    ; $0014
                subi.w  #$0008, D2
                moveq   #$00, D5
                move.b  Obj_Height_2(A0), D5                             ; $001E
                subq.b  #$03, D5
                sub.w   D5, D3
                cmpi.b  #$4D, Obj_Map_Id(A0)                             ; $0022
                bne.s   Offset_0x0088EE
                addi.w  #$000C, D3
                moveq   #$0A, D5
Offset_0x0088EE:
                move.w  #$0006, D1
                move.w  #$000C, D6
                move.w  #$0010, D4
                add.w   D5, D5
Offset_0x0088FC:
                tst.w   (A4)
                bne     Offset_0x008944
                move.w  (A1), D0
                sub.w   D1, D0
                sub.w   D2, D0
                bcc.s   Offset_0x008912
                add.w   D6, D0
                bcs.s   Offset_0x008918
                bra     Offset_0x008944
Offset_0x008912:
                cmp.w   D4, D0
                bhi     Offset_0x008944
Offset_0x008918:
                move.w  $0002(A1), D0
                sub.w   D1, D0
                sub.w   D3, D0
                bcc.s   Offset_0x00892A
                add.w   D6, D0
                bcs.s   Offset_0x008930
                bra     Offset_0x008944
Offset_0x00892A:
                cmp.w   D5, D0
                bhi     Offset_0x008944
Offset_0x008930:
                move.w  #$0604, (A4)
                bsr.s   Offset_0x008950
                lea     (Ring_Consumption_Table+$02).w, A3           ; $FFFFEF82
Offset_0x00893A:
                tst.w   (A3)+
                bne.s   Offset_0x00893A
                move.w  A4, -(A3)
                addq.w  #$01, (Ring_Consumption_Table).w             ; $FFFFEF80
Offset_0x008944:
                addq.w  #$04, A1
                addq.w  #$02, A4
                cmpa.l  A1, A2
                bne     Offset_0x0088FC
Offset_0x00894E:
                rts
Offset_0x008950:
                subq.w  #$01, (Remainning_Rings_Count).w             ; $FFFFFF04
                cmpa.w  #Obj_Player_One, A0                              ; $B000
                beq.s   Offset_0x008960
                jmp     (Add_Rings_Player_Two)                 ; Offset_0x010A7C
Offset_0x008960:
                jmp     (Add_Rings)                            ; Offset_0x010A26
;===============================================================================
; Rotinas para responder ao toque dos an�is pelo jogador
; <<<-
;===============================================================================      
      
;===============================================================================
; Rotina para carregar os an�is das fases
; ->>>
;===============================================================================
Load_Rings_Layout:                                             ; Offset_0x008966
                lea     (Ring_Status_Table).w, A1                    ; $FFFFE900
                moveq   #$00, D0
                move.w  #$00FF, D1
Offset_0x008970:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x008970
                lea     (Ring_Consumption_Table).w, A1               ; $FFFFEF80
                moveq   #$1F, D1
Offset_0x00897C:
                move.l  D0, (A1)+
                dbra    D1, Offset_0x00897C
                move.w  (Current_ZoneAndAct).w, D0                             ; $FFFFFE10
                ror.b   #$01, D0
                lsr.w   #$05, D0
                lea     (Rings_Layout), A1                     ; Offset_0x1F7198
                move.l  $00(A1, D0), A1
                move.l  A1, (Ring_Start_Offset_Ptr).w                ; $FFFFEE44
                addq.w  #$04, A1
                moveq   #$00, D5
                move.w  #$01FE, D0
Offset_0x0089A0:
                tst.l   (A1)+
                bmi.s   Offset_0x0089AA
                addq.w  #$01, D5
                dbra    D0, Offset_0x0089A0
Offset_0x0089AA:
                move.w  D5, (Remainning_Rings_Count).w               ; $FFFFFF04
                move.w  #$0000, (Perfect_Bonus_Rings_Flag).w         ; $FFFFFF06
                rts 
;===============================================================================
; Rotina para carregar os an�is das fases
; <<<-
;===============================================================================      
      
;===============================================================================
; Rotina para carregar o posicionamento dos an�is na fase
; ->>>
;===============================================================================
Build_Rings:                                                   ; Offset_0x0089B6
                move.l  (Ring_Start_Offset_Ptr).w, A0                ; $FFFFEE44
                move.l  (Ring_End_Offset_Ptr).w, D2                  ; $FFFFEE48
                sub.l   A0, D2
                beq.s   Offset_0x008A1C
                move.w  (Ring_Offset_Ptr).w, A4                      ; $FFFFEE4C
                lea     Level_Rings_Mappings(PC), A1           ; Offset_0x008A1E
                move.w  $0004(A3), D4
                move.w  #$00F0, D5
                move.w  (Screen_Wrap_Y).w, D3                        ; $FFFFEEAA
Offset_0x0089D6:
                tst.w   (A4)+
                bmi.s   Offset_0x008A16
                move.w  $0002(A0), D1
                sub.w   D4, D1
                addq.w  #$08, D1
                and.w   D3, D1
                cmp.w   D5, D1
                bcc.s   Offset_0x008A16
                addi.w  #$0078, D1
                move.w  (A0), D0
                sub.w   (A3), D0
                addi.w  #$0080, D0
                move.b  -1(A4), D6
                bne.s   Offset_0x0089FE
                move.b  (Object_Frame_Buffer).w, D6                  ; $FFFFFEA3
Offset_0x0089FE:
                lsl.w   #$03, D6
                lea     $00(A1, D6), A2
                add.w   (A2)+, D1
                move.w  D1, (A6)+
                move.w  (A2)+, D6
                move.b  D6, (A6)
                addq.w  #$02, A6
                move.w  (A2)+, (A6)+
                add.w   (A2)+, D0
                move.w  D0, (A6)+
                subq.w  #$01, D7
Offset_0x008A16:
                addq.w  #$04, A0
                subq.w  #$04, D2
                bne.s   Offset_0x0089D6
Offset_0x008A1C:
                rts
;-------------------------------------------------------------------------------
Level_Rings_Mappings:                                          ; Offset_0x008A1E
                dc.w    $FFF8, $0005, $A6BC, $FFF8
                dc.w    $FFF8, $0005, $A6C0, $FFF8
                dc.w    $FFF8, $0001, $A6C4, $FFFC
                dc.w    $FFF8, $0005, $AEC0, $FFF8
                dc.w    $FFF8, $0005, $A6C6, $FFF8
                dc.w    $FFF8, $0005, $BEC6, $FFF8
                dc.w    $FFF8, $0005, $AEC6, $FFF8
                dc.w    $FFF8, $0005, $B6C6, $FFF8          
;===============================================================================
; Rotina para carregar o posicionamento dos an�is na fase
; <<<-
;===============================================================================

;===============================================================================
; Rotina para carregar o posiconamento dos tri�ngulos na Casino Night
; ->>>   Sonic 2 left over
;===============================================================================
S2_Load_Triangle_Pos:                                          ; Offset_0x008A5E
                moveq   #$00, D0
                move.b  (CNz_Triangle_Pos_Routine).w, D0             ; $FFFFF71A
                move.w  Offset_0x008A6C(PC, D0), D0
                jmp     Offset_0x008A6C(PC, D0)
;-------------------------------------------------------------------------------
Offset_0x008A6C:
                dc.w    Offset_0x008A70-Offset_0x008A6C
                dc.w    Offset_0x008AC4-Offset_0x008A6C    
;-------------------------------------------------------------------------------
Offset_0x008A70:
                addq.b  #$02, (CNz_Triangle_Pos_Routine).w           ; $FFFFF71A
                lea     (CNz_Triangles_Act_1), A1              ; Offset_0x008EBC
                tst.b   (Current_Act).w                                   ; $FFFFFE11
                beq.s   Offset_0x008A86
                lea     (CNz_Triangles_Act_2), A1              ; Offset_0x009000
Offset_0x008A86:
                move.w  (Camera_X).w, D4                             ; $FFFFEE78
                subq.w  #$08, D4
                bhi.s   Offset_0x008A96
                moveq   #$01, D4
                bra.s   Offset_0x008A96
Offset_0x008A92:
                lea     $0006(A1), A1
Offset_0x008A96:
                cmp.w   $0002(A1), D4
                bhi.s   Offset_0x008A92
                move.l  A1, (CNz_Triangle_Pos_Start).w               ; $FFFFF71C
                move.l  A1, (CNz_Triangle_Pos_Start_2P).w            ; $FFFFF724
                addi.w  #$0150, D4
                bra.s   Offset_0x008AAE
Offset_0x008AAA:
                lea     $0006(A1), A1
Offset_0x008AAE:
                cmp.w   $0002(A1), D4
                bhi.s   Offset_0x008AAA
                move.l  A1, (CNz_Triangle_Pos_End).w                 ; $FFFFF720
                move.l  A1, (CNz_Triangle_Pos_End_2P).w              ; $FFFFF728
                move.b  #$01, (CNz_Triangle_Pos_Flag).w              ; $FFFFF71B
                rts
;-------------------------------------------------------------------------------                
Offset_0x008AC4:
                move.l  (CNz_Triangle_Pos_Start).w, A1               ; $FFFFF71C
                move.w  (Camera_X).w, D4                             ; $FFFFEE78
                subq.w  #$08, D4
                bhi.s   Offset_0x008AD8
                moveq   #$01, D4
                bra.s   Offset_0x008AD8    
Offset_0x008AD4:
                lea     $0006(A1), A1
Offset_0x008AD8:
                cmp.w   $0002(A1), D4
                bhi.s   Offset_0x008AD4
                bra.s   Offset_0x008AE2                       
Offset_0x008AE0:
                subq.w  #$06, A1
Offset_0x008AE2:
                cmp.w   -4(A1), D4
                bls.s   Offset_0x008AE0
                move.l  A1, (CNz_Triangle_Pos_Start).w               ; $FFFFF71C
                move.l  (CNz_Triangle_Pos_End).w, A2                 ; $FFFFF720
                addi.w  #$0150, D4
                bra.s   Offset_0x008AFA   
Offset_0x008AF6:
                lea     $0006(A2), A2
Offset_0x008AFA:
                cmp.w   $0002(A2), D4
                bhi.s   Offset_0x008AF6
                bra.s   Offset_0x008B04  
Offset_0x008B02:
                subq.w  #$06, A2
Offset_0x008B04:
                cmp.w   -4(A2), D4
                bls.s   Offset_0x008B02
                move.l  A2, (CNz_Triangle_Pos_End).w                 ; $FFFFF720
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                bne.s   Offset_0x008B1E
                move.l  A1, (CNz_Triangle_Pos_Start_2P).w            ; $FFFFF724
                move.l  A2, (CNz_Triangle_Pos_End_2P).w              ; $FFFFF728
                rts
Offset_0x008B1E:
                move.l  (CNz_Triangle_Pos_Start_2P).w, A1            ; $FFFFF724
                move.w  (Camera_X_P2).w, D4                          ; $FFFFEE60
                subq.w  #$08, D4
                bhi.s   Offset_0x008B32
                moveq   #$01, D4
                bra.s   Offset_0x008B32
Offset_0x008B2E:
                lea     $0006(A1), A1
Offset_0x008B32:
                cmp.w   $0002(A1), D4
                bhi.s   Offset_0x008B2E
                bra.s   Offset_0x008B3C
Offset_0x008B3A:
                subq.w  #$06, A1
Offset_0x008B3C:
                cmp.w   -4(A1), D4
                bls.s   Offset_0x008B3A
                move.l  A1, (CNz_Triangle_Pos_Start_2P).w            ; $FFFFF724
                move.l  (CNz_Triangle_Pos_End_2P).w, A2              ; $FFFFF728
                addi.w  #$0150, D4
                bra.s   Offset_0x008B54   
Offset_0x008B50:
                lea     $0006(A2), A2
Offset_0x008B54:
                cmp.w   $0002(A2), D4
                bhi.s   Offset_0x008B50
                bra.s   Offset_0x008B5E
Offset_0x008B5C:
                subq.w  #$06, A2
Offset_0x008B5E:
                cmp.w   -4(A2), D4
                bls.s   Offset_0x008B5C
                move.l  A2, (CNz_Triangle_Pos_End_2P).w              ; $FFFFF728
                rts
;===============================================================================
; Rotina para carregar o posiconamento dos tri�ngulos na Casino Night
; <<<-   Sonic 2 left over
;===============================================================================

;===============================================================================
; Rotina para responder ao toque nos tri�ngulos na Casino Night
; ->>>   Sonic 2 left over
;===============================================================================
S2_Touch_Response_Cnz_Triangles:                               ; Offset_0x008B6A
                move.l  (CNz_Triangle_Pos_Start).w, A1               ; $FFFFF71C
                move.l  (CNz_Triangle_Pos_End).w, A2                 ; $FFFFF720
                cmpa.w  #Obj_Player_One, A0                              ; $B000
                beq.s   Offset_0x008B80
                move.l  (CNz_Triangle_Pos_Start_2P).w, A1            ; $FFFFF724
                move.l  (CNz_Triangle_Pos_End_2P).w, A2              ; $FFFFF728
Offset_0x008B80:
                cmpa.l  A1, A2
                beq     Offset_0x008C1A
                move.w  Obj_X(A0), D2                                    ; $0010
                move.w  Obj_Y(A0), D3                                    ; $0014
                subi.w  #$0009, D2
                moveq   #$00, D5
                move.b  Obj_Height_2(A0), D5                             ; $001E
                subq.b  #$03, D5
                sub.w   D5, D3
                cmpi.b  #$4D, Obj_Map_Id(A0)                             ; $0022
                bne.s   Offset_0x008BAA
                addi.w  #$000C, D3
                moveq   #$0A, D5
Offset_0x008BAA:
                move.w  #$0012, D4
                add.w   D5, D5
Offset_0x008BB0:                
                move.w  (A1), D0
                andi.w  #$000E, D0
                lea     Offset_0x008BFA(PC, D0), A3
                moveq   #$00, D1
                move.b  (A3)+, D1
                move.w  $0002(A1), D0
                sub.w   D1, D0
                sub.w   D2, D0
                bcc.s   Offset_0x008BD2
                add.w   D1, D1
                add.w   D1, D0
                bcs.s   Offset_0x008BD8
                bra     Offset_0x008C10
Offset_0x008BD2:
                cmp.w   D4, D0
                bhi     Offset_0x008C10
Offset_0x008BD8:
                moveq   #$00, D1
                move.b  (A3)+, D1
                move.w  $0004(A1), D0                                 
                sub.w   D1, D0
                sub.w   D3, D0
                bcc.s   Offset_0x008BF2
                add.w   D1, D1
                add.w   D1, D0
                bcs     Offset_0x008C06
                bra     Offset_0x008C10
Offset_0x008BF2:
                cmp.w   D5, D0
                bhi     Offset_0x008C10
                bra.s   Offset_0x008C06
;-------------------------------------------------------------------------------
Offset_0x008BFA:
                dc.b    $20, $20, $20, $20, $40, $08, $40, $08
                dc.b    $08, $40, $08, $40
;-------------------------------------------------------------------------------  
Offset_0x008C06:
                move.w  (A1), D0
                move.w  Offset_0x008C1C(PC, D0), D0
                jmp     Offset_0x008C1C(PC, D0)    
;-------------------------------------------------------------------------------
Offset_0x008C10:
                lea     $0006(A1), A1 
                cmpa.l  A1, A2
                bne     Offset_0x008BB0
Offset_0x008C1A:                
                rts      
;-------------------------------------------------------------------------------
Offset_0x008C1C:
                dc.w    Offset_0x008C28-Offset_0x008C1C
                dc.w    Offset_0x008CDA-Offset_0x008C1C
                dc.w    Offset_0x008D40-Offset_0x008C1C
                dc.w    Offset_0x008D98-Offset_0x008C1C
                dc.w    Offset_0x008DEE-Offset_0x008C1C
                dc.w    Offset_0x008E46-Offset_0x008C1C     
;-------------------------------------------------------------------------------
Offset_0x008C28:
                move.w  Obj_Flags(A1), D0                                ; $0004
                sub.w   Obj_Y(A0), D0                                    ; $0014
                neg.w   D0
                cmpi.w  #$0020, D0
                blt.s   Offset_0x008C42
                move.w  #$0A00, Obj_Speed_Y(A0)                          ; $001A
                bra     Offset_0x008E9C
Offset_0x008C42:
                move.w  $0002(A1), D0
                sub.w   Obj_X(A0), D0                                    ; $0010
                neg.w   D0
                cmpi.w  #$0020, D0
                blt.s   Offset_0x008C5C
                move.w  #$0A00, Obj_Speed_X(A0)                          ; $0018
                bra     Offset_0x008E9C
Offset_0x008C5C:
                move.w  $0002(A1), D0
                sub.w   Obj_X(A0), D0                                    ; $0010
                cmpi.w  #$0020, D0
                blt.s   Offset_0x008C6E
                move.w  #$0020, D0
Offset_0x008C6E:
                add.w   $0004(A1), D0
                subq.w  #$08, D0
                move.w  Obj_Y(A0), D1                                    ; $0014
                addi.w  #$000E, D1
                sub.w   D1, D0
                bcc.s   Offset_0x008C8A
                move.w  #$0020, D3
                bsr.s   Offset_0x008C8C
                bra     Offset_0x008E9C
Offset_0x008C8A:
                rts
Offset_0x008C8C:
                move.w  Obj_Speed_X(A0), D1                              ; $0018
                move.w  Obj_Speed_Y(A0), D2                              ; $001A
                jsr     (CalcAngle)                            ; Offset_0x001DB8
                move.b  D0, (CNz_Triangle_Angle_Buffer).w            ; $FFFFFFDC
                sub.w   D3, D0
                move.w  D0, D1
                bpl.s   Offset_0x008CA6
                neg.w   D1
Offset_0x008CA6:
                neg.w   D0
                add.w   D3, D0
                move.b  D0, (CNz_Triangle_Angle_Buffer+$01).w        ; $FFFFFFDD
                move.b  D1, (CNz_Triangle_Angle_Buffer+$03).w        ; $FFFFFFDF
                cmpi.b  #$38, D1
                bcs.s   Offset_0x008CBA
                move.w  D3, D0
Offset_0x008CBA:
                move.b  D0, (CNz_Triangle_Angle_Buffer+$02).w        ; $FFFFFFDE
                jsr     (CalcSine)                             ; Offset_0x001B20
                muls.w  #$F600, D1
                asr.l   #$08, D1
                move.w  D1, Obj_Speed_X(A0)                              ; $0018
                muls.w  #$F600, D0
                asr.l   #$08, D0
                move.w  D0, Obj_Speed_Y(A0)                              ; $001A
                rts
;-------------------------------------------------------------------------------                
Offset_0x008CDA:
                move.w  $0004(A1), D0
                sub.w   Obj_Y(A0), D0                                    ; $0014
                neg.w   D0
                cmpi.w  #$0020, D0
                blt.s   Offset_0x008CF4
                move.w  #$0A00, Obj_Speed_Y(A0)                          ; $001A
                bra     Offset_0x008E9C
Offset_0x008CF4:
                move.w  $0002(A1), D0
                sub.w   Obj_X(A0), D0                                    ; $0010
                cmpi.w  #$0020, D0
                blt.s   Offset_0x008D0C
                move.w  #$F600, Obj_Speed_X(A0)                          ; $0018
                bra     Offset_0x008E9C
Offset_0x008D0C:
                move.w  $0002(A1), D0
                sub.w   Obj_X(A0), D0                                    ; $0010
                neg.w   D0
                cmpi.w  #$0020, D0
                blt.s   Offset_0x008D20
                move.w  #$0020, D0
Offset_0x008D20:
                add.w   $0004(A1), D0
                subq.w  #$08, D0
                move.w  Obj_Y(A0), D1                                    ; $0014
                addi.w  #$000E, D1
                sub.w   D1, D0
                bcc.s   Offset_0x008D3E
                move.w  #$0060, D3
                bsr     Offset_0x008C8C
                bra     Offset_0x008E9C
Offset_0x008D3E:
                rts
;-------------------------------------------------------------------------------                
Offset_0x008D40:
                move.w  $0004(A1), D0
                sub.w   Obj_Y(A0), D0                                    ; $0014
                neg.w   D0
                cmpi.w  #$0008, D0
                blt.s   Offset_0x008D5A
                move.w  #$0A00, Obj_Speed_Y(A0)                          ; $001A
                bra     Offset_0x008E9C
Offset_0x008D5A:
                move.w  $0002(A1), D0
                sub.w   Obj_X(A0), D0                                    ; $0010
                cmpi.w  #$0040, D0
                blt.s   Offset_0x008D72
                move.w  #$F600, Obj_Speed_X(A0)                          ; $0018
                bra     Offset_0x008E9C
Offset_0x008D72:
                neg.w   D0
                cmpi.w  #$0040, D0
                blt.s   Offset_0x008D84
                move.w  #$0A00, Obj_Speed_X(A0)                          ; $0018
                bra     Offset_0x008E9C
Offset_0x008D84:
                move.w  #$0038, D3
                tst.w   D0
                bmi.s   Offset_0x008D90
                move.w  #$0048, D3
Offset_0x008D90:
                bsr     Offset_0x008C8C
                bra     Offset_0x008E9C
;-------------------------------------------------------------------------------                
Offset_0x008D98:
                move.w  $0004(A1), D0
                sub.w   Obj_Y(A0), D0                                    ; $0014
                cmpi.w  #$0008, D0
                blt.s   Offset_0x008DB0
                move.w  #$F600, Obj_Speed_Y(A0)                          ; $001A
                bra     Offset_0x008E9C
Offset_0x008DB0:
                move.w  $0002(A1), D0
                sub.w   Obj_X(A0), D0                                    ; $0010
                cmpi.w  #$0040, D0
                blt.s   Offset_0x008DC8
                move.w  #$F600, Obj_Speed_X(A0)                          ; $0018
                bra     Offset_0x008E9C
Offset_0x008DC8:
                neg.w   D0
                cmpi.w  #$0040, D0
                blt.s   Offset_0x008DDA
                move.w  #$0A00, Obj_Speed_X(A0)                          ; $0018
                bra     Offset_0x008E9C
Offset_0x008DDA:
                move.w  #$00C8, D3
                tst.w   D0
                bmi.s   Offset_0x008DE6
                move.w  #$00B8, D3
Offset_0x008DE6:
                bsr     Offset_0x008C8C
                bra     Offset_0x008E9C
;-------------------------------------------------------------------------------                
Offset_0x008DEE:                            
                move.w  $0002(A1), D0
                sub.w   Obj_X(A0), D0                                    ; $0010
                neg.w   D0
                cmpi.w  #$0008, D0
                blt.s   Offset_0x008E08
                move.w  #$0A00, Obj_Speed_X(A0)                          ; $0018
                bra     Offset_0x008E9C
Offset_0x008E08:
                move.w  $0004(A1), D0 
                sub.w   Obj_Y(A0), D0                                    ; $0014
                cmpi.w  #$0040, D0
                blt.s   Offset_0x008E20
                move.w  #$F600, Obj_Speed_Y(A0)                          ; $001A
                bra     Offset_0x008E9C
Offset_0x008E20:
                neg.w   D0
                cmpi.w  #$0040, D0
                blt.s   Offset_0x008E32
                move.w  #$0A00, Obj_Speed_X(A0)                          ; $0018
                bra     Offset_0x008E9C
Offset_0x008E32:
                move.w  #$0008, D3
                tst.w   D0
                bmi.s   Offset_0x008E3E
                move.w  #$00F8, D3
Offset_0x008E3E:
                bsr     Offset_0x008C8C
                bra     Offset_0x008E9C
;-------------------------------------------------------------------------------                
Offset_0x008E46:
                move.w  $0002(A1), D0
                sub.w   Obj_X(A0), D0                                    ; $0010
                cmpi.w  #$0008, D0
                blt.s   Offset_0x008E5E
                move.w  #$0A00, Obj_Speed_X(A0)                          ; $0018
                bra     Offset_0x008E9C
Offset_0x008E5E:
                move.w  $0004(A1), D0
                sub.w   Obj_Y(A0), D0                                    ; $0014
                cmpi.w  #$0040, D0
                blt.s   Offset_0x008E76
                move.w  #$F600, Obj_Speed_Y(A0)                          ; $001A
                bra     Offset_0x008E9C
Offset_0x008E76:
                neg.w   D0
                cmpi.w  #$0040, D0
                blt.s   Offset_0x008E88
                move.w  #$0A00, Obj_Speed_X(A0)                          ; $0018
                bra     Offset_0x008E9C
Offset_0x008E88:
                move.w  #$0078, D3
                tst.w   D0
                bmi.s   Offset_0x008E94
                move.w  #$0088, D3
Offset_0x008E94:
                bsr     Offset_0x008C8C
                bra     Offset_0x008E9C
Offset_0x008E9C:
                bset    #$01, Obj_Status(A0)                             ; $002A
                bclr    #$04, Obj_Status(A0)                             ; $002A
                bclr    #$05, Obj_Status(A0)                             ; $002A
                clr.b   Obj_Player_St_Convex(A0)                         ; $003C
                move.w  #S2_Baaaang_Bumper_Sfx, D0                       ; $00D9
                jmp     (Play_Music)                           ; Offset_0x001176                                      
;===============================================================================
; Rotina para responder ao toque nos tri�ngulos na Casino Night
; <<<-   Sonic 2 left over
;===============================================================================
CNz_Triangles_Act_1:                                           ; Offset_0x008EBC    
                incbin  'data\s2_cnz\tri_act1.dat' 
CNz_Triangles_Act_2:                                           ; Offset_0x009000
                incbin  'data\s2_cnz\tri_act2.dat' 
;===============================================================================
; Rotina para calcular o �ngulo do jogador
; ->>>                    
;===============================================================================
Player_AnglePos:                                               ; Offset_0x009144
                move.l  (Primary_Collision_Ptr).w, (Current_Collision_Ptr).w ; $FFFFF7B4, $FFFFF796
                cmpi.b  #$0C, Obj_Player_Top_Solid(A0)                   ; $0046
                beq.s   Offset_0x009158
                move.l  (Secondary_Collision_Ptr).w, (Current_Collision_Ptr).w ; $FFFFF7B8, $FFFFF796
Offset_0x009158:
                move.b  Obj_Player_Top_Solid(A0), D5                     ; $0046
                btst    #$03, Obj_Status(A0)                             ; $002A
                beq.s   Offset_0x009170
                moveq   #$00, D0
                move.b  D0, (Primary_Angle).w                        ; $FFFFF768
                move.b  D0, (Secondary_Angle).w                      ; $FFFFF76A
                rts
Offset_0x009170:
                moveq   #$03, D0
                move.b  D0, (Primary_Angle).w                        ; $FFFFF768
                move.b  D0, (Secondary_Angle).w                      ; $FFFFF76A
                move.b  Obj_Angle(A0), D0                                ; $0026
                addi.b  #$20, D0
                bpl.s   Offset_0x009192
                move.b  Obj_Angle(A0), D0                                ; $0026
                bpl.s   Offset_0x00918C
                subq.b  #$01, D0
Offset_0x00918C:
                addi.b  #$20, D0
                bra.s   Offset_0x00919E
Offset_0x009192:
                move.b  Obj_Angle(A0), D0                                ; $0026
                bpl.s   Offset_0x00919A
                addq.b  #$01, D0
Offset_0x00919A:
                addi.b  #$1F, D0
Offset_0x00919E:
                andi.b  #$C0, D0
                cmpi.b  #$40, D0
                beq     Player_WalkVertL                       ; Offset_0x009418
                cmpi.b  #$80, D0
                beq     Player_WalkCeiling                     ; Offset_0x00936A
                cmpi.b  #$C0, D0
                beq     Player_WalkVertR                       ; Offset_0x0092A2
                move.w  Obj_Y(A0), D2                                    ; $0014
                move.w  Obj_X(A0), D3                                    ; $0010
                moveq   #$00, D0
                move.b  Obj_Height_2(A0), D0                             ; $001E
                ext.w   D0
                add.w   D0, D2
                move.b  Obj_Width_2(A0), D0                              ; $001F
                ext.w   D0
                add.w   D0, D3
                lea     (Primary_Angle).w, A4                        ; $FFFFF768
                move.w  #$0010, A3
                move.w  #$0000, D6
                bsr     FindFloor                              ; Offset_0x00973A
                move.w  D1, -(A7)
                move.w  Obj_Y(A0), D2                                    ; $0014
                move.w  Obj_X(A0), D3                                    ; $0010
                moveq   #$00, D0
                move.b  Obj_Height_2(A0), D0                             ; $001E
                ext.w   D0
                add.w   D0, D2
                move.b  Obj_Width_2(A0), D0                              ; $001F
                ext.w   D0
                neg.w   D0
                add.w   D0, D3
                lea     (Secondary_Angle).w, A4                      ; $FFFFF76A
                move.w  #$0010, A3
                move.w  #$0000, D6
                bsr     FindFloor                              ; Offset_0x00973A
                move.w  (A7)+, D0
                bsr     Player_Angle                           ; Offset_0x009262
                tst.w   D1
                beq.s   Offset_0x009228
                bpl.s   Offset_0x00922A
                cmpi.w  #$FFF2, D1
                blt.s   Offset_0x009228
                add.w   D1, Obj_Y(A0)                                    ; $0014
Offset_0x009228:
                rts
Offset_0x00922A:
                tst.b   Obj_Player_St_Convex(A0)                         ; $003C
                bne.s   Offset_0x009248
                move.b  Obj_Speed_X(A0), D0                              ; $0018
                bpl.s   Offset_0x009238
                neg.b   D0
Offset_0x009238:
                addq.b  #$04, D0
                cmpi.b  #$0E, D0
                bcs.s   Offset_0x009244
                move.b  #$0E, D0
Offset_0x009244:
                cmp.b   D0, D1
                bgt.s   Offset_0x00924E
Offset_0x009248:
                add.w   D1, Obj_Y(A0)                                    ; $0014
                rts
Offset_0x00924E:
                bset    #$01, Obj_Status(A0)                             ; $002A
                bclr    #$05, Obj_Status(A0)                             ; $002A
                move.b  #$01, Obj_Ani_Flag(A0)                           ; $0021
                rts
;-------------------------------------------------------------------------------                
Player_Angle:                                                  ; Offset_0x009262
                move.w  D0, D3
                move.b  (Secondary_Angle).w, D2                      ; $FFFFF76A
                cmp.w   D0, D1
                ble.s   Offset_0x009274
                move.b  (Primary_Angle).w, D2                        ; $FFFFF768
                move.w  D1, D3
                move.w  D0, D1
Offset_0x009274:
                btst    #$00, D2
                bne.s   Offset_0x009290
                move.b  D2, D0
                sub.b   Obj_Angle(A0), D0                                ; $0026
                bpl.s   Offset_0x009284
                neg.b   D0
Offset_0x009284:
                cmpi.b  #$20, D0
                bcc.s   Offset_0x009290
                move.b  D2, Obj_Angle(A0)                                ; $0026
                rts
Offset_0x009290:
                move.b  Obj_Angle(A0), D2                                ; $0026
                addi.b  #$20, D2
                andi.b  #$C0, D2
                move.b  D2, Obj_Angle(A0)                                ; $0026
                rts
;===============================================================================
; Rotina para calcular o �ngulo do jogador
; <<<-                    
;===============================================================================
                
;===============================================================================
; Rotina para calcular a posi��o do jogador em rampas
; ->>>                    
;===============================================================================
Player_WalkVertR:                                              ; Offset_0x0092A2
                move.w  Obj_Y(A0), D2                                    ; $0014
                move.w  Obj_X(A0), D3                                    ; $0010
                moveq   #$00, D0
                move.b  Obj_Width_2(A0), D0                              ; $001F
                ext.w   D0
                neg.w   D0
                add.w   D0, D2
                move.b  Obj_Height_2(A0), D0                             ; $001E
                ext.w   D0
                add.w   D0, D3
                lea     (Primary_Angle).w, A4                        ; $FFFFF768
                move.w  #$0010, A3
                move.w  #$0000, D6
                bsr     FindWall                               ; Offset_0x009982
                move.w  D1, -(A7)
                move.w  Obj_Y(A0), D2                                    ; $0014
                move.w  Obj_X(A0), D3                                    ; $0010
                moveq   #$00, D0
                move.b  Obj_Width_2(A0), D0                              ; $001F
                ext.w   D0
                add.w   D0, D2
                move.b  Obj_Height_2(A0), D0                             ; $001E
                ext.w   D0
                add.w   D0, D3
                lea     (Secondary_Angle).w, A4                      ; $FFFFF76A
                move.w  #$0010, A3
                move.w  #$0000, D6
                bsr     FindWall                               ; Offset_0x009982
                move.w  (A7)+, D0
                bsr     Player_Angle                           ; Offset_0x009262
                tst.w   D1
                beq.s   Offset_0x009316
                bpl.s   Offset_0x009332
                cmpi.w  #$FFF2, D1
                blt.s   Offset_0x009324
                tst.b   Obj_Player_Angle_Flag(A0)                        ; $0041
                bne.s   Offset_0x009318
                add.w   D1, Obj_X(A0)                                    ; $0010
Offset_0x009316:
                rts
Offset_0x009318:
                subq.b  #$01, Obj_Player_Angle_Flag(A0)                  ; $0041
                move.b  #$C0, Obj_Angle(A0)                              ; $0026
                rts
Offset_0x009324:
                move.b  #$C0, Obj_Angle(A0)                              ; $0026
                move.b  #$03, Obj_Player_Angle_Flag(A0)                  ; $0041
                rts
Offset_0x009332:
                tst.b   Obj_Player_St_Convex(A0)                         ; $003C
                bne.s   Offset_0x009350
                move.b  Obj_Speed_Y(A0), D0                              ; $001A
                bpl.s   Offset_0x009340
                neg.b   D0
Offset_0x009340:
                addq.b  #$04, D0
                cmpi.b  #$0E, D0
                bcs.s   Offset_0x00934C
                move.b  #$0E, D0
Offset_0x00934C:
                cmp.b   D0, D1
                bgt.s   Offset_0x009356
Offset_0x009350:
                add.w   D1, Obj_X(A0)                                    ; $0010
                rts
Offset_0x009356:
                bset    #$01, Obj_Status(A0)                             ; $002A
                bclr    #$05, Obj_Status(A0)                             ; $002A
                move.b  #$01, Obj_Ani_Flag(A0)                           ; $0021
                rts
;===============================================================================
; Rotina para calcular a posi��o do jogador em rampas
; <<<-                    
;===============================================================================  

;===============================================================================
; Rotina para calcular a posi��o do jogador ao andar no teto
; ->>>                    
;===============================================================================                
Player_WalkCeiling:                                            ; Offset_0x00936A
                move.w  Obj_Y(A0), D2                                    ; $0014
                move.w  Obj_X(A0), D3                                    ; $0010
                moveq   #$00, D0
                move.b  Obj_Height_2(A0), D0                             ; $001E
                ext.w   D0
                sub.w   D0, D2
                eori.w  #$000F, D2
                move.b  Obj_Width_2(A0), D0                              ; $001F
                ext.w   D0
                add.w   D0, D3
                lea     (Primary_Angle).w, A4                        ; $FFFFF768
                move.w  #$FFF0, A3
                move.w  #$0800, D6
                bsr     FindFloor                              ; Offset_0x00973A
                move.w  D1, -(A7)
                move.w  Obj_Y(A0), D2                                    ; $0014
                move.w  Obj_X(A0), D3                                    ; $0010
                moveq   #$00, D0
                move.b  Obj_Height_2(A0), D0                             ; $001E
                ext.w   D0
                sub.w   D0, D2
                eori.w  #$000F, D2
                move.b  Obj_Width_2(A0), D0                              ; $001F
                ext.w   D0
                sub.w   D0, D3
                lea     (Secondary_Angle).w, A4                      ; $FFFFF76A
                move.w  #$FFF0, A3
                move.w  #$0800, D6
                bsr     FindFloor                              ; Offset_0x00973A
                move.w  (A7)+, D0
                bsr     Player_Angle                           ; Offset_0x009262
                tst.w   D1
                beq.s   Offset_0x0093DE
                bpl.s   Offset_0x0093E0
                cmpi.w  #$FFF2, D1
                blt.s   Offset_0x0093DE
                sub.w   D1, Obj_Y(A0)                                    ; $0014
Offset_0x0093DE:
                rts
Offset_0x0093E0:
                tst.b   Obj_Player_St_Convex(A0)                         ; $003C
                bne.s   Offset_0x0093FE
                move.b  Obj_Speed_X(A0), D0                              ; $0018
                bpl.s   Offset_0x0093EE
                neg.b   D0
Offset_0x0093EE:
                addq.b  #$04, D0
                cmpi.b  #$0E, D0
                bcs.s   Offset_0x0093FA
                move.b  #$0E, D0
Offset_0x0093FA:
                cmp.b   D0, D1
                bgt.s   Offset_0x009404
Offset_0x0093FE:
                sub.w   D1, Obj_Y(A0)                                    ; $0014
                rts
Offset_0x009404:
                bset    #$01, Obj_Status(A0)                             ; $002A
                bclr    #$05, Obj_Status(A0)                             ; $002A
                move.b  #$01, Obj_Ani_Flag(A0)                           ; $0021
                rts
;===============================================================================
; Rotina para calcular a posi��o do jogador ao andar no teto
; <<<-                    
;===============================================================================
    
;===============================================================================
; Rotina para calcular a posi��o do jogador em rampas
; ->>>                    
;===============================================================================             
Player_WalkVertL:                                              ; Offset_0x009418
                move.w  Obj_Y(A0), D2                                    ; $0014
                move.w  Obj_X(A0), D3                                    ; $0010
                moveq   #$00, D0
                move.b  Obj_Width_2(A0), D0                              ; $001F
                ext.w   D0
                sub.w   D0, D2
                move.b  Obj_Height_2(A0), D0                             ; $001E
                ext.w   D0
                sub.w   D0, D3
                eori.w  #$000F, D3
                lea     (Primary_Angle).w, A4                        ; $FFFFF768
                move.w  #$FFF0, A3
                move.w  #$0400, D6
                bsr     FindWall                               ; Offset_0x009982
                move.w  D1, -(A7)
                move.w  Obj_Y(A0), D2                                    ; $0014
                move.w  Obj_X(A0), D3                                    ; $0010
                moveq   #$00, D0
                move.b  Obj_Width_2(A0), D0                              ; $001F
                ext.w   D0
                add.w   D0, D2
                move.b  Obj_Height_2(A0), D0                             ; $001E
                ext.w   D0
                sub.w   D0, D3
                eori.w  #$000F, D3
                lea     (Secondary_Angle).w, A4                      ; $FFFFF76A
                move.w  #$FFF0, A3
                move.w  #$0400, D6
                bsr     FindWall                               ; Offset_0x009982
                move.w  (A7)+, D0
                bsr     Player_Angle                           ; Offset_0x009262
                tst.w   D1
                beq.s   Offset_0x00948C
                bpl.s   Offset_0x00948E
                cmpi.w  #$FFF2, D1
                blt.s   Offset_0x00948C
                sub.w   D1, Obj_X(A0)                                    ; $0010
Offset_0x00948C:
                rts
Offset_0x00948E:
                tst.b   Obj_Player_St_Convex(A0)                         ; $003C
                bne.s   Offset_0x0094AC
                move.b  Obj_Speed_Y(A0), D0                              ; $001A
                bpl.s   Offset_0x00949C
                neg.b   D0
Offset_0x00949C:
                addq.b  #$04, D0
                cmpi.b  #$0E, D0
                bcs.s   Offset_0x0094A8
                move.b  #$0E, D0
Offset_0x0094A8:
                cmp.b   D0, D1
                bgt.s   Offset_0x0094B2
Offset_0x0094AC:
                sub.w   D1, Obj_X(A0)                                    ; $0010
                rts
Offset_0x0094B2:
                bset    #$01, Obj_Status(A0)                             ; $002A
                bclr    #$05, Obj_Status(A0)                             ; $002A
                move.b  #$01, Obj_Ani_Flag(A0)                           ; $0021
                rts 
;===============================================================================
; Rotina para calcular a posi��o do jogador em rampas
; <<<-                    
;===============================================================================

;===============================================================================
; Rotina para testar em qual tile o objeto esta
; ->>>
;===============================================================================
Floor_Check_Tile:                                              ; Offset_0x0094C6
                lea     (Fg_Mem_Start_Address).w, A1                 ; $FFFF8000
                move.w  D2, D0
                lsr.w   #$05, D0
                and.w   (Level_Layout_Wrap_Row).w, D0                ; $FFFFEEAE
                move.w  $0A(A1, D0), D0
                move.w  D3, D1
                lsr.w   #$03, D1
                move.w  D1, D4
                lsr.w   #$04, D1
                add.w   D1, D0
                moveq   #-$01, D1
                clr.w   D1
                move.w  D0, A1
                move.b  (A1), D1
                add.w   D1, D1
                move.w  Chunk_Mem_Address(PC, D1), D1          ; Offset_0x00953A
                move.w  D2, D0
                andi.w  #$0070, D0
                add.w   D0, D1
                andi.w  #$000E, D4
                add.w   D4, D1
                move.l  D1, A1
                rts 
;-------------------------------------------------------------------------------
Floor_Check_Tile_2:                                            ; Offset_0x009500
                lea     (Fg_Mem_Start_Address).w, A1                 ; $FFFF8000
                move.w  D2, D0
                lsr.w   #$05, D0
                and.w   (Level_Layout_Wrap_Row).w, D0                ; $FFFFEEAE
                move.w  $08(A1, D0), D0
                move.w  D3, D1
                lsr.w   #$03, D1
                move.w  D1, D4
                lsr.w   #$04, D1
                add.w   D1, D0
                moveq   #-$01, D1
                clr.w   D1
                move.w  D0, A1
                move.b  (A1), D1
                add.w   D1, D1
                move.w  Chunk_Mem_Address(PC, D1), D1          ; Offset_0x00953A
                move.w  D2, D0
                andi.w  #$0070, D0
                add.w   D0, D1
                andi.w  #$000E, D4
                add.w   D4, D1
                move.l  D1, A1
                rts                
;-------------------------------------------------------------------------------
; Tabela contendo os endere�os dos tiles 128x128 -> Ex: Tile 1 = $0080
; ->>>
;-------------------------------------------------------------------------------                     
Chunk_Mem_Address:                                             ; Offset_0x00953A 
                dc.w    $0000, $0080, $0100, $0180, $0200, $0280, $0300, $0380
                dc.w    $0400, $0480, $0500, $0580, $0600, $0680, $0700, $0780
                dc.w    $0800, $0880, $0900, $0980, $0A00, $0A80, $0B00, $0B80
                dc.w    $0C00, $0C80, $0D00, $0D80, $0E00, $0E80, $0F00, $0F80
                dc.w    $1000, $1080, $1100, $1180, $1200, $1280, $1300, $1380
                dc.w    $1400, $1480, $1500, $1580, $1600, $1680, $1700, $1780
                dc.w    $1800, $1880, $1900, $1980, $1A00, $1A80, $1B00, $1B80
                dc.w    $1C00, $1C80, $1D00, $1D80, $1E00, $1E80, $1F00, $1F80
                dc.w    $2000, $2080, $2100, $2180, $2200, $2280, $2300, $2380
                dc.w    $2400, $2480, $2500, $2580, $2600, $2680, $2700, $2780
                dc.w    $2800, $2880, $2900, $2980, $2A00, $2A80, $2B00, $2B80
                dc.w    $2C00, $2C80, $2D00, $2D80, $2E00, $2E80, $2F00, $2F80
                dc.w    $3000, $3080, $3100, $3180, $3200, $3280, $3300, $3380
                dc.w    $3400, $3480, $3500, $3580, $3600, $3680, $3700, $3780
                dc.w    $3800, $3880, $3900, $3980, $3A00, $3A80, $3B00, $3B80
                dc.w    $3C00, $3C80, $3D00, $3D80, $3E00, $3E80, $3F00, $3F80
                dc.w    $4000, $4080, $4100, $4180, $4200, $4280, $4300, $4380
                dc.w    $4400, $4480, $4500, $4580, $4600, $4680, $4700, $4780
                dc.w    $4800, $4880, $4900, $4980, $4A00, $4A80, $4B00, $4B80
                dc.w    $4C00, $4C80, $4D00, $4D80, $4E00, $4E80, $4F00, $4F80
                dc.w    $5000, $5080, $5100, $5180, $5200, $5280, $5300, $5380
                dc.w    $5400, $5480, $5500, $5580, $5600, $5680, $5700, $5780
                dc.w    $5800, $5880, $5900, $5980, $5A00, $5A80, $5B00, $5B80
                dc.w    $5C00, $5C80, $5D00, $5D80, $5E00, $5E80, $5F00, $5F80
                dc.w    $6000, $6080, $6100, $6180, $6200, $6280, $6300, $6380
                dc.w    $6400, $6480, $6500, $6580, $6600, $6680, $6700, $6780
                dc.w    $6800, $6880, $6900, $6980, $6A00, $6A80, $6B00, $6B80
                dc.w    $6C00, $6C80, $6D00, $6D80, $6E00, $6E80, $6F00, $6F80
                dc.w    $7000, $7080, $7100, $7180, $7200, $7280, $7300, $7380
                dc.w    $7400, $7480, $7500, $7580, $7600, $7680, $7700, $7780
                dc.w    $7800, $7880, $7900, $7980, $7A00, $7A80, $7B00, $7B80
                dc.w    $7C00, $7C80, $7D00, $7D80, $7E00, $7E80, $7F00, $7F80
;-------------------------------------------------------------------------------
; Tabela contendo os endere�os dos tiles 128x128 -> Ex: Tile 1 = $0080
; <<<-
;------------------------------------------------------------------------------- 

;===============================================================================
; Rotina para testar em qual tile o objeto esta
; <<<-
;===============================================================================

;===============================================================================
; Rotina para localizar o ch�o
; ->>>
;===============================================================================
FindFloor:                                                     ; Offset_0x00973A
                lea     (Floor_Check_Tile_2), A5               ; Offset_0x009500
                tst.b   (Background_Collision_Flag).w                ; $FFFFF664
                beq.s   Offset_0x009774
                bsr.s   Offset_0x009774
                move.b  (A4), $0001(A4)
                move.w  D1, -(A7)
                sub.w   (Camera_X_Difference).w, D3                  ; $FFFFEE3E
                sub.w   (Camera_Y_Difference).w, D2                  ; $FFFFEE40
                lea     (Floor_Check_Tile), A5                 ; Offset_0x0094C6
                bsr.s   Offset_0x009774
                add.w   (Camera_X_Difference).w, D3                  ; $FFFFEE3E
                add.w   (Camera_Y_Difference).w, D2                  ; $FFFFEE40
                move.w  (A7)+, D0
                cmp.w   D0, D1
                ble.s   Offset_0x009772
                move.b  $0001(A4), (A4)
                move.w  D0, D1
Offset_0x009772:
                rts
Offset_0x009774:
                jsr     (A5)
                move.w  (A1), D0
                move.w  D0, D4
                andi.w  #$03FF, D0
                beq.s   Offset_0x009784
                btst    D5, D4
                bne.s   Offset_0x009792
Offset_0x009784:
                add.w   A3, D2
                bsr     Offset_0x009818
                sub.w   A3, D2
                addi.w  #$0010, D1
                rts
Offset_0x009792:
                move.l  (Current_Collision_Ptr).w, A2                ; $FFFFF796
                add.w   D0, D0
                move.w  $00(A2, D0), D0
                beq.s   Offset_0x009784
                lea     (AngleMap), A2                         ; Offset_0x1C9040
                move.b  $00(A2, D0), (A4)
                lsl.w   #$04, D0
                move.w  D3, D1
                btst    #$0A, D4
                beq.s   Offset_0x0097B6
                not.w   D1
                neg.b   (A4)
Offset_0x0097B6:
                btst    #$0B, D4
                beq.s   Offset_0x0097C6
                addi.b  #$40, (A4)
                neg.b   (A4)
                subi.b  #$40, (A4)
Offset_0x0097C6:
                andi.w  #$000F, D1
                add.w   D0, D1
                lea     (Collision_Array_1), A2                ; Offset_0x1C9240
                move.b  $00(A2, D1), D0
                ext.w   D0
                eor.w   D6, D4
                btst    #$0B, D4
                beq.s   Offset_0x0097E2
                neg.w   D0
Offset_0x0097E2:
                tst.w   D0
                beq.s   Offset_0x009784
                bmi.s   Offset_0x0097FE
                cmpi.b  #$10, D0
                beq.s   Offset_0x00980A
                move.w  D2, D1
                andi.w  #$000F, D1
                add.w   D1, D0
                move.w  #$000F, D1
                sub.w   D0, D1
                rts
Offset_0x0097FE:
                move.w  D2, D1
                andi.w  #$000F, D1
                add.w   D1, D0
                bpl     Offset_0x009784
Offset_0x00980A:
                sub.w   A3, D2
                bsr     Offset_0x009818
                add.w   A3, D2
                subi.w  #$0010, D1
                rts
Offset_0x009818:
                jsr     (A5)
                move.w  (A1), D0
                move.w  D0, D4
                andi.w  #$03FF, D0
                beq.s   Offset_0x009828
                btst    D5, D4
                bne.s   Offset_0x009836
Offset_0x009828:
                move.w  #$000F, D1
                move.w  D2, D0
                andi.w  #$000F, D0
                sub.w   D0, D1
                rts
Offset_0x009836:
                move.l  (Current_Collision_Ptr).w, A2                ; $FFFFF796
                add.w   D0, D0
                move.w  $00(A2, D0), D0
                beq.s   Offset_0x009828
                lea     (AngleMap), A2                         ; Offset_0x1C9040
                move.b  $00(A2, D0), (A4)
                lsl.w   #$04, D0
                move.w  D3, D1
                btst    #$0A, D4
                beq.s   Offset_0x00985A
                not.w   D1
                neg.b   (A4)
Offset_0x00985A:
                btst    #$0B, D4
                beq.s   Offset_0x00986A
                addi.b  #$40, (A4)
                neg.b   (A4)
                subi.b  #$40, (A4)
Offset_0x00986A:
                andi.w  #$000F, D1
                add.w   D0, D1
                lea     (Collision_Array_1), A2                ; Offset_0x1C9240
                move.b  $00(A2, D1), D0
                ext.w   D0
                eor.w   D6, D4
                btst    #$0B, D4
                beq.s   Offset_0x009886
                neg.w   D0
Offset_0x009886:
                tst.w   D0
                beq.s   Offset_0x009828
                bmi.s   Offset_0x00989C
                move.w  D2, D1
                andi.w  #$000F, D1
                add.w   D1, D0
                move.w  #$000F, D1
                sub.w   D0, D1
                rts
Offset_0x00989C:
                move.w  D2, D1
                andi.w  #$000F, D1
                add.w   D1, D0
                bpl     Offset_0x009828
                not.w   D1
                rts 
;===============================================================================
; Rotina para localizar o ch�o
; <<<-
;===============================================================================

;===============================================================================
; Rotina para o objeto localizar o ch�o
; ->>>
;===============================================================================
Object_FindFloor:                                              ; Offset_0x0098AC
                lea     (Floor_Check_Tile_2), A5               ; Offset_0x009500
                tst.b   (Background_Collision_Flag).w                ; $FFFFF664
                beq.s   Offset_0x0098E6
                bsr.s   Offset_0x0098E6
                move.b  (A4), $0001(A4)
                move.w  D1, -(A7)
                sub.w   (Camera_X_Difference).w, D3                  ; $FFFFEE3E
                sub.w   (Camera_Y_Difference).w, D2                  ; $FFFFEE40
                lea     (Floor_Check_Tile), A5                 ; Offset_0x0094C6
                bsr.s   Offset_0x0098E6
                add.w   (Camera_X_Difference).w, D3                  ; $FFFFEE3E
                add.w   (Camera_Y_Difference).w, D2                  ; $FFFFEE40
                move.w  (A7)+, D0
                cmp.w   D0, D1
                ble.s   Offset_0x0098E4
                move.b  $0001(A4), (A4)
                move.w  D0, D1
Offset_0x0098E4:
                rts
Offset_0x0098E6:
                jsr     (A5)
                move.w  (A1), D0
                move.w  D0, D4
                andi.w  #$03FF, D0
                beq.s   Offset_0x0098F6
                btst    D5, D4
                bne.s   Offset_0x0098FC
Offset_0x0098F6:
                move.w  #$0010, D1
                rts
Offset_0x0098FC:
                move.l  (Current_Collision_Ptr).w, A2                ; $FFFFF796
                add.w   D0, D0
                move.w  $00(A2, D0), D0
                beq.s   Offset_0x0098F6
                lea     (AngleMap), A2                         ; Offset_0x1C9040
                move.b  $00(A2, D0), (A4)
                lsl.w   #$04, D0
                move.w  D3, D1
                btst    #$0A, D4
                beq.s   Offset_0x009920
                not.w   D1
                neg.b   (A4)
Offset_0x009920:
                btst    #$0B, D4
                beq.s   Offset_0x009930
                addi.b  #$40, (A4)
                neg.b   (A4)
                subi.b  #$40, (A4)
Offset_0x009930:
                andi.w  #$000F, D1
                add.w   D0, D1
                lea     (Collision_Array_1), A2                ; Offset_0x1C9240
                move.b  $00(A2, D1), D0
                ext.w   D0
                eor.w   D6, D4
                btst    #$0B, D4
                beq.s   Offset_0x00994C
                neg.w   D0
Offset_0x00994C:
                tst.w   D0
                beq.s   Offset_0x0098F6
                bmi.s   Offset_0x009968
                cmpi.b  #$10, D0
                beq.s   Offset_0x009974
                move.w  D2, D1
                andi.w  #$000F, D1
                add.w   D1, D0
                move.w  #$000F, D1
                sub.w   D0, D1
                rts
Offset_0x009968:
                move.w  D2, D1
                andi.w  #$000F, D1
                add.w   D1, D0
                bpl     Offset_0x0098F6
Offset_0x009974:
                sub.w   A3, D2
                bsr     Offset_0x009818
                add.w   A3, D2
                subi.w  #$0010, D1
                rts
;===============================================================================
; Rotina para o objeto localizar o ch�o
; <<<-
;===============================================================================

;===============================================================================
; Rotina para localizar a parede
; ->>>
;===============================================================================
FindWall:                                                      ; Offset_0x009982
                lea     (Floor_Check_Tile_2), A5               ; Offset_0x009500
                tst.b   (Background_Collision_Flag).w                ; $FFFFF664
                beq.s   Offset_0x0099E0
                bsr.s   Offset_0x0099E0
                move.b  (A4), $0001(A4)
                move.w  D1, -(A7)
                move.w  A3, D0
                bpl.s   Offset_0x0099A8
                eori.w  #$000F, D3
                sub.w   (Camera_X_Difference).w, D3                  ; $FFFFEE3E
                eori.w  #$000F, D3
                bra.s   Offset_0x0099AC
Offset_0x0099A8:
                sub.w   (Camera_X_Difference).w, D3                  ; $FFFFEE3E
Offset_0x0099AC:
                sub.w   (Camera_Y_Difference).w, D2                  ; $FFFFEE40
                lea     (Floor_Check_Tile), A5                 ; Offset_0x0094C6
                bsr.s   Offset_0x0099E0
                move.w  A3, D0
                bpl.s   Offset_0x0099CA
                eori.w  #$000F, D3
                add.w   (Camera_X_Difference).w, D3                  ; $FFFFEE3E
                eori.w  #$000F, D3
                bra.s   Offset_0x0099CE
Offset_0x0099CA:
                add.w   (Camera_X_Difference).w, D3                  ; $FFFFEE3E
Offset_0x0099CE:
                add.w   (Camera_Y_Difference).w, D2                  ; $FFFFEE40
                move.w  (A7)+, D0
                cmp.w   D0, D1
                ble.s   Offset_0x0099DE
                move.b  $0001(A4), (A4)
                move.w  D0, D1
Offset_0x0099DE:
                rts
Offset_0x0099E0:
                jsr     (A5)
                move.w  (A1), D0
                move.w  D0, D4
                andi.w  #$03FF, D0
                beq.s   Offset_0x0099F0
                btst    D5, D4
                bne.s   Offset_0x0099FE
Offset_0x0099F0:
                add.w   A3, D3
                bsr     FindWall2                              ; Offset_0x009A84
                sub.w   A3, D3
                addi.w  #$0010, D1
                rts
Offset_0x0099FE:
                move.l  (Current_Collision_Ptr).w, A2                ; $FFFFF796
                add.w   D0, D0
                move.w  $00(A2, D0), D0
                beq.s   Offset_0x0099F0
                lea     (AngleMap), A2                         ; Offset_0x1C9040
                move.b  $00(A2, D0), (A4)
                lsl.w   #$04, D0
                move.w  D2, D1
                btst    #$0B, D4
                beq.s   Offset_0x009A2A
                not.w   D1
                addi.b  #$40, (A4)
                neg.b   (A4)
                subi.b  #$40, (A4)
Offset_0x009A2A:
                btst    #$0A, D4
                beq.s   Offset_0x009A32
                neg.b   (A4)
Offset_0x009A32:
                andi.w  #$000F, D1
                add.w   D0, D1
                lea     (Collision_Array_2), A2                ; Offset_0x1CB240
                move.b  $00(A2, D1), D0
                ext.w   D0
                eor.w   D6, D4
                btst    #$0A, D4
                beq.s   Offset_0x009A4E
                neg.w   D0
Offset_0x009A4E:
                tst.w   D0
                beq.s   Offset_0x0099F0
                bmi.s   Offset_0x009A6A
                cmpi.b  #$10, D0
                beq.s   Offset_0x009A76
                move.w  D3, D1
                andi.w  #$000F, D1
                add.w   D1, D0
                move.w  #$000F, D1
                sub.w   D0, D1
                rts
Offset_0x009A6A:
                move.w  D3, D1
                andi.w  #$000F, D1
                add.w   D1, D0
                bpl     Offset_0x0099F0
Offset_0x009A76:
                sub.w   A3, D3
                bsr     FindWall2                              ; Offset_0x009A84
                add.w   A3, D3
                subi.w  #$0010, D1
                rts
;-------------------------------------------------------------------------------                                                                       
FindWall2:                                                     ; Offset_0x009A84
                jsr     (A5)
                move.w  (A1), D0
                move.w  D0, D4
                andi.w  #$03FF, D0
                beq.s   Offset_0x009A94
                btst    D5, D4
                bne.s   Offset_0x009AA2
Offset_0x009A94:
                move.w  #$000F, D1
                move.w  D3, D0
                andi.w  #$000F, D0
                sub.w   D0, D1
                rts
Offset_0x009AA2:
                move.l  (Current_Collision_Ptr).w, A2                ; $FFFFF796
                add.w   D0, D0
                move.w  $00(A2, D0), D0
                beq.s   Offset_0x009A94
                lea     (AngleMap), A2                         ; Offset_0x1C9040
                move.b  $00(A2, D0), (A4)
                lsl.w   #$04, D0
                move.w  D2, D1
                btst    #$0B, D4
                beq.s   Offset_0x009ACE
                not.w   D1
                addi.b  #$40, (A4)
                neg.b   (A4)
                subi.b  #$40, (A4)
Offset_0x009ACE:
                btst    #$0A, D4
                beq.s   Offset_0x009AD6
                neg.b   (A4)
Offset_0x009AD6:
                andi.w  #$000F, D1
                add.w   D0, D1
                lea     (Collision_Array_2), A2                ; Offset_0x1CB240
                move.b  $00(A2, D1), D0
                ext.w   D0
                eor.w   D6, D4
                btst    #$0A, D4
                beq.s   Offset_0x009AF2
                neg.w   D0
Offset_0x009AF2:
                tst.w   D0
                beq.s   Offset_0x009A94
                bmi.s   Offset_0x009B08
                move.w  D3, D1
                andi.w  #$000F, D1
                add.w   D1, D0
                move.w  #$000F, D1
                sub.w   D0, D1
                rts
Offset_0x009B08:
                move.w  D3, D1
                andi.w  #$000F, D1
                add.w   D1, D0
                bpl     Offset_0x009A94
                not.w   D1
                rts 
;===============================================================================
; Rotina para localizar a parede
; <<<-
;===============================================================================

;=============================================================================== 
; Rotina n�o usada, algo como executar um log das colis�es
; ->>>             (Talvez usada durante o desenvolvimento)          
;===============================================================================    
S2_FloorLog_Unk:                                               ; Offset_0x009B18     
                rts              
;=============================================================================== 
; Rotina n�o usada, algo como executar um log das colis�es
; <<<-             (Talvez usada durante o desenvolvimento)          
;===============================================================================  
                 
;===============================================================================
; Rotina para calcular o quanto de espa�o h� na frente do jogador
; ->>>                    
;===============================================================================
Player_WalkSpeed:                                              ; Offset_0x009B1A
                move.l  (Primary_Collision_Ptr).w, (Current_Collision_Ptr).w ; $FFFFF7B4, $FFFFF796
                cmpi.b  #$0C, Obj_Player_Top_Solid(A0)                   ; $0046
                beq.s   Offset_0x009B2E
                move.l  (Secondary_Collision_Ptr).w, (Current_Collision_Ptr).w ; $FFFFF7B8, $FFFFF796
Offset_0x009B2E:
                move.b  Obj_Player_LRB_Solid(A0), D5                     ; $0047
                move.l  Obj_X(A0), D3                                    ; $0010
                move.l  Obj_Y(A0), D2                                    ; $0014
                move.w  Obj_Speed_X(A0), D1                              ; $0018
                ext.l   D1
                asl.l   #$08, D1
                add.l   D1, D3
                move.w  Obj_Speed_Y(A0), D1                              ; $001A
                ext.l   D1
                asl.l   #$08, D1
                add.l   D1, D2
                swap.w  D2
                swap.w  D3
                move.b  D0, (Primary_Angle).w                        ; $FFFFF768
                move.b  D0, (Secondary_Angle).w                      ; $FFFFF76A
                move.b  D0, D1
                addi.b  #$20, D0
                bpl.s   Offset_0x009B6E
                move.b  D1, D0
                bpl.s   Offset_0x009B68
                subq.b  #$01, D0
Offset_0x009B68:
                addi.b  #$20, D0
                bra.s   Offset_0x009B78
Offset_0x009B6E:
                move.b  D1, D0
                bpl.s   Offset_0x009B74
                addq.b  #$01, D0
Offset_0x009B74:
                addi.b  #$1F, D0
Offset_0x009B78:
                andi.b  #$C0, D0
                beq     Check_Floor_Dist_D2_D3                 ; Offset_0x009C68
                cmpi.b  #$80, D0
                beq     Offset_0x009F90
                cmpi.b  #$40, D0
                beq     Offset_0x00A0C4
                bra     Offset_0x009ECE 
;===============================================================================
; Rotina para calcular o quanto de espa�o h� na frente do jogador
; <<<-                    
;===============================================================================

;===============================================================================
; Rotina para calcular o quanto de espa�o h� acima do jogador
; ->>>                    
;===============================================================================
CalcRoomOverHead:                                              ; Offset_0x009B94
                move.l  (Primary_Collision_Ptr).w, (Current_Collision_Ptr).w ; $FFFFF7B4, $FFFFF796
                cmpi.b  #$0C, Obj_Player_Top_Solid(A0)                   ; $0046
                beq.s   Offset_0x009BA8
                move.l  (Secondary_Collision_Ptr).w, (Current_Collision_Ptr).w ; $FFFFF7B8, $FFFFF796
Offset_0x009BA8:
                move.b  Obj_Player_LRB_Solid(A0), D5                     ; $0047
                move.b  D0, (Primary_Angle).w                        ; $FFFFF768
                move.b  D0, (Secondary_Angle).w                      ; $FFFFF76A
                addi.b  #$20, D0
                andi.b  #$C0, D0
                cmpi.b  #$40, D0
                beq     Player_DontRunOnWallsL                 ; Offset_0x009FEC
                cmpi.b  #$80, D0
                beq     Player_DontRunOnWalls                  ; Offset_0x009F1C
                cmpi.b  #$C0, D0
                beq     Player_DontRunOnWallsR                 ; Offset_0x009E06
Player_Check_Floor:                                            ; Offset_0x009BD4
                move.l  (Primary_Collision_Ptr).w, (Current_Collision_Ptr).w ; $FFFFF7B4, $FFFFF796
                cmpi.b  #$0C, Obj_Player_Top_Solid(A0)                   ; $0046
                beq.s   Offset_0x009BE8
                move.l  (Secondary_Collision_Ptr).w, (Current_Collision_Ptr).w ; $FFFFF7B8, $FFFFF796
Offset_0x009BE8:
                move.b  Obj_Player_Top_Solid(A0), D5                     ; $0046
                move.w  Obj_Y(A0), D2                                    ; $0014
                move.w  Obj_X(A0), D3                                    ; $0010
                moveq   #$00, D0
                move.b  Obj_Height_2(A0), D0                             ; $001E
                ext.w   D0
                add.w   D0, D2
                move.b  Obj_Width_2(A0), D0                              ; $001F
                ext.w   D0
                add.w   D0, D3
                lea     (Primary_Angle).w, A4                        ; $FFFFF768
                move.w  #$0010, A3
                move.w  #$0000, D6
                bsr     FindFloor                              ; Offset_0x00973A
                move.w  D1, -(A7)
                move.w  Obj_Y(A0), D2                                    ; $0014
                move.w  Obj_X(A0), D3                                    ; $0010
                moveq   #$00, D0
                move.b  Obj_Height_2(A0), D0                             ; $001E
                ext.w   D0
                add.w   D0, D2
                move.b  Obj_Width_2(A0), D0                              ; $001F
                ext.w   D0
                sub.w   D0, D3
                lea     (Secondary_Angle).w, A4                      ; $FFFFF76A
                move.w  #$0010, A3
                move.w  #$0000, D6
                bsr     FindFloor                              ; Offset_0x00973A
                move.w  (A7)+, D0
                move.b  #$00, D2
Offset_0x009C48:                
                move.b  (Secondary_Angle).w, D3                      ; $FFFFF76A
                cmp.w   D0, D1
                ble.s   Offset_0x009C56
                move.b  (Primary_Angle).w, D3                        ; $FFFFF768
                exg.l   D0, D1
Offset_0x009C56:
                btst    #$00, D3
                beq.s   Offset_0x009C5E
                move.b  D2, D3
Offset_0x009C5E:
                rts 
;===============================================================================
; Rotina para calcular o quanto de espa�o h� acima do jogador
; <<<-                    
;===============================================================================
; Check_Floor_Dist:                                            ; Offset_0x009C60
                move.w  Obj_Y(A0), D2                                    ; $0014
                move.w  Obj_X(A0), D3                                    ; $0010
Check_Floor_Dist_D2_D3:                                        ; Offset_0x009C68
                move.b  Obj_Width_2(A0), D0                              ; $001F
                ext.w   D0
                add.w   D0, D2
                lea     (Primary_Angle).w, A4                        ; $FFFFF768
                move.w  #$0010, A3
                move.w  #$0000, D6
                bsr     FindFloor                              ; Offset_0x00973A
                move.b  #$00, D2
Offset_0x009C84:                
                move.b  (Primary_Angle).w, D3                        ; $FFFFF768
                btst    #$00, D3
                beq.s   Offset_0x009C90
                move.b  D2, D3
Offset_0x009C90:
                rts
;-------------------------------------------------------------------------------
Offset_0x009C92:
                move.w  Obj_X(A0), D3                                    ; $0010             
                move.w  Obj_Y(A0), D2                                    ; $0014
                subq.w  #$04, D2
                move.l  (Primary_Collision_Ptr).w, (Current_Collision_Ptr).w ; $FFFFF7B4, $FFFFF796
                cmpi.b  #$0D, Obj_Player_LRB_Solid(A0)                   ; $0047
                beq.s   Offset_0x009CB0
                move.l  (Secondary_Collision_Ptr).w, (Current_Collision_Ptr).w ; $FFFFF7B8, $FFFFF796
Offset_0x009CB0:
                lea     (Primary_Angle).w, A4                        ; $FFFFF768
                move.b  #$00, (A4)
                move.w  #$0010, A3
                move.w  #$0000, D6
                move.b  Obj_Player_LRB_Solid(A0), D5                     ; $0047
                movem.l A4-A6, -(A7)
                bsr     FindFloor                              ; Offset_0x00973A
                movem.l (A7)+, A4-A6
                move.b  (Primary_Angle).w, D3                        ; $FFFFF768
                btst    #$00, D3
                beq.s   Offset_0x009CDE
                move.b  #$00, D3
Offset_0x009CDE:
                rts                 
;===============================================================================
; Rotina para detectar se o jogador tocou o ch�o
; ->>> 
;===============================================================================               
Player_HitFloor:                                               ; Offset_0x009CE0
                move.w  Obj_X(A0), D3                                    ; $0010                
Player_HitFloor_D3:                                            ; Offset_0x009CE4                 
                move.w  Obj_Y(A0), D2                                    ; $0014
                moveq   #$00, D0
                move.b  Obj_Height_2(A0), D0                             ; $001E
                ext.w   D0
                add.w   D0, D2
                
                move.l  (Primary_Collision_Ptr).w, (Current_Collision_Ptr).w ; $FFFFF7B4, $FFFFF796
                cmpi.b  #$0C, Obj_Player_Top_Solid(A0)                   ; $0046
                beq.s   Offset_0x009D06
                move.l  (Secondary_Collision_Ptr).w, (Current_Collision_Ptr).w ; $FFFFF7B8, $FFFFF796
Offset_0x009D06:
                lea     (Primary_Angle).w, A4                        ; $FFFFF768
                move.b  #$00, (A4)
                move.w  #$0010, A3
                move.w  #$0000, D6
                move.b  Obj_Player_Top_Solid(A0), D5                     ; $0046
                movem.l A4-A6, -(A7)
                bsr     FindFloor                              ; Offset_0x00973A
                movem.l (A7)+, A4-A6
                move.b  (Primary_Angle).w, D3                        ; $FFFFF768
                btst    #$00, D3
                beq.s   Offset_0x009D34
                move.b  #$00, D3
Offset_0x009D34:
                rts 
;-------------------------------------------------------------------------------
Player_HitFloor_A1:                                            ; Offset_0x009D36
                move.w  Obj_X(A1), D3                                    ; $0010
                move.w  Obj_Y(A1), D2                                    ; $0014
                moveq   #$00, D0
                move.b  Obj_Height_2(A1), D0                             ; $001E
                ext.w   D0
                add.w   D0, D2
                move.l  (Primary_Collision_Ptr).w, (Current_Collision_Ptr).w ; $FFFFF7B4, $FFFFF796
                cmpi.b  #$0C, Obj_Player_Top_Solid(A1)                   ; $0046
                beq.s   Offset_0x009D5C
                move.l  (Secondary_Collision_Ptr).w, (Current_Collision_Ptr).w ; $FFFFF7B8, $FFFFF796
Offset_0x009D5C:
                lea     (Primary_Angle).w, A4                        ; $FFFFF768
                move.b  #$00, (A4)
                move.w  #$0010, A3
                move.w  #$0000, D6
                move.b  Obj_Player_Top_Solid(A1), D5                     ; $0046
                bsr     FindFloor                              ; Offset_0x00973A
                move.b  (Primary_Angle).w, D3                        ; $FFFFF768
                btst    #$00, D3
                beq.s   Offset_0x009D82
                move.b  #$00, D3
Offset_0x009D82:
                rts 
;===============================================================================
; Rotina para detectar se o jogador tocou o ch�o
; <<<- 
;===============================================================================

;===============================================================================
; Rotina para detectar se o objeto tocou o ch�o
; ->>> 
;===============================================================================
ObjHitFloor:                                                   ; Offset_0x009D84
                move.w  Obj_X(A0), D3                                    ; $0010
ObjHitFloor_D3:                                                ; Offset_0x009D88                
                move.w  Obj_Y(A0), D2                                    ; $0014
                move.b  Obj_Height_2(A0), D0                             ; $001E
                ext.w   D0
                add.w   D0, D2
                lea     (Primary_Angle).w, A4                        ; $FFFFF768
                move.b  #$00, (A4)
                move.w  #$0010, A3
                move.w  #$0000, D6
                moveq   #$0C, D5
                bsr     FindFloor                              ; Offset_0x00973A
                move.b  (Primary_Angle).w, D3                        ; $FFFFF768
                btst    #$00, D3
                beq.s   Offset_0x009DB8
                move.b  #$00, D3
Offset_0x009DB8:
                rts 
;===============================================================================
; Rotina para detectar se o objeto tocou o ch�o
; <<<- 
;===============================================================================

;===============================================================================
; Rotina para detectar se o objeto bola de fogo tocou o ch�o
; ->>> 
;===============================================================================
Fire_FindFloor:                                                ; Offset_0x009DBA
                move.w  Obj_X(A1), D3                                    ; $0010
                move.w  Obj_Y(A1), D2                                    ; $0014
                move.b  Obj_Height_2(A1), D0                             ; $001E
                ext.w   D0
                add.w   D0, D2
                lea     (Primary_Angle).w, A4                        ; $FFFFF768
                move.b  #$00, (A4)
                move.w  #$0010, A3
                move.w  #$0000, D6
                moveq   #$0C, D5
                bra     FindFloor                              ; Offset_0x00973A 
;===============================================================================
; Rotina para detectar se o objeto bola de fogo tocou o ch�o
; <<<- 
;===============================================================================

;===============================================================================
; Rotina para detectar se o objeto anel tocou o ch�o
; ->>> 
;===============================================================================
Ring_FindFloor:                                                ; Offset_0x009DE0
                move.w  Obj_X(A0), D3                                    ; $0010
                move.w  Obj_Y(A0), D2                                    ; $0014
                move.b  Obj_Height_2(A0), D0                             ; $001E
                ext.w   D0
                add.w   D0, D2
                lea     (Primary_Angle).w, A4                        ; $FFFFF768
                move.b  #$00, (A4)
                move.w  #$0010, A3
                move.w  #$0000, D6
                moveq   #$0C, D5
                bra     Object_FindFloor                       ; Offset_0x0098AC 
;===============================================================================
; Rotina para detectar se o objeto anel tocou o ch�o
; <<<- 
;===============================================================================     
Player_DontRunOnWallsR:                                        ; Offset_0x009E06
                move.w  Obj_Y(A0), D2                                    ; $0014
                move.w  Obj_X(A0), D3                                    ; $0010
                moveq   #$00, D0
                move.b  Obj_Width_2(A0), D0                              ; $001F
                ext.w   D0
                sub.w   D0, D2
                move.b  Obj_Height_2(A0), D0                             ; $001E
                ext.w   D0
                add.w   D0, D3
                lea     (Primary_Angle).w, A4                        ; $FFFFF768
                move.w  #$0010, A3
                move.w  #$0000, D6
                bsr     FindWall                               ; Offset_0x009982
                move.w  D1, -(A7)
                move.w  Obj_Y(A0), D2                                    ; $0014
                move.w  Obj_X(A0), D3                                    ; $0010
                moveq   #$00, D0
                move.b  Obj_Width_2(A0), D0                              ; $001F
                ext.w   D0
                add.w   D0, D2
                move.b  Obj_Height_2(A0), D0                             ; $001E
                ext.w   D0
                add.w   D0, D3
                lea     (Secondary_Angle).w, A4                      ; $FFFFF76A
                move.w  #$0010, A3
                move.w  #$0000, D6
                bsr     FindWall                               ; Offset_0x009982
                move.w  (A7)+, D0
                move.b  #$C0, D2
                bra     Offset_0x009C48 
;-------------------------------------------------------------------------------
Offset_0x009E66:
                move.w  Obj_Y(A0), D2                                    ; $0014
                move.w  Obj_X(A0), D3                                    ; $0010
                moveq   #$00, D0
                move.b  Obj_Height_2(A0), D0                             ; $001E
                ext.w   D0
                sub.w   D0, D2
                move.b  Obj_Width_2(A0), D0                              ; $001F
                ext.w   D0
                add.w   D0, D3
                lea     (Primary_Angle).w, A4                        ; $FFFFF768
                move.w  #$0010, A3
                move.w  #$0000, D6
                bsr     FindWall                               ; Offset_0x009982
                move.w  D1, -(A7)
                move.w  Obj_Y(A0), D2                                    ; $0014
                move.w  Obj_X(A0), D3                                    ; $0010
                moveq   #$00, D0
                move.b  Obj_Height_2(A0), D0                             ; $001E
                ext.w   D0
                add.w   D0, D2
                move.b  Obj_Width_2(A0), D0                              ; $001F
                ext.w   D0
                add.w   D0, D3
                lea     (Secondary_Angle).w, A4                      ; $FFFFF76A
                move.w  #$0010, A3
                move.w  #$0000, D6
                bsr     FindWall                               ; Offset_0x009982
                move.w  (A7)+, D0
                move.b  #$C0, D2
                bra     Offset_0x009C48
;-------------------------------------------------------------------------------
Offset_0x009EC6:  
                move.w  Obj_Y(A0), D2                                    ; $0014
                move.w  Obj_X(A0), D3                                    ; $0010
Offset_0x009ECE:                
                move.b  Obj_Width_2(A0), D0                              ; $001F
                ext.w   D0
                add.w   D0, D3
                lea     (Primary_Angle).w, A4                        ; $FFFFF768
                move.w  #$0010, A3
                move.w  #$0000, D6
                bsr     FindWall                               ; Offset_0x009982
                move.b  #$C0, D2
                bra     Offset_0x009C84
;===============================================================================
; Rotina para detectar se o objeto tocou a parede a direita
; ->>> 
;===============================================================================                   
Object_HitWall_Right:                                          ; Offset_0x009EEE
                add.w   Obj_X(A0), D3                                    ; $0010
                move.w  Obj_Y(A0), D2                                    ; $0014
                lea     (Primary_Angle).w, A4                        ; $FFFFF768
                move.b  #$00, (A4)
                move.w  #$0010, A3
                move.w  #$0000, D6
                moveq   #$0D, D5
                bsr     FindWall                               ; Offset_0x009982
                move.b  (Primary_Angle).w, D3                        ; $FFFFF768
                btst    #$00, D3
                beq.s   Offset_0x009F1A
                move.b  #$C0, D3
Offset_0x009F1A:
                rts   
;===============================================================================
; Rotina para detectar se o objeto tocou a parede a direita
; <<<- 
;===============================================================================  
                          
;===============================================================================
; Rotina para detectar se o objeto tocou a parede a direita
; <<<- 
;===============================================================================                 
Player_DontRunOnWalls:                                         ; Offset_0x009F1C
                move.w  Obj_Y(A0), D2                                    ; $0014
                move.w  Obj_X(A0), D3                                    ; $0010
                moveq   #$00, D0
                move.b  Obj_Height_2(A0), D0                             ; $001E
                ext.w   D0
                sub.w   D0, D2
                eori.w  #$000F, D2
                move.b  Obj_Width_2(A0), D0                              ; $001F
                ext.w   D0
                subq.w  #$02, D0
                add.w   D0, D3
                lea     (Primary_Angle).w, A4                        ; $FFFFF768
                move.w  #$FFF0, A3
                move.w  #$0800, D6
                bsr     FindFloor                              ; Offset_0x00973A
                move.w  D1, -(A7)
                move.w  Obj_Y(A0), D2                                    ; $0014
                move.w  Obj_X(A0), D3                                    ; $0010
                moveq   #$00, D0
                move.b  Obj_Height_2(A0), D0                             ; $001E
                ext.w   D0
                sub.w   D0, D2
                eori.w  #$000F, D2
                move.b  Obj_Width_2(A0), D0                              ; $001F
                ext.w   D0
                subq.w  #$02, D0
                sub.w   D0, D3
                lea     (Secondary_Angle).w, A4                      ; $FFFFF76A
                move.w  #$FFF0, A3
                move.w  #$0800, D6
                bsr     FindFloor                              ; Offset_0x00973A
                move.w  (A7)+, D0
                move.b  #$80, D2
                bra     Offset_0x009C48
;-------------------------------------------------------------------------------
; Offset_0x009F88
                move.w  Obj_Y(A0), D2                                    ; $0014
                move.w  Obj_X(A0), D3                                    ; $0010
Offset_0x009F90:                
                move.b  Obj_Width_2(A0), D0                              ; $001F
                ext.w   D0
                sub.w   D0, D2
                eori.w  #$000F, D2
                lea     (Primary_Angle).w, A4                        ; $FFFFF768
                move.w  #$FFF0, A3
                move.w  #$0800, D6
                bsr     FindFloor                              ; Offset_0x00973A
                move.b  #$80, D2
                bra     Offset_0x009C84  
;===============================================================================
; Rotina para detectar se o objeto tocou o teto
; ->>> 
;===============================================================================  
Object_HitCeiling:                                             ; Offset_0x009FB4
                move.w  Obj_Y(A0), D2                                    ; $0014
                move.w  Obj_X(A0), D3                                    ; $0010
                moveq   #$00, D0
                move.b  Obj_Height_2(A0), D0                             ; $001E
                ext.w   D0
                sub.w   D0, D2
                eori.w  #$000F, D2
                lea     (Primary_Angle).w, A4                        ; $FFFFF768
                move.w  #$FFF0, A3
                move.w  #$0800, D6
                moveq   #$0D, D5
                bsr     FindFloor                              ; Offset_0x00973A
                move.b  (Primary_Angle).w, D3                        ; $FFFFF768
                btst    #$00, D3
                beq.s   Offset_0x009FEA
                move.b  #$80, D3
Offset_0x009FEA:
                rts 
;===============================================================================
; Rotina para detectar se o objeto tocou o teto
; <<<- 
;===============================================================================                  
Player_DontRunOnWallsL:                                        ; Offset_0x009FEC
                move.w  Obj_Y(A0), D2                                    ; $0014
                move.w  Obj_X(A0), D3                                    ; $0010
                moveq   #$00, D0
                move.b  Obj_Width_2(A0), D0                              ; $001F
                ext.w   D0
                sub.w   D0, D2
                move.b  Obj_Height_2(A0), D0                             ; $001E
                ext.w   D0
                sub.w   D0, D3
                eori.w  #$000F, D3
                lea     (Primary_Angle).w, A4                        ; $FFFFF768
                move.w  #$FFF0, A3
                move.w  #$0400, D6
                bsr     FindWall                               ; Offset_0x009982
                move.w  D1, -(A7)
                move.w  Obj_Y(A0), D2                                    ; $0014
                move.w  Obj_X(A0), D3                                    ; $0010
                moveq   #$00, D0
                move.b  Obj_Width_2(A0), D0                              ; $001F
                ext.w   D0
                add.w   D0, D2
                move.b  Obj_Height_2(A0), D0                             ; $001E
                ext.w   D0
                sub.w   D0, D3
                eori.w  #$000F, D3
                lea     (Secondary_Angle).w, A4                      ; $FFFFF76A
                move.w  #$FFF0, A3
                move.w  #$0400, D6
                bsr     FindWall                               ; Offset_0x009982
                move.w  (A7)+, D0
                move.b  #$40, D2
                bra     Offset_0x009C48                 
;-------------------------------------------------------------------------------
Offset_0x00A054:
                move.w  Obj_Y(A0), D2                                    ; $0014
                move.w  Obj_X(A0), D3                                    ; $0010
                moveq   #$00, D0
                move.b  Obj_Height_2(A0), D0                             ; $001E
                ext.w   D0
                sub.w   D0, D2
                move.b  Obj_Width_2(A0), D0                              ; $001F
                ext.w   D0
                sub.w   D0, D3
                eori.w  #$000F, D3
                lea     (Primary_Angle).w, A4                        ; $FFFFF768
                move.w  #$FFF0, A3
                move.w  #$0400, D6
                bsr     FindWall                               ; Offset_0x009982
                move.w  D1, -(A7)
                move.w  Obj_Y(A0), D2                                    ; $0014
                move.w  Obj_X(A0), D3                                    ; $0010
                moveq   #$00, D0
                move.b  Obj_Height_2(A0), D0                             ; $001E
                ext.w   D0
                add.w   D0, D2
                move.b  Obj_Width_2(A0), D0                              ; $001F
                ext.w   D0
                sub.w   D0, D3
                eori.w  #$000F, D3
                lea     (Secondary_Angle).w, A4                      ; $FFFFF76A
                move.w  #$FFF0, A3
                move.w  #$0400, D6
                bsr     FindWall                               ; Offset_0x009982
                move.w  (A7)+, D0
                move.b  #$40, D2
                bra     Offset_0x009C48 
;-------------------------------------------------------------------------------                
Player_HitWall:                                                ; Offset_0x00A0BC
                move.w  Obj_Y(A0), D2                                    ; $0014
                move.w  Obj_X(A0), D3                                    ; $0010
Offset_0x00A0C4:                
                move.b  Obj_Width_2(A0), D0                              ; $001F
                ext.w   D0
                sub.w   D0, D3
                eori.w  #$000F, D3
                lea     (Primary_Angle).w, A4                        ; $FFFFF768
                move.w  #$FFF0, A3
                move.w  #$0400, D6
                bsr     FindWall                               ; Offset_0x009982
                move.b  #$40, D2
                bra     Offset_0x009C84   
;------------------------------------------------------------------------------- 
Offset_0x00A0E8:
                move.l  (Primary_Collision_Ptr).w, (Current_Collision_Ptr).w ; $FFFFF7B4, $FFFFF796
                cmpi.b  #$0C, Obj_Player_Top_Solid(A0)                   ; $0046
                beq.s   Offset_0x00A0FC
                move.l  (Secondary_Collision_Ptr).w, (Current_Collision_Ptr).w ; $FFFFF7B8, $FFFFF796
Offset_0x00A0FC:
                move.w  Obj_X(A0), D3                                    ; $0010
                move.w  Obj_Y(A0), D2                                    ; $0014
                move.b  Obj_Height_2(A0), D0                             ; $001E
                ext.w   D0
                sub.w   D0, D3
                eori.w  #$000F, D3
                lea     (Primary_Angle).w, A4                        ; $FFFFF768
                move.b  #$00, (A4)
                move.w  #$FFF0, A3
                move.w  #$0400, D6
                move.b  Obj_Player_LRB_Solid(A0), D5                     ; $0047
                bsr     FindWall                               ; Offset_0x009982
                move.b  (Primary_Angle).w, D3                        ; $FFFFF768
                btst    #$00, D3
                beq.s   Offset_0x00A136
                move.b  #$40, D3
Offset_0x00A136:
                rts                                                
;===============================================================================
; Rotina para detectar se o objeto tocou a parede a esquerda
; ->>> 
;===============================================================================
Object_HitWall_Left:                                          ;  Offset_0x00A138
                add.w   Obj_X(A0), D3                                    ; $0010
                move.w  Obj_Y(A0), D2                                    ; $0014
                lea     (Primary_Angle).w, A4                        ; $FFFFF768
                move.b  #$00, (A4)
                move.w  #$FFF0, A3
                move.w  #$0400, D6
                moveq   #$0D, D5
                bsr     FindWall                               ; Offset_0x009982
                move.b  (Primary_Angle).w, D3                        ; $FFFFF768
                btst    #$00, D3
                beq.s   Exit_Object_HitWall_Left               ; Offset_0x00A164
                move.b  #$40, D3
Exit_Object_HitWall_Left:                                      ; Offset_0x00A164
                rts
;===============================================================================
; Rotina para detectar se o objeto tocou a parede a esquerda
; <<<- 
;===============================================================================               
; Offset_0x00A166:
                rts
;===============================================================================
; Rotina usada para responder quando o jogador tocar em algum objeto
; ->>>
;===============================================================================                              
Touch_Response_2P:                                             ; Offset_0x00A168
                nop
                move.w  Obj_X(A0), D2                                    ; $0010
                move.w  Obj_Y(A0), D3                                    ; $0014
                subi.w  #$0004, D2
                moveq   #$00, D5
                move.b  Obj_Height_2(A0), D5                             ; $001E
                subq.b  #$03, D5
                sub.w   D5, D3
                move.w  #$0008, D4
                add.w   D5, D5
                bra.s   Touch_Process                          ; Offset_0x00A1BA    
;-------------------------------------------------------------------------------                   
Touch_Response:                                                ; Offset_0x00A188
                nop
                jsr     (TouchRings)                           ; Offset_0x0088AE
                move.w  Obj_X(A0), D2                                    ; $0010
                move.w  Obj_Y(A0), D3                                    ; $0014
                subi.w  #$0008, D2
                moveq   #$00, D5
                move.b  Obj_Height_2(A0), D5                             ; $001E
                subq.b  #$03, D5
                sub.w   D5, D3
                cmpi.b  #$4D, Obj_Map_Id(A0)                             ; $0022
                bne.s   Offset_0x00A1B4
                addi.w  #$000C, D3
                moveq   #$0A, D5
Offset_0x00A1B4:
                move.w  #$0010, D4
                add.w   D5, D5
Touch_Process:                                                 ; Offset_0x00A1BA                
                lea     (Collision_Response_List).w, A4              ; $FFFFE380
                move.w  (A4)+, D6
                beq.s   Offset_0x00A1D0
Touch_Loop:                                                    ; Offset_0x00A1C2
                move.w  (A4)+, A1
                move.b  Obj_Col_Flags(A1), D0                            ; $0028
                bne.s   Touch_Width                            ; Offset_0x00A1D2
Touch_Next_Object:                                             ; Offset_0x00A1CA
                subq.w  #$02, D6
                bne.s   Touch_Loop                             ; Offset_0x00A1C2
                moveq   #$00, D0
Offset_0x00A1D0:
                rts
;-------------------------------------------------------------------------------                
Touch_Width:                                                   ; Offset_0x00A1D2
                andi.w  #$003F, D0
                add.w   D0, D0
                lea     Touch_Sizes(PC, D0), A2                ; Offset_0x00A216
                moveq   #$00, D1
                move.b  (A2)+, D1
                move.w  Obj_X(A1), D0                                    ; $0010
                sub.w   D1, D0
                sub.w   D2, D0
                bcc.s   Offset_0x00A1F2
                add.w   D1, D1
                add.w   D1, D0
                bcs.s   Touch_Height                           ; Offset_0x00A1F6
                bra.s   Touch_Next_Object                      ; Offset_0x00A1CA
Offset_0x00A1F2:
                cmp.w   D4, D0
                bhi.s   Touch_Next_Object                      ; Offset_0x00A1CA
Touch_Height:                                                  ; Offset_0x00A1F6
                moveq   #$00, D1
                move.b  (A2)+, D1
                move.w  Obj_Y(A1), D0                                    ; $0014
                sub.w   D1, D0
                sub.w   D3, D0
                bcc.s   Offset_0x00A20E
                add.w   D1, D1
                add.w   D1, D0
                bcs     Touch_Check_Value                      ; Offset_0x00A27A
                bra.s   Touch_Next_Object                      ; Offset_0x00A1CA
Offset_0x00A20E:
                cmp.w   D5, D0
                bhi.s   Touch_Next_Object                      ; Offset_0x00A1CA
                bra     Touch_Check_Value                      ; Offset_0x00A27A                
;-------------------------------------------------------------------------------
Touch_Sizes:           ; W   H                                 ; Offset_0x00A216
                dc.b    $04, $04
                dc.b    $14, $14
                dc.b    $0C, $14
                dc.b    $14, $0C
                dc.b    $04, $10
                dc.b    $0C, $12
                dc.b    $10, $10
                dc.b    $06, $06
                dc.b    $18, $0C
                dc.b    $0C, $10
                dc.b    $10, $08
                dc.b    $08, $08
                dc.b    $14, $10
                dc.b    $14, $08
                dc.b    $0E, $0E
                dc.b    $18, $18
                dc.b    $28, $10
                dc.b    $10, $18
                dc.b    $08, $10
                dc.b    $20, $70
                dc.b    $40, $20
                dc.b    $80, $20
                dc.b    $20, $20
                dc.b    $08, $08
                dc.b    $04, $04
                dc.b    $20, $08
                dc.b    $0C, $0C
                dc.b    $08, $04
                dc.b    $18, $04
                dc.b    $28, $04
                dc.b    $04, $08
                dc.b    $04, $18
                dc.b    $04, $28
                dc.b    $18, $18
                dc.b    $18, $18
                dc.b    $0C, $18
                dc.b    $48, $08
                dc.b    $18, $28
                dc.b    $10, $04
                dc.b    $20, $02
                dc.b    $10, $1C
                dc.b    $0C, $24
                dc.b    $10, $02
                dc.b    $04, $40
                dc.b    $18, $40
                dc.b    $20, $10
                dc.b    $1C, $14
                dc.b    $10, $02
                dc.b    $10, $01
                dc.b    $02, $08  
;-------------------------------------------------------------------------------                
Touch_Check_Value:                                             ; Offset_0x00A27A
                move.b  Obj_Col_Flags(A1), D1                            ; $0028
                andi.b  #$C0, D1
                beq     Touch_Enemy                            ; Offset_0x00A314
                cmpi.b  #$C0, D1
                beq     Touch_Special                          ; Offset_0x00A4EE
                tst.b   D1
                bmi     Touch_Enemy_Hurt                       ; Offset_0x00A3E4
                move.b  Obj_Col_Flags(A1), D0                            ; $0028
                andi.b  #$3F, D0
                cmpi.b  #$06, D0
                beq.s   Touch_Monitor                          ; Offset_0x00A2C4
                move.b  (Obj_Player_One+Obj_P_Invunerblt_Time).w, D0 ; $FFFFB034
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq.s   Offset_0x00A2B0
                move.b  Obj_P_Invunerblt_Time(A0), D0                    ; $0034
Offset_0x00A2B0:
                cmpi.b  #$5A, D0
                bcc     Offset_0x00A2C2
                move.b  #$04, Obj_Routine(A1)                            ; $0005
                move.w  A0, Obj_Parent_Ref(A1)                           ; $003E
Offset_0x00A2C2:
                rts
;-------------------------------------------------------------------------------                
Touch_Monitor:                                                 ; Offset_0x00A2C4
                tst.w   Obj_Speed_Y(A0)                                  ; $001A
                bpl.s   Offset_0x00A2F0
                move.w  Obj_Y(A0), D0                                    ; $0014
                subi.w  #$0010, D0
                cmp.w   Obj_Y(A1), D0                                    ; $0014
                bcs.s   Offset_0x00A312
                neg.w   Obj_Speed_Y(A0)                                  ; $001A
                move.w  #$FE80, Obj_Speed_Y(A1)                          ; $001A
                tst.b   Obj_Player_St_Convex(A1)                         ; $003C
                bne.s   Offset_0x00A312
                move.b  #$04, Obj_Player_St_Convex(A1)                   ; $003C
                rts
Offset_0x00A2F0:
                cmpa.w  #Obj_Player_One, A0                              ; $B000
                beq.s   Offset_0x00A2FC
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq.s   Offset_0x00A312
Offset_0x00A2FC:
                cmpi.b  #$02, Obj_Ani_Number(A0)                         ; $0020
                bne.s   Offset_0x00A312
                neg.w   Obj_Speed_Y(A0)                                  ; $001A
                move.b  #$04, Obj_Routine(A1)                            ; $0005
                move.w  A0, Obj_Player_Last(A1)                          ; $0042
Offset_0x00A312:
                rts
;-------------------------------------------------------------------------------                
Touch_Enemy:                                                   ; Offset_0x00A314
                btst    #$01, Obj_Player_Status(A0)                      ; $002F
                bne.s   Offset_0x00A32E
                cmpi.b  #$09, Obj_Ani_Number(A0)                         ; $0020
                beq.s   Offset_0x00A32E
                cmpi.b  #$02, Obj_Ani_Number(A0)                         ; $0020
                bne     Touch_Enemy_Hurt                       ; Offset_0x00A3E4
Offset_0x00A32E:
                tst.b   Obj_Col_Prop(A1)                                 ; $0029
                beq.s   Touch_Enemy_Normal                     ; Offset_0x00A35A
                neg.w   Obj_Speed_X(A0)                                  ; $0018
                neg.w   Obj_Speed_Y(A0)                                  ; $001A
                neg.w   Obj_Inertia(A0)                                  ; $001C
                move.b  Obj_Col_Flags(A1), Obj_Ani_Time_2(A1)     ; $0025, $0028
                move.b  #$00, Obj_Col_Flags(A1)                          ; $0028
                subq.b  #$01, Obj_Col_Prop(A1)                           ; $0029
                bne.s   Offset_0x00A358
                bset    #$07, Obj_Status(A1)                             ; $002A
Offset_0x00A358:
                rts
;-------------------------------------------------------------------------------                
Touch_Enemy_Normal:                                            ; Offset_0x00A35A
                btst    #$02, Obj_Status(A1)                             ; $002A
                beq.s   Touch_Kill_Enemy                       ; Offset_0x00A36C
                move.b  Obj_Player_Tilt(A1), D0                          ; $003B
                move.w  Obj_Player_St_Convex(A1), A2                     ; $003C
                bclr    D0, (A2)
Touch_Kill_Enemy:                                              ; Offset_0x00A36C
                bset    #$07, Obj_Status(A1)                             ; $002A
                moveq   #$00, D0
                move.w  (Enemy_Hit_Chain_Count).w, D0                ; $FFFFF7D0
                addq.w  #$02, (Enemy_Hit_Chain_Count).w              ; $FFFFF7D0
                cmpi.w  #$0006, D0
                bcs.s   Offset_0x00A384
                moveq   #$06, D0
Offset_0x00A384:
                move.w  D0, Obj_Player_Spdsh_Cnt(A1)                     ; $003E
                move.w  Enemy_Points(PC, D0), D0               ; Offset_0x00A3D6
                cmpi.w  #$0020, (Enemy_Hit_Chain_Count).w            ; $FFFFF7D0
                bcs.s   Offset_0x00A39E
                move.w  #$03E8, D0       ; 10000
                move.w  #$000A, Obj_Player_Spdsh_Cnt(A1)                 ; $003E
Offset_0x00A39E:
                move.w  A0, A3
                bsr     Add_Points                             ; Offset_0x007AEC
                move.l  #Object_Hit, (A1)                      ; Offset_0x013D7C
                move.b  #$00, Obj_Routine(A1)                            ; $0005
                tst.w   Obj_Speed_Y(A0)                                  ; $001A
                bmi.s   Offset_0x00A3C6
                move.w  Obj_Y(A0), D0                                    ; $0014
                cmp.w   Obj_Y(A1), D0                                    ; $0014
                bcc.s   Offset_0x00A3CE
                neg.w   Obj_Speed_Y(A0)                                  ; $001A
                rts
Offset_0x00A3C6:
                addi.w  #$0100, Obj_Speed_Y(A0)                          ; $001A
                rts
Offset_0x00A3CE:
                subi.w  #$0100, Obj_Speed_Y(A0)                          ; $001A
                rts                
;-------------------------------------------------------------------------------                
Enemy_Points:                                                  ; Offset_0x00A3D6
                dc.w    $000A      ;  100
                dc.w    $0014      ;  200
                dc.w    $0032      ;  500
                dc.w    $0064      ; 1000   
;-------------------------------------------------------------------------------
; Offset_0x00A3DE ; Sonic 2 Left over
                bset    #$07, Obj_Status(A1)                             ; $002A
Touch_Enemy_Hurt:                                              ; Offset_0x00A3E4                  
                btst    #$01, Obj_Player_Status(A0)                      ; $002F
                beq.s   Touch_Hurt                             ; Offset_0x00A3F0
Offset_0x00A3EC:
                moveq   #-$01, D0
                rts  
;-------------------------------------------------------------------------------                
Touch_Hurt:                                                    ; Offset_0x00A3F0
                nop
                tst.b   Obj_P_Invunerblt_Time(A0)                        ; $0034
                bne.s   Offset_0x00A3EC
                move.l  A1, A2              
Hurt_Player:                                                   ; Offset_0x00A3FA                
                move.w  (Ring_count).w, D0                   ; $FFFFFE20
                cmpa.w  #Obj_Player_One, A0                              ; $B000
                beq.s   Hurt_Player_D0                         ; Offset_0x00A40E
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq.s   Offset_0x00A446
                move.w  (Ring_Count_Address_P2).w, D0                ; $FFFFFED0
Hurt_Player_D0:                                                ; Offset_0x00A40E
                btst    #$00, Obj_Player_Status(A0)                      ; $002F
                bne.s   Hurt_Shield                            ; Offset_0x00A440
                tst.b   Obj_Player_Hit_Flag(A0)                          ; $0037
                bmi.s   Offset_0x00A446
                tst.w   D0
                beq     Kill_Player                            ; Offset_0x00A4A4
                jsr     (AllocateObject)                     ; Offset_0x011DD8
                bne.s   Hurt_Shield                            ; Offset_0x00A440
                move.l  #Rings_Lost, (A1)                      ; Offset_0x010AD6
                move.w  Obj_X(A0), Obj_X(A1)                      ; $0010, $0010
                move.w  Obj_Y(A0), Obj_Y(A1)                      ; $0014, $0014
                move.w  A0, Obj_Player_Spdsh_Cnt(A1)                     ; $003E
Hurt_Shield:                                                   ; Offset_0x00A440
                bclr    #$00, Obj_Player_Status(A0)                      ; $002F
Offset_0x00A446:
                move.b  #$04, Obj_Routine(A0)                            ; $0005
                jsr     (Sonic_ResetOnFloor)                   ; Offset_0x00BF76
                bset    #$01, Obj_Status(A0)                             ; $002A
                move.w  #$FC00, Obj_Speed_Y(A0)                          ; $001A
                move.w  #$FE00, Obj_Speed_X(A0)                          ; $0018
                btst    #$06, Obj_Status(A0)                             ; $002A
                beq.s   Offset_0x00A478
                move.w  #$FE00, Obj_Speed_Y(A0)                          ; $001A
                move.w  #$FF00, Obj_Speed_X(A0)                          ; $0018
Offset_0x00A478:
                move.w  Obj_X(A0), D0                                    ; $0010
                cmp.w   Obj_X(A2), D0                                    ; $0010
                bcs.s   Offset_0x00A486
                neg.w   Obj_Speed_X(A0)                                  ; $0018
Offset_0x00A486:
                move.w  #$0000, Obj_Inertia(A0)                          ; $001C
                move.b  #$1A, Obj_Ani_Number(A0)                         ; $0020
                move.b  #$78, Obj_P_Invunerblt_Time(A0)                  ; $0034
                moveq   #Hurt_Sfx, D0                                      ; $35
                jsr     (Play_Music)                           ; Offset_0x001176
                moveq   #-$01, D0
                rts                                                    
;===============================================================================
; Rotina Kill_Player - Rotina para matar o jogador
; ->>>
;===============================================================================
Kill_Player:                                                   ; Offset_0x00A4A4
                tst.w   (Debug_Mode_Flag_Index).w                    ; $FFFFFE08
                bne.s   Kill_NoDeath                           ; Offset_0x00A4EA
                clr.b   Obj_Player_Status(A0)                            ; $002F
                clr.b   Obj_Player_Hit_Flag(A0)                          ; $0037
                move.b  #$06, Obj_Routine(A0)                            ; $0005
                jsr     (Sonic_ResetOnFloor)                   ; Offset_0x00BF76
                bset    #$01, Obj_Status(A0)                             ; $002A
                move.w  #$F900, Obj_Speed_Y(A0)                          ; $001A
                move.w  #$0000, Obj_Speed_X(A0)                          ; $0018
                move.w  #$0000, Obj_Inertia(A0)                          ; $001C
                move.b  #$18, Obj_Ani_Number(A0)                         ; $0020
                bset    #$07, Obj_Art_VRAM(A0)                           ; $000A
                moveq   #Hurt_Sfx, D0                                      ; $35
                jsr     (Play_Music)                           ; Offset_0x001176
Kill_NoDeath:                                                  ; Offset_0x00A4EA
                moveq   #-$01, D0    
                rts
;===============================================================================
; Rotina Kill_Player - Rotina para matar o jogador
; <<<-
;===============================================================================

;===============================================================================
; Rotina Touch_Special  
; ->>>
;===============================================================================    
Touch_Special:                                                 ; Offset_0x00A4EE
                move.b  Obj_Col_Flags(A1), D1                            ; $0028
                andi.b  #$3F, D1
                cmpi.b  #$07, D1
                beq.s   Offset_0x00A52E
                cmpi.b  #$06, D1
                beq.s   Offset_0x00A52E
                cmpi.b  #$0A, D1
                beq.s   Offset_0x00A52E
                cmpi.b  #$0C, D1
                beq.s   Offset_0x00A52E
                cmpi.b  #$15, D1
                beq.s   Offset_0x00A52E
                cmpi.b  #$16, D1
                beq.s   Offset_0x00A52E
                cmpi.b  #$17, D1
                beq.s   Offset_0x00A52E
                cmpi.b  #$18, D1
                beq.s   Offset_0x00A52E
                cmpi.b  #$21, D1
                beq.s   Offset_0x00A52E
                rts
Offset_0x00A52E:
                move.w  A0, D1
                subi.w  #Obj_Memory_Address, D1                          ; $B000
                beq.s   Offset_0x00A53A
                addq.b  #$01, Obj_Col_Prop(A1)                           ; $0029
Offset_0x00A53A:
                addq.b  #$01, Obj_Col_Prop(A1)                           ; $0029
                rts 
;===============================================================================
; Rotina Touch_Special  
; <<<-
;===============================================================================  

Add_To_Collision_Response_List:                                ; Offset_0x00A540
                lea     (Collision_Response_List).w, A1              ; $FFFFE380
                cmpi.w  #$007E, (A1)
                bcc.s   Offset_0x00A550
                addq.w  #$02, (A1)
                adda.w  (A1), A1
                move.w  A0, (A1)
Offset_0x00A550:
                rts
;-------------------------------------------------------------------------------
Obj_Sonic_Knuckles_2P:                                         ; Offset_0x00A552
                include 'data\objects\chars_2p.asm'
Obj_Sonic:                                                     ; Offset_0x00AA36
                include 'data\objects\sonic.asm'
Obj_Miles_2P:                                                  ; Offset_0x00CC0A
                include 'data\objects\miles_2p.asm'
Obj_Miles:                                                     ; Offset_0x00D11E
                include 'data\objects\miles.asm'   
Obj_Miles_Tails:                                               ; Offset_0x00F1A6
                include 'data\objects\milestls.asm'
Obj_Miles_Tails_2P:                                            ; Offset_0x00F2AE
                include 'data\objects\milest2p.asm'               
Obj_Player_Underwater:                                         ; Offset_0x00F38C
                include 'data\objects\underwtr.asm'                  
;===============================================================================
; Rotina para restaurar a m�sica da fase ap�s o Sonic obter oxig�nio
; ->>>
;===============================================================================
Resume_Music:                                                  ; Offset_0x00F89E
                cmpi.b  #$0C, Obj_Subtype(A1)                            ; $002C
                bhi.s   Offset_0x00F8D8
                cmpa.w  #Obj_Player_One, A1                              ; $B000
                bne.s   Offset_0x00F8D8
                move.w  (Level_Music_Buffer).w, D0                   ; $FFFFFF90
                btst    #$01, Obj_Player_Status(A1)                      ; $002F
                beq.s   Offset_0x00F8BC
                move.w  #Mushroom_Valley_2_Snd, D0                       ; $0010
Offset_0x00F8BC:
                tst.b   (Super_Sonic_flag).w                         ; $FFFFFE19
                beq     Offset_0x00F8C8
                move.w  #Mushroom_Valley_2_Snd, D0                       ; $0010
Offset_0x00F8C8:
                tst.b   (Boss_Flag).w                                ; $FFFFF7AA
                beq.s   Offset_0x00F8D2
                move.w  #Icecap_2_Snd, D0                                ; $000C
Offset_0x00F8D2:
                jsr     (Play_Music)                           ; Offset_0x001176
Offset_0x00F8D8:
                move.b  #$1E, Obj_Subtype(A1)                            ; $002C
                rts 
;===============================================================================
; Rotina para restaurar a m�sica da fase ap�s o Sonic obter oxig�nio
; <<<-
;===============================================================================
             
Bubbles_Animate_Data:                                          ; Offset_0x00F8E0
                dc.w    Offset_0x00F8FE-Bubbles_Animate_Data
                dc.w    Offset_0x00F907-Bubbles_Animate_Data
                dc.w    Offset_0x00F910-Bubbles_Animate_Data
                dc.w    Offset_0x00F919-Bubbles_Animate_Data
                dc.w    Offset_0x00F922-Bubbles_Animate_Data
                dc.w    Offset_0x00F92B-Bubbles_Animate_Data
                dc.w    Offset_0x00F934-Bubbles_Animate_Data
                dc.w    Offset_0x00F939-Bubbles_Animate_Data
                dc.w    Offset_0x00F941-Bubbles_Animate_Data
                dc.w    Offset_0x00F949-Bubbles_Animate_Data
                dc.w    Offset_0x00F951-Bubbles_Animate_Data
                dc.w    Offset_0x00F959-Bubbles_Animate_Data
                dc.w    Offset_0x00F961-Bubbles_Animate_Data
                dc.w    Offset_0x00F969-Bubbles_Animate_Data
                dc.w    Offset_0x00F96B-Bubbles_Animate_Data
Offset_0x00F8FE:
                dc.b    $05, $00, $01, $02, $03, $04, $09, $0D
                dc.b    $FC
Offset_0x00F907:
                dc.b    $05, $00, $01, $02, $03, $04, $0C, $12
                dc.b    $FC
Offset_0x00F910:
                dc.b    $05, $00, $01, $02, $03, $04, $0C, $11
                dc.b    $FC
Offset_0x00F919:
                dc.b    $05, $00, $01, $02, $03, $04, $0B, $10
                dc.b    $FC
Offset_0x00F922:
                dc.b    $05, $00, $01, $02, $03, $04, $0C, $0F
                dc.b    $FC
Offset_0x00F92B:
                dc.b    $05, $00, $01, $02, $03, $04, $0A, $0E
                dc.b    $FC
Offset_0x00F934:
                dc.b    $0E, $00, $01, $02, $FC
Offset_0x00F939:
                dc.b    $07, $16, $0D, $16, $0D, $16, $0D, $FC
Offset_0x00F941:
                dc.b    $07, $16, $12, $16, $12, $16, $12, $FC
Offset_0x00F949:
                dc.b    $07, $16, $11, $16, $11, $16, $11, $FC
Offset_0x00F951:
                dc.b    $07, $16, $10, $16, $10, $16, $10, $FC
Offset_0x00F959:
                dc.b    $07, $16, $0F, $16, $0F, $16, $0F, $FC
Offset_0x00F961:
                dc.b    $07, $16, $0E, $16, $0E, $16, $0E, $FC
Offset_0x00F969:
                dc.b    $0E, $FC
Offset_0x00F96B:
                dc.b    $0E, $01, $02, $03, $04, $FC, $00                
;-------------------------------------------------------------------------------  
; Sonic 2 left over              
Obj_Classic_Shield:                                            ; Offset_0x00F972
                include 'data\s2_obj\obj_0x38.asm'
Obj_Invincibility:                                             ; Offset_0x00F9FA   
                include 'data\objects\invcblt.asm'
;-------------------------------------------------------------------------------
Classic_Shield_Animate_Data:                                   ; Offset_0x00FC58
                dc.w    Offset_0x00FC5A-Classic_Shield_Animate_Data
Offset_0x00FC5A:
                dc.b    $00, $05, $00, $05, $01, $05, $02, $05
                dc.b    $03, $05, $04, $FF 
;------------------------------------------------------------------------------- 
Classic_Shield_Mappings:                                       ; Offset_0x00FC66
                dc.w    Offset_0x00FC72-Classic_Shield_Mappings
                dc.w    Offset_0x00FC8C-Classic_Shield_Mappings
                dc.w    Offset_0x00FCA6-Classic_Shield_Mappings
                dc.w    Offset_0x00FCC0-Classic_Shield_Mappings
                dc.w    Offset_0x00FCDA-Classic_Shield_Mappings
                dc.w    Offset_0x00FCF4-Classic_Shield_Mappings
Offset_0x00FC72:
                dc.w    $0004
                dc.w    $F005, $0000, $FFF0
                dc.w    $F005, $0800, $0000
                dc.w    $0005, $1000, $FFF0
                dc.w    $0005, $1800, $0000
Offset_0x00FC8C:
                dc.w    $0004
                dc.w    $F005, $0004, $FFF0
                dc.w    $F005, $0804, $0000
                dc.w    $0005, $1004, $FFF0
                dc.w    $0005, $1804, $0000
Offset_0x00FCA6:
                dc.w    $0004
                dc.w    $F005, $0008, $FFF0
                dc.w    $F005, $0808, $0000
                dc.w    $0005, $1008, $FFF0
                dc.w    $0005, $1808, $0000
Offset_0x00FCC0:
                dc.w    $0004
                dc.w    $F005, $000C, $FFF0
                dc.w    $F005, $080C, $0000
                dc.w    $0005, $100C, $FFF0
                dc.w    $0005, $180C, $0000
Offset_0x00FCDA:
                dc.w    $0004
                dc.w    $F005, $0010, $FFF0
                dc.w    $F005, $0810, $0000
                dc.w    $0005, $1010, $FFF0
                dc.w    $0005, $1810, $0000
Offset_0x00FCF4:
                dc.w    $0004
                dc.w    $E00B, $0014, $FFE8
                dc.w    $E00B, $0814, $0000
                dc.w    $000B, $1014, $FFE8
                dc.w    $000B, $1814, $0000
;-------------------------------------------------------------------------------
Invincibility_Mappings:                                        ; Offset_0x00FD0E
                dc.w    Offset_0x00FD20-Invincibility_Mappings
                dc.w    Offset_0x00FD22-Invincibility_Mappings
                dc.w    Offset_0x00FD2A-Invincibility_Mappings
                dc.w    Offset_0x00FD32-Invincibility_Mappings
                dc.w    Offset_0x00FD3A-Invincibility_Mappings
                dc.w    Offset_0x00FD42-Invincibility_Mappings
                dc.w    Offset_0x00FD4A-Invincibility_Mappings
                dc.w    Offset_0x00FD52-Invincibility_Mappings
                dc.w    Offset_0x00FD5A-Invincibility_Mappings
Offset_0x00FD20:
                dc.w    $0000
Offset_0x00FD22:
                dc.w    $0001
                dc.w    $F801, $0000, $FFFC
Offset_0x00FD2A:
                dc.w    $0001
                dc.w    $F801, $0002, $FFFC
Offset_0x00FD32:
                dc.w    $0001
                dc.w    $F801, $0004, $FFFC
Offset_0x00FD3A:
                dc.w    $0001
                dc.w    $F801, $0006, $FFFC
Offset_0x00FD42:
                dc.w    $0001
                dc.w    $F801, $0008, $FFFC
Offset_0x00FD4A:
                dc.w    $0001
                dc.w    $F805, $000A, $FFF8
Offset_0x00FD52:
                dc.w    $0001
                dc.w    $F805, $000E, $FFF8
Offset_0x00FD5A:
                dc.w    $0001
                dc.w    $F00F, $0012, $FFF0
;-------------------------------------------------------------------------------
Obj_Dust_Water_Splash:                                         ; Offset_0x00FD62
                include 'data\objects\dustwtrs.asm'
Obj_Dust_Water_Splash_2P:                                      ; Offset_0x0100DA
                include 'data\objects\dstwtr2p.asm'
Obj_Super_Sonic_Stars:                                         ; Offset_0x0102AA
                include 'data\objects\ss_stars.asm'
Obj_Fire_Shield:                                               ; Offset_0x0103C6
                include 'data\objects\f_shield.asm'
Obj_Lightning_Shield:                                          ; Offset_0x01046C
                include 'data\objects\l_shield.asm'
Obj_Water_Shield:                                              ; Offset_0x010512
                include 'data\objects\w_shield.asm'    
;-------------------------------------------------------------------------------
Fire_Shield_Animate_Data:                                      ; Offset_0x010608
                dc.w    Offset_0x01060A-Fire_Shield_Animate_Data
Offset_0x01060A:
                dc.b    $03, $00, $01, $02, $03, $04, $05, $06
                dc.b    $07, $08, $09, $09, $FF, $00
;-------------------------------------------------------------------------------                
Lightning_Shield_Animate_Data:                                 ; Offset_0x010618
                dc.w    Offset_0x01061A-Lightning_Shield_Animate_Data
Offset_0x01061A:
                dc.b    $03, $00, $01, $02, $03, $04, $05, $06
                dc.b    $07, $FF
;-------------------------------------------------------------------------------                 
Water_Shield_Animate_Data:                                     ; Offset_0x010624  
                dc.w    Offset_0x010626-Water_Shield_Animate_Data
Offset_0x010626:
                dc.b    $03, $00, $01, $02, $03, $04, $05, $06
                dc.b    $07, $08, $09, $0A, $0B, $FF
;-------------------------------------------------------------------------------                  
Fire_Shield_Mappings:                                          ; Offset_0x010634
                dc.w    Offset_0x010648-Fire_Shield_Mappings
                dc.w    Offset_0x010662-Fire_Shield_Mappings
                dc.w    Offset_0x01067C-Fire_Shield_Mappings
                dc.w    Offset_0x010696-Fire_Shield_Mappings
                dc.w    Offset_0x0106B0-Fire_Shield_Mappings
                dc.w    Offset_0x0106BE-Fire_Shield_Mappings
                dc.w    Offset_0x0106D8-Fire_Shield_Mappings
                dc.w    Offset_0x0106F2-Fire_Shield_Mappings
                dc.w    Offset_0x01070C-Fire_Shield_Mappings
                dc.w    Offset_0x010726-Fire_Shield_Mappings
Offset_0x010648:
                dc.w    $0004
                dc.w    $E809, $0000, $FFE8
                dc.w    $E809, $0006, $0000
                dc.w    $0809, $000C, $FFE8
                dc.w    $0809, $0012, $0000
Offset_0x010662:
                dc.w    $0004
                dc.w    $E80A, $0000, $FFE8
                dc.w    $E80A, $0009, $0000
                dc.w    $000A, $0012, $FFE8
                dc.w    $000A, $001B, $0000
Offset_0x01067C:
                dc.w    $0004
                dc.w    $E80A, $0000, $FFE8
                dc.w    $E80A, $0009, $0000
                dc.w    $000A, $0012, $FFE8
                dc.w    $000A, $001B, $0000
Offset_0x010696:
                dc.w    $0004
                dc.w    $EC0A, $0000, $FFE8
                dc.w    $EC0A, $0009, $0000
                dc.w    $0409, $0012, $FFE8
                dc.w    $0409, $0018, $0000
Offset_0x0106B0:
                dc.w    $0002
                dc.w    $F00F, $0000, $FFE8
                dc.w    $F007, $0010, $0008
Offset_0x0106BE:
                dc.w    $0004
                dc.w    $FC0A, $1000, $FFE8
                dc.w    $FC0A, $1009, $0000
                dc.w    $EC09, $1012, $FFE8
                dc.w    $EC09, $1018, $0000
Offset_0x0106D8:
                dc.w    $0004
                dc.w    $000A, $1000, $FFE8
                dc.w    $000A, $1009, $0000
                dc.w    $E80A, $1012, $FFE8
                dc.w    $E80A, $101B, $0000
Offset_0x0106F2:
                dc.w    $0004
                dc.w    $000A, $1000, $FFE8
                dc.w    $000A, $1009, $0000
                dc.w    $E80A, $1012, $FFE8
                dc.w    $E80A, $101B, $0000
Offset_0x01070C:
                dc.w    $0004
                dc.w    $0809, $1000, $FFE8
                dc.w    $0809, $1006, $0000
                dc.w    $E809, $100C, $FFE8
                dc.w    $E809, $1012, $0000
Offset_0x010726:
                dc.w    $0000
;-------------------------------------------------------------------------------
Fire_Shield_Dyn_Script:                                        ; Offset_0x010728
                dc.w    Offset_0x01073C-Fire_Shield_Dyn_Script
                dc.w    Offset_0x010746-Fire_Shield_Dyn_Script
                dc.w    Offset_0x010750-Fire_Shield_Dyn_Script
                dc.w    Offset_0x01075A-Fire_Shield_Dyn_Script
                dc.w    Offset_0x010764-Fire_Shield_Dyn_Script
                dc.w    Offset_0x01075A-Fire_Shield_Dyn_Script
                dc.w    Offset_0x010750-Fire_Shield_Dyn_Script
                dc.w    Offset_0x010746-Fire_Shield_Dyn_Script
                dc.w    Offset_0x01073C-Fire_Shield_Dyn_Script
                dc.w    Offset_0x01076A-Fire_Shield_Dyn_Script
Offset_0x01073C:
                dc.w    $0004
                dc.w    $5000, $5006, $500C, $5012
Offset_0x010746:
                dc.w    $0004
                dc.w    $8018, $8021, $802A, $8033
Offset_0x010750:
                dc.w    $0004
                dc.w    $803C, $8045, $804E, $8057
Offset_0x01075A:
                dc.w    $0004
                dc.w    $8060, $8069, $5072, $5078
Offset_0x010764:
                dc.w    $0002
                dc.w    $F07E, $708E
Offset_0x01076A:
                dc.w    $0000
;-------------------------------------------------------------------------------                
Lightning_Shield_Mappings:                                     ; Offset_0x01076C
                dc.w    Offset_0x01077C-Lightning_Shield_Mappings
                dc.w    Offset_0x010790-Lightning_Shield_Mappings
                dc.w    Offset_0x01079E-Lightning_Shield_Mappings
                dc.w    Offset_0x0107B2-Lightning_Shield_Mappings
                dc.w    Offset_0x0107C6-Lightning_Shield_Mappings
                dc.w    Offset_0x0107D4-Lightning_Shield_Mappings
                dc.w    Offset_0x0107EE-Lightning_Shield_Mappings
                dc.w    Offset_0x010808-Lightning_Shield_Mappings
Offset_0x01077C:
                dc.w    $0003
                dc.w    $E80C, $0000, $FFF0
                dc.w    $F007, $0004, $0000
                dc.w    $100C, $000C, $FFF0
Offset_0x010790:
                dc.w    $0002
                dc.w    $E80A, $0000, $FFF4
                dc.w    $000A, $0009, $FFF4
Offset_0x01079E:
                dc.w    $0003
                dc.w    $E808, $0000, $FFF0
                dc.w    $F00B, $0003, $FFF8
                dc.w    $1008, $000F, $FFF0
Offset_0x0107B2:
                dc.w    $0003
                dc.w    $E808, $0000, $FFF0
                dc.w    $F00E, $0003, $FFF0
                dc.w    $0809, $000F, $FFF0
Offset_0x0107C6:
                dc.w    $0002
                dc.w    $E807, $0000, $FFF8
                dc.w    $0805, $0008, $FFF8
Offset_0x0107D4:
                dc.w    $0004
                dc.w    $E80A, $0000, $FFE8
                dc.w    $E80A, $0009, $0000
                dc.w    $000A, $1812, $FFE8
                dc.w    $000A, $181B, $0000
Offset_0x0107EE:
                dc.w    $0004
                dc.w    $E80A, $0000, $FFE8
                dc.w    $E80A, $0009, $0000
                dc.w    $000A, $1812, $FFE8
                dc.w    $000A, $181B, $0000
Offset_0x010808:
                dc.w    $0004
                dc.w    $E80A, $0000, $FFE8
                dc.w    $E80A, $0809, $0000
                dc.w    $000A, $1012, $FFE8
                dc.w    $000A, $181B, $0000
;------------------------------------------------------------------------------- 
Lightning_Shield_Dyn_Script:                                   ; Offset_0x010822
                dc.w    Offset_0x010832-Lightning_Shield_Dyn_Script
                dc.w    Offset_0x01083A-Lightning_Shield_Dyn_Script
                dc.w    Offset_0x010840-Lightning_Shield_Dyn_Script
                dc.w    Offset_0x010848-Lightning_Shield_Dyn_Script
                dc.w    Offset_0x010850-Lightning_Shield_Dyn_Script
                dc.w    Offset_0x010856-Lightning_Shield_Dyn_Script
                dc.w    Offset_0x010860-Lightning_Shield_Dyn_Script
                dc.w    Offset_0x01086A-Lightning_Shield_Dyn_Script
Offset_0x010832:
                dc.w    $0003
                dc.w    $3000, $7004, $300C
Offset_0x01083A:
                dc.w    $0002
                dc.w    $8010, $8019
Offset_0x010840:
                dc.w    $0003
                dc.w    $2022, $B025, $2031
Offset_0x010848:
                dc.w    $0003
                dc.w    $2034, $B037, $5043
Offset_0x010850:
                dc.w    $0002
                dc.w    $7049, $3051
Offset_0x010856:
                dc.w    $0004
                dc.w    $8055, $805E, $805E, $8055
Offset_0x010860:
                dc.w    $0004
                dc.w    $8067, $8070, $8070, $8067
Offset_0x01086A:
                dc.w    $0004
                dc.w    $8079, $8079, $8079, $8079  
;-------------------------------------------------------------------------------   
Water_Shield_Mappings:                                         ; Offset_0x010874
                dc.w    Offset_0x01088C-Water_Shield_Mappings
                dc.w    Offset_0x01089A-Water_Shield_Mappings
                dc.w    Offset_0x0108A8-Water_Shield_Mappings
                dc.w    Offset_0x0108B6-Water_Shield_Mappings
                dc.w    Offset_0x0108C4-Water_Shield_Mappings
                dc.w    Offset_0x0108D2-Water_Shield_Mappings
                dc.w    Offset_0x0108E0-Water_Shield_Mappings
                dc.w    Offset_0x0108EE-Water_Shield_Mappings
                dc.w    Offset_0x0108FC-Water_Shield_Mappings
                dc.w    Offset_0x010916-Water_Shield_Mappings
                dc.w    Offset_0x010930-Water_Shield_Mappings
                dc.w    Offset_0x010938-Water_Shield_Mappings
Offset_0x01088C:
                dc.w    $0002
                dc.w    $E808, $0000, $FFE8
                dc.w    $E808, $0803, $0000
Offset_0x01089A:
                dc.w    $0002
                dc.w    $E809, $0000, $FFE8
                dc.w    $E809, $0806, $0000
Offset_0x0108A8:
                dc.w    $0002
                dc.w    $E80A, $0000, $FFE8
                dc.w    $E80A, $0809, $0000
Offset_0x0108B6:
                dc.w    $0002
                dc.w    $E80A, $0000, $FFE8
                dc.w    $E80A, $0809, $0000
Offset_0x0108C4:
                dc.w    $0002
                dc.w    $F00B, $0000, $FFE8
                dc.w    $F00B, $080C, $0000
Offset_0x0108D2:
                dc.w    $0002
                dc.w    $000A, $0000, $FFE8
                dc.w    $000A, $0809, $0000
Offset_0x0108E0:
                dc.w    $0002
                dc.w    $000A, $0000, $FFE8
                dc.w    $000A, $0809, $0000
Offset_0x0108EE:
                dc.w    $0002
                dc.w    $0809, $0000, $FFE8
                dc.w    $0809, $0806, $0000
Offset_0x0108FC:
                dc.w    $0004
                dc.w    $E80A, $0000, $FFE8
                dc.w    $E80A, $0809, $0000
                dc.w    $000A, $1012, $FFE8
                dc.w    $000A, $181B, $0000
Offset_0x010916:
                dc.w    $0004
                dc.w    $E80A, $0000, $FFE8
                dc.w    $E80A, $0809, $0000
                dc.w    $000A, $1012, $FFE8
                dc.w    $000A, $181B, $0000
Offset_0x010930:
                dc.w    $0001
                dc.w    $FC00, $0000, $FFFC
Offset_0x010938:
                dc.w    $0001
                dc.w    $FC00, $0000, $FFFC
;-------------------------------------------------------------------------------  
Water_Shield_Dyn_Script:                                       ; Offset_0x010940
                dc.w    Offset_0x010958-Water_Shield_Dyn_Script
                dc.w    Offset_0x01095E-Water_Shield_Dyn_Script
                dc.w    Offset_0x010964-Water_Shield_Dyn_Script
                dc.w    Offset_0x01096A-Water_Shield_Dyn_Script
                dc.w    Offset_0x010970-Water_Shield_Dyn_Script
                dc.w    Offset_0x010976-Water_Shield_Dyn_Script
                dc.w    Offset_0x01097C-Water_Shield_Dyn_Script
                dc.w    Offset_0x010982-Water_Shield_Dyn_Script
                dc.w    Offset_0x010988-Water_Shield_Dyn_Script
                dc.w    Offset_0x010992-Water_Shield_Dyn_Script
                dc.w    Offset_0x01099C-Water_Shield_Dyn_Script
                dc.w    Offset_0x0109A0-Water_Shield_Dyn_Script
Offset_0x010958:
                dc.w    $0002
                dc.w    $2000, $2000
Offset_0x01095E:
                dc.w    $0002
                dc.w    $5003, $5003
Offset_0x010964:
                dc.w    $0002
                dc.w    $8009, $8009
Offset_0x01096A:
                dc.w    $0002
                dc.w    $8012, $8012
Offset_0x010970:
                dc.w    $0002
                dc.w    $B01B, $B01B
Offset_0x010976:
                dc.w    $0002
                dc.w    $8027, $8027
Offset_0x01097C:
                dc.w    $0002
                dc.w    $8030, $8030
Offset_0x010982:
                dc.w    $0002
                dc.w    $5039, $5039
Offset_0x010988:
                dc.w    $0004
                dc.w    $803F, $803F, $803F, $803F
Offset_0x010992:
                dc.w    $0004
                dc.w    $8048, $8048, $8048, $8048
Offset_0x01099C:
                dc.w    $0001
                dc.w    $0051
Offset_0x0109A0:
                dc.w    $0001
                dc.w    $0052
;-------------------------------------------------------------------------------               
Obj_0x00_Rings:                                                ; Offset_0x0109A4
                include 'data\objects\obj_0x00.asm'
;===============================================================================   
; Rotina para adicionar an�is ao contador, verificando o limmite e bonificando
; ->>>        com vida extra ao adiquirir 100 e 200 an�is
;===============================================================================   
Add_Rings_Check_Ring_Status:                                   ; Offset_0x010A20
                tst.b   Obj_Player_One_Or_Two(A0)                        ; $003F
                bne.s   Add_Rings_Player_Two
Add_Rings:                                                     ; Offset_0x010A26
                cmpi.w  #$03E7, (Total_Ring_Count_Address).w         ; $FFFFFEF0
                bcc.s   Offset_0x010A32
                addq.w  #$01, (Total_Ring_Count_Address).w           ; $FFFFFEF0
Offset_0x010A32:
                move.w  #Ring_Sfx, D0                                    ; $0032
                cmpi.w  #$03E7, (Ring_count).w               ; $FFFFFE20
                bcc.s   Offset_0x010A74
                addq.w  #$01, (Ring_count).w                 ; $FFFFFE20
                ori.b   #$01, (Update_HUD_rings).w             ; $FFFFFE1D
                cmpi.w  #$0064, (Ring_count).w               ; $FFFFFE20
                bcs.s   Offset_0x010A74
                bset    #$01, (Extra_life_flags).w                   ; $FFFFFE1B
                beq.s   Offset_0x010A68
                cmpi.w  #$00C8, (Ring_count).w               ; $FFFFFE20
                bcs.s   Offset_0x010A74
                bset    #$02, (Extra_life_flags).w                   ; $FFFFFE1B
                bne.s   Offset_0x010A74
Offset_0x010A68:
                addq.b  #$01, (Life_count).w                         ; $FFFFFE12
                addq.b  #$01, (Update_HUD_lives).w              ; $FFFFFE1C
                move.w  #Ring_Lost_Sfx, D0                               ; $0034
Offset_0x010A74:
                jmp     (Play_Music)                           ; Offset_0x001176  
                rts     ; N�o usado
;-------------------------------------------------------------------------------
Add_Rings_Player_Two:                                          ; Offset_0x010A7C
                cmpi.w  #$03E7, (Total_Ring_Count_Address_P2).w      ; $FFFFFEF2
                bcc.s   Offset_0x010A88
                addq.w  #$01, (Total_Ring_Count_Address_P2).w        ; $FFFFFEF2
Offset_0x010A88:
                cmpi.w  #$03E7, (Ring_Count_Address_P2).w            ; $FFFFFED0
                bcc.s   Offset_0x010A94
                addq.w  #$01, (Ring_Count_Address_P2).w              ; $FFFFFED0
Offset_0x010A94:
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq.s   Offset_0x010A32
                ori.b   #$01, (HUD_Rings_Refresh_Flag_P2).w          ; $FFFFFEC9
                move.w  #Ring_Sfx, D0                                    ; $0032
                cmpi.w  #$0064, (Ring_Count_Address_P2).w            ; $FFFFFED0
                bcs.s   Offset_0x010AD0
                bset    #$01, (Ring_Status_Flag_P2).w                ; $FFFFFEC7
                beq.s   Offset_0x010AC4
                cmpi.w  #$00C8, (Ring_Count_Address_P2).w            ; $FFFFFED0
                bcs.s   Offset_0x010AD0
                bset    #$02, (Ring_Status_Flag_P2).w                ; $FFFFFEC7
                bne.s   Offset_0x010AD0
Offset_0x010AC4:
                addq.b  #$01, (Life_Count_P2).w                      ; $FFFFFEC6
                addq.b  #$01, (HUD_Life_Refresh_Flag_P2).w           ; $FFFFFEC8
                move.w  #Ring_Lost_Sfx, D0                               ; $0034
Offset_0x010AD0:
                jmp     (Play_Music)                           ; Offset_0x001176                
;===============================================================================  
; Rotina para adicionar an�is ao contador, verificando o limmite e bonificando
; <<<-        com vida extra ao adiquirir 100 e 200 an�is
;===============================================================================
Rings_Lost:                                                    ; Offset_0x010AD6
                include 'data\objects\ringlost.asm'
Obj_S1_0x4B_Big_Ring: ; Sonic 1 Left over                      ; Offset_0x010C60
                include 'data\s1_obj\obj_0x4B.asm'    
Obj_S1_0x7C_Big_Ring_Flash: ; Sonic 1 Left over                ; Offset_0x010D26
                include 'data\s1_obj\obj_0x7C.asm'      
;------------------------------------------------------------------------------- 
Rings_Animate_Data:                                            ; Offset_0x010DDA
                dc.w    Offset_0x010DDC-Rings_Animate_Data
Offset_0x010DDC:
                dc.b    $05, $04, $05, $06, $07, $FC
;-------------------------------------------------------------------------------
Rings_Mappings:                                                ; Offset_0x010DE2
                dc.w    Offset_0x010DF4-Rings_Mappings
                dc.w    Offset_0x010DFC-Rings_Mappings
                dc.w    Offset_0x010E04-Rings_Mappings
                dc.w    Offset_0x010E0C-Rings_Mappings
                dc.w    Offset_0x010E14-Rings_Mappings
                dc.w    Offset_0x010E1C-Rings_Mappings
                dc.w    Offset_0x010E24-Rings_Mappings
                dc.w    Offset_0x010E2C-Rings_Mappings
                dc.w    Offset_0x010E34-Rings_Mappings
Offset_0x010DF4:
                dc.w    $0001
                dc.w    $F805, $0000, $FFF8
Offset_0x010DFC:
                dc.w    $0001
                dc.w    $F805, $0004, $FFF8
Offset_0x010E04:
                dc.w    $0001
                dc.w    $F801, $0008, $FFFC
Offset_0x010E0C:
                dc.w    $0001
                dc.w    $F805, $0804, $FFF8
Offset_0x010E14:
                dc.w    $0001
                dc.w    $F805, $000A, $FFF8
Offset_0x010E1C:
                dc.w    $0001
                dc.w    $F805, $180A, $FFF8
Offset_0x010E24:
                dc.w    $0001
                dc.w    $F805, $080A, $FFF8
Offset_0x010E2C:
                dc.w    $0001
                dc.w    $F805, $100A, $FFF8
Offset_0x010E34:
                dc.w    $0000
;-------------------------------------------------------------------------------  
Big_Ring_Mappings: ; Sonic 1 Left over                         ; Offset_0x010E36
                dc.w    Offset_0x010E3E-Big_Ring_Mappings
                dc.w    Offset_0x010E7C-Big_Ring_Mappings
                dc.w    Offset_0x010EAE-Big_Ring_Mappings
                dc.w    Offset_0x010EC8-Big_Ring_Mappings
Offset_0x010E3E:
                dc.w    $000A
                dc.w    $E008, $0000, $FFE8
                dc.w    $E008, $0003, $0000
                dc.w    $E80C, $0006, $FFE0
                dc.w    $E80C, $000A, $0000
                dc.w    $F007, $000E, $FFE0
                dc.w    $F007, $0016, $0010
                dc.w    $100C, $001E, $FFE0
                dc.w    $100C, $0022, $0000
                dc.w    $1808, $0026, $FFE8
                dc.w    $1808, $0029, $0000
Offset_0x010E7C:
                dc.w    $0008
                dc.w    $E00C, $002C, $FFF0
                dc.w    $E808, $0030, $FFE8
                dc.w    $E809, $0033, $0000
                dc.w    $F007, $0039, $FFE8
                dc.w    $F805, $0041, $0008
                dc.w    $0809, $0045, $0000
                dc.w    $1008, $004B, $FFE8
                dc.w    $180C, $004E, $FFF0
Offset_0x010EAE:
                dc.w    $0004
                dc.w    $E007, $0052, $FFF4
                dc.w    $E003, $0852, $0004
                dc.w    $0007, $005A, $FFF4
                dc.w    $0003, $085A, $0004
Offset_0x010EC8:
                dc.w    $0008
                dc.w    $E00C, $082C, $FFF0
                dc.w    $E808, $0830, $0000
                dc.w    $E809, $0833, $FFE8
                dc.w    $F007, $0839, $0008
                dc.w    $F805, $0841, $FFE8
                dc.w    $0809, $0845, $FFE8
                dc.w    $1008, $084B, $0000
                dc.w    $180C, $084E, $FFF0
;-------------------------------------------------------------------------------   
Big_Ring_Flash_Mappings: ; Sonic 1 Left over                   ; Offset_0x010EFA
                dc.w    Offset_0x010F0A-Big_Ring_Flash_Mappings
                dc.w    Offset_0x010F18-Big_Ring_Flash_Mappings
                dc.w    Offset_0x010F32-Big_Ring_Flash_Mappings
                dc.w    Offset_0x010F4C-Big_Ring_Flash_Mappings
                dc.w    Offset_0x010F66-Big_Ring_Flash_Mappings
                dc.w    Offset_0x010F80-Big_Ring_Flash_Mappings
                dc.w    Offset_0x010F9A-Big_Ring_Flash_Mappings
                dc.w    Offset_0x010FA8-Big_Ring_Flash_Mappings
Offset_0x010F0A:
                dc.w    $0002
                dc.w    $E00F, $0000, $0000
                dc.w    $000F, $1000, $0000
Offset_0x010F18:
                dc.w    $0004
                dc.w    $E00F, $0010, $FFF0
                dc.w    $E007, $0020, $0010
                dc.w    $000F, $1010, $FFF0
                dc.w    $0007, $1020, $0010
Offset_0x010F32:
                dc.w    $0004
                dc.w    $E00F, $0028, $FFE8
                dc.w    $E00B, $0038, $0008
                dc.w    $000F, $1028, $FFE8
                dc.w    $000B, $1038, $0008
Offset_0x010F4C:
                dc.w    $0004
                dc.w    $E00F, $0834, $FFE0
                dc.w    $E00F, $0034, $0000
                dc.w    $000F, $1834, $FFE0
                dc.w    $000F, $1034, $0000
Offset_0x010F66:
                dc.w    $0004
                dc.w    $E00B, $0838, $FFE0
                dc.w    $E00F, $0828, $FFF8
                dc.w    $000B, $1838, $FFE0
                dc.w    $000F, $1828, $FFF8
Offset_0x010F80:
                dc.w    $0004
                dc.w    $E007, $0820, $FFE0
                dc.w    $E00F, $0810, $FFF0
                dc.w    $0007, $1820, $FFE0
                dc.w    $000F, $1810, $FFF0
Offset_0x010F9A:
                dc.w    $0002
                dc.w    $E00F, $0800, $FFE0
                dc.w    $000F, $1800, $FFE0
Offset_0x010FA8:
                dc.w    $0004
                dc.w    $E00F, $0044, $FFE0
                dc.w    $E00F, $0844, $0000
                dc.w    $000F, $1044, $FFE0
                dc.w    $000F, $1844, $0000                                    
;-------------------------------------------------------------------------------
Obj_S2_0xDC_Slot_Machine_Ring: ; Sonic 2 Casino Night left over ; Offset_0x010FC2
                include 'data\s2_obj\obj_0xDC.asm'                 
;-------------------------------------------------------------------------------
Init_Sprite_Table:                                             ; Offset_0x011042
                clr.w   (Sprite_Mask_Flag).w                         ; $FFFFEF3A
                clr.l   (Use_Normal_Sprite_Table).w                  ; $FFFFEF3C
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq.s   Offset_0x011072
                lea     (Sprite_Table_Buffer).w, A0                  ; $FFFFF800
                bsr.s   Offset_0x011076
                bsr.s   Offset_0x011090
                lea     (Sprite_Table_Buffer_2&$00FFFFFF), A0        ; $00FF7880
                bsr.s   Offset_0x011076
                bsr.s   Offset_0x011090
                lea     (Sprite_Table_Buffer_P2&$00FFFFFF), A0       ; $00FF7B00
                bsr.s   Offset_0x011076
                lea     (Sprite_Table_Buffer_P2_2&$00FFFFFF), A0     ; $00FF7D80
                bra.s   Offset_0x011076
Offset_0x011072:
                lea     (Sprite_Table_Buffer).w, A0                  ; $FFFFF800
Offset_0x011076:
                moveq   #$00, D0
                moveq   #$01, D1
                moveq   #$4F, D7
Offset_0x01107C:
                move.w  D0, (A0)
                move.b  D1, $0003(A0)
                addq.w  #$01, D1
                addq.w  #$08, A0
                dbra    D7, Offset_0x01107C
                move.b  D0, -5(A0)
                rts
Offset_0x011090:
                lea     -$280(A0), A0
                move.l  #$00EB0301, (A0)+
                move.l  #$00000001, (A0)+
                move.l  #$00EB0302, (A0)+
                move.l  #$00000000, (A0)
                rts

; ---------------------------------------------------------------------------
; This runs the code of all the objects that are in Object_RAM
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x110AE: Load_Objects:
RunObjects:
		tst.b	(S2_Teleport_Flag).w
		bne.s	RunObjects_End
		lea	(Obj_Memory_Address).w,a0
		tst.w	(Two_Player_Flag).w
		bne.s	Offset_0x0110C6
		cmpi.b	#6,(Obj_Player_One+Obj_Routine).w	; is the player dead?
		bcc.s	RunObjectsWhenPlayerIsDead		; if yes, branch

Offset_0x0110C6:
		moveq	#$6D,d7					; run the first $6D objects out of levels
; Offset_0x0110C8:
RunObject:
		move.l	(a0),d0					; get the object's ID
		beq.s	RunNextObject				; if it's invalid, skip it
		move.l	d0,a1					; load the address of the object's code
		jsr	(a1)					; dynamic call! to one of the the entries in Obj_Index
; Offset_0x0110D0:
RunNextObject:
		lea	Obj_Size(a0),a0				; load Obj address
		dbf	d7,RunObject
; Offset_0x0110D8:
RunObjects_End:
		rts
; ---------------------------------------------------------------------------
; This skips certain objects to make enemies and things pause when Sonic dies
; Offset_0x0110DA:
RunObjectsWhenPlayerIsDead:
		moveq	#3,d7
		bsr.s	RunObject
		moveq	#$59,d7
		bsr.s	RunObjectDisplayOnly
		moveq	#$F,d7
		bra.s	RunObject

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x0110E6:
RunObjectDisplayOnly:
		move.l	(a0),d0					; get the object's idea
		beq.s	Offset_0x0110F4				; if it's invalid, skip it
		tst.b	Obj_Flags(a0)				; was the object displayed on the previous frame?
		bpl.s	Offset_0x0110F4				; if not, branch
		jsr	DisplaySprite(pc)

Offset_0x0110F4:
		lea	Obj_Size(a0),a0				; load Obj address
		dbf	d7,RunObjectDisplayOnly
		rts
; End of function RunObjects

;===============================================================================
; Rotina para fazer o objeto cair
; ->>> 
;===============================================================================
ObjectFall:                                                    ; Offset_0x0110FE
                move.w  Obj_Speed_X(A0), D0                              ; $0018
                ext.l   D0
                lsl.l   #$08, D0
                add.l   D0, Obj_X(A0)                                    ; $0010
                move.w  Obj_Speed_Y(A0), D0                              ; $001A
                addi.w  #$0038, Obj_Speed_Y(A0)                          ; $001A
                ext.l   D0
                lsl.l   #$08, D0
                add.l   D0, Obj_Y(A0)                                    ; $0014
                rts                 
;===============================================================================
; Rotina para fazer o objeto cair
; <<<- 
;===============================================================================
                    
SpeedToPos:                                                    ; Offset_0x01111E
                move.w  Obj_Speed_X(A0), D0                              ; $0018
                ext.l   D0
                lsl.l   #$08, D0
                add.l   D0, Obj_X(A0)                                    ; $0010
                move.w  Obj_Speed_Y(A0), D0                              ; $001A
                ext.l   D0
                lsl.l   #$08, D0
                add.l   D0, Obj_Y(A0)                                    ; $0014
                rts

; ---------------------------------------------------------------------------
; Subroutine to delete an object
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x011138:
DeleteObject:
		move.l	a0,a1
; Offset_0x01113A:
Delete_A1_Object:
		moveq	#(Obj_Size>>2)-1,d0

		moveq   #0,d1					; we want to clear up to the next object
								; delete the object by setting all of its bytes to 0
; Offset_0x01113E:
DeleteObject_FreeRam:
		move.l  d1,(a1)+
		dbf    d0,DeleteObject_FreeRam
		move.w  d1,(a1)+
		rts
; End of function DeleteObject

; ---------------------------------------------------------------------------
; Subroutine to display a sprite/object, when a0 is the object RAM
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x011148:
DisplaySprite:
		lea	(Sprite_Table_Input).w,a1
		adda.w	Obj_Priority(a0),a1
		cmpi.w	#$7E,(a1)
		bcc.s	Exit_DisplaySprite
		addq.w	#2,(a1)
		adda.w	(a1),a1
		move.w	a0,(a1)

Exit_DisplaySprite:
                rts
; End of function DisplaySprite

;===============================================================================
; Rotina para anima��o do sprite   
; ->>>
;===============================================================================      
AnimateSprite:                                                 ; Offset_0x01115E
                moveq   #$00, D0
                move.b  Obj_Ani_Number(A0), D0                           ; $0020
                cmp.b   Obj_Ani_Flag(A0), D0                             ; $0021
                beq.s   Offset_0x011176
                move.b  D0, Obj_Ani_Flag(A0)                             ; $0021
                clr.b   Obj_Ani_Frame(A0)                                ; $0023
                clr.b   Obj_Ani_Time(A0)                                 ; $0024
Offset_0x011176:
                subq.b  #$01, Obj_Ani_Time(A0)                           ; $0024
                bcc.s   Offset_0x0111AC
                add.w   D0, D0
                adda.w  $00(A1, D0), A1
                move.b  (A1), Obj_Ani_Time(A0)                           ; $0024
                moveq   #$00, D1
                move.b  Obj_Ani_Frame(A0), D1                            ; $0023
                move.b  $01(A1, D1), D0
                bmi.s   Offset_0x0111AE
Offset_0x011192:
                move.b  D0, Obj_Map_Id(A0)                               ; $0022
                move.b  Obj_Status(A0), D1                               ; $002A
                andi.b  #$03, D1
                andi.b  #$FC, Obj_Flags(A0)                              ; $0004
                or.b    D1, Obj_Flags(A0)                                ; $0004
                addq.b  #$01, Obj_Ani_Frame(A0)                          ; $0023
Offset_0x0111AC:
                rts
Offset_0x0111AE:
                addq.b  #$01, D0
                bne.s   Offset_0x0111BE
                move.b  #$00, Obj_Ani_Frame(A0)                          ; $0023
                move.b  $0001(A1), D0
                bra.s   Offset_0x011192
Offset_0x0111BE:
                addq.b  #$01, D0
                bne.s   Offset_0x0111D2
                move.b  $02(A1, D1), D0
                sub.b   D0, Obj_Ani_Frame(A0)                            ; $0023
                sub.b   D0, D1
                move.b  $01(A1, D1), D0
                bra.s   Offset_0x011192
Offset_0x0111D2:
                addq.b  #$01, D0
                bne.s   Offset_0x0111DE
                move.b  $02(A1, D1), Obj_Ani_Number(A0)                  ; $0020
                rts
Offset_0x0111DE:
                addq.b  #$01, D0
                bne.s   Offset_0x0111F0
                addq.b  #$02, Obj_Routine(A0)                            ; $0005
                clr.b   Obj_Ani_Time(A0)                                 ; $0024
                addq.b  #$01, Obj_Ani_Frame(A0)                          ; $0023
                rts
Offset_0x0111F0:
                addq.b  #$01, D0
                bne.s   Offset_0x0111FC
                move.w  #$7F00, Obj_X(A0)                                ; $0010
                rts
Offset_0x0111FC:
                rts
;-------------------------------------------------------------------------------
AnimateSprite_2:                                               ; Offset_0x0111FE
                moveq   #$00, D0
                move.b  Obj_Ani_Number(A0), D0                           ; $0020
                cmp.b   Obj_Ani_Flag(A0), D0                             ; $0021
                beq.s   Offset_0x011216
                move.b  D0, Obj_Ani_Flag(A0)                             ; $0021
                clr.b   Obj_Ani_Frame(A0)                                ; $0023
                clr.b   Obj_Ani_Time(A0)                                 ; $0024
Offset_0x011216:
                subq.b  #$01, Obj_Ani_Time(A0)                           ; $0024
                bcc.s   Offset_0x011250
                add.w   D0, D0
                adda.w  $00(A1, D0), A1
                moveq   #$00, D1
                move.b  Obj_Ani_Frame(A0), D1                            ; $0023
                add.w   D1, D1
                move.b  $00(A1, D1), D0
                bmi.s   Offset_0x011252
Offset_0x011230:
                move.b  $01(A1, D1), Obj_Ani_Time(A0)                    ; $0024
                move.b  D0, Obj_Map_Id(A0)                               ; $0022
                move.b  Obj_Status(A0), D1                               ; $002A
                andi.b  #$03, D1
                andi.b  #$FC, Obj_Flags(A0)                              ; $0004
                or.b    D1, Obj_Flags(A0)                                ; $0004
                addq.b  #$01, Obj_Ani_Frame(A0)                          ; $0023
Offset_0x011250:
                rts
Offset_0x011252:
                addq.b  #$01, D0
                bne.s   Offset_0x011260
                move.b  #$00, Obj_Ani_Frame(A0)                          ; $0023
                move.b  (A1), D0
                bra.s   Offset_0x011230
Offset_0x011260:
                addq.b  #$01, D0
                bne.s   Offset_0x011276
                move.b  $01(A1, D1), D0
                sub.b   D0, Obj_Ani_Frame(A0)                            ; $0023
                add.w   D0, D0
                sub.b   D0, D1
                move.b  $00(A1, D1), D0
                bra.s   Offset_0x011230
Offset_0x011276:
                addq.b  #$01, D0
                bne.s   Offset_0x011282
                move.b  $01(A1, D1), Obj_Ani_Number(A0)                  ; $0020
                rts
Offset_0x011282:
                addq.b  #$01, D0
                bne.s   Offset_0x011294
                addq.b  #$02, Obj_Routine(A0)                            ; $0005
                clr.b   Obj_Ani_Time(A0)                                 ; $0024
                addq.b  #$01, Obj_Ani_Frame(A0)                          ; $0023
                rts
Offset_0x011294:
                rts                 
;===============================================================================
; Rotina para anima��o do sprite   
; <<<-
;===============================================================================        

;===============================================================================
; Rotina para compilar os sprites de acordo com as defini��es dos objetos
; ->>>
;===============================================================================
Build_Sprites:                                                 ; Offset_0x011296
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                bne     Build_Sprites_2P                       ; Offset_0x01175E
                moveq   #$4F, D7
                moveq   #$00, D6
                lea     (Sprite_Table_Input).w, A5                   ; $FFFFAC00
                lea     (Screen_Pos_Buffer_X).w, A3                  ; $FFFFEE80
                lea     (Sprite_Table_Buffer).w, A6                  ; $FFFFF800
                tst.b   (Title_Card_Flag).w                          ; $FFFFF711
                beq.s   Offset_0x0112C0
                jsr     (Build_HUD)                            ; Offset_0x007994
                jsr     (Build_Rings)                          ; Offset_0x0089B6
Offset_0x0112C0:
                tst.w   (A5)
                beq     Offset_0x01135C
                lea     $0002(A5), A4
Offset_0x0112CA:
                move.w  (A4)+, A0
                andi.b  #$7F, Obj_Flags(A0)                              ; $0004
                move.b  Obj_Flags(A0), D6                                ; $0004
                move.w  Obj_X(A0), D0                                    ; $0010
                move.w  Obj_Y(A0), D1                                    ; $0014
                btst    #$06, D6
                bne     Offset_0x0113C2
                btst    #$02, D6
                beq.s   Offset_0x011328
                moveq   #$00, D2
                move.b  Obj_Width(A0), D2                                ; $0007
                sub.w   (A3), D0
                move.w  D0, D3
                add.w   D2, D3
                bmi.s   Offset_0x011356
                move.w  D0, D3
                sub.w   D2, D3
                cmpi.w  #$0140, D3
                bge.s   Offset_0x011356
                addi.w  #$0080, D0
                sub.w   $0004(A3), D1
                move.b  Obj_Height(A0), D2                               ; $0006
                add.w   D2, D1
                and.w   (Screen_Wrap_Y).w, D1                        ; $FFFFEEAA
                move.w  D2, D3
                add.w   D2, D2
                addi.w  #$00E0, D2
                cmp.w   D2, D1
                bcc.s   Offset_0x011356
                addi.w  #$0080, D1
                sub.w   D3, D1
Offset_0x011328:
                ori.b   #$80, Obj_Flags(A0)                              ; $0004
                tst.w   D7
                bmi.s   Offset_0x011356
                move.l  Obj_Map(A0), A1                                  ; $000C
                moveq   #$00, D4
                btst    #$05, D6
                bne.s   Offset_0x01134E
                move.b  Obj_Map_Id(A0), D4                               ; $0022
                add.w   D4, D4
                adda.w  $00(A1, D4), A1
                move.w  (A1)+, D4
                subq.w  #$01, D4
                bmi.s   Offset_0x011356
Offset_0x01134E:
                move.w  Obj_Art_VRAM(A0), D5                             ; $000A
                jsr     Offset_0x0114D6(PC)
Offset_0x011356:
                subq.w  #$02, (A5)
                bne     Offset_0x0112CA
Offset_0x01135C:
                cmpa.l  #Sprite_Table_Input, A5                      ; $FFFFAC00
                bne.s   Offset_0x011372
                cmpi.w  #LRz_Act_1, (Current_ZoneAndAct).w              ; $0900, $FFFFFE10
                bne.s   Offset_0x011372
                jsr     (Build_LRz_Rocks)                      ; Offset_0x012A3A
Offset_0x011372:
                lea     $0080(A5), A5
                cmpa.l  #Obj_Memory_Address, A5                      ; $FFFFB000
                bcs     Offset_0x0112C0
                move.w  D7, D6
                bmi.s   Offset_0x01138E
                moveq   #$00, D0
Offset_0x011386:
                move.w  D0, (A6)
                addq.w  #$08, A6
                dbra    D7, Offset_0x011386
Offset_0x01138E:
                subi.w  #$004F, D6
                neg.w   D6
                move.b  D6, (Sprites_Drawn).w                        ; $FFFFF62C
                tst.w   (Sprite_Mask_Flag).w                         ; $FFFFEF3A
                beq.s   Offset_0x0113C0
                clr.w   (Sprite_Mask_Flag).w                         ; $FFFFEF3A
                lea     (Sprite_Table_Buffer-$04).w, A0              ; $FFFFF7FC
                move.w  #$07C0, D0
                moveq   #$4F, D1
Offset_0x0113AC:
                addq.w  #$08, A0
                cmp.w   (A0), D0
                dbeq    D1, Offset_0x0113AC
                bne.s   Offset_0x0113C0
                move.w  #$0001, $0002(A0)
                clr.w   $000A(A0)
Offset_0x0113C0:
                rts
Offset_0x0113C2:
                btst    #$02, D6
                bne.s   Offset_0x01140C
                moveq   #$00, D2
                move.b  Obj_Width(A0), D2                                ; $0007
                subi.w  #$0080, D0
                move.w  D0, D3
                add.w   D2, D3
                bmi     Offset_0x011356
                move.w  D0, D3
                sub.w   D2, D3
                cmpi.w  #$0140, D3
                bge     Offset_0x011356
                addi.w  #$0080, D0
                move.b  Obj_Height(A0), D2                               ; $0006
                subi.w  #$0080, D1
                move.w  D1, D3
                add.w   D2, D3
                bmi     Offset_0x011356
                move.w  D1, D3
                sub.w   D2, D3
                cmpi.w  #$00E0, D3
                bge     Offset_0x011356
                addi.w  #$0080, D1
                bra.s   Offset_0x01144E
Offset_0x01140C:
                moveq   #$00, D2
                move.b  Obj_Width(A0), D2                                ; $0007
                sub.w   (A3), D0
                move.w  D0, D3
                add.w   D2, D3
                bmi     Offset_0x011356
                move.w  D0, D3
                sub.w   D2, D3
                cmpi.w  #$0140, D3
                bge     Offset_0x011356
                addi.w  #$0080, D0
                sub.w   $0004(A3), D1
                move.b  Obj_Height(A0), D2                               ; $0006
                add.w   D2, D1
                and.w   (Screen_Wrap_Y).w, D1                        ; $FFFFEEAA
                move.w  D2, D3
                add.w   D2, D2
                addi.w  #$00E0, D2
                cmp.w   D2, D1
                bcc     Offset_0x011356
                addi.w  #$0080, D1
                sub.w   D3, D1
Offset_0x01144E:
                ori.b   #$80, Obj_Flags(A0)                              ; $0004
                tst.w   D7
                bmi     Offset_0x011356
                move.w  Obj_Art_VRAM(A0), D5                             ; $000A
                move.l  Obj_Map(A0), A2                                  ; $000C
                moveq   #$00, D4
                move.b  Obj_Map_Id(A0), D4                               ; $0022
                beq.s   Offset_0x011486
                add.w   D4, D4
                lea     (A2), A1
                adda.w  $00(A1, D4), A1
                move.w  (A1)+, D4
                subq.w  #$01, D4
                bmi.s   Offset_0x011486
                move.w  D6, D3
                jsr     Offset_0x0115DA(PC)
                move.w  D3, D6
                tst.w   D7
                bmi     Offset_0x011356
Offset_0x011486:
                move.w  Obj_Sub_Y(A0), D3                                ; $0016
                subq.w  #$01, D3
                bcs     Offset_0x011356
                lea     $0018(A0), A0
Offset_0x011494:
                move.w  (A0)+, D0
                move.w  (A0)+, D1
                btst    #$02, D6
                beq.s   Offset_0x0114B0
                sub.w   (A3), D0
                addi.w  #$0080, D0
                sub.w   $0004(A3), D1 
                addi.w  #$0080, D1
                and.w   (Screen_Wrap_Y).w, D1                        ; $FFFFEEAA
Offset_0x0114B0:
                addq.w  #$01, A0
                moveq   #$00, D4
                move.b  (A0)+, D4
                add.w   D4, D4
                lea     (A2), A1
                adda.w  $00(A1, D4), A1
                move.w  (A1)+, D4
                subq.w  #$01, D4
                bmi.s   Offset_0x0114CC
                move.w  D6, -(A7)
                jsr     Offset_0x0115DA(PC)
                move.w  (A7)+, D6
Offset_0x0114CC:
                tst.w   D7
                dbmi    D3, Offset_0x011494
                bra     Offset_0x011356
;-------------------------------------------------------------------------------
Offset_0x0114D6:
                lsr.b   #$01, D6
                bcs.s   Offset_0x011508
                lsr.b   #$01, D6
                bcs     Build_Sprite_Upside_Down_Right         ; Offset_0x0115A2
Build_Sprite_Right:                                            ; Offset_0x0114E0
                move.b  (A1)+, D2
                ext.w   D2
                add.w   D1, D2
                move.w  D2, (A6)+
                move.b  (A1)+, (A6)+
                addq.w  #$01, A6
                move.w  (A1)+, D2
                add.w   D5, D2
                move.w  D2, (A6)+
                move.w  (A1)+, D2
                add.w   D0, D2
                andi.w  #$01FF, D2
                bne.s   Offset_0x0114FE
                addq.w  #$01, D2
Offset_0x0114FE:
                move.w  D2, (A6)+
                subq.w  #$01, D7
                dbmi    D4, Build_Sprite_Right                 ; Offset_0x0114E0
                rts
Offset_0x011508:
                lsr.b   #$01, D6
                bcs.s   Build_Sprite_Upside_Down_Left          ; Offset_0x011552
Build_Sprite_Left:                                             ; Offset_0x01150C
                move.b  (A1)+, D2
                ext.w   D2
                add.w   D1, D2
                move.w  D2, (A6)+
                move.b  (A1)+, D6
                move.b  D6, (A6)+
                addq.w  #$01, A6
                move.w  (A1)+, D2
                add.w   D5, D2
                eori.w  #$0800, D2
                move.w  D2, (A6)+
                move.w  (A1)+, D2
                neg.w   D2
                move.b  Offset_0x011542(PC, D6), D6
                sub.w   D6, D2
                add.w   D0, D2
                andi.w  #$01FF, D2
                bne.s   Offset_0x011538
                addq.w  #$01, D2
Offset_0x011538:
                move.w  D2, (A6)+
                subq.w  #$01, D7
                dbmi    D4, Build_Sprite_Left                  ; Offset_0x01150C
                rts         
;-------------------------------------------------------------------------------
Offset_0x011542:
                dc.b    $08, $08, $08, $08, $10, $10, $10, $10
                dc.b    $18, $18, $18, $18, $20, $20, $20, $20     
;-------------------------------------------------------------------------------
Build_Sprite_Upside_Down_Left:                                 ; Offset_0x011552
                move.b  (A1)+, D2
                ext.w   D2
                neg.w   D2
                move.b  (A1), D6
                move.b  Offset_0x011592(PC, D6), D6
                sub.w   D6, D2
                add.w   D1, D2
                move.w  D2, (A6)+
                move.b  (A1)+, D6
                move.b  D6, (A6)+
                addq.w  #$01, A6
                move.w  (A1)+, D2
                add.w   D5, D2
                eori.w  #$1800, D2
                move.w  D2, (A6)+
                move.w  (A1)+, D2
                neg.w   D2
                move.b  Offset_0x011542(PC, D6), D6
                sub.w   D6, D2
                add.w   D0, D2
                andi.w  #$01FF, D2
                bne.s   Offset_0x011588
                addq.w  #$01, D2
Offset_0x011588:
                move.w  D2, (A6)+
                subq.w  #$01, D7
                dbmi    D4, Build_Sprite_Upside_Down_Left      ; Offset_0x011552
                rts    
;-------------------------------------------------------------------------------
Offset_0x011592:
                dc.b    $08, $10, $18, $20, $08, $10, $18, $20
                dc.b    $08, $10, $18, $20, $08, $10, $18, $20
;-------------------------------------------------------------------------------
Build_Sprite_Upside_Down_Right:                                ; Offset_0x0115A2
                move.b  (A1)+, D2
                ext.w   D2
                neg.w   D2
                move.b  (A1)+, D6
                move.b  D6, $0002(A6)
                move.b  Offset_0x011592(PC, D6), D6
                sub.w   D6, D2
                add.w   D1, D2
                move.w  D2, (A6)+
                addq.w  #$02, A6
                move.w  (A1)+, D2
                add.w   D5, D2
                eori.w  #$1000, D2
                move.w  D2, (A6)+
                move.w  (A1)+, D2
                add.w   D0, D2
                andi.w  #$01FF, D2
                bne.s   Offset_0x0115D0
                addq.w  #$01, D2
Offset_0x0115D0:
                move.w  D2, (A6)+
                subq.w  #$01, D7
                dbmi    D4, Build_Sprite_Upside_Down_Right     ; Offset_0x0115A2
                rts  
;-------------------------------------------------------------------------------
Offset_0x0115DA:
                lsr.b   #$01, D6
                bcs.s   Offset_0x01162C
                lsr.b   #$01, D6
                bcs     Offset_0x011706
Offset_0x0115E4:
                move.b  (A1)+, D2
                ext.w   D2
                add.w   D1, D2
                cmpi.w  #$0060, D2
                bls.s   Offset_0x011624
                cmpi.w  #$0160, D2
                bcc.s   Offset_0x011624
                move.w  D2, (A6)+
                move.b  (A1)+, (A6)+
                addq.w  #$01, A6
                move.w  (A1)+, D2
                add.w   D5, D2
                move.w  D2, (A6)+
                move.w  (A1)+, D2
                add.w   D0, D2
                cmpi.w  #$0060, D2
                bls.s   Offset_0x01161C
                cmpi.w  #$01C0, D2
                bcc.s   Offset_0x01161C
                move.w  D2, (A6)+
                subq.w  #$01, D7
                dbmi    D4, Offset_0x0115E4
                rts
Offset_0x01161C:
                subq.w  #$06, A6
                dbra    D4, Offset_0x0115E4
                rts
Offset_0x011624:
                addq.w  #$05, A1
                dbra    D4, Offset_0x0115E4
                rts
Offset_0x01162C:
                lsr.b   #$01, D6
                bcs.s   Offset_0x011696
Offset_0x011630:
                move.b  (A1)+, D2
                ext.w   D2
                add.w   D1, D2
                cmpi.w  #$0060, D2
                bls.s   Offset_0x01167E
                cmpi.w  #$0160, D2
                bcc.s   Offset_0x01167E
                move.w  D2, (A6)+
                move.b  (A1)+, D6
                move.b  D6, (A6)+
                addq.w  #$01, A6
                move.w  (A1)+, D2
                add.w   D5, D2
                eori.w  #$0800, D2
                move.w  D2, (A6)+
                move.w  (A1)+, D2
                neg.w   D2
                move.b  Offset_0x011686(PC, D6), D6
                sub.w   D6, D2
                add.w   D0, D2
                cmpi.w  #$0060, D2
                bls.s   Offset_0x011676
                cmpi.w  #$01C0, D2
                bcc.s   Offset_0x011676
                move.w  D2, (A6)+
                subq.w  #$01, D7
                dbmi    D4, Offset_0x011630
                rts
Offset_0x011676:
                subq.w  #$06, A6
                dbra    D4, Offset_0x011630
                rts
Offset_0x01167E:
                addq.w  #$05, A1
                dbra    D4, Offset_0x011630
                rts       
;-------------------------------------------------------------------------------
Offset_0x011686:
                dc.b    $08, $08, $08, $08, $10, $10, $10, $10
                dc.b    $18, $18, $18, $18, $20, $20, $20, $20   
;-------------------------------------------------------------------------------
Offset_0x011696:
                move.b  (A1)+, D2
                ext.w   D2
                neg.w   D2
                move.b  (A1), D6
                move.b  Offset_0x0116F6(PC, D6), D6
                sub.w   D6, D2
                add.w   D1, D2
                cmpi.w  #$0060, D2
                bls.s   Offset_0x0116EE
                cmpi.w  #$0160, D2
                bcc.s   Offset_0x0116EE
                move.w  D2, (A6)+
                move.b  (A1)+, D6
                move.b  D6, (A6)+
                addq.w  #$01, A6
                move.w  (A1)+, D2
                add.w   D5, D2
                eori.w  #$1800, D2
                move.w  D2, (A6)+
                move.w  (A1)+, D2
                neg.w   D2
                move.b  Offset_0x011686(PC, D6), D6
                sub.w   D6, D2
                add.w   D0, D2
                cmpi.w  #$0060, D2
                bls.s   Offset_0x0116E6
                cmpi.w  #$01C0, D2
                bcc.s   Offset_0x0116E6
                move.w  D2, (A6)+
                subq.w  #$01, D7
                dbmi    D4, Offset_0x011696
                rts
Offset_0x0116E6:
                subq.w  #$06, A6
                dbra    D4, Offset_0x011696
                rts
Offset_0x0116EE:
                addq.w  #$05, A1
                dbra    D4, Offset_0x011696
                rts       
;-------------------------------------------------------------------------------
Offset_0x0116F6:
                dc.b    $08, $10, $18, $20, $08, $10, $18, $20
                dc.b    $08, $10, $18, $20, $08, $10, $18, $20
;-------------------------------------------------------------------------------
Offset_0x011706:
                move.b  (A1)+, D2
                ext.w   D2
                neg.w   D2
                move.b  (A1)+, D6
                move.b  D6, $0002(A6)
                move.b  Offset_0x0116F6(PC, D6), D6
                sub.w   D6, D2
                add.w   D1, D2
                cmpi.w  #$0060, D2
                bls.s   Offset_0x011756
                cmpi.w  #$0160, D2
                bcc.s   Offset_0x011756
                move.w  D2, (A6)+
                addq.w  #$02, A6
                move.w  (A1)+, D2
                add.w   D5, D2
                eori.w  #$1000, D2
                move.w  D2, (A6)+
                move.w  (A1)+, D2
                add.w   D0, D2
                cmpi.w  #$0060, D2
                bls.s   Offset_0x01174E
                cmpi.w  #$01C0, D2
                bcc.s   Offset_0x01174E
                move.w  D2, (A6)+
                subq.w  #$01, D7
                dbmi    D4, Offset_0x011706
                rts
Offset_0x01174E:
                subq.w  #$06, A6
                dbra    D4, Offset_0x011706
                rts
Offset_0x011756:
                addq.w  #$04, A1
                dbra    D4, Offset_0x011706
                rts
;-------------------------------------------------------------------------------                
Build_Sprites_2P:                                              ; Offset_0x01175E
                moveq   #$4D, D7
                moveq   #$00, D6
                lea     (Sprite_Table_Input).w, A5                   ; $FFFFAC00
                lea     (Screen_Pos_Buffer_X).w, A3                  ; $FFFFEE80
                lea     (Sprite_Table_Buffer+$10).w, A6              ; $FFFFF810
                tst.w   (Use_Normal_Sprite_Table).w                  ; $FFFFEF3C
                beq.s   Offset_0x01177A
                lea     ((Sprite_Table_Buffer_2+$10)&$00FFFFFF), A6  ; $00FF7890
Offset_0x01177A:
                tst.b   (Title_Card_Flag).w                          ; $FFFFF711
                beq.s   Offset_0x011786
                jsr     (Build_HUD_2P)                         ; Offset_0x00798C
Offset_0x011786:
                move.b  $0001(A5), (A5)
                beq     Offset_0x011832
                lea     $0002(A5), A4
Offset_0x011792:
                move.w  (A4)+, A0
                andi.b  #$7F, Obj_Flags(A0)                              ; $0004
                move.b  Obj_Flags(A0), D6                                ; $0004
                btst    #$04, D6
                bne     Offset_0x01182C
                move.w  Obj_X(A0), D0                                    ; $0010
                move.w  Obj_Y(A0), D1                                    ; $0014
                btst    #$06, D6
                bne     Offset_0x011956
                btst    #$02, D6
                beq.s   Offset_0x0117FE
                moveq   #$00, D2
                sub.w   (A3), D0
                move.b  Obj_Width(A0), D2                                ; $0007
                add.w   D2, D0
                and.w   (Screen_Wrap_X).w, D0                        ; $FFFFEEA8
                move.w  D2, D3
                add.w   D2, D2
                addi.w  #$0140, D2
                cmp.w   D2, D0
                bcc.s   Offset_0x01182C
                addi.w  #$0080, D0
                sub.w   D3, D0
                moveq   #$00, D2
                sub.w   Obj_Flags(A3), D1                                ; $0004
                move.b  Obj_Height(A0), D2                               ; $0006
                add.w   D2, D1
                and.w   (Screen_Wrap_Y).w, D1                        ; $FFFFEEAA
                move.w  D2, D3
                add.w   D2, D2
                addi.w  #$0070, D2
                cmp.w   D2, D1
                bcc.s   Offset_0x01182C
                addi.w  #$0080, D1
                sub.w   D3, D1
Offset_0x0117FE:
                ori.b   #$80, Obj_Flags(A0)                              ; $0004
                tst.w   D7
                bmi.s   Offset_0x01182C
                move.l  Obj_Map(A0), A1                                  ; $000C
                moveq   #$00, D4
                btst    #$05, D6
                bne.s   Offset_0x011824
                move.b  Obj_Map_Id(A0), D4                               ; $0022
                add.w   D4, D4
                adda.w  $00(A1, D4), A1
                move.w  (A1)+, D4
                subq.w  #$01, D4
                bmi.s   Offset_0x01182C
Offset_0x011824:
                move.w  Obj_Art_VRAM(A0), D5                             ; $000A
                jsr     Offset_0x0114D6(PC)
Offset_0x01182C:
                subq.b  #$02, (A5)
                bne     Offset_0x011792
Offset_0x011832:
                lea     $0080(A5), A5
                cmpa.l  #Obj_Memory_Address, A5                      ; $FFFFB000
                bcs     Offset_0x011786
                tst.w   D7
                bmi.s   Offset_0x01184E
                moveq   #$00, D0
Offset_0x011846:
                move.w  D0, (A6)
                addq.w  #$08, A6
                dbra    D7, Offset_0x011846
Offset_0x01184E:
                move.l  (Sprite_Table_Input+$0102).w, D0             ; $FFFFAD02
                cmpi.l  #(((Obj_Player_One&$FFFF)<<$10)|(Obj_Player_Two&$FFFF)), D0 ; $B000B04A
                bne.s   Offset_0x011860
                swap.w  D0
                move.l  D0, (Sprite_Table_Input+$0102).w             ; $FFFFAD02
Offset_0x011860:
                moveq   #$4F, D7
                lea     (Sprite_Table_Input).w, A5                   ; $FFFFAC00
                lea     (Screen_Pos_Buffer_X_P2).w, A3               ; $FFFFEE68
                lea     (Sprite_Table_Buffer_P2&$00FFFFFF), A6       ; $00FF7B00
                tst.w   (Use_Normal_Sprite_Table).w                  ; $FFFFEF3C
                beq.s   Offset_0x01187C
                lea     (Sprite_Table_Buffer_P2_2&$00FFFFFF), A6     ; $00FF7D80
Offset_0x01187C:
                tst.b   (Title_Card_Flag).w                          ; $FFFFF711
                beq.s   Offset_0x011888
                jsr     (Build_HUD_P2)                         ; Offset_0x0079D2
Offset_0x011888:
                tst.b   $0001(A5)
                beq     Offset_0x011934
                lea     $0002(A5), A4
Offset_0x011894:
                move.w  (A4)+, A0
                move.b  Obj_Flags(A0), D6                                ; $0004
                btst    #$03, D6
                bne     Offset_0x01192C
                move.w  Obj_X(A0), D0                                    ; $0010
                move.w  Obj_Y(A0), D1                                    ; $0014
                btst    #$06, D6
                bne     Offset_0x011A22
                btst    #$02, D6
                beq.s   Offset_0x0118FA
                moveq   #$00, D2
                sub.w   (A3), D0
                move.b  Obj_Width(A0), D2                                ; $0007
                add.w   D2, D0
                and.w   (Screen_Wrap_X).w, D0                        ; $FFFFEEA8
                move.w  D2, D3
                add.w   D2, D2
                addi.w  #$0140, D2
                cmp.w   D2, D0
                bcc.s   Offset_0x01192C
                addi.w  #$0080, D0
                sub.w   D3, D0
                moveq   #$00, D2
                sub.w   Obj_Flags(A3), D1                                ; $0004
                move.b  Obj_Height(A0), D2                               ; $0006
                add.w   D2, D1
                and.w   (Screen_Wrap_Y).w, D1                        ; $FFFFEEAA
                move.w  D2, D3
                add.w   D2, D2
                addi.w  #$0070, D2
                cmp.w   D2, D1
                bcc.s   Offset_0x01192C
                addi.w  #$0080, D1
                sub.w   D3, D1
Offset_0x0118FA:
                addi.w  #$0070, D1
                ori.b   #$80, Obj_Flags(A0)                              ; $0004
                tst.w   D7
                bmi.s   Offset_0x01192C
                move.l  Obj_Map(A0), A1                                  ; $000C
                moveq   #$00, D4
                btst    #$05, D6
                bne.s   Offset_0x011924
                move.b  Obj_Map_Id(A0), D4                               ; $0022
                add.w   D4, D4
                adda.w  $00(A1, D4), A1
                move.w  (A1)+, D4
                subq.w  #$01, D4
                bmi.s   Offset_0x01192C
Offset_0x011924:
                move.w  Obj_Art_VRAM(A0), D5                             ; $000A
                jsr     Offset_0x0114D6(PC)
Offset_0x01192C:
                subq.b  #$02, $0001(A5)
                bne     Offset_0x011894
Offset_0x011934:
                lea     $0080(A5), A5
                cmpa.l  #Obj_Memory_Address, A5                      ; $FFFFB000
                bcs     Offset_0x011888
                tst.w   D7
                bmi.s   Offset_0x011950
                moveq   #$00, D0
Offset_0x011948:
                move.w  D0, (A6)
                addq.w  #$08, A6
                dbra    D7, Offset_0x011948
Offset_0x011950:
                st      (Normal_Sprite_Table_Flag).w                 ; $FFFFEF3E
                rts
Offset_0x011956:
                moveq   #$00, D2
                sub.w   (A3), D0
                move.b  Obj_Width(A0), D2                                ; $0007
                add.w   D2, D0
                and.w   (Screen_Wrap_X).w, D0                        ; $FFFFEEA8
                move.w  D2, D3
                add.w   D2, D2
                addi.w  #$0140, D2
                cmp.w   D2, D0
                bcc     Offset_0x01182C
                addi.w  #$0080, D0
                sub.w   D3, D0
                moveq   #$00, D2
                sub.w   Obj_Flags(A3), D1                                ; $0004
                move.b  Obj_Height(A0), D2                               ; $0006
                add.w   D2, D1
                and.w   (Screen_Wrap_Y).w, D1                        ; $FFFFEEAA
                move.w  D2, D3
                add.w   D2, D2
                addi.w  #$0070, D2
                cmp.w   D2, D1
                bcc     Offset_0x01182C
                addi.w  #$0080, D1
                sub.w   D3, D1
                ori.b   #$80, Obj_Flags(A0)                              ; $0004
                tst.w   D7
                bmi     Offset_0x01182C
                move.w  Obj_Art_VRAM(A0), D5                             ; $000A
                move.l  Obj_Map(A0), A2                                  ; $000C
                moveq   #$00, D4
                move.b  Obj_Map_Id(A0), D4                               ; $0022
                beq.s   Offset_0x0119D4
                add.w   D4, D4
                lea     (A2), A1
                adda.w  $00(A1, D4), A1
                move.w  (A1)+, D4
                subq.w  #$01, D4
                bmi.s   Offset_0x0119D4
                move.w  D6, D3
                jsr     Offset_0x0115DA(PC)
                move.w  D3, D6
                tst.w   D7
                bmi     Offset_0x01182C
Offset_0x0119D4:
                move.w  Obj_Sub_Y(A0), D3                                ; $0016
                subq.w  #$01, D3
                bcs     Offset_0x01182C
                lea     Obj_Speed_X(A0), A0                              ; $0018
Offset_0x0119E2:
                move.w  (A0)+, D0
                sub.w   (A3), D0
                addi.w  #$0080, D0
                and.w   (Screen_Wrap_X).w, D0                        ; $FFFFEEA8
                move.w  (A0)+, D1
                sub.w   $0004(A3), D1
                addi.w  #$0080, D1
                and.w   (Screen_Wrap_Y).w, D1                        ; $FFFFEEAA
                addq.w  #$01, A0
                moveq   #$00, D4
                move.b  (A0)+, D4
                add.w   D4, D4
                lea     (A2), A1
                adda.w  $00(A1, D4), A1
                move.w  (A1)+, D4
                subq.w  #$01, D4
                bmi.s   Offset_0x011A18
                move.w  D6, -(A7)
                jsr     Offset_0x0115DA(PC)
                move.w  (A7)+, D6
Offset_0x011A18:
                tst.w   D7
                dbmi    D3, Offset_0x0119E2
                bra     Offset_0x01182C
Offset_0x011A22:
                moveq   #$00, D2
                sub.w   (A3), D0
                move.b  Obj_Width(A0), D2                                ; $0007
                add.w   D2, D0
                and.w   (Screen_Wrap_X).w, D0                        ; $FFFFEEA8
                move.w  D2, D3
                add.w   D2, D2
                addi.w  #$0140, D2
                cmp.w   D2, D0
                bcc     Offset_0x01192C
                addi.w  #$0080, D0
                sub.w   D3, D0
                moveq   #$00, D2
                sub.w   Obj_Flags(A3), D1                                ; $0004
                move.b  Obj_Height(A0), D2                               ; $0006
                add.w   D2, D1
                and.w   (Screen_Wrap_Y).w, D1                        ; $FFFFEEAA
                move.w  D2, D3
                add.w   D2, D2
                addi.w  #$0070, D2
                cmp.w   D2, D1
                bcc     Offset_0x01192C
                addi.w  #$00F0, D1
                sub.w   D3, D1
                ori.b   #$80, Obj_Flags(A0)                              ; $0004
                tst.w   D7
                bmi     Offset_0x01192C
                move.w  Obj_Art_VRAM(A0), D5                             ; $000A
                move.l  Obj_Map(A0), A2                                  ; $000C
                moveq   #$00, D4
                move.b  Obj_Map_Id(A0), D4                               ; $0022
                beq.s   Offset_0x011AA0
                add.w   D4, D4
                lea     (A2), A1
                adda.w  $00(A1, D4), A1
                move.w  (A1)+, D4
                subq.w  #$01, D4
                bmi.s   Offset_0x011AA0
                move.w  D6, D3
                jsr     Offset_0x0115DA(PC)
                move.w  D3, D6
                tst.w   D7
                bmi     Offset_0x01192C
Offset_0x011AA0:
                move.w  Obj_Sub_Y(A0), D3                                ; $0016
                subq.w  #$01, D3
                bcs     Offset_0x01192C
                lea     Obj_Speed_X(A0), A0                              ; $0018
Offset_0x011AAE:
                move.w  (A0)+, D0
                sub.w   (A3), D0
                addi.w  #$0080, D0
                and.w   (Screen_Wrap_X).w, D0                        ; $FFFFEEA8
                move.w  (A0)+, D1
                sub.w   Obj_Flags(A3), D1                                ; $0004
                addi.w  #$0080, D1
                and.w   (Screen_Wrap_Y).w, D1                        ; $FFFFEEAA
                addi.w  #$0070, D1
                addq.w  #$01, A0
                moveq   #$00, D4
                move.b  (A0)+, D4
                add.w   D4, D4
                lea     (A2), A1
                adda.w  $00(A1, D4), A1
                move.w  (A1)+, D4
                subq.w  #$01, D4
                bmi.s   Offset_0x011AE8
                move.w  D6, -(A7)
                jsr     Offset_0x0115DA(PC)
                move.w  (A7)+, D6
Offset_0x011AE8:
                tst.w   D7
                dbmi    D3, Offset_0x011AAE
                bra     Offset_0x01192C                                                                                                          
;===============================================================================
; Rotina para compilar os sprites de acordo com as defini��es dos objetos
; <<<-
;===============================================================================

;-------------------------------------------------------------------------------
MarkObjGone:                                                   ; Offset_0x011AF2
                move.w  Obj_X(A0), D0                                    ; $0010
                andi.w  #$FF80, D0
                sub.w   (Camera_X_Left).w, D0                        ; $FFFFF7DA
                cmpi.w  #$0280, D0
                bhi     Offset_0x011B0A
                bra     DisplaySprite                          ; Offset_0x011148
Offset_0x011B0A:
                move.w  Obj_Respaw_Ref(A0), D0                           ; $0048
                beq.s   Offset_0x011B16
                move.w  D0, A2
                bclr    #$07, (A2)
Offset_0x011B16:
                bra     DeleteObject                           ; Offset_0x011138
;-------------------------------------------------------------------------------
MarkObjGone_2:                                                 ; Offset_0x011B1A
                andi.w  #$FF80, D0
                sub.w   (Camera_X_Left).w, D0                        ; $FFFFF7DA
                cmpi.w  #$0280, D0
                bhi     Offset_0x011B2E
                bra     DisplaySprite                          ; Offset_0x011148
Offset_0x011B2E:
                move.w  Obj_Respaw_Ref(A0), D0                           ; $0048
                beq.s   Offset_0x011B3A
                move.w  D0, A2
                bclr    #$07, (A2)
Offset_0x011B3A:
                bra     DeleteObject                           ; Offset_0x011138
;-------------------------------------------------------------------------------
MarkObjGone_3:                                                 ; Offset_0x011B3E
                move.w  Obj_X(A0), D0                                    ; $0010
                andi.w  #$FF80, D0
                sub.w   (Camera_X_Left).w, D0                        ; $FFFFF7DA
                cmpi.w  #$0280, D0
                bhi     Offset_0x011B54
                rts
Offset_0x011B54:
                move.w  Obj_Respaw_Ref(A0), D0                           ; $0048
                beq.s   Offset_0x011B60
                move.w  D0, A2
                bclr    #$07, (A2)
Offset_0x011B60:
                bra     DeleteObject                           ; Offset_0x011138
;-------------------------------------------------------------------------------
MarkObjGone_4:                                                 ; Offset_0x011B64
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                bne.s   MarkObjGone_4_2P                       ; Offset_0x011B92
                move.w  Obj_X(A0), D0                                    ; $0010
                andi.w  #$FF80, D0
                sub.w   (Camera_X_Left).w, D0                        ; $FFFFF7DA
                cmpi.w  #$0280, D0
                bhi     Offset_0x011B82
                bra     DisplaySprite                          ; Offset_0x011148
Offset_0x011B82:
                move.w  Obj_Respaw_Ref(A0), D0                           ; $0048
                beq.s   Offset_0x011B8E
                move.w  D0, A2
                bclr    #$07, (A2)
Offset_0x011B8E:
                bra     DeleteObject                           ; Offset_0x011138
MarkObjGone_4_2P:                                              ; Offset_0x011B92
                move.w  Obj_X(A0), D0                                    ; $0010
                andi.w  #$FF00, D0
                move.w  D0, D1
                sub.w   (Camera_X_Left).w, D0                        ; $FFFFF7DA
                cmpi.w  #$0300, D0
                bhi     Offset_0x011BAC
                bra     DisplaySprite                          ; Offset_0x011148
Offset_0x011BAC:
                sub.w   (Camera_X_Left_P2).w, D1                     ; $FFFFF7DC
                cmpi.w  #$0300, D1
                bhi     Offset_0x011BBC
                bra     DisplaySprite                          ; Offset_0x011148
Offset_0x011BBC:
                move.w  Obj_Respaw_Ref(A0), D0                           ; $0048
                beq.s   Offset_0x011BC8
                move.w  D0, A2
                bclr    #$07, (A2)
Offset_0x011BC8:
                bra     DeleteObject                           ; Offset_0x011138
;-------------------------------------------------------------------------------
MarkObjGone_5: ; Usado pelos an�is ; MarkObjGone_2 in Sonic 2  ; Offset_0x011BCC
                move.w  Obj_X(A0), D0                                    ; $0010
MarkObjGone_5_D0:                                              ; Offset_0x011BD0
                andi.w  #$FF80, D0
                sub.w   (Camera_X_Left).w, D0                        ; $FFFFF7DA
                cmpi.w  #$0280, D0
                bhi     Offset_0x011BE8
                bsr     Add_To_Collision_Response_List         ; Offset_0x00A540
                bra     DisplaySprite                          ; Offset_0x011148
Offset_0x011BE8:
                move.w  Obj_Respaw_Ref(A0), D0                           ; $0048
                beq.s   Offset_0x011BF4
                move.w  D0, A2
                bclr    #$07, (A2)
Offset_0x011BF4:
                bra     DeleteObject                           ; Offset_0x011138

; ===========================================================================
; ---------------------------------------------------------------------------
; Objects Manager
; Subroutine that keeps track of any objects that need to remember their state,
; such as monitors or enemies. At this point, the object manager is missing the
; two-player functions, making it much more compact than the final.
;
; input variables:
; writes:
;  d0, d1
;  d6 = camera position
;
;  a0 = address in object placement list
;  a3 = respawn table
; ---------------------------------------------------------------------------

; Offset_0x11BF8: Load_Object_Pos:
ObjectsManager:
		moveq	#0,d0
		move.b	(Object_Pos_Routine).w,d0
		jmp	ObjectsManager_States(pc,d0.w)
; ===========================================================================
; Offset_0x11C02: Load_Object_Pos_Index:
ObjectsManager_States:
		bra.w	ObjectsManager_Init
		bra.w	ObjectsManager_Main
		rts
; ===========================================================================
; Offset_0x011C0C:
ObjectsManager_Init:
		addq.b	#4,(Object_Pos_Routine).w
		lea	(Object_Respawn_Table).w,a0
		moveq	#0,d0
		moveq	#$7F,d1

Offset_0x011C18:
		move.l	d0,(a0)+
		dbf	d1,Offset_0x011C18

		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#1,d0
		lsr.w	#5,d0
		lea	(Objects_Layout).l,a0
		movea.l	(a0,d0.w),a0

		tst.w	(Two_Player_Flag).w
		beq.s	Offset_0x011C60
		addq.b	#4,(Object_Pos_Routine).w
		jsr	AllocateObject(pc)
		bne.s	Offset_0x011C5A
		lea	(Object_Respawn_Table).w,a3
		lea	(Object_List).l,a4
		move.w	#$800,d6

Offset_0x011C4E:
		cmp.w	(a0),d6					; is object's x position >= d6?
		bls.s	Offset_0x011C5A				; if yes, branch
		jsr	ChkLoadObj(pc)				; load object
		addq.w	#1,a3					; respawn index of next object to the right
		beq.s	Offset_0x011C4E				; continue loading objects, if the SST isn't full

Offset_0x011C5A:
		clr.w	(Camera_X_Left).w
		rts
; ---------------------------------------------------------------------------

Offset_0x011C60:
		move.l	a0,(Object_Pos_Next).w
		move.l	a0,(Object_Pos_Previous).w
		lea	(Object_Respawn_Table).w,a3		; reset a3
		move.w	(Camera_X).w,d6
		subi.w	#$80,d6					; look one chunk to the left
		bcc.s	Offset_0x011C78				; if the result was negative,
		moveq	#0,d6					; cap at zero

Offset_0x011C78:
		andi.w	#$FF80,d6				; limit to increments of $80 (width of a chunk)
		move.l	(Object_Pos_Next).w,a0			; load address of object placement list

Offset_0x011C80:
		; at the beginning of a level this gives respawn table entries to any object that is one chunk
		; behind the left edge of the screen that needs to remember its state (Monitors, Badniks, etc.)
		cmp.w	(a0),d6					; is object's x position >= d6?
		bls.s	Offset_0x011C8A				; if yes, branch
		addq.w	#6,a0					; next object
		addq.w	#1,a3					; respawn index of next object to the right
		bra.s	Offset_0x011C80
; ---------------------------------------------------------------------------

Offset_0x011C8A:
		move.l	a0,(Object_Pos_Next).w			; remember rightmost object that has been processed, so far (we still need to look forward)
		move.w	a3,(Object_Respaw_Next).w
		lea	(Object_Respawn_Table).w,a3
		move.l	(Object_Pos_Previous).w,a0		; reset a0
		subi.w	#$80,d6					; look even farther left (any object behind this is out of range)
		bcs.s	Offset_0x011CAA				; branch, if camera position would be behind level's left boundary

Offset_0x011CA0:
		; count how many objects are behind the screen that are not in range and need to remember their state
		cmp.w	(a0),d6					; is object's x position >= d6?
		bls.s	Offset_0x011CAA				; if yes, branch
		addq.w	#6,a0					; next object
		addq.w	#1,a3					; respawn index of next object to the left
		bra.s	Offset_0x011CA0
; ---------------------------------------------------------------------------

Offset_0x011CAA:
		move.l	a0,(Object_Pos_Previous).w		; remember current object from the left
		move.w	a3,(Object_Respaw_Previous).w
		move.w	#-1,(Camera_X_Current).w		; make sure ObjectsManager_GoingForward is run
		move.w	#-1,(Camera_X_Current_P2).w

; Offset_0x011CBE:
ObjectsManager_Main:
		move.w	(Camera_X).w,d1
		subi.w	#$80,d1
		andi.w	#$FF80,d1
		move.w	d1,(Camera_X_Left).w

		lea     (Object_List).l,a4
		move.w  (Camera_X).w,d6
		andi.w  #$FF80,d6
		cmp.w   (Camera_X_Current).w,d6			; is the X range the same as last time?
		beq     ObjectsManager_SameXRange		; if yes, branch
		bge.s   ObjectsManager_GoingForward		; if new pos is greater than old pos, branch

; ObjectsManager_GoingBackward:
		; if the player is moving back
		move.w  d6,(Camera_X_Current).w			; remember current position for next time

		move.l  (Object_Pos_Previous).w,a0		; get current object from the left
		move.w  (Object_Respaw_Previous).w,a3
		subi.w  #$80,d6					; look one chunk to the left
		bcs.s   Offset_0x011D16				; branch, if camera position would be behind level's left boundary
		jsr     AllocateObject(pc)
		bne.s   Offset_0x011D16

Offset_0x011CFE:
		; load all objects left of the screen that are now in range
		cmp.w	-6(a0),d6				; is the previous object's X pos less than d6?
		bge.s	Offset_0x011D16				; if yes, branch
		subq.w	#6,a0					; get object's address
		subq.w	#1,a3					; respawn index of this object
		jsr	ChkLoadObj(pc)				; load object
		bne.s	Offset_0x011D12				; if the SST is full, branch
		subq.w	#6,a0
		bra.s	Offset_0x011CFE				; continue with previous object
; ---------------------------------------------------------------------------

Offset_0x011D12:
		; undo a few things, if the object couldn't load
		addq.w	#6,a0					; go back to last object
		addq.w	#1,a3					; since we didn't load the object, undo last change

Offset_0x011D16:
		move.l	a0,(Object_Pos_Previous).w		; remember current object from the left
		move.w	a3,(Object_Respaw_Previous).w

		move.l	(Object_Pos_Next).w,a0			; get next object from the right
		move.w	(Object_Respaw_Next).w,a3
		addi.w	#$300,d6				; look two chunks beyond the right edge of the screen

Offset_0x011D2A:
		; subtract number of objects that have been moved out of range (from the right side)
		cmp.w	-6(a0),d6				; is the previous object's X pos less than d6?
		bgt.s	Offset_0x011D36				; if yes, branch
		subq.w	#6,a0
		subq.w	#1,a3					; respawn index of next object to the right
		bra.s	Offset_0x011D2A				; continue with previous object
; ---------------------------------------------------------------------------

Offset_0x011D36:
		move.l	a0,(Object_Pos_Next).w			; remember next object from the right
		move.w	a3,(Object_Respaw_Next).w
		rts
; ---------------------------------------------------------------------------
; Offset_0x011D40:
ObjectsManager_GoingForward:
		move.w	d6,(Camera_X_Current).w

		move.l	(Object_Pos_Next).w,a0
		move.w	(Object_Respaw_Next).w,a3		; get next object from the right
		addi.w	#$280,d6				; look two chunks forward
		jsr	AllocateObject(pc)
		bne.s	Offset_0x011D62

Offset_0x011D56:
		; load all objects right of the screen that are now in range
		cmp.w	(a0),d6					; is object's x position >= d6?
		bls.s	Offset_0x011D62				; if yes, branch
		jsr	ChkLoadObj(pc)				; load object (and get address of next object)
		addq.w	#1,a3					; respawn index of next object to the right
		beq.s	Offset_0x011D56				; continue loading objects, if the SST isn't full

Offset_0x011D62:
		move.l	a0,(Object_Pos_Next).w			; remember next object from the right
		move.w	a3,(Object_Respaw_Next).w

		move.l	(Object_Pos_Previous).w,a0		; get current object from the left
		move.w	(Object_Respaw_Previous).w,a3
		subi.w	#$300,d6				; look one chunk behind the left edge of the screen
		bcs.s	Offset_0x011D82				; branch, if camera position would be behind level's left boundary

Offset_0x011D78:
		; subtract number of objects that have been moved out of range (from the left)
		cmp.w	(a0),d6					; is object's x position >= d6?
		bls.s	Offset_0x011D82				; if yes, branch
		addq.w	#6,a0
		addq.w	#1,a3					; respawn index of next object to the left
		bra.s	Offset_0x011D78				; continue with previous object
; ---------------------------------------------------------------------------

Offset_0x011D82:
		move.l	a0,(Object_Pos_Previous).w		; remember current object from the left
		move.w	a3,(Object_Respaw_Previous).w
; Offset_0x011D8A:
ObjectsManager_SameXRange:
		rts

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to check if an object needs to be loaded.
;
; input variables:
;  a0 = address in object placement list
;  a3 = object respawn table
;
; writes:
;  d0, d1, d2
;  a1 = object
; ---------------------------------------------------------------------------
; Offset_0x011D8C:
ChkLoadObj:
		bset	#7,(a3)					; mark object as loaded
		beq.s	Offset_0x011D98				; branch if it was already loaded
		addq.w	#6,a0					; next object
		moveq	#0,d1					; let the objects manager know that it can keep going
		rts
; ---------------------------------------------------------------------------

Offset_0x011D98:
		move.w	(a0)+,Obj_X(a1)
		move.w	(a0)+,d1				; there are three things stored in this word
		move.w	d1,d2					; copy for later
		andi.w	#$FFF,d1				; get y-position
		move.w	d1,Obj_Y(a1)
		rol.w	#3,d2					; adjust bits
		andi.w	#3,d2					; get render flags
		move.b	d2,Obj_Flags(A1)
		move.b	d2,Obj_Status(A1)
		move.b	(a0)+,d2
		add.w	d2,d2
		add.w	d2,d2
		move.l	(a4,d2.w),(a1)
		move.b	(a0)+,Obj_Subtype(a1)
		move.w	a3,Obj_Respaw_Ref(a1)
; Offset_0x11DC8: SingleObjectLoad_A1_D0:
AllocateObject_Immediate:
		subq.w	#1,d0
		bmi.s	Offset_0x011DD6

Offset_0x011DCC:
		lea	Obj_Size(a1),a1
		tst.l	(a1)
		dbeq	d0,Offset_0x011DCC

Offset_0x011DD6:
		rts
; End of function ObjectsManager

; ===========================================================================
; ---------------------------------------------------------------------------
; Single object loading subroutine
; Find an empty object array
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x011DD8: SingleObjectLoad:
AllocateObject:
		lea	(Obj_Dynamic_RAM).w,a1
		moveq	#Max_Dynamic_Objects,d0
		bra.s	Loop_Find_Free_Ram
; End of function AllocateObject

; ===========================================================================
; ---------------------------------------------------------------------------
; Single object loading subroutine
; Find an empty object array AFTER the current one in the table
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x011DE0: SingleObjectLoad_A0:
AllocateObjectAfterCurrent:
		move.l	a0,a1
		move.w	#Obj_Dynamic_RAM_End,d0
		sub.w	a0,d0
		lsr.w	#6,d0					; divide by $40
		move.b	Sprite_LookupTable(pc,d0.w),d0		; load the right number of objects from table
		bmi.s	Exit_SingleObjectLoad			; if negative, we have failed!
; Offset_0x011DF0:
Loop_Find_Free_Ram:
		lea	Obj_Size(a1),a1				; load obj address
		tst.l	(a1)					; is object RAM slot empty?
		dbeq	d0,Loop_Find_Free_Ram			; if yes, branch
; Offset_0x011DFA:
Exit_SingleObjectLoad:
		rts
; End of function AllocateObjectAfterCurrent

; ===========================================================================
; What this does is setup the right loop counter for the SST, since it is
; $4A bytes in this game rather than $40, meaning that just using bit-shifting
; will not suffice for properly setting up the object table
; Offset_0x011DFC: Sprite_Table_2:
Sprite_LookupTable:
.a		=	Obj_Dynamic_RAM
.b		=	Obj_Dynamic_RAM_End
.c		=	.b					; begin from bottom of array and decrease backwards
		; this is bugged; it should actually round *up*; as a result,
		; the first object slot might not get an entry
		rept	(.b-.a)/$40				; repeat for all slots, minus exception
.c		=	.c-$40					; address for previous $40 (also skip last part)
		dc.b	(.b-.c-1)/Obj_Size-1			; write possible slots according to object_size division + hack + dbf hack
		endr
		even

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to load level boundaries and start locations
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x011E64:
LevelSizeLoad:
		clr.b	(Rasters_Flag).w
		clr.b	(Tmp_EE08).w
		clr.b	(Sonic_Scroll_Lock_Flag).w
		clr.b	(Miles_Scroll_Lock_Flag).w
		clr.b	(Fast_Vertical_Scroll_Flag).w
		moveq	#0,d0
		move.b	d0,(Dynamic_Resize_Routine).w
		move.w	d0,(PalCycle_Done_Flag).w
		move.w	d0,(VBlank_Subroutine).w
		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#1,d0
		lsr.w	#4,d0
		lea	Level_Size_Array(pc,d0.w),a0
		move.l	(a0)+,d0
		move.l	d0,(Sonic_Level_Limits_Min_X).w
		move.l	d0,(Level_Limits_Min_X).w
		move.l	d0,(Miles_Level_Limits_Min_X).w
		move.l	(a0)+,d0
		move.l	d0,(Sonic_Level_Limits_Min_Y).w
		move.l	d0,(Level_Limits_Min_Y).w
		move.l	d0,(Miles_Level_Limits_Min_Y).w
		move.w	#$60,(Distance_From_Top).w
		move.w	#$60,(Distance_From_Top_P2).w
		move.w	#-1,(Screen_Wrap_X).w
		move.w	#-1,(Screen_Wrap_Y).w
		bra.w	LevelSize_CheckStarPost
;-------------------------------------------------------------------------------
Level_Size_Array:                                              ; Offset_0x011ECA
                dc.l    $00006000, $00000390, $00004640, $000004F0 ; AIz
                dc.l    $00006000, $00001000, $00006000, $00001000 ; Hz
                dc.l    $00006000, $FF001000, $00006000, $00001000 ; MGz
                dc.l    $00006000, $00000B20, $00006000, $00001000 ; CNz
                dc.l    $00006000, $00001000, $00006000, $00001000 ; FBz
                dc.l    $00007000, $FF000800, $00007000, $00000B20 ; Iz
                dc.l    $00006000, $00001000, $00006000, $00001000 ; LBz
                dc.l    $00006000, $00001000, $00006000, $00001000 ; MVz
                dc.l    $00006000, $00001000, $00006000, $00001000 ; Sz
                dc.l    $00006000, $00001000, $00006000, $00001000 ; LRz
                dc.l    $00006000, $00001000, $00006000, $00001000 ; SSz
                dc.l    $00006000, $00001000, $00006000, $00001000 ; DEz
                dc.l    $00006000, $00001000, $00006000, $00001000 ; TDz
                dc.l    $00006000, $00001000, $00006000, $00001000 ; End Seq
                dc.l    $000012C0, $01000190, $000012C0, $01000190 ; ALz
                dc.l    $000012C0, $02000390, $000012C0, $02000390 ; BPz
                dc.l    $000012C0, $01000190, $000012C0, $01000190 ; DPz
                dc.l    $000012C0, $FF001000, $000012C0, $00000090 ; CGz
                dc.l    $000012C0, $01000190, $000012C0, $01000190 ; EMz
                dc.l    $00600060, $00000240, $00600060, $00000240 ; GM BS
                dc.l    $00006000, $00001000, $00006000, $00001000 ; GS BS
                dc.l    $00006000, $00001000, $00006000, $00001000 ; SM BS
                dc.l    $00006000, $00001000, $00006000, $00001000 ; LRz Boss / HPz 
                dc.l    $00006000, $00001000, $00006000, $00001000 ; DEz Boss / HPz Portal
; ===========================================================================
; Offset_0x01204A:
LevelSize_CheckStarPost:
		tst.b	(Saved_Level_Flag).w			; had we hit a checkpoint?
		beq.s	LevelSize_SpawnPlayer			; if not, branch
		jsr	(Star_Post_Load_Info).l
		move.w	(Obj_Player_One+Obj_X).w,d1
		move.w	(Obj_Player_One+Obj_Y).w,d0
		bra.s	Offset_0x012098
; ===========================================================================
; Offset_0x012060:
LevelSize_SpawnPlayer:
		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#1,d0
		lsr.w	#5,d0
		lea	(Player_Start_Position_Array).l,a1
		lea	(A1,d0.w),a1
		moveq	#0,d1
		move.w	(a1)+,d1
		move.w	d1,(Obj_Player_One+Obj_X).w
		moveq	#0,d0
		move.w	(a1),d0
		move.w	d0,(Obj_Player_One+Obj_Y).w
		tst.w	(Auto_Control_Player_Flag).w		; is this the AIZ intro?
		beq.s	Offset_0x012098				; if not, branch
		move.w	#$40,d1
		move.w	d1,(Obj_Player_One+Obj_X).w
		move.w	#$420,d0
		move.w	d0,(Obj_Player_One+Obj_Y).w

Offset_0x012098:
		subi.w	#$A0,d1
		bcc.s	Offset_0x0120A0
		moveq	#0,d1

Offset_0x0120A0:
		tst.w	(Two_Player_Flag).w			; are we in Competition Mode?
		bne.s	Offset_0x0120B0				; if yes, branch
		move.w	(Sonic_Level_Limits_Max_X).w,d2
		cmp.w	d2,d1
		bcs.s	Offset_0x0120B0
		move.w	d2,d1

Offset_0x0120B0:
		move.w	d1,(Camera_X).w
		move.w	d1,(Camera_X_P2).w
		subi.w	#$60,d0
		bcc.s	Offset_0x0120C0
		moveq	#0,d0

Offset_0x0120C0:
		cmp.w	(Sonic_Level_Limits_Max_Y).w,d0
		blt.s	Offset_0x0120CA
		move.w	(Sonic_Level_Limits_Max_Y).w,d0

Offset_0x0120CA:
		move.w	d0,(Camera_Y).w
		move.w	d0,(Camera_Y_P2).w
		rts
; End of function LevelSizeLoad

; ---------------------------------------------------------------------------
; Subroutine to raster scroll the background based on character movement
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x0120D4: Background_Scroll_Speed:
DeformBgLayer:
		tst.b	(Rasters_Flag).w
		beq.s	Offset_0x0120DC
		rts

Offset_0x0120DC:
		clr.w	(Camera_RAM).w
		clr.w	(Vertical_Scrolling).w
		clr.w	(Horizontal_Scrolling_P2).w
		clr.w	(Vertical_Scrolling_P2).w
		tst.w	(Two_Player_Flag).w
		bne.w	Offset_0x01214A
		tst.b	(Sonic_Scroll_Lock_Flag).w
		bne.s	Offset_0x012146
		lea	(Obj_Player_One).w,a0
		lea	(Camera_X).w,a1
		lea	(Sonic_Level_Limits_Min_X).w,a2
		lea	(Camera_RAM).w,a4
		lea	(Camera_X_Scroll_Delay).w,a5
		lea	(Position_Table_Data).w,a6
		cmpi.w	#2,(Player_Selected_Flag).w
		bne.s	Offset_0x012122
		lea	(Camera_X_Scroll_Delay_2P).w,a5
		lea	(Position_Table_Data_P2).w,a6

Offset_0x012122:
		bsr.w	Scroll_Horizontal
		lea	(Camera_Y).w,a1
		lea	(Sonic_Level_Limits_Min_X).w,a2
		lea	(Vertical_Scrolling).w,a4
		move.w	(Distance_From_Top).w,d3
		cmpi.w	#2,(Player_Selected_Flag).w
		bne.s	Offset_0x012142
		move.w	(Distance_From_Top_P2).w,d3

Offset_0x012142:
		bsr.w	Scroll_Vertical

Offset_0x012146:
		bra.w	RunDynamicLevelEvents
; ---------------------------------------------------------------------------

Offset_0x01214A:
		tst.b   (Sonic_Scroll_Lock_Flag).w
		bne.s   Offset_0x01219C
		lea     (Obj_Player_One).w,a0
		lea     (Camera_X).w,a1
		lea     (Sonic_Level_Limits_Min_X).w,a2
		lea     (Camera_RAM).w,a4
		lea     (Camera_X_Scroll_Delay).w,a5
		lea     (Position_Table_Data).w,a6
		cmpi.w  #2,(Player_Selected_Flag).w
		bne.s   Offset_0x012178
		lea     (Camera_X_Scroll_Delay_2P).w,a5
		lea     (Position_Table_Data_P2).w,a6

Offset_0x012178:
		bsr.w	Offset_0x012366
		lea	(Camera_Y).w,a1
		lea	(Sonic_Level_Limits_Min_X).w,a2
		lea	(Vertical_Scrolling).w,a4
		move.w	(Distance_From_Top).w,d3
		cmpi.w	#2,(Player_Selected_Flag).w
		bne.s	Offset_0x012198
		move.w	(Distance_From_Top_P2).w,d3

Offset_0x012198:
		bsr.w	Scroll_Vertical

Offset_0x01219C:
		tst.b	(Miles_Scroll_Lock_Flag).w
		bne.s	Offset_0x0121D2
		lea	(Obj_Player_Two).w,a0
		lea	(Camera_X_P2).w,a1
		lea	(Miles_Level_Limits_Min_X).w,a2
		lea	(Horizontal_Scrolling_P2).w,a4
		lea	(Camera_X_Scroll_Delay_2P).w,a5
		lea	(Position_Table_Data_P2).w,a6
		bsr.w	Offset_0x012366
		lea	(Camera_Y_P2).w,a1
		lea	(Miles_Level_Limits_Min_X).w,a2
		lea	(Vertical_Scrolling_P2).w,a4
		move.w	(Distance_From_Top_P2).w,d3
		bsr.w	Scroll_Vertical

Offset_0x0121D2:
		bra.w	RunDynamicLevelEvents
; End of function DeformBgLayer

;-------------------------------------------------------------------------------                
Scroll_Horizontal:                                             ; Offset_0x0121D6
                move.w  (A1), D4
                tst.b   (S2_Teleport_Flag).w                         ; $FFFFF623
                bne.s   Offset_0x012214
                move.w  (A5), D1
                beq.s   Offset_0x012200
                subi.w  #$0100, D1
                move.w  D1, (A5)
                moveq   #$00, D1
                move.b  (A5), D1
                lsl.b   #$02, D1
                addq.b  #$04, D1
                move.w  $0002(A5), D0
                sub.b   D1, D0
                move.w  $00(A6, D0), D0
                andi.w  #$7FFF, D0
                bra.s   Offset_0x012204
Offset_0x012200:
                move.w  $0010(A0), D0
Offset_0x012204:
                sub.w   (A1), D0
                subi.w  #$0090, D0
                blt.s   Offset_0x012216
                subi.w  #$0010, D0
                bge.s   Offset_0x01222A
                clr.w   (A4)
Offset_0x012214:
                rts
;-------------------------------------------------------------------------------                
Offset_0x012216:
                cmpi.w  #$FFE8, D0
                bgt.s   Offset_0x012220
                move.w  #$FFE8, D0
Offset_0x012220:
                add.w   (A1), D0
                cmp.w   (A2), D0
                bgt.s   Offset_0x012240
                move.w  (A2), D0
                bra.s   Offset_0x012240
;-------------------------------------------------------------------------------                
Offset_0x01222A:
                cmpi.w  #$0018, D0
                bcs.s   Offset_0x012234
                move.w  #$0018, D0
Offset_0x012234:
                add.w   (A1), D0
                cmp.w   $0002(A2), D0
                blt.s   Offset_0x012240
                move.w  $0002(A2), D0
Offset_0x012240:
                move.w  D0, D1
                sub.w   (A1), D1
                asl.w   #$08, D1
                move.w  D0, (A1)
                move.w  D1, (A4)
                rts
;-------------------------------------------------------------------------------                
Scroll_Vertical:                                               ; Offset_0x01224C
                moveq   #$00, D1
                move.w  Obj_Y(A0), D0                                    ; $0014
                sub.w   (A1), D0
                cmpi.w  #$FF00, (Sonic_Level_Limits_Min_Y).w         ; $FFFFEE18
                bne.s   Offset_0x012260
                and.w   (Screen_Wrap_Y).w, D0                        ; $FFFFEEAA
Offset_0x012260:
                btst    #$02, Obj_Status(A0)                             ; $002A
                beq.s   Offset_0x01226A
                subq.w  #$05, D0
Offset_0x01226A:
                move.w  D3, D1
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq.s   Offset_0x012274
                lsr.w   #$01, D1
Offset_0x012274:
                btst    #$01, Obj_Status(A0)                             ; $002A
                beq.s   Offset_0x012292
                addi.w  #$0020, D0
                sub.w   D1, D0
                bcs.s   Offset_0x0122DE
                subi.w  #$0040, D0
                bcc.s   Offset_0x0122DE
                tst.b   (Level_Limits_Y_Changing).w                  ; $FFFFEE32
                bne.s   Offset_0x0122F0
                bra.s   Offset_0x01229C
Offset_0x012292:
                sub.w   D1, D0
                bne.s   Offset_0x0122A0
                tst.b   (Level_Limits_Y_Changing).w                  ; $FFFFEE32
                bne.s   Offset_0x0122F0
Offset_0x01229C:
                clr.w   (A4)
                rts
Offset_0x0122A0:
                cmpi.w  #$0060, D3
                bne.s   Offset_0x0122CC
                tst.b   (Fast_Vertical_Scroll_Flag).w                ; $FFFFEE39
                bne.s   Offset_0x0122DE
                move.w  Obj_Inertia(A0), D1                              ; $001C
                bpl.s   Offset_0x0122B4
                neg.w   D1
Offset_0x0122B4:
                cmpi.w  #$0800, D1
                bcc.s   Offset_0x0122DE
                move.w  #$0600, D1
                cmpi.w  #$0006, D0
                bgt.s   Offset_0x012328
                cmpi.w  #$FFFA, D0
                blt.s   Offset_0x012306
                bra.s   Offset_0x0122F6
Offset_0x0122CC:
                move.w  #$0200, D1
                cmpi.w  #$0002, D0
                bgt.s   Offset_0x012328
                cmpi.w  #$FFFE, D0
                blt.s   Offset_0x012306
                bra.s   Offset_0x0122F6
Offset_0x0122DE:
                move.w  #$1800, D1
                cmpi.w  #$0018, D0
                bgt.s   Offset_0x012328
                cmpi.w  #$FFE8, D0
                blt.s   Offset_0x012306
                bra.s   Offset_0x0122F6
Offset_0x0122F0:
                moveq   #$00, D0
                move.b  D0, (Level_Limits_Y_Changing).w              ; $FFFFEE32
Offset_0x0122F6:
                moveq   #$00, D1
                move.w  D0, D1
                add.w   (A1), D1
                tst.w   D0
                bpl     Offset_0x012330
                bra     Offset_0x012310
Offset_0x012306:
                neg.w   D1
                ext.l   D1
                asl.l   #$08, D1
                add.l   (A1), D1
                swap.w  D1
Offset_0x012310:
                cmp.w   $0004(A2), D1
                bgt.s   Offset_0x012348
                cmpi.w  #$FF00, D1
                bgt.s   Offset_0x012322
                and.w   (Screen_Wrap_Y).w, D1                        ; $FFFFEEAA
                bra.s   Offset_0x012348
Offset_0x012322:
                move.w  $0004(A2), D1
                bra.s   Offset_0x012348
Offset_0x012328:
                ext.l   D1
                asl.l   #$08, D1
                add.l   (A1), D1
                swap.w  D1
Offset_0x012330:
                cmp.w   $0006(A2), D1
                blt.s   Offset_0x012348
                move.w  (Screen_Wrap_Y).w, D3                        ; $FFFFEEAA
                addq.w  #$01, D3
                sub.w   D3, D1
                bcs.s   Offset_0x012344
                sub.w   D3, (A1)
                bra.s   Offset_0x012348
Offset_0x012344:
                move.w  $0006(A2), D1
Offset_0x012348:
                move.w  (A1), D4
                swap.w  D1
                move.l  D1, D3
                sub.l   (A1), D3
                ror.l   #$08, D3
                move.w  D3, (A4)
                move.l  D1, (A1)
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq.s   Offset_0x012364
                swap.w  D1
                and.w   (Screen_Wrap_Y).w, D1                        ; $FFFFEEAA
                move.w  D1, (A1)
Offset_0x012364:
                rts
Offset_0x012366:
                move.w  (A1), D4
                tst.b   (S2_Teleport_Flag).w                         ; $FFFFF623
                bne.s   Offset_0x0123AA
                move.w  (A5), D1
                beq.s   Offset_0x012390
                subi.w  #$0100, D1
                move.w  D1, (A5)
                moveq   #$00, D1
                move.b  (A5), D1
                lsl.b   #$02, D1
                addq.b  #$04, D1
                move.w  $0002(A5), D0
                sub.b   D1, D0
                move.w  $00(A6, D0), D0
                andi.w  #$7FFF, D0
                bra.s   Offset_0x012394
Offset_0x012390:
                move.w  $0010(A0), D0
Offset_0x012394:
                move.w  (Screen_Wrap_X).w, D2                        ; $FFFFEEA8
                sub.w   (A1), D0
                and.w   D2, D0
                subi.w  #$0090, D0
                blt.s   Offset_0x0123AC
                subi.w  #$0010, D0
                bge.s   Offset_0x0123BA
                clr.w   (A4)
Offset_0x0123AA:
                rts
Offset_0x0123AC:
                cmpi.w  #$FFF0, D0
                bgt.s   Offset_0x0123B6
                move.w  #$FFF0, D0
Offset_0x0123B6:
                add.w   (A1), D0
                bra.s   Offset_0x0123C6
Offset_0x0123BA:
                cmpi.w  #$0010, D0
                bcs.s   Offset_0x0123C4
                move.w  #$0010, D0
Offset_0x0123C4:
                add.w   (A1), D0
Offset_0x0123C6:
                move.w  D0, D1
                sub.w   (A1), D1
                asl.w   #$08, D1
                and.w   D2, D0
                addi.w  #$0400, D0
                move.w  D0, (A1)
                move.w  D1, (A4)
                rts  
;-------------------------------------------------------------------------------
; Rotina para rolar o tela durante o jogo tamb�m conhecido como rasteriza��o ou
; <<<-   rolagem por software
;-------------------------------------------------------------------------------

; Offset_0x123D8: Load_Tiles_From_Start_Ptr:
JmpTo_Setup_TileDrawing:
		jmp	(Setup_TileDrawing).l

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to load level blocks, chunks, and palette into RAM
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x0123DE: Main_Level_Load_16_128_Blocks:
LoadZoneBlockMaps:
		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#1,d0
		lsr.w	#4,d0
		andi.w	#$1F8,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		lea	(TilesMainTable).l,a2
		lea	(a2,d0.w),a2
		move.l	a2,-(sp)
		addq.w	#8,a2
		move.l	(a2)+,d0
		andi.l	#$FFFFFF,d0
		move.l	d0,d7
		move.l	d0,a0
		lea	(Blocks_Mem_Address).w,a1
		jsr	(KosinskiDec).l
		move.l	(a2)+,d0
		andi.l	#$FFFFFF,d0
		cmp.l	d0,d7
		beq.s	Offset_0x012428
		move.l	d0,a0
		jsr	(KosinskiDec).l

Offset_0x012428:
		move.l	(a2)+,d0
		andi.l	#$FFFFFF,d0
		move.l	d0,d7
		move.l	d0,a0
		lea	(M68K_RAM_Start).l,a1
		jsr	(KosinskiDec).l
		move.l	(a2)+,d0
		andi.l	#$FFFFFF,d0
		cmp.l	d0,d7
		beq.s	Offset_0x012454
		move.l	d0,a0
		jsr	(KosinskiDec).l

Offset_0x012454:
		bsr.w	LoadLevelLayout
		move.l	(sp)+,a2
		move.b	(a2),d1
		addq.w	#4,a2
		moveq	#0,d0
		move.b	(a2),d0
		beq.s	Load_Level_Palette
		cmp.b	d0,d1
		beq.s	Load_Level_Palette
		jsr	(LoadPLC).l
; Offset_0x01246E:
Load_Level_Palette:
		addq.w	#4,a2
		moveq	#0,d0
		move.b	(a2),d0
		jsr	(PalLoad_ForFade).l
		rts
; End of function LoadZoneBlockMaps

; ---------------------------------------------------------------------------
; Subroutine to load level layout into RAM
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x01247C:
LoadLevelLayout:
		moveq	#0,d0
		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#1,d0
		lsr.w	#5,d0
		andi.w	#$FC,d0
		lea	(Level_Layout).l,a0
		move.l	(a0,d0.w),a0
		lea	(Fg_Mem_Start_Address).w,a1
		move.w	#(Level_Layout_Buffer_End>>1-Level_Layout_Buffer>>1)-1,d2

Offset_0x01249C:
		move.w	(a0)+,(a1)+
		dbf	d2,Offset_0x01249C
		rts
; End of function LoadLevelLayout

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to run level events including camera resizing and object spawning
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x0124A4: Dyn_Screen_Boss_Loader:
RunDynamicLevelEvents:
		moveq	#0,d0
		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#1,d0
		lsr.w	#6,d0
		; This clamps the level index to prevent levels from accessing random data, but does it
		; way too hard, meaning stages beyond Balloon Park are able to execute early-stage events.
		andi.w	#$3E,d0       
		move.w	DynResize_Index(pc,d0.w),d0
		jsr	DynResize_Index(pc,d0.w)
		moveq	#2,d1
		move.w	(Level_Limits_Max_Y).w,d0
		sub.w	(Sonic_Level_Limits_Max_Y).w,d0
		beq.s	Offset_0x0124E8
		bcc.s	Offset_0x0124EA
		neg.w	d1
		move.w	(Camera_Y).w,d0
		cmp.w	(Level_Limits_Max_Y).w,d0
		bls.s	Offset_0x0124DE
		move.w	d0,(Sonic_Level_Limits_Max_Y).w 
		andi.w	#$FFFE,(Sonic_Level_Limits_Max_Y).w

Offset_0x0124DE:
		add.w	d1,(Sonic_Level_Limits_Max_Y).w
		move.b	#1,(Level_Limits_Y_Changing).w

Offset_0x0124E8:
		rts
; ---------------------------------------------------------------------------

Offset_0x0124EA:
		move.w	(Camera_Y).w,d0
		addi.w	#8,d0
		cmp.w	(Sonic_Level_Limits_Max_Y).w,d0
		bcs.s	Offset_0x012504
		btst	#1,(Obj_Player_One+Obj_Status).w
		beq.s	Offset_0x012504
		add.w	d1,d1
		add.w	d1,d1

Offset_0x012504:
		add.w	d1,(Sonic_Level_Limits_Max_Y).w
		move.b	#1,(Level_Limits_Y_Changing).w
		rts
; End of function RunDynamicLevelEvents

; ===========================================================================
DynResize_Index:                                               ; Offset_0x012510
                dc.w    DynResize_AIz_1-DynResize_Index        ; Offset_0x012570
                dc.w    DynResize_AIz_2-DynResize_Index        ; Offset_0x012696
                dc.w    DynResize_Hz_1-DynResize_Index         ; Offset_0x012810
                dc.w    DynResize_Hz_2-DynResize_Index         ; Offset_0x012812
                dc.w    DynResize_MGz_1-DynResize_Index        ; Offset_0x012838
                dc.w    DynResize_MGz_2-DynResize_Index        ; Offset_0x012838
                dc.w    DynResize_CNz_1-DynResize_Index        ; Offset_0x0128E6
                dc.w    DynResize_CNz_2-DynResize_Index        ; Offset_0x0128E6
                dc.w    DynResize_FBz_1-DynResize_Index        ; Offset_0x0128E6
                dc.w    DynResize_FBz_2-DynResize_Index        ; Offset_0x0128E6
                dc.w    DynResize_Iz_1-DynResize_Index         ; Offset_0x0128E8
                dc.w    DynResize_Iz_2-DynResize_Index         ; Offset_0x01292A
                dc.w    DynResize_LBz_1-DynResize_Index        ; Offset_0x01292A
                dc.w    DynResize_LBz_2-DynResize_Index        ; Offset_0x01292C
                dc.w    DynResize_MVz_1-DynResize_Index        ; Offset_0x012986
                dc.w    DynResize_MVz_2-DynResize_Index        ; Offset_0x012986
                dc.w    DynResize_Sz_1-DynResize_Index         ; Offset_0x012986
                dc.w    DynResize_Sz_2-DynResize_Index         ; Offset_0x012986
                dc.w    DynResize_LRz_1-DynResize_Index        ; Offset_0x012986
                dc.w    DynResize_LRz_2-DynResize_Index        ; Offset_0x012986
                dc.w    DynResize_SSz_1-DynResize_Index        ; Offset_0x012986
                dc.w    DynResize_SSz_2-DynResize_Index        ; Offset_0x012986
                dc.w    DynResize_DEz_1-DynResize_Index        ; Offset_0x012986
                dc.w    DynResize_DEz_2-DynResize_Index        ; Offset_0x012986
                dc.w    DynResize_TDz_1-DynResize_Index        ; Offset_0x012986
                dc.w    DynResize_TDz_2-DynResize_Index        ; Offset_0x012986
                dc.w    DynResize_End_Seq_1-DynResize_Index    ; Offset_0x012986
                dc.w    DynResize_End_Seq_2-DynResize_Index    ; Offset_0x012986
                dc.w    DynResize_ALz_1-DynResize_Index        ; Offset_0x012986
                dc.w    DynResize_ALz_2-DynResize_Index        ; Offset_0x012986
                dc.w    DynResize_BPz_1-DynResize_Index        ; Offset_0x012986
                dc.w    DynResize_BPz_2-DynResize_Index        ; Offset_0x012986	; $3E
                dc.w    DynResize_DPz_1-DynResize_Index        ; Offset_0x012986
                dc.w    DynResize_DPz_2-DynResize_Index        ; Offset_0x012986
                dc.w    DynResize_CGz_1-DynResize_Index        ; Offset_0x012986
                dc.w    DynResize_CGz_2-DynResize_Index        ; Offset_0x012986
                dc.w    DynResize_EMz_1-DynResize_Index        ; Offset_0x012986
                dc.w    DynResize_EMz_2-DynResize_Index        ; Offset_0x012986
                dc.w    DynResize_BS_GM_1-DynResize_Index      ; Offset_0x012986
                dc.w    DynResize_BS_GM_2-DynResize_Index      ; Offset_0x012986
                dc.w    DynResize_BS_GS_1-DynResize_Index      ; Offset_0x012986
                dc.w    DynResize_BS_GS_2-DynResize_Index      ; Offset_0x012986
                dc.w    DynResize_BS_SM_1-DynResize_Index      ; Offset_0x012986
                dc.w    DynResize_BS_SM_2-DynResize_Index      ; Offset_0x012986
                dc.w    DynResize_LRz_Boss-DynResize_Index     ; Offset_0x012986
                dc.w    DynResize_HPz-DynResize_Index          ; Offset_0x012986
                dc.w    DynResize_DEz_Boss-DynResize_Index     ; Offset_0x012986
                dc.w    DynResize_HPz_Portal-DynResize_Index   ; Offset_0x012986 
;===============================================================================    
DynResize_AIz_1:                                               ; Offset_0x012570
                moveq   #$00, D0
                move.b  (Dynamic_Resize_Routine).w, D0               ; $FFFFEE33
                move.w  Offset_0x01257E(PC, D0), D0
                jmp     Offset_0x01257E(PC, D0)
;-------------------------------------------------------------------------------
Offset_0x01257E:
                dc.w    Offset_0x012588-Offset_0x01257E
                dc.w    Offset_0x0125DA-Offset_0x01257E
                dc.w    Offset_0x012614-Offset_0x01257E
                dc.w    Offset_0x01264E-Offset_0x01257E
                dc.w    Offset_0x01267C-Offset_0x01257E               
;-------------------------------------------------------------------------------
Offset_0x012588:
                move.b  #$00, (Palette_Cycle_Flag).w                 ; $FFFFF72E
                cmpi.w  #$1000, (Camera_X).w                         ; $FFFFEE78
                bcs.s   Offset_0x0125D8
                move.b  #$01, (Palette_Cycle_Flag).w                 ; $FFFFF72E
                cmpi.w  #$1300, (Camera_X).w                         ; $FFFFEE78
                bcs.s   Offset_0x0125D8
                jsr     (AllocateObject)                     ; Offset_0x011DD8
                bne.s   Offset_0x0125BE
                move.l  #Obj_Knuckles, (A1)                    ; Offset_0x018EA0
                move.w  #$1450, Obj_X(A1)                                ; $0010
                move.w  #$0419, Obj_Y(A1)                                ; $0014
Offset_0x0125BE:
                moveq   #$05, D0
                jsr     (PalLoad_Now)                             ; Offset_0x002FBA
                move.w  #$1300, (Sonic_Level_Limits_Min_X).w         ; $FFFFEE14
                moveq   #$0B, D0
                jsr     (LoadPLC)                              ; Offset_0x0014D0
                addq.b  #$02, (Dynamic_Resize_Routine).w             ; $FFFFEE33
Offset_0x0125D8:
                rts                                               
;-------------------------------------------------------------------------------                
Offset_0x0125DA:
                cmpi.w  #$1400, (Camera_X).w                         ; $FFFFEE78
                bcs.s   Offset_0x012612
                lea     (Angel_Island_1_Blocks_3), A1          ; Offset_0x13C680
                lea     (Blocks_Mem_Address+$0268).w, A2             ; $FFFF9268
                jsr     (Queue_Kos)          ; Offset_0x0019AE
                lea     (Angel_Island_1_Tiles_3), A1           ; Offset_0x141584
                move.w  #$1760, D2
                jsr     (Queue_Kos_Module)                 ; Offset_0x0018A8
                moveq   #$2A, D0
                jsr     (PalLoad_Now)                             ; Offset_0x002FBA
                st      (Level_Events_Buffer_5).w                    ; $FFFFEEC6
                addq.b  #$02, (Dynamic_Resize_Routine).w             ; $FFFFEE33
Offset_0x012612:
                rts   
;-------------------------------------------------------------------------------                
Offset_0x012614:
                lea     (Offset_0x01267E), A1
                bsr     Resize_Max_Y_From_X                    ; Offset_0x012988          
                move.w  #$020E, (Palette_Row_2_Offset+$1E).w         ; $FFFFED5E
                cmpi.w  #$2B00, (Camera_X).w                         ; $FFFFEE78
                bcs.s   Offset_0x012632
                move.w  #$0004, (Palette_Row_2_Offset+$1E).w         ; $FFFFED5E
Offset_0x012632:
                cmpi.w  #$2D80, (Camera_X).w                         ; $FFFFEE78
                bcs.s   Offset_0x01264C
                move.w  #$0C02, (Palette_Row_2_Offset+$1E).w         ; $FFFFED5E
                moveq   #$5A, D0
                jsr     (LoadPLC)                              ; Offset_0x0014D0
                addq.b  #$02, (Dynamic_Resize_Routine).w             ; $FFFFEE33
Offset_0x01264C:
                rts 
;-------------------------------------------------------------------------------
Offset_0x01264E:
                lea     (Offset_0x01267E), A1
                bsr     Resize_Max_Y_From_X                    ; Offset_0x012988
                cmpi.w  #$2E00, (Camera_X).w                         ; $FFFFEE78
                bcs.s   Offset_0x01267A
                tst.b   (Kosinski_Modules_Left).w                    ; $FFFFFF60
                bne.s   Offset_0x01267A
                lea     (Angel_Island_1_Flames), A1            ; Offset_0x1476A6
                move.w  #$A000, D2
                jsr     (Queue_Kos_Module)                 ; Offset_0x0018A8
                addq.b  #$02, (Dynamic_Resize_Routine).w             ; $FFFFEE33
Offset_0x01267A:
                rts  
;-------------------------------------------------------------------------------
Offset_0x01267C:
                rts   
;-------------------------------------------------------------------------------  
Offset_0x01267E:
                dc.w    $8390, $1650
                dc.w    $83B0, $1B00
                dc.w    $8430, $2000
                dc.w    $84C0, $2B00
                dc.w    $83B0, $2D80
                dc.w    $82E0, $FFFF
;===============================================================================
DynResize_AIz_2:                                               ; Offset_0x012696     
                moveq   #$00, D0
                move.b  (Dynamic_Resize_Routine).w, D0               ; $FFFFEE33
                move.w  Offset_0x0126A4(PC, D0), D0
                jmp     Offset_0x0126A4(PC, D0)  
;-------------------------------------------------------------------------------
Offset_0x0126A4:
                dc.w    Offset_0x0126B6-Offset_0x0126A4
                dc.w    Offset_0x0126D0-Offset_0x0126A4
                dc.w    Offset_0x012750-Offset_0x0126A4
                dc.w    Offset_0x01276A-Offset_0x0126A4
                dc.w    Offset_0x0127BA-Offset_0x0126A4
                dc.w    Offset_0x0127D4-Offset_0x0126A4
                dc.w    Offset_0x0127EE-Offset_0x0126A4
                dc.w    Offset_0x012800-Offset_0x0126A4
                dc.w    Offset_0x01280E-Offset_0x0126A4 
;-------------------------------------------------------------------------------
Offset_0x0126B6:
                cmpi.w  #$0380, (Camera_X).w                         ; $FFFFEE78
                bcs.s   Offset_0x0126CE
                move.w  #$04F0, D0
                move.w  D0, (Sonic_Level_Limits_Max_Y).w             ; $FFFFEE1A
                move.w  D0, (Level_Limits_Max_Y).w                   ; $FFFFEE12
                addq.b  #$02, (Dynamic_Resize_Routine).w             ; $FFFFEE33
Offset_0x0126CE:
                rts   
;-------------------------------------------------------------------------------
Offset_0x0126D0:
                cmpi.w  #$0300, (Camera_Y).w                         ; $FFFFEE7C
                bcc.s   Offset_0x012724
                move.w  #$04F0, D0
                cmpi.w  #$0ED0, (Camera_X).w                         ; $FFFFEE78
                bcs.s   Offset_0x0126E8
                move.w  #$02B8, D0
Offset_0x0126E8:
                move.w  D0, (Sonic_Level_Limits_Max_Y).w             ; $FFFFEE1A
                move.w  D0, (Level_Limits_Max_Y).w                   ; $FFFFEE12
                cmpi.w  #$0F50, (Camera_X).w                         ; $FFFFEE78
                bcs.s   Offset_0x012722
                move.w  #$0F50, (Sonic_Level_Limits_Min_X).w         ; $FFFFEE14
                tst.w   (Debug_Mode_Flag_Index).w                    ; $FFFFFE08
                bne.s   Offset_0x01271E
                jsr     (AllocateObject)                     ; Offset_0x011DD8
                bne.s   Offset_0x01271E
                move.l  #Obj_0xAC_AIz_Fire_Breath, (A1)        ; Offset_0x036AB4
                move.w  #$11F0, Obj_X(A1)                                ; $0010
                move.w  #$0289, Obj_Y(A1)                                ; $0014
Offset_0x01271E:
                addq.b  #$02, (Dynamic_Resize_Routine).w             ; $FFFFEE33
Offset_0x012722:
                rts
Offset_0x012724:
                move.w  #$04F0, D0
                cmpi.w  #$0ED0, (Camera_X).w                         ; $FFFFEE78
                bcs.s   Offset_0x012734
                move.w  #$0450, D0
Offset_0x012734:
                cmpi.w  #$11A0, (Camera_X).w                         ; $FFFFEE78
                bcs.s   Offset_0x012746
                move.w  #$0820, D0
                move.w  D0, (Level_Limits_Max_Y).w                   ; $FFFFEE12
                rts
Offset_0x012746:
                move.w  D0, (Sonic_Level_Limits_Max_Y).w             ; $FFFFEE1A
                move.w  D0, (Level_Limits_Max_Y).w                   ; $FFFFEE12
                rts       
;-------------------------------------------------------------------------------
Offset_0x012750:
                cmpi.w  #$1500, (Camera_X).w                         ; $FFFFEE78
                bcs.s   Offset_0x012768
                move.w  #$0630, (Sonic_Level_Limits_Max_Y).w         ; $FFFFEE1A
                move.w  #$0630, (Level_Limits_Max_Y).w               ; $FFFFEE12
                addq.b  #$02, (Dynamic_Resize_Routine).w             ; $FFFFEE33
Offset_0x012768:
                rts  
;-------------------------------------------------------------------------------
Offset_0x01276A:
                cmpi.w  #$3C00, (Camera_X).w                         ; $FFFFEE78
                bcs.s   Offset_0x0127B8
                tst.b   (Kosinski_Modules_Left).w                    ; $FFFFFF60
                bne.s   Offset_0x0127B8
                lea     (Angel_Island_2_Blocks_3), A1          ; Offset_0x149448
                lea     (Blocks_Mem_Address+$0AA0).w, A2             ; $FFFF9AA0
                jsr     (Queue_Kos)          ; Offset_0x0019AE
                lea     (Angel_Island_2_Tiles_3), A1           ; Offset_0x14CA3C
                move.w  #$16A0, D2                       
                jsr     (Queue_Kos_Module)                 ; Offset_0x0018A8
                lea     (Angel_Island_2_Boss_Ship), A1         ; Offset_0x1397B0
                move.w  #$A000, D2
                jsr     (Queue_Kos_Module)                 ; Offset_0x0018A8
                moveq   #$30, D0
                jsr     (PalLoad_Now)                             ; Offset_0x002FBA
                st      (Level_Events_Buffer_5).w                    ; $FFFFEEC6
                addq.b  #$02, (Dynamic_Resize_Routine).w             ; $FFFFEE33
Offset_0x0127B8:
                rts  
;-------------------------------------------------------------------------------
Offset_0x0127BA:
                cmpi.w  #$3F00, (Camera_X).w                         ; $FFFFEE78
                bcs.s   Offset_0x0127D2
                move.w  #$015A, D0
                move.w  D0, (Sonic_Level_Limits_Min_Y).w             ; $FFFFEE18
                move.w  D0, (Level_Limits_Min_Y).w                   ; $FFFFEE10
                addq.b  #$02, (Dynamic_Resize_Routine).w             ; $FFFFEE33
Offset_0x0127D2:
                rts   
;-------------------------------------------------------------------------------
Offset_0x0127D4:
                cmpi.w  #$4000, (Camera_X).w                         ; $FFFFEE78
                bcs.s   Offset_0x0127EC
                move.w  #$015A, D0
                move.w  D0, (Sonic_Level_Limits_Max_Y).w             ; $FFFFEE1A
                move.w  D0, (Level_Limits_Max_Y).w                   ; $FFFFEE12
                addq.b  #$02, (Dynamic_Resize_Routine).w             ; $FFFFEE33
Offset_0x0127EC:
                rts  
;-------------------------------------------------------------------------------
Offset_0x0127EE:
                cmpi.w  #$4160, (Camera_X).w                         ; $FFFFEE78
                bcs.s   Offset_0x0127FE
                st      (Foreground_Events_Y_Counter).w              ; $FFFFEEC4
                addq.b  #$02, (Dynamic_Resize_Routine).w             ; $FFFFEE33
Offset_0x0127FE:
                rts     
;-------------------------------------------------------------------------------
Offset_0x012800:
                cmpi.w  #$4780, (Camera_X).w                         ; $FFFFEE78
                bcs.s   Offset_0x01280C
                addq.b  #$02, (Dynamic_Resize_Routine).w             ; $FFFFEE33
Offset_0x01280C:
                rts 
;-------------------------------------------------------------------------------
Offset_0x01280E:
                rts
;===============================================================================
DynResize_Hz_1:                                                ; Offset_0x012810
                rts                                                                
;===============================================================================
DynResize_Hz_2:                                                ; Offset_0x012812
                moveq   #$00, D0
                move.b  (Dynamic_Resize_Routine).w, D0               ; $FFFFEE33
                move.w  Offset_0x012820(PC, D0), D0
                jmp     Offset_0x012820(PC, D0)     
;-------------------------------------------------------------------------------
Offset_0x012820:
                dc.w    Offset_0x012824-Offset_0x012820
                dc.w    Offset_0x012836-Offset_0x012820   
;-------------------------------------------------------------------------------  
Offset_0x012824:
                cmpi.w  #$0C00, (Camera_X).w                         ; $FFFFEE78
                bcs.s   Offset_0x012834
                st      (Level_Events_Buffer_5).w                    ; $FFFFEEC6
                addq.b  #$02, (Dynamic_Resize_Routine).w             ; $FFFFEE33
Offset_0x012834:
                rts 
;-------------------------------------------------------------------------------  
Offset_0x012836:
                rts
;===============================================================================
DynResize_MGz_1:                                               ; Offset_0x012838
DynResize_MGz_2:                                               ; Offset_0x012838  
                moveq   #$00, D0
                move.b  (Dynamic_Resize_Routine).w, D0               ; $FFFFEE33
                move.w  Offset_0x012846(PC, D0), D0
                jmp     Offset_0x012846(PC, D0)  
;-------------------------------------------------------------------------------
Offset_0x012846:
                dc.w    Offset_0x01284C-Offset_0x012846
                dc.w    Offset_0x01288A-Offset_0x012846
                dc.w    Offset_0x0128E4-Offset_0x012846  
;-------------------------------------------------------------------------------
Offset_0x01284C:
                move.w  (Camera_Y).w, D0                             ; $FFFFEE7C
                cmpi.w  #$0600, D0
                bcs.s   Offset_0x012888
                cmpi.w  #$0700, D0
                bcc.s   Offset_0x012888
                cmpi.w  #$3A00, (Camera_X).w                         ; $FFFFEE78
                bcs.s   Offset_0x012888
                move.w  #$06A0, D0
                move.w  D0, (Sonic_Level_Limits_Min_Y).w             ; $FFFFEE18
                move.w  D0, (Level_Limits_Min_Y).w                   ; $FFFFEE10
                move.w  D0, (Sonic_Level_Limits_Max_Y).w             ; $FFFFEE1A
                move.w  D0, (Level_Limits_Max_Y).w                   ; $FFFFEE12
                move.w  #$3C80, D0
                move.w  D0, (Sonic_Level_Limits_Max_X).w             ; $FFFFEE16
                move.w  D0, (Level_Limits_Max_X).w                   ; $FFFFEE0E
                addq.b  #$02, (Dynamic_Resize_Routine).w             ; $FFFFEE33
Offset_0x012888:
                rts  
;-------------------------------------------------------------------------------
Offset_0x01288A:
                cmpi.w  #$3A00, (Camera_X).w                         ; $FFFFEE78
                bcs.s   Offset_0x0128C4
                move.w  #$3C80, D0
                cmp.w   (Camera_X).w, D0                             ; $FFFFEE78
                bhi.s   Offset_0x0128E2
                move.w  D0, (Sonic_Level_Limits_Min_X).w             ; $FFFFEE14
                move.w  D0, (Level_Limits_Min_X).w                   ; $FFFFEE0C
                jsr     (AllocateObject)                     ; Offset_0x011DD8
                bne.s   Offset_0x0128BE
                move.l  #Obj_0xB0_MGz_Drill_Mobile, (A1)       ; Offset_0x039C7E
                move.w  #$3D20, Obj_X(A1)                                ; $0010
                move.w  #$0668, Obj_Y(A1)                                ; $0014
Offset_0x0128BE:
                addq.b  #$02, (Dynamic_Resize_Routine).w             ; $FFFFEE33
                rts
Offset_0x0128C4:
                move.l  #$00001000, D0
                move.l  D0, (Sonic_Level_Limits_Min_Y).w             ; $FFFFEE18
                move.l  D0, (Level_Limits_Min_Y).w                   ; $FFFFEE10
                move.w  #$6000, D0
                move.w  D0, (Sonic_Level_Limits_Max_X).w             ; $FFFFEE16
                move.w  D0, (Level_Limits_Max_X).w                   ; $FFFFEE0E
                subq.b  #$02, (Dynamic_Resize_Routine).w             ; $FFFFEE33
Offset_0x0128E2:
                rts     
;-------------------------------------------------------------------------------
Offset_0x0128E4:
                rts
;===============================================================================
DynResize_CNz_1:                                               ; Offset_0x0128E6
DynResize_CNz_2:                                               ; Offset_0x0128E6
DynResize_FBz_1:                                               ; Offset_0x0128E6
DynResize_FBz_2:                                               ; Offset_0x0128E6   
                rts
;===============================================================================
DynResize_Iz_1:                                                ; Offset_0x0128E8
                moveq   #$00, D0
                move.b  (Dynamic_Resize_Routine).w, D0               ; $FFFFEE33
                move.w  Offset_0x0128F6(PC, D0), D0
                jmp     Offset_0x0128F6(PC, D0)    
;-------------------------------------------------------------------------------
Offset_0x0128F6:
                dc.w    Offset_0x0128FC-Offset_0x0128F6
                dc.w    Offset_0x012916-Offset_0x0128F6
                dc.w    Offset_0x012928-Offset_0x0128F6     
;-------------------------------------------------------------------------------
Offset_0x0128FC:
                cmpi.w  #$3700, (Camera_X).w                         ; $FFFFEE78
                bcs.s   Offset_0x012914
                cmpi.w  #$068C, (Camera_Y).w                         ; $FFFFEE7C
                bcs.s   Offset_0x012914
                st      (Level_Events_Buffer_5).w                    ; $FFFFEEC6
                addq.b  #$02, (Dynamic_Resize_Routine).w             ; $FFFFEE33
Offset_0x012914:
                rts     
;-------------------------------------------------------------------------------
Offset_0x012916:
                cmpi.w  #$3940, (Camera_X).w                         ; $FFFFEE78
                bcs.s   Offset_0x012926
                st      (Level_Events_Buffer_5).w                    ; $FFFFEEC6
                addq.b  #$02, (Dynamic_Resize_Routine).w             ; $FFFFEE33
Offset_0x012926:
                rts  
;-------------------------------------------------------------------------------
Offset_0x012928:
                rts
;===============================================================================
DynResize_Iz_2:                                                ; Offset_0x01292A
DynResize_LBz_1:                                               ; Offset_0x01292A  
                rts
;===============================================================================
DynResize_LBz_2:                                               ; Offset_0x01292C
                moveq   #$00, D0
                move.b  (Dynamic_Resize_Routine).w, D0               ; $FFFFEE33
                move.w  Offset_0x01293A(PC, D0), D0
                jmp     Offset_0x01293A(PC, D0)  
;-------------------------------------------------------------------------------
Offset_0x01293A:
                dc.w    Offset_0x01293E-Offset_0x01293A
                dc.w    Offset_0x012984-Offset_0x01293A     
;-------------------------------------------------------------------------------
Offset_0x01293E:
                cmpi.w  #$3BC0, (Camera_X).w                         ; $FFFFEE78
                bcs.s   Offset_0x012982
                cmpi.w  #$0500, (Camera_Y).w                         ; $FFFFEE7C
                addq.b  #$02, (Dynamic_Resize_Routine).w             ; $FFFFEE33
                lea     (Launch_Base_2_Blocks_3), A1           ; Offset_0x18C21A
                lea     (Blocks_Mem_Address).w, A2                   ; $FFFF9000
                jsr     (Queue_Kos)          ; Offset_0x0019AE
                lea     (Launch_Base_2_Chunks_3), A1           ; Offset_0x192F2E
                lea     (M68K_RAM_Start), A2                         ; $FFFF0000
                jsr     (Queue_Kos)          ; Offset_0x0019AE
                lea     (Launch_Base_2_Tiles_3), A1            ; Offset_0x18EB6C
                move.w  #$0000, D2
                jsr     (Queue_Kos_Module)                 ; Offset_0x0018A8
Offset_0x012982:
                rts      
;-------------------------------------------------------------------------------
Offset_0x012984:
                rts
;===============================================================================
DynResize_MVz_1:                                               ; Offset_0x012986
DynResize_MVz_2:                                               ; Offset_0x012986
DynResize_Sz_1:                                                ; Offset_0x012986
DynResize_Sz_2:                                                ; Offset_0x012986
DynResize_LRz_1:                                               ; Offset_0x012986
DynResize_LRz_2:                                               ; Offset_0x012986
DynResize_SSz_1:                                               ; Offset_0x012986
DynResize_SSz_2:                                               ; Offset_0x012986
DynResize_DEz_1:                                               ; Offset_0x012986
DynResize_DEz_2:                                               ; Offset_0x012986
DynResize_TDz_1:                                               ; Offset_0x012986
DynResize_TDz_2:                                               ; Offset_0x012986
DynResize_End_Seq_1:                                           ; Offset_0x012986
DynResize_End_Seq_2:                                           ; Offset_0x012986
DynResize_ALz_1:                                               ; Offset_0x012986
DynResize_ALz_2:                                               ; Offset_0x012986
DynResize_BPz_1:                                               ; Offset_0x012986
DynResize_BPz_2:                                               ; Offset_0x012986
DynResize_DPz_1:                                               ; Offset_0x012986
DynResize_DPz_2:                                               ; Offset_0x012986
DynResize_CGz_1:                                               ; Offset_0x012986
DynResize_CGz_2:                                               ; Offset_0x012986
DynResize_EMz_1:                                               ; Offset_0x012986
DynResize_EMz_2:                                               ; Offset_0x012986
DynResize_BS_GM_1:                                             ; Offset_0x012986
DynResize_BS_GM_2:                                             ; Offset_0x012986
DynResize_BS_GS_1:                                             ; Offset_0x012986
DynResize_BS_GS_2:                                             ; Offset_0x012986
DynResize_BS_SM_1:                                             ; Offset_0x012986
DynResize_BS_SM_2:                                             ; Offset_0x012986
DynResize_LRz_Boss:                                            ; Offset_0x012986
DynResize_HPz:                                                 ; Offset_0x012986
DynResize_DEz_Boss:                                            ; Offset_0x012986
DynResize_HPz_Portal:                                          ; Offset_0x012986  
                rts
;===============================================================================                 
Resize_Max_Y_From_X:                                           ; Offset_0x012988
                move.w  (Camera_X).w, D0                             ; $FFFFEE78
Offset_0x01298C:
                move.l  (A1)+, D1
                cmp.w   D1, D0
                bhi.s   Offset_0x01298C
                swap.w  D1
                tst.w   D1
                bpl.s   Offset_0x0129A0
                andi.w  #$7FFF, D1
                move.w  D1, (Sonic_Level_Limits_Max_Y).w             ; $FFFFEE1A
Offset_0x0129A0:
                move.w  D1, (Level_Limits_Max_Y).w                   ; $FFFFEE12
                move.w  D1, (Miles_Level_Limits_Max_Y).w             ; $FFFFEE22
                rts
;------------------------------------------------------------------------------- 
; Rotinas para redimensionamento autom�tico das fases e gerenciamento dos chefes 
; <<<-  de fase
;------------------------------------------------------------------------------- 

;===============================================================================
; Rotina para carregar o pocicionamento das pedras na Lava Reef
; ->>>
;===============================================================================
LRz_Load_Rock_Pos:                                             ; Offset_0x0129AA
                moveq   #$00, D0
                move.b  (LRz_Rocks_Routine).w, D0                    ; $FFFFFEB0
                move.w  Offset_0x0129B8(PC, D0), D0
                jmp     Offset_0x0129B8(PC, D0)
;-------------------------------------------------------------------------------
Offset_0x0129B8:
                dc.w    Offset_0x0129BC-Offset_0x0129B8
                dc.w    Offset_0x0129F2-Offset_0x0129B8
;-------------------------------------------------------------------------------
Offset_0x0129BC:
                addq.b  #$02, (LRz_Rocks_Routine).w                  ; $FFFFFEB0
                lea     (LRz_Rocks_Layout), A1                 ; Offset_0x1EA414
                move.w  (Camera_X).w, D4                             ; $FFFFEE78
                subq.w  #$08, D4
                bhi.s   Offset_0x0129D4
                moveq   #$01, D4
                bra.s   Offset_0x0129D4
Offset_0x0129D2:
                addq.l  #$06, A1
Offset_0x0129D4:
                cmp.w   $0002(A1), D4
                bhi.s   Offset_0x0129D2
                move.l  A1, (LRz_Rocks_Pos_Next).w                   ; $FFFFFEB2
                addi.w  #$0150, D4
                bra.s   Offset_0x0129E6 
Offset_0x0129E4:
                addq.l  #$06, A1
Offset_0x0129E6:
                cmp.w   $0002(A1), D4
                bhi.s   Offset_0x0129E4
                move.l  A1, (LRz_Rocks_Pos_Previous).w               ; $FFFFFEB6
                rts
;-------------------------------------------------------------------------------                
Offset_0x0129F2:
                move.l  (LRz_Rocks_Pos_Next).w, A1                   ; $FFFFFEB2
                move.w  (Camera_X).w, D4                             ; $FFFFEE78
                subq.w  #$08, D4
                bhi.s   Offset_0x012A04
                moveq   #$01, D4
                bra.s   Offset_0x012A04     
Offset_0x012A02:
                addq.l  #$06, A1
Offset_0x012A04:
                cmp.w   $0002(A1), D4
                bhi.s   Offset_0x012A02
                bra.s   Offset_0x012A0E
Offset_0x012A0C:
                subq.l  #$06, A1
Offset_0x012A0E:
                cmp.w   -4(A1), D4
                bls.s   Offset_0x012A0C
                move.l  A1, (LRz_Rocks_Pos_Next).w                   ; $FFFFFEB2
                move.l  (LRz_Rocks_Pos_Previous).w, A2               ; $FFFFFEB6
                addi.w  #$0150, D4
                bra.s   Offset_0x012A24
Offset_0x012A22:
                addq.l  #$06, A2
Offset_0x012A24:
                cmp.w   $0002(A2), D4
                bhi.s   Offset_0x012A22
                bra.s   Offset_0x012A2E
Offset_0x012A2C:
                subq.l  #$06, A2
Offset_0x012A2E:
                cmp.w   -4(A2), D4
                bls.s   Offset_0x012A2C
                move.l  A2, (LRz_Rocks_Pos_Previous).w               ; $FFFFFEB6
                rts                                                                          
;===============================================================================
; Rotina para carregar o pocicionamento das pedras na Lava Reef
; <<<-
;===============================================================================

Build_LRz_Rocks:                                               ; Offset_0x012A3A
                move.l  (LRz_Rocks_Pos_Next).w, A0                   ; $FFFFFEB2
                move.l  (LRz_Rocks_Pos_Previous).w, D2               ; $FFFFFEB6
                sub.l   A0, D2
                beq.s   Offset_0x012A8E
                lea     LRz_Rocks_Mappings(PC), A1             ; Offset_0x012A90
                move.w  #$0078, D3
                move.w  $0004(A3), D4
                move.w  #$00F0, D5
Offset_0x012A56:
                move.w  $0004(A0), D1
                sub.w   D4, D1
                addq.w  #$08, D1
                cmp.w   D5, D1
                bcc.s   Offset_0x012A88
                add.w   D3, D1
                move.w  $0002(A0), D0
                sub.w   (A3), D0
                addi.w  #$0080, D0
                move.w  (A0), D6
                lsl.w   #$03, D6
                lea     $00(A1, D6), A2
                add.w   (A2)+, D1
                move.w  D1, (A6)+
                move.w  (A2)+, D6
                move.b  D6, (A6)
                addq.w  #$02, A6
                move.w  (A2)+, (A6)+
                add.w   (A2)+, D0
                move.w  D0, (A6)+
                subq.w  #$01, D7
Offset_0x012A88:
                addq.l  #$06, A0
                subq.w  #$06, D2
                bne.s   Offset_0x012A56
Offset_0x012A8E:
                rts  
;-------------------------------------------------------------------------------
LRz_Rocks_Mappings:                                            ; Offset_0x012A90
                dc.w    $FFF8, $0005, $C400, $FFF8
                dc.w    $FFF8, $0005, $CC00, $FFF8
                dc.w    $FFF8, $0005, $C404, $FFF8
                dc.w    $FFF8, $0005, $C408, $FFF8
                dc.w    $FFF8, $0005, $CC08, $FFF8
                dc.w    $FFF8, $0005, $CC04, $FFF8
                dc.w    $0000, $0004, $C40C, $FFF8
                dc.w    $0000, $0004, $C40E, $FFF8
                dc.w    $0000, $0004, $CC0E, $FFF8
                dc.w    $0000, $0004, $CC0C, $FFF8
                dc.w    $FFF8, $0005, $E410, $FFF8    
;-------------------------------------------------------------------------------
Obj_0x02_Layer_Switch:                                         ; Offset_0x012AE8
                include 'data\objects\obj_0x02.asm'
; Offset_0x012F44: Obj_0x01_Monitors: Obj01_Monitors:
		include	"data\objects\obj_0x01.asm"
                
;------------------------------------------------------------------------------- 
; Rotina para tratar os espinhos e outros objetos como objeto s�lido
; ->>>
;------------------------------------------------------------------------------- 
Solid_Object:                                                  ; Offset_0x013556
                lea     (Obj_Player_One).w, A1                       ; $FFFFB000
                moveq   #$03, D6
                movem.l D1-D4, -(A7)
                bsr.s   Solid_Object_A1                        ; Offset_0x013574
                movem.l (A7)+, D1-D4
                lea     (Obj_Player_Two).w, A1                       ; $FFFFB04A
                tst.b   Obj_Flags(A1)                                    ; $0004
                bpl     Offset_0x0135B4
                addq.b  #$01, D6
Solid_Object_A1:                                               ; Offset_0x013574
                btst    D6, Obj_Status(A0)                               ; $002A
                beq     Offset_0x013888
                move.w  D1, D2
                add.w   D2, D2
                btst    #$01, Obj_Status(A1)                             ; $002A
                bne.s   Offset_0x013598
                move.w  Obj_X(A1), D0                                    ; $0010
                sub.w   Obj_X(A0), D0                                    ; $0010
                add.w   D1, D0
                bmi.s   Offset_0x013598
                cmp.w   D2, D0
                bcs.s   Offset_0x0135AC
Offset_0x013598:
                bclr    #$03, Obj_Status(A1)                             ; $002A
                bset    #$01, Obj_Status(A1)                             ; $002A
                bclr    D6, Obj_Status(A0)                               ; $002A
                moveq   #$00, D4
                rts
Offset_0x0135AC:
                move.w  D4, D2
                bsr     Player_On_Platform                     ; Offset_0x013A56
                moveq   #$00, D4
Offset_0x0135B4:
                rts 
;-------------------------------------------------------------------------------   
Solid_Object_2:                                                ; Offset_0x0135B6
                lea     (Obj_Player_One).w, A1                       ; $FFFFB000
                moveq   #$03, D6
                movem.l D1-D4, -(A7)
                bsr.s   Solid_Object_2_A1                      ; Offset_0x0135CC
                movem.l (A7)+, D1-D4
                lea     (Obj_Player_Two).w, A1                       ; $FFFFB04A
                addq.b  #$01, D6
Solid_Object_2_A1:                                             ; Offset_0x0135CC
                btst    D6, Obj_Status(A0)                               ; $002A
                beq     SolidObject_cont                  ; Offset_0x013890
                move.w  D1, D2
                add.w   D2, D2
                btst    #$01, Obj_Status(A1)                             ; $002A
                bne.s   Offset_0x0135F0
                move.w  Obj_X(A1), D0                                    ; $0010
                sub.w   Obj_X(A0), D0                                    ; $0010
                add.w   D1, D0
                bmi.s   Offset_0x0135F0
                cmp.w   D2, D0
                bcs.s   Offset_0x013604
Offset_0x0135F0:
                bclr    #$03, Obj_Status(A1)                             ; $002A
                bset    #$01, Obj_Status(A1)                             ; $002A
                bclr    D6, Obj_Status(A0)                               ; $002A
                moveq   #$00, D4
                rts
Offset_0x013604:
                move.w  D4, D2
                bsr     Player_On_Platform                     ; Offset_0x013A56
                moveq   #$00, D4
                rts
;-------------------------------------------------------------------------------   
Solid_Object_3:                                                ; Offset_0x01360E
                lea     (Obj_Player_One).w, A1                       ; $FFFFB000
                moveq   #$03, D6
                movem.l D1-D4, -(A7)
                bsr.s   Offset_0x013624
                movem.l (A7)+, D1-D4
                lea     (Obj_Player_Two).w, A1                       ; $FFFFB04A
                addq.b  #$01, D6
Offset_0x013624:
                btst    D6, Obj_Status(A0)                               ; $002A
                beq     Offset_0x0137CE
                move.w  D1, D2
                add.w   D2, D2
                btst    #$01, Obj_Status(A1)                             ; $002A
                bne.s   Offset_0x013648
                move.w  Obj_X(A1), D0                                    ; $0010
                sub.w   Obj_X(A0), D0                                    ; $0010
                add.w   D1, D0
                bmi.s   Offset_0x013648
                cmp.w   D2, D0
                bcs.s   Offset_0x01365C
Offset_0x013648:
                bclr    #$03, Obj_Status(A1)                             ; $002A
                bset    #$01, Obj_Status(A1)                             ; $002A
                bclr    D6, Obj_Status(A0)                               ; $002A
                moveq   #$00, D4
                rts
Offset_0x01365C:
                move.w  D4, D2
                bsr     Solid_Object_Sloped_2                  ; Offset_0x013A90
                move.w  D6, D4
                addi.b  #$11, D4
                bset    D4, D6
                moveq   #$00, D4
                rts  
;-------------------------------------------------------------------------------   
; S1_Platform_Object: ; Sonic 1 Left over                      ; Offset_0x01366E
                lea     (Obj_Player_One).w, A1                       ; $FFFFB000
                moveq   #$03, D6
                movem.l D1-D4, -(A7)
                bsr.s   Offset_0x013684
                movem.l (A7)+, D1-D4
                lea     (Obj_Player_Two).w, A1                       ; $FFFFB04A
                addq.b  #$01, D6
Offset_0x013684:
                btst    D6, Obj_Status(A0)                               ; $002A
                beq     Offset_0x013828
                move.w  D1, D2
                add.w   D2, D2
                btst    #$01, Obj_Status(A1)                             ; $002A
                bne.s   Offset_0x0136A8
                move.w  Obj_X(A1), D0                                    ; $0010
                sub.w   Obj_X(A0), D0                                    ; $0010
                add.w   D1, D0
                bmi.s   Offset_0x0136A8
                cmp.w   D2, D0
                bcs.s   Offset_0x0136BC
Offset_0x0136A8:
                bclr    #$03, Obj_Status(A1)                             ; $002A
                bset    #$01, Obj_Status(A1)                             ; $002A
                bclr    D6, Obj_Status(A0)                               ; $002A
                moveq   #$00, D4
                rts
Offset_0x0136BC:
                move.w  D4, D2
                bsr     Solid_Object_Sloped_4                  ; Offset_0x013AD2
                moveq   #$00, D4
                rts    
;-------------------------------------------------------------------------------   
Solid_Object_4:                                                ; Offset_0x0136C6
                lea     (Obj_Player_One).w, A1                       ; $FFFFB000
                moveq   #$03, D6
                movem.l D1-D4, -(A7)
                bsr.s   Offset_0x0136DC
                movem.l (A7)+, D1-D4
                lea     (Obj_Player_Two).w, A1                       ; $FFFFB04A
                addq.b  #$01, D6
Offset_0x0136DC:
                btst    D6, Obj_Status(A0)                               ; $002A
                beq     Offset_0x0137CE
                move.w  D1, D2
                add.w   D2, D2
                btst    #$01, Obj_Status(A1)                             ; $002A
                bne.s   Offset_0x013700
                move.w  Obj_X(A1), D0                                    ; $0010
                sub.w   Obj_X(A0), D0                                    ; $0010
                add.w   D1, D0
                bmi.s   Offset_0x013700
                cmp.w   D2, D0
                bcs.s   Offset_0x01370E
Offset_0x013700:
                bclr    #$03, Obj_Status(A1)                             ; $002A
                bclr    D6, Obj_Status(A0)                               ; $002A
                moveq   #$00, D4
                rts
Offset_0x01370E:
                move.w  D4, D2
                bsr     Solid_Object_Sloped_2                  ; Offset_0x013A90
                move.w  D6, D4
                addi.b  #$11, D4
                bset    D4, D6
                moveq   #$00, D4
                rts                                            
;------------------------------------------------------------------------------- 
; Rotina para tratar os espinhos e outros objetos como objeto s�lido
; <<<-
;-------------------------------------------------------------------------------
Solid_Object_Offset:                                           ; Offset_0x013720
                lea     (Obj_Player_One).w, A1                       ; $FFFFB000
                moveq   #$03, D6
                movem.l D1-D4, -(A7)
                bsr.s   Offset_0x013736
                movem.l (A7)+, D1-D4
                lea     (Obj_Player_Two).w, A1                       ; $FFFFB04A
                addq.b  #$01, D6
Offset_0x013736:
                btst    D6, Obj_Status(A0)                               ; $002A
                beq     Offset_0x01378C
                btst    #$01, Obj_Status(A1)                             ; $002A
                bne.s   Offset_0x013758
                move.w  Obj_X(A1), D0                                    ; $0010
                sub.w   Obj_X(A0), D0                                    ; $0010
                add.w   D1, D0
                bmi.s   Offset_0x013758
                add.w   D1, D1
                cmp.w   D1, D0
                bcs.s   Offset_0x01376C
Offset_0x013758:
                bclr    #$03, Obj_Status(A1)                             ; $002A
                bset    #$01, Obj_Status(A1)                             ; $002A
                bclr    D6, Obj_Status(A0)                               ; $002A
                moveq   #$00, D4
                rts
Offset_0x01376C:
                move.w  Obj_Y(A0), D0                                    ; $0014
                sub.w   D2, D0
                add.w   D3, D0
                moveq   #$00, D1
                move.b  Obj_Height_2(A1), D1                             ; $001E
                sub.w   D1, D0
                move.w  D0, Obj_Y(A1)                                    ; $0014
                sub.w   Obj_X(A0), D4                                    ; $0010
                sub.w   D4, Obj_X(A1)                                    ; $0010
                moveq   #$00, D4
                rts
Offset_0x01378C:
                move.w  Obj_X(A1), D0                                    ; $0010
                sub.w   Obj_X(A0), D0                                    ; $0010
                add.w   D1, D0
                bmi     Offset_0x013978
                move.w  D1, D4
                add.w   D4, D4
                cmp.w   D4, D0
                bhi     Offset_0x013978
                move.w  Obj_Y(A0), D5                                    ; $0014
                add.w   D3, D5
                move.b  Obj_Height_2(A1), D3                             ; $001E
                ext.w   D3
                add.w   D3, D2
                move.w  Obj_Y(A1), D3                                    ; $0014
                sub.w   D5, D3
                addq.w  #$04, D3
                add.w   D2, D3
                bmi     Offset_0x013978
                move.w  D2, D4
                add.w   D4, D4
                cmp.w   D4, D3
                bcc     Offset_0x013978
                bra     Offset_0x0138D4
Offset_0x0137CE:
                move.w  Obj_X(A1), D0                                    ; $0010
                sub.w   Obj_X(A0), D0                                    ; $0010
                add.w   D1, D0
                bmi     Offset_0x013978
                move.w  D1, D3
                add.w   D3, D3
                cmp.w   D3, D0
                bhi     Offset_0x013978
                move.w  D0, D5
                btst    #$00, Obj_Flags(A0)                              ; $0004
                beq.s   Offset_0x0137F4
                not.w   D5
                add.w   D3, D5
Offset_0x0137F4:
                lsr.w   #$01, D5
                move.b  $00(A2, D5), D3
                sub.b   (A2), D3
                ext.w   D3
                move.w  Obj_Y(A0), D5                                    ; $0014
                sub.w   D3, D5
                move.b  Obj_Height_2(A1), D3                             ; $001E
                ext.w   D3
                add.w   D3, D2
                move.w  Obj_Y(A1), D3                                    ; $0014
                sub.w   D5, D3
                addq.w  #$04, D3
                add.w   D2, D3
                bmi     Offset_0x013978
                move.w  D2, D4
                add.w   D4, D4
                cmp.w   D4, D3
                bcc     Offset_0x013978
                bra     Offset_0x0138D4
;-------------------------------------------------------------------------------    
Offset_0x013828:
                move.w  Obj_X(A1), D0                                    ; $0010
                sub.w   Obj_X(A0), D0                                    ; $0010
                add.w   D1, D0
                bmi     Offset_0x013978
                move.w  D1, D3
                add.w   D3, D3
                cmp.w   D3, D0
                bhi     Offset_0x013978
                move.w  D0, D5
                btst    #$00, Obj_Flags(A0)                              ; $0004
                beq.s   Offset_0x01384E
                not.w   D5
                add.w   D3, D5
Offset_0x01384E:
                andi.w  #$FFFE, D5
                move.b  $00(A2, D5), D3
                move.b  $01(A2, D5), D2
                ext.w   D2
                ext.w   D3
                move.w  Obj_Y(A0), D5                                    ; $0014
                sub.w   D3, D5
                move.w  Obj_Y(A1), D3                                    ; $0014
                sub.w   D5, D3
                move.b  Obj_Height_2(A1), D5                             ; $001E
                ext.w   D5
                add.w   D5, D3
                addq.w  #$04, D3
                bmi     Offset_0x013978
                add.w   D5, D2
                move.w  D2, D4
                add.w   D5, D4
                cmp.w   D4, D3
                bcc     Offset_0x013978
                bra     Offset_0x0138D4
;------------------------------------------------------------------------------- 
Offset_0x013888:
                tst.b   Obj_Flags(A0)                                    ; $0004
                bpl     Offset_0x013978                 
;-------------------------------------------------------------------------------  
; Rotina para tratar os monitores como objeto s�lido
; ->>>
;-------------------------------------------------------------------------------                  
SolidObject_cont:                                         ; Offset_0x013890
                move.w  Obj_X(A1), D0                                    ; $0010
                sub.w   Obj_X(A0), D0                                    ; $0010
                add.w   D1, D0
                bmi     Offset_0x013978
                move.w  D1, D3
                add.w   D3, D3
                cmp.w   D3, D0
                bhi     Offset_0x013978
                move.b  Obj_Height_3(A1), D4                             ; $0044
                ext.w   D4
                add.w   D2, D4
                move.b  Obj_Height_2(A1), D3                             ; $001E
                ext.w   D3
                add.w   D3, D2
                move.w  Obj_Y(A1), D3                                    ; $0014
                sub.w   Obj_Y(A0), D3                                    ; $0014
                addq.w  #$04, D3
                add.w   D2, D3
                bmi     Offset_0x013978
                andi.w  #$0FFF, D3
                add.w   D2, D4
                cmp.w   D4, D3
                bcc     Offset_0x013978
Offset_0x0138D4:                
                tst.b   Obj_Player_Control(A1)                           ; $002E
                bmi     Offset_0x013978
                cmpi.b  #$06, Obj_Routine(A1)                            ; $0005
                bcc     Offset_0x01399E
                tst.w   (Debug_Mode_Flag_Index).w                    ; $FFFFFE08
                bne     Offset_0x01399E
                move.w  D0, D5
                cmp.w   D0, D1
                bcc.s   Offset_0x0138FC
                add.w   D1, D1
                sub.w   D1, D0
                move.w  D0, D5
                neg.w   D5
Offset_0x0138FC:
                move.w  D3, D1
                cmp.w   D3, D2
                bcc.s   Offset_0x01390A
                subq.w  #$04, D3
                sub.w   D4, D3
                move.w  D3, D1
                neg.w   D1
Offset_0x01390A:
                cmp.w   D1, D5
                bhi     Offset_0x0139A2
Offset_0x013910:
                cmpi.w  #$0004, D1
                bls     Offset_0x0139A2
                tst.w   D0
                beq.s   Offset_0x013944
                bmi.s   Offset_0x013926
                tst.w   Obj_Speed_X(A1)                                  ; $0018
                bmi.s   Offset_0x013944
                bra.s   Offset_0x01392C
Offset_0x013926:
                tst.w   Obj_Speed_X(A1)                                  ; $0018
                bpl.s   Offset_0x013944
Offset_0x01392C:
                move.w  #$0000, Obj_Inertia(A1)                          ; $001C
                move.w  #$0000, Obj_Speed_X(A1)                          ; $0018
                tst.b   Obj_Player_Hit_Flag(A1)                          ; $0037
                bpl.s   Offset_0x013944
                bset    #$06, Obj_Player_Hit_Flag(A1)                    ; $0037
Offset_0x013944:
                sub.w   D0, Obj_X(A1)                                    ; $0010
                btst    #$01, Obj_Status(A1)                             ; $002A
                bne.s   Offset_0x01396A
                move.l  D6, D4
                addq.b  #$02, D4
                bset    D4, Obj_Status(A0)                               ; $002A
                bset    #$05, Obj_Status(A1)                             ; $002A
                move.w  D6, D4
                addi.b  #$0D, D4
                bset    D4, D6
                moveq   #$01, D4
                rts
Offset_0x01396A:
                bsr.s   Offset_0x013990
                move.w  D6, D4
                addi.b  #$0D, D4
                bset    D4, D6
                moveq   #$01, D4
                rts
Offset_0x013978:
                move.l  D6, D4
                addq.b  #$02, D4
                btst    D4, Obj_Status(A0)                               ; $002A
                beq.s   Offset_0x01399E
                cmpi.b  #$02, Obj_Ani_Number(A1)                         ; $0020
                beq.s   Offset_0x013990
                move.w  #$0001, Obj_Ani_Number(A1)                       ; $0020
Offset_0x013990:
                move.l  D6, D4
                addq.b  #$02, D4
                bclr    D4, Obj_Status(A0)                               ; $002A
                bclr    #$05, Obj_Status(A1)                             ; $002A
Offset_0x01399E:
                moveq   #$00, D4
                rts
Offset_0x0139A2:
                tst.w   D3
                bmi.s   Offset_0x0139AE
                cmpi.w  #$0010, D3
                bcs.s   Offset_0x013A1A
                bra.s   Offset_0x013978
Offset_0x0139AE:
                btst    #$01, Obj_Status(A1)                             ; $002A
                bne.s   Offset_0x0139C4
                tst.w   Obj_Speed_Y(A1)                                  ; $001A
                beq.s   Offset_0x0139EC
                bpl.s   Offset_0x0139D4
                tst.w   D3
                bpl.s   Offset_0x0139D4
                bra.s   Offset_0x0139CA
Offset_0x0139C4:
                move.w  #$0000, Obj_Inertia(A1)                          ; $001C
Offset_0x0139CA:
                sub.w   D3, Obj_Y(A1)                                    ; $0014
                move.w  #$0000, Obj_Speed_Y(A1)                          ; $001A
Offset_0x0139D4:
                tst.b   Obj_Player_Hit_Flag(A1)                          ; $0037
                bpl.s   Offset_0x0139E0
                bset    #$05, Obj_Player_Hit_Flag(A1)                    ; $0037
Offset_0x0139E0:
                move.w  D6, D4
                addi.b  #$0F, D4
                bset    D4, D6
                moveq   #-$02, D4
                rts
Offset_0x0139EC:
                btst    #$01, Obj_Status(A1)                             ; $002A
                bne.s   Offset_0x0139D4
                move.w  D0, D4
                bpl.s   Offset_0x0139FA
                neg.w   D4
Offset_0x0139FA:
                cmpi.w  #$0010, D4
                bcs     Offset_0x013910
                move.l  A0, -(A7)
                move.l  A1, A0
                jsr     (Kill_Player)                          ; Offset_0x00A4A4
                move.l  (A7)+, A0
                move.w  D6, D4
                addi.b  #$0F, D4
                bset    D4, D6
                moveq   #-$02, D4
                rts
Offset_0x013A1A:
                subq.w  #$04, D3
                moveq   #$00, D1
                move.b  Obj_Width(A0), D1                                ; $0007
                move.w  D1, D2
                add.w   D2, D2
                add.w   Obj_X(A1), D1                                    ; $0010
                sub.w   Obj_X(A0), D1                                    ; $0010
                bmi.s   Offset_0x013A52
                cmp.w   D2, D1
                bcc.s   Offset_0x013A52
                sub.w   D3, Obj_Y(A1)                                    ; $0014
                subq.w  #$01, Obj_Y(A1)                                  ; $0014
                tst.w   Obj_Speed_Y(A1)                                  ; $001A
                bmi.s   Offset_0x013A52
                bsr     Ride_Object_Set_Ride                   ; Offset_0x013C80
                move.w  D6, D4
                addi.b  #$11, D4
                bset    D4, D6
                moveq   #-$01, D4
                rts
Offset_0x013A52:
                moveq   #$00, D4
                rts 
;-------------------------------------------------------------------------------    
; Rotina para tratar os monitores como objeto s�lido
; <<<-
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------    
; Rotina para tratar os monitores e outros objetos como plataformas
; ->>>
;-------------------------------------------------------------------------------
Player_On_Platform:                                            ; Offset_0x013A56
                move.w  Obj_Y(A0), D0                                    ; $0014
                sub.w   D3, D0
                bra.s   Offset_0x013A66     
Offset_0x013A5E:
                move.w  Obj_Y(A0), D0                                    ; $0014
                subi.w  #$0009, D0
Offset_0x013A66:
                tst.b   Obj_Player_Control(A1)                           ; $002E
                bmi.s   Offset_0x013A8E
                cmpi.b  #$06, Obj_Routine(A1)                            ; $0005
                bcc.s   Offset_0x013A8E
                tst.w   (Debug_Mode_Flag_Index).w                    ; $FFFFFE08
                bne.s   Offset_0x013A8E
                moveq   #$00, D1
                move.b  Obj_Height_2(A1), D1                             ; $001E
                sub.w   D1, D0
                move.w  D0, Obj_Y(A1)                                    ; $0014
                sub.w   Obj_X(A0), D2                                    ; $0010
                sub.w   D2, Obj_X(A1)                                    ; $0010
Offset_0x013A8E:
                rts
;-------------------------------------------------------------------------------    
; Rotina para tratar os monitores e outros objetos como plataformas
; <<<-
;-------------------------------------------------------------------------------
Solid_Object_Sloped_2:                                         ; Offset_0x013A90
                btst    #$03, Obj_Status(A1)                             ; $002A
                beq.s   Offset_0x013AD0
                move.w  Obj_X(A1), D0                                    ; $0010
                sub.w   Obj_X(A0), D0                                    ; $0010
                add.w   D1, D0
                lsr.w   #$01, D0
                btst    #$00, Obj_Flags(A0)                              ; $0004
                beq.s   Offset_0x013AB0
                not.w   D0
                add.w   D1, D0
Offset_0x013AB0:
                move.b  $00(A2, D0), D1
                ext.w   D1
                move.w  Obj_Y(A0), D0                                    ; $0014
                sub.w   D1, D0
                moveq   #$00, D1
                move.b  Obj_Height_2(A1), D1                             ; $001E
                sub.w   D1, D0
                move.w  D0, Obj_Y(A1)                                    ; $0014
                sub.w   Obj_X(A0), D2                                    ; $0010
                sub.w   D2, Obj_X(A1)                                    ; $0010
Offset_0x013AD0:
                rts
;-------------------------------------------------------------------------------
Solid_Object_Sloped_4:                                         ; Offset_0x013AD2
                btst    #$03, Obj_Status(A1)                             ; $002A
                beq.s   Offset_0x013AD0
                move.w  Obj_X(A1), D0                                    ; $0010
                sub.w   Obj_X(A0), D0                                    ; $0010
                add.w   D1, D0
                btst    #$00, Obj_Flags(A0)                              ; $0004
                beq.s   Offset_0x013AF0
                not.w   D0
                add.w   D1, D0
Offset_0x013AF0:
                andi.w  #$FFFE, D0
                bra.s   Offset_0x013AB0                      
;-------------------------------------------------------------------------------
; Rotina usada pelas molas e outros objetos
; ->>>
;------------------------------------------------------------------------------- 
Platform_Object:                                               ; Offset_0x013AF6
                lea     (Obj_Player_One).w, A1                       ; $FFFFB000
                moveq   #$03, D6
                movem.l D1-D4, -(A7)
                bsr.s   Platform_Object_A1                     ; Offset_0x013B0C
                movem.l (A7)+, D1-D4
                lea     (Obj_Player_Two).w, A1                       ; $FFFFB04A
                addq.b  #$01, D6
Platform_Object_A1:                                            ; Offset_0x013B0C
                btst    D6, Obj_Status(A0)                               ; $002A
                beq     Offset_0x013C26
                move.w  D1, D2
                add.w   D2, D2
                btst    #$01, Obj_Status(A1)                             ; $002A
                bne.s   Offset_0x013B30
                move.w  Obj_X(A1), D0                                    ; $0010
                sub.w   Obj_X(A0), D0                                    ; $0010
                add.w   D1, D0
                bmi.s   Offset_0x013B30
                cmp.w   D2, D0
                bcs.s   Offset_0x013B44
Offset_0x013B30:
                bclr    #$03, Obj_Status(A1)                             ; $002A
                bset    #$01, Obj_Status(A1)                             ; $002A
                bclr    D6, Obj_Status(A0)                               ; $002A
                moveq   #$00, D4
                rts
Offset_0x013B44:
                move.w  D4, D2
                bsr     Player_On_Platform                     ; Offset_0x013A56
                moveq   #$00, D4
                rts 
;-------------------------------------------------------------------------------
Platform_Object_2:                                             ; Offset_0x013B4E
                lea     (Obj_Player_One).w, A1                       ; $FFFFB000
                moveq   #$03, D6
                movem.l D1-D4, -(A7)
                bsr.s   Platform_Object_2_A1                   ; Offset_0x013B64
                movem.l (A7)+, D1-D4
                lea     (Obj_Player_Two).w, A1                       ; $FFFFB04A
                addq.b  #$01, D6
Platform_Object_2_A1:                                          ; Offset_0x013B64
                btst    D6, Obj_Status(A0)                               ; $002A
                beq     Solid_Object_Check_Sloped_2            ; Offset_0x013CE4
                move.w  D1, D2
                add.w   D2, D2
                btst    #$01, Obj_Status(A1)                             ; $002A
                bne.s   Offset_0x013B88
                move.w  Obj_X(A1), D0                                    ; $0010
                sub.w   Obj_X(A0), D0                                    ; $0010
                add.w   D1, D0
                bmi.s   Offset_0x013B88
                cmp.w   D2, D0
                bcs.s   Offset_0x013B9C
Offset_0x013B88:
                bclr    #$03, Obj_Status(A1)                             ; $002A
                bset    #$01, Obj_Status(A1)                             ; $002A
                bclr    D6, Obj_Status(A0)                               ; $002A
                moveq   #$00, D4
                rts
Offset_0x013B9C:
                move.w  D4, D2
                bsr     Solid_Object_Sloped_2                  ; Offset_0x013A90
                moveq   #$00, D4
                rts        
;-------------------------------------------------------------------------------
Solid_Object_Top_Sloped:                                       ; Offset_0x013BA6
                lea     (Obj_Player_One).w, A1                       ; $FFFFB000
                moveq   #$03, D6
                movem.l D1-D4, -(A7)
                bsr.s   Offset_0x013BBC
                movem.l (A7)+, D1-D4
                lea     (Obj_Player_Two).w, A1                       ; $FFFFB04A
                addq.b  #$01, D6
Offset_0x013BBC:
                btst    D6, Obj_Status(A0)                               ; $002A
                bne.s   Offset_0x013BCE
                btst    #$03, Obj_Status(A1)                             ; $002A
                bne.s   Offset_0x013BFA
                bra     Offset_0x013C26
Offset_0x013BCE:
                move.w  D1, D2
                add.w   D2, D2
                btst    #$01, Obj_Status(A1)                             ; $002A
                bne.s   Offset_0x013BEA
                move.w  Obj_X(A1), D0                                    ; $0010
                sub.w   Obj_X(A0), D0                                    ; $0010
                add.w   D1, D0
                bmi.s   Offset_0x013BEA
                cmp.w   D2, D0
                bcs.s   Offset_0x013BFE
Offset_0x013BEA:
                bclr    #$03, Obj_Status(A1)                             ; $002A
                bset    #$01, Obj_Status(A1)                             ; $002A
                bclr    D6, Obj_Status(A0)                               ; $002A
Offset_0x013BFA:
                moveq   #$00, D4
                rts
Offset_0x013BFE:
                move.w  D4, D2
                bsr     Player_On_Platform                     ; Offset_0x013A56
                moveq   #$00, D4
                rts
;-------------------------------------------------------------------------------
; Rotina usada pelas molas e outros objetos
; <<<-
;-------------------------------------------------------------------------------  
 Offset_0x013C08:
                tst.w   Obj_Speed_Y(A1)                                  ; $001A
                bmi     Offset_0x013CE2
                move.w  Obj_X(A1), D0                                    ; $0010
                sub.w   Obj_X(A0), D0                                    ; $0010
                add.w   D1, D0
                bmi     Offset_0x013CE2
                cmp.w   D2, D0
                bcc     Offset_0x013CE2
                bra.s   Offset_0x013C44
;-------------------------------------------------------------------------------
Offset_0x013C26:
                tst.w   Obj_Speed_Y(A1)                                  ; $001A
                bmi     Offset_0x013CE2
                move.w  Obj_X(A1), D0                                    ; $0010
                sub.w   Obj_X(A0), D0                                    ; $0010
                add.w   D1, D0
                bmi     Offset_0x013CE2
                add.w   D1, D1  
                cmp.w   D1, D0  
                bcc     Offset_0x013CE2
;-------------------------------------------------------------------------------                
Offset_0x013C44:                
                move.w  Obj_Y(A0), D0                                    ; $0014
                sub.w   D3, D0 
;-------------------------------------------------------------------------------
Offset_0x013C4A:
                move.w  Obj_Y(A1), D2                                    ; $0014
                move.b  Obj_Height_2(A1), D1                             ; $001E
                ext.w   D1
                add.w   D2, D1
                addq.w  #$04, D1
                sub.w   D1, D0
                bhi     Offset_0x013CE2
                cmpi.w  #$FFF0, D0
                bcs     Offset_0x013CE2
                tst.b   Obj_Player_Control(A1)                           ; $002E
                bmi     Offset_0x013CE2
                cmpi.b  #$06, Obj_Routine(A1)                            ; $0005
                bcc     Offset_0x013CE2
                add.w   D0, D2
                addq.w  #$03, D2
                move.w  D2, Obj_Y(A1)                                    ; $0014
;-------------------------------------------------------------------------------
Ride_Object_Set_Ride:                                          ; Offset_0x013C80
                btst    #$03, Obj_Status(A1)                             ; $002A
                beq.s   Offset_0x013C90
                move.w  Obj_Player_Last(A1), A3                          ; $0042
                bclr    D6, Obj_Status(A3)                               ; $002A
Offset_0x013C90:
                move.w  A0, Obj_Player_Last(A1)                          ; $0042
                move.b  #$00, Obj_Angle(A1)                              ; $0026
                move.w  #$0000, Obj_Speed_Y(A1)                          ; $001A
                move.w  Obj_Speed_X(A1), Obj_Inertia(A1)          ; $0018, $001C
                btst    #$01, Obj_Status(A1)                             ; $002A
                beq.s   Offset_0x013CD2
                move.l  A0, -(A7)
                move.l  A1, A0
                move.w  A0, D1
                subi.w  #Obj_Player_One, D1                              ; $B000
                bne.s   Offset_0x013CCA
                cmpi.w  #Miles_Alone, (Player_Selected_Flag).w ; $0002, $FFFFFF08
                beq.s   Offset_0x013CCA
                jsr     (Sonic_ResetOnFloor)                   ; Offset_0x00BF76
                bra.s   Offset_0x013CD0
Offset_0x013CCA:
                jsr     (Miles_ResetOnFloor)                   ; Offset_0x00E7EE
Offset_0x013CD0:
                move.l  (A7)+, A0
Offset_0x013CD2:
                bset    #$03, Obj_Status(A1)                             ; $002A
                bclr    #$01, Obj_Status(A1)                             ; $002A
                bset    D6, Obj_Status(A0)                               ; $002A
Offset_0x013CE2:                
                rts
;------------------------------------------------------------------------------- 
Solid_Object_Check_Sloped_2:                                   ; Offset_0x013CE4
                tst.w   Obj_Speed_Y(A1)                                  ; $001A
                bmi     Offset_0x013CE2
                move.w  Obj_X(A1), D0                                    ; $0010
                sub.w   Obj_X(A0), D0                                    ; $0010
                add.w   D1, D0
                bmi.s   Offset_0x013CE2
                add.w   D1, D1
                cmp.w   D1, D0
                bcc.s   Offset_0x013CE2
                btst    #$00, Obj_Flags(A0)                              ; $0004
                beq.s   Offset_0x013D0A
                not.w   D0
                add.w   D1, D0
Offset_0x013D0A:
                lsr.w   #$01, D0
                move.b  $00(A2, D0), D3
                ext.w   D3
                move.w  Obj_Y(A0), D0                                    ; $0014
                sub.w   D3, D0
                bra     Offset_0x013C4A
;-------------------------------------------------------------------------------   
; Check_Player_Release_From_Object:                            ; Offset_0x013D1C
                lea     (Obj_Player_One).w, A1                       ; $FFFFB000
                btst    #$03, Obj_Status(A0)                             ; $002A
                beq.s   Offset_0x013D4A
                jsr     (Player_HitFloor_A1)                   ; Offset_0x009D36
                tst.w   D1
                beq.s   Offset_0x013D34
                bpl.s   Offset_0x013D4A
Offset_0x013D34:
                lea     (Obj_Player_One).w, A1                       ; $FFFFB000
                bclr    #$03, Obj_Status(A1)                             ; $002A
                bset    #$01, Obj_Status(A1)                             ; $002A
                bclr    #$03, Obj_Status(A0)                             ; $002A
Offset_0x013D4A:
                lea     (Obj_Player_Two).w, A1                       ; $FFFFB04A
                btst    #$04, Obj_Status(A0)                             ; $002A
                beq.s   Offset_0x013D78
                jsr     (Player_HitFloor_A1)                   ; Offset_0x009D36
                tst.w   D1
                beq.s   Offset_0x013D62
                bpl.s   Offset_0x013D78
Offset_0x013D62:
                lea     (Obj_Player_Two).w, A1                       ; $FFFFB04A
                bclr    #$03, Obj_Status(A1)                             ; $002A
                bset    #$01, Obj_Status(A1)                             ; $002A
                bclr    #$04, Obj_Status(A0)                             ; $002A
Offset_0x013D78:
                moveq   #$00, D4
                rts
;-------------------------------------------------------------------------------             
Object_Hit:                                                    ; Offset_0x013D7C 
                include 'data\objects\obj_hit.asm'   
;-------------------------------------------------------------------------------  
Obj_Fire_Shield_Dissipate:                                     ; Offset_0x013E28
                move.l  #Object_Hit_Mappings, Obj_Map(A0) ; Offset_0x013EF2, $000C
                move.w  #$05A0, Obj_Art_VRAM(A0)                         ; $000A
                move.b  #$04, Obj_Flags(A0)                              ; $0004
                move.w  #$0280, Obj_Priority(A0)                         ; $0008
                move.b  #$0C, Obj_Width(A0)                              ; $0007
                move.b  #$0C, Obj_Height(A0)                             ; $0006
                move.b  #$03, Obj_Ani_Time(A0)                           ; $0024
                move.b  #$01, Obj_Map_Id(A0)                             ; $0022
                move.l  #Offset_0x013E60, (A0)
Offset_0x013E60:                
                jsr     (SpeedToPos)                           ; Offset_0x01111E
                subq.b  #$01, Obj_Ani_Time(A0)                           ; $0024
                bpl.s   Offset_0x013E80
                move.b  #$03, Obj_Ani_Time(A0)                           ; $0024
                addq.b  #$01, Obj_Map_Id(A0)                             ; $0022
                cmpi.b  #$05, Obj_Map_Id(A0)                             ; $0022
                beq     DeleteObject                           ; Offset_0x011138
Offset_0x013E80:
                jmp     (DisplaySprite)                        ; Offset_0x011148
;-------------------------------------------------------------------------------
Obj_Dissipate:                                                 ; Offset_0x013E86
                move.l  #Object_Hit_Mappings, Obj_Map(A0) ; Offset_0x013EF2, $000C
                move.w  #$85A0, Obj_Art_VRAM(A0)                         ; $000A
                move.b  #$04, Obj_Flags(A0)                              ; $0004
                move.w  #$0100, Obj_Priority(A0)                         ; $0008
                move.b  #$0C, Obj_Width(A0)                              ; $0007
                move.b  #$0C, Obj_Height(A0)                             ; $0006
                move.b  #$00, Obj_Map_Id(A0)                             ; $0022
                move.l  #Offset_0x013EB8, (A0)
Offset_0x013EB8:                
                subq.b  #$01, Obj_Ani_Time(A0)                           ; $0024
                bmi.s   Offset_0x013EC0
                rts
Offset_0x013EC0:
                move.b  #$03, Obj_Ani_Time(A0)                           ; $0024
                move.l  #Offset_0x013ECC, (A0)
Offset_0x013ECC:                
                jsr     (SpeedToPos)                           ; Offset_0x01111E
                subq.b  #$01, Obj_Ani_Time(A0)                           ; $0024
                bpl.s   Offset_0x013EEC
                move.b  #$07, Obj_Ani_Time(A0)                           ; $0024
                addq.b  #$01, Obj_Map_Id(A0)                             ; $0022
                cmpi.b  #$05, Obj_Map_Id(A0)                             ; $0022
                beq     DeleteObject                           ; Offset_0x011138
Offset_0x013EEC:
                jmp     (DisplaySprite)                        ; Offset_0x011148  
;-------------------------------------------------------------------------------
Object_Hit_Mappings:                                           ; Offset_0x013EF2
                dc.w    Offset_0x013EFC-Object_Hit_Mappings
                dc.w    Offset_0x013F04-Object_Hit_Mappings
                dc.w    Offset_0x013F0C-Object_Hit_Mappings
                dc.w    Offset_0x013F14-Object_Hit_Mappings
                dc.w    Offset_0x013F1C-Object_Hit_Mappings
Offset_0x013EFC:
                dc.w    $0001
                dc.w    $F805, $0000, $FFF8
Offset_0x013F04:
                dc.w    $0001
                dc.w    $F00F, $2004, $FFF0
Offset_0x013F0C:
                dc.w    $0001
                dc.w    $F00F, $2014, $FFF0
Offset_0x013F14:
                dc.w    $0001
                dc.w    $F00F, $2024, $FFF0
Offset_0x013F1C:
                dc.w    $0001
                dc.w    $F00F, $2034, $FFF0  
;------------------------------------------------------------------------------- 
Obj_0x09_AIz_Tree:                                             ; Offset_0x013F24
                include 'data\objects\obj_0x09.asm'
Obj_0x0A_AIz_Zipline_Peg:                                      ; Offset_0x013F66
                include 'data\objects\obj_0x0A.asm'
Obj_0x26_Auto_Spin:                                            ; Offset_0x013FA8
                include 'data\objects\obj_0x26.asm'  
; Obj_0x27_Lava_Attributes: ; Sonic 2 left over                ; Offset_0x0141F2 
                include 'data\objects\obj_0x27.asm'    
Obj_0x28_Invisible_Block:                                      ; Offset_0x0142D4 
                include 'data\objects\obj_0x28.asm' 
; Obj_0x36_Hz_Breakable_Bar:                                   ; Offset_0x0143B2
                include 'data\objects\obj_0x36.asm'                                                         
Obj_Wave_Splash:                                               ; Offset_0x014926
                include 'data\objects\wavespls.asm'
; Obj_0x40_Hz_Block:                                           ; Offset_0x014AB6
                include 'data\objects\obj_0x40.asm' 
Obj_0x6A_Hz_Horizontal_Spikes:                                 ; Offset_0x014B5A 
                include 'data\objects\obj_0x6A.asm'
Obj_0x6B_Hz_Vertical_Spikes:                                   ; Offset_0x014CE8 
                include 'data\objects\obj_0x6B.asm'                                               
Obj_0x03_AIz_Hollow_Tree:                                      ; Offset_0x014E88
                include 'data\objects\obj_0x03.asm'
; Obj_0x05_Rock:                                               ; Offset_0x0150FC 
                include 'data\objects\obj_0x05.asm'                
Obj_0x04_Collapsing_Platform:                                  ; Offset_0x01582E
                include 'data\objects\obj_0x04.asm'
Obj_0x0F_Collapsing_Platform:                                  ; Offset_0x01595E
                include 'data\objects\obj_0x0F.asm' 
Obj_0x0D_Breakable_Wall:                                       ; Offset_0x0170CA 
                include 'data\objects\obj_0x0D.asm'      
Obj_0x06_Ride_Vine:                                            ; Offset_0x017A8E
                include 'data\objects\obj_0x06.asm'   
Obj_0x0C_Swing_Ride_Vine:                                      ; Offset_0x0180FE
                include 'data\objects\obj_0x0C.asm'                                          
Obj_AIz_Intro_Surfboard:                                       ; Offset_0x0185D6
                include 'data\objects\aizsurfb.asm'
Obj_Knuckles:                                                  ; Offset_0x018EA0
                include 'data\objects\knuckles.asm'
Obj_0x07_Springs:                                              ; Offset_0x01921A
                include 'data\objects\obj_0x07.asm'  
Obj_0x3D_Retracting_Spring:                                    ; Offset_0x019EA2
                include 'data\objects\obj_0x3D.asm'  
; Obj_0x5F_Retracting_Spring:                                  ; Offset_0x019FF6
                include 'data\objects\obj_0x5F.asm'                  
; Obj_0x08_Spikes:                                             ; Offset_0x01A442
                include 'data\objects\obj_0x08.asm'   
Obj_Art_Scaling:                                               ; Offset_0x01AA34
                include 'data\objects\scaling.asm'
Obj_0x0B_Sphere_Test:                                          ; Offset_0x01B338
                include 'data\objects\obj_0x0B.asm'    
Obj_0x0E_Spiral_Ramp_Attributes:                               ; Offset_0x01BC3A
                include 'data\objects\obj_0x0E.asm'  
; Obj_0x11_LBz_Platform:                                       ; Offset_0x01BCFC
                include 'data\objects\obj_0x11.asm'                 
Obj_0x1D_LBz_Platform:                                         ; Offset_0x01C228
                include 'data\objects\obj_0x1D.asm'   
; Obj_0x51_Floating_Platform:                                  ; Offset_0x01C3C2 
                include 'data\objects\obj_0x51.asm'   
Obj_0x67_Hz_Snake_Platform:                                    ; Offset_0x01C532
                include 'data\objects\obj_0x67.asm'    
; Obj_0x12_LBz_Elevator:                                       ; Offset_0x01C6A0
                include 'data\objects\obj_0x12.asm'    
Obj_0x13_LBz_Exploding_Trigger:                                ; Offset_0x01C890 
                include 'data\objects\obj_0x13.asm'   
Obj_0x59_MGz_Dash_Trigger:                                     ; Offset_0x01C930 
                include 'data\objects\obj_0x59.asm' 
; Obj_0x14_LBz_Trigger_Bridge:                                 ; Offset_0x01CBA2 
                include 'data\objects\obj_0x14.asm'   
; Obj_0x15_LBz_Player_Launcher:                                ; Offset_0x01D050 
                include 'data\objects\obj_0x15.asm'       
; Obj_0x16_LBz_Flame_Thrower:                                  ; Offset_0x01D312 
                include 'data\objects\obj_0x16.asm'  
; Obj_0x17_LBz_Hooked_Ride:                                    ; Offset_0x01D4FC 
                include 'data\objects\obj_0x17.asm'  
Obj_0x18_LBz_Cup_Elevator:                                     ; Offset_0x01D916 
                include 'data\objects\obj_0x18.asm'    
Obj_0x19_LBz_Cup_Elevator_Pole:                                ; Offset_0x01DF10 
                include 'data\objects\obj_0x19.asm'     
Obj_0x1A_Unknow_Controled_By_P2:                               ; Offset_0x01DFCE 
                include 'data\objects\obj_0x1A.asm'  
Obj_0x1B_LBz_Pipe_Plug:                                        ; Offset_0x01E2C6 
                include 'data\objects\obj_0x1B.asm' 
Obj_0x1C_LBz_Unknow:                                           ; Offset_0x01E6C6  
                include 'data\objects\obj_0x1C.asm'                                                                                                                                                                                                                                   

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to dynamically reload animated stage tiles in VRAM
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x01E85A: DynamicArtCues:
AnimateStageTiles:
		moveq	#0,d0
		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#1,d0
		lsr.w	#5,d0
		andi.w	#$FC,d0
		move.w	Dynamic_Art_Idx+2(pc,d0.w),d1
		lea	Dynamic_Art_Idx(pc,d1.w),a2
		move.w	Dynamic_Art_Idx(pc,d0.w),d0
		jmp	Dynamic_Art_Idx(pc,d0.w)
		rts
; End of function AnimateStageTiles

; ===========================================================================

Dynamic_Art_Idx:                                               ; Offset_0x01E87A
                dc.w    Dynamic_AIz_1-Dynamic_Art_Idx          ; Offset_0x01E93C
                dc.w    AIz_1_Animate-Dynamic_Art_Idx          ; Offset_0x01F346
                dc.w    Dynamic_AIz_2-Dynamic_Art_Idx          ; Offset_0x01E94C
                dc.w    AIz_2_Animate-Dynamic_Art_Idx          ; Offset_0x01F392
                dc.w    Dynamic_Hz_1-Dynamic_Art_Idx           ; Offset_0x01E982
                dc.w    Hz_1_Animate-Dynamic_Art_Idx           ; Offset_0x01F3EA
                dc.w    Dynamic_Hz_2-Dynamic_Art_Idx           ; Offset_0x01EAFA
                dc.w    Hz_2_Animate-Dynamic_Art_Idx           ; Offset_0x01F3FA
                dc.w    Dynamic_MGz_1-Dynamic_Art_Idx          ; Offset_0x01ECCE
                dc.w    MGz_1_Animate-Dynamic_Art_Idx          ; Offset_0x01F408
                dc.w    Dynamic_MGz_2-Dynamic_Art_Idx          ; Offset_0x01ECCE
                dc.w    MGz_2_Animate-Dynamic_Art_Idx          ; Offset_0x01F408
                dc.w    Dynamic_CNz_1-Dynamic_Art_Idx          ; Offset_0x01ECD8
                dc.w    CNz_1_Animate-Dynamic_Art_Idx          ; Offset_0x01F428
                dc.w    Dynamic_CNz_2-Dynamic_Art_Idx          ; Offset_0x01ECD8
                dc.w    CNz_2_Animate-Dynamic_Art_Idx          ; Offset_0x01F428
                dc.w    Dynamic_FBz_1-Dynamic_Art_Idx          ; Offset_0x01E93A
                dc.w    FBz_1_Animate-Dynamic_Art_Idx          ; Offset_0x01F4AC
                dc.w    Dynamic_FBz_2-Dynamic_Art_Idx          ; Offset_0x01E93A
                dc.w    FBz_2_Animate-Dynamic_Art_Idx          ; Offset_0x01F4AC
                dc.w    Dynamic_Iz_1-Dynamic_Art_Idx           ; Offset_0x01ED6E
                dc.w    Iz_1_Animate-Dynamic_Art_Idx           ; Offset_0x01F4AC
                dc.w    Dynamic_Iz_2-Dynamic_Art_Idx           ; Offset_0x01ED6E
                dc.w    Iz_2_Animate-Dynamic_Art_Idx           ; Offset_0x01F4AC
                dc.w    Dynamic_LBz_1-Dynamic_Art_Idx          ; Offset_0x01EE70
                dc.w    LBz_1_Animate-Dynamic_Art_Idx          ; Offset_0x01F4BE
                dc.w    Dynamic_LBz_2-Dynamic_Art_Idx          ; Offset_0x01EF60
                dc.w    LBz_2_Animate-Dynamic_Art_Idx          ; Offset_0x01F4E8
                dc.w    Dynamic_MVz_1-Dynamic_Art_Idx          ; Offset_0x01E93A
                dc.w    MVz_1_Animate-Dynamic_Art_Idx          ; Offset_0x01F504
                dc.w    Dynamic_MVz_2-Dynamic_Art_Idx          ; Offset_0x01E93A
                dc.w    MVz_2_Animate-Dynamic_Art_Idx          ; Offset_0x01F504
                dc.w    Dynamic_Sz_1-Dynamic_Art_Idx           ; Offset_0x01E93A
                dc.w    Sz_1_Animate-Dynamic_Art_Idx           ; Offset_0x01F504
                dc.w    Dynamic_Sz_2-Dynamic_Art_Idx           ; Offset_0x01E93A
                dc.w    Sz_2_Animate-Dynamic_Art_Idx           ; Offset_0x01F504
                dc.w    Dynamic_LRz_1-Dynamic_Art_Idx          ; Offset_0x01F0FA
                dc.w    LRz_1_Animate-Dynamic_Art_Idx          ; Offset_0x01F504
                dc.w    Dynamic_LRz_2-Dynamic_Art_Idx          ; Offset_0x01E93A
                dc.w    LRz_2_Animate-Dynamic_Art_Idx          ; Offset_0x01F504
                dc.w    Dynamic_SSz_1-Dynamic_Art_Idx          ; Offset_0x01E93A
                dc.w    SSz_1_Animate-Dynamic_Art_Idx          ; Offset_0x01F504
                dc.w    Dynamic_SSz_2-Dynamic_Art_Idx          ; Offset_0x01E93A
                dc.w    SSz_2_Animate-Dynamic_Art_Idx          ; Offset_0x01F504
                dc.w    Dynamic_DEz_1-Dynamic_Art_Idx          ; Offset_0x01E93A
                dc.w    DEz_1_Animate-Dynamic_Art_Idx          ; Offset_0x01F504
                dc.w    Dynamic_DEz_2-Dynamic_Art_Idx          ; Offset_0x01E93A
                dc.w    DEz_2_Animate-Dynamic_Art_Idx          ; Offset_0x01F504
                dc.w    Dynamic_TDz_1-Dynamic_Art_Idx          ; Offset_0x01E93A
                dc.w    TDz_1_Animate-Dynamic_Art_Idx          ; Offset_0x01F504
                dc.w    Dynamic_TDz_2-Dynamic_Art_Idx          ; Offset_0x01E93A
                dc.w    TDz_2_Animate-Dynamic_Art_Idx          ; Offset_0x01F504
                dc.w    Dynamic_End_Seq_1-Dynamic_Art_Idx      ; Offset_0x01E93A
                dc.w    End_Seq_1_Animate-Dynamic_Art_Idx      ; Offset_0x01F504
                dc.w    Dynamic_End_Seq_2-Dynamic_Art_Idx      ; Offset_0x01E93A
                dc.w    End_Seq_2_Animate-Dynamic_Art_Idx      ; Offset_0x01F504
                dc.w    Dynamic_ALz_1-Dynamic_Art_Idx          ; Offset_0x01F2DE
                dc.w    ALz_1_Animate-Dynamic_Art_Idx          ; Offset_0x01F504
                dc.w    Dynamic_ALz_2-Dynamic_Art_Idx          ; Offset_0x01F2DE
                dc.w    ALz_2_Animate-Dynamic_Art_Idx          ; Offset_0x01F504
                dc.w    Dynamic_BPz_1-Dynamic_Art_Idx          ; Offset_0x01F2DE
                dc.w    BPz_1_Animate-Dynamic_Art_Idx          ; Offset_0x01F512
                dc.w    Dynamic_BPz_2-Dynamic_Art_Idx          ; Offset_0x01F2DE
                dc.w    BPz_2_Animate-Dynamic_Art_Idx          ; Offset_0x01F512
                dc.w    Dynamic_DPz_1-Dynamic_Art_Idx          ; Offset_0x01F1F8
                dc.w    DPz_1_Animate-Dynamic_Art_Idx          ; Offset_0x01F548
                dc.w    Dynamic_DPz_2-Dynamic_Art_Idx          ; Offset_0x01F1F8
                dc.w    DPz_2_Animate-Dynamic_Art_Idx          ; Offset_0x01F548
                dc.w    Dynamic_CGz_1-Dynamic_Art_Idx          ; Offset_0x01E93A
                dc.w    CGz_1_Animate-Dynamic_Art_Idx          ; Offset_0x01F558
                dc.w    Dynamic_CGz_2-Dynamic_Art_Idx          ; Offset_0x01E93A
                dc.w    CGz_2_Animate-Dynamic_Art_Idx          ; Offset_0x01F558
                dc.w    Dynamic_EMz_1-Dynamic_Art_Idx          ; Offset_0x01E93A
                dc.w    EMz_1_Animate-Dynamic_Art_Idx          ; Offset_0x01F558
                dc.w    Dynamic_EMz_2-Dynamic_Art_Idx          ; Offset_0x01E93A
                dc.w    EMz_2_Animate-Dynamic_Art_Idx          ; Offset_0x01F558
                dc.w    Dynamic_GM_BS_1-Dynamic_Art_Idx        ; Offset_0x01E93A
                dc.w    GM_BS_1_Animate-Dynamic_Art_Idx        ; Offset_0x01F558
                dc.w    Dynamic_GM_BS_2-Dynamic_Art_Idx        ; Offset_0x01E93A
                dc.w    GM_BS_2_Animate-Dynamic_Art_Idx        ; Offset_0x01F558
                dc.w    Dynamic_GS_BS_1-Dynamic_Art_Idx        ; Offset_0x01E93A
                dc.w    GS_BS_1_Animate-Dynamic_Art_Idx        ; Offset_0x01F558
                dc.w    Dynamic_GS_BS_2-Dynamic_Art_Idx        ; Offset_0x01E93A
                dc.w    GS_BS_2_Animate-Dynamic_Art_Idx        ; Offset_0x01F558
                dc.w    Dynamic_SM_BS_1-Dynamic_Art_Idx        ; Offset_0x01E93A
                dc.w    SM_BS_1_Animate-Dynamic_Art_Idx        ; Offset_0x01F558
                dc.w    Dynamic_SM_BS_2-Dynamic_Art_Idx        ; Offset_0x01E93A
                dc.w    SM_BS_2_Animate-Dynamic_Art_Idx        ; Offset_0x01F558
                dc.w    Dynamic_LRz_2_Boss-Dynamic_Art_Idx     ; Offset_0x01E93A
                dc.w    LRz_2_Boss_Animate-Dynamic_Art_Idx     ; Offset_0x01F558
                dc.w    Dynamic_HPz-Dynamic_Art_Idx            ; Offset_0x01E93A
                dc.w    HPz_Animate-Dynamic_Art_Idx            ; Offset_0x01F558
                dc.w    Dynamic_DEz_Final_Boss-Dynamic_Art_Idx ; Offset_0x01E93A
                dc.w    DEz_Final_Boss_Animate-Dynamic_Art_Idx ; Offset_0x01F558
                dc.w    Dynamic_HPz_Portal-Dynamic_Art_Idx     ; Offset_0x01E93A
                dc.w    HPz_Portal_Animate-Dynamic_Art_Idx     ; Offset_0x01F558
;-------------------------------------------------------------------------------    
Dynamic_FBz_1:                                                 ; Offset_0x01E93A       
Dynamic_FBz_2:                                                 ; Offset_0x01E93A  
Dynamic_MVz_1:                                                 ; Offset_0x01E93A
Dynamic_MVz_2:                                                 ; Offset_0x01E93A
Dynamic_Sz_1:                                                  ; Offset_0x01E93A
Dynamic_Sz_2:                                                  ; Offset_0x01E93A
Dynamic_LRz_2:                                                 ; Offset_0x01E93A 
Dynamic_SSz_1:                                                 ; Offset_0x01E93A    
Dynamic_SSz_2:                                                 ; Offset_0x01E93A
Dynamic_DEz_1:                                                 ; Offset_0x01E93A 
Dynamic_DEz_2:                                                 ; Offset_0x01E93A
Dynamic_TDz_1:                                                 ; Offset_0x01E93A 
Dynamic_TDz_2:                                                 ; Offset_0x01E93A 
Dynamic_End_Seq_1:                                             ; Offset_0x01E93A    
Dynamic_End_Seq_2:                                             ; Offset_0x01E93A
Dynamic_CGz_1:                                                 ; Offset_0x01E93A
Dynamic_CGz_2:                                                 ; Offset_0x01E93A
Dynamic_EMz_1:                                                 ; Offset_0x01E93A
Dynamic_EMz_2:                                                 ; Offset_0x01E93A
Dynamic_GM_BS_1:                                               ; Offset_0x01E93A
Dynamic_GM_BS_2:                                               ; Offset_0x01E93A
Dynamic_GS_BS_1:                                               ; Offset_0x01E93A
Dynamic_GS_BS_2:                                               ; Offset_0x01E93A
Dynamic_SM_BS_1:                                               ; Offset_0x01E93A  
Dynamic_SM_BS_2:                                               ; Offset_0x01E93A
Dynamic_LRz_2_Boss:                                            ; Offset_0x01E93A
Dynamic_HPz:                                                   ; Offset_0x01E93A
Dynamic_DEz_Final_Boss:                                        ; Offset_0x01E93A
Dynamic_HPz_Portal:                                            ; Offset_0x01E93A  
                rts 
;-------------------------------------------------------------------------------                
Dynamic_AIz_1:                                                 ; Offset_0x01E93C
                tst.b   (Boss_Flag).w                                ; $FFFFF7AA
                bne.s   Exit_Dynamic_AIz_1                     ; Offset_0x01E94A
                tst.b   (Dynamic_Resize_Routine).w                   ; $FFFFEE33
                bne     Dynamic_Normal                         ; Offset_0x01F2DE
Exit_Dynamic_AIz_1:                                            ; Offset_0x01E94A
                rts
;-------------------------------------------------------------------------------
Dynamic_AIz_2:                                                 ; Offset_0x01E94C
                tst.b   (Boss_Flag).w                                ; $FFFFF7AA
                bne.s   Exit_Dynamic_AIz_2                     ; Offset_0x01E980
                cmpi.w  #$01C0, (Camera_X).w                         ; $FFFFEE78
                bcc     Dynamic_Normal                         ; Offset_0x01F2DE
                lea     (Animate_Counters).w, A3                     ; $FFFFF7F0
                addq.w  #$02, A2
                moveq   #$00, D6
                bsr     Offset_0x01F2E4
                clr.l   (A3)
                clr.l   (A3)
                move.l  #Art_Angel_Island_Leaves, D1           ; Offset_0x089400
                move.w  #$1940, D2
                move.w  #$0230, D3
                jmp     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
Exit_Dynamic_AIz_2:                                            ; Offset_0x01E980
                rts      
;-------------------------------------------------------------------------------
Dynamic_Hz_1:                                                  ; Offset_0x01E982    
                lea     (Animate_Counters+$02).w, A3                 ; $FFFFF7F2
Dynamic_Hz_1_A3:                                               ; Offset_0x01E986
                moveq   #$00, D1
                move.w  (Background_Events+$10).w, D1                ; $FFFFEEE2
                cmp.w   (A3), D1
                beq     Offset_0x01EAA8
                move.w  D1, (A3)
                tst.w   D1
                beq     Offset_0x01EAAC
                bpl     Offset_0x01EA26
                addi.w  #$0080, D1
                bcc     Offset_0x01EAA8
                lsl.w   #$05, D1
                andi.w  #$FFC0, D1
                lea     (M68K_RAM_Start+$7C00), A4                   ; $FFFF7C00
                lea     (Water_Surface_Scroll_Data), A5        ; Offset_0x1C8000
                adda.w  D1, A5
                move.w  #$003F, D1
Offset_0x01E9BE:
                moveq   #$00, D0
                move.b  (A5)+, D0
                add.w   D0, D0
                add.w   D0, D0
                add.w   D0, D0
                lea     (Art_Hydrocity_Water_Surface), A0      ; Offset_0x08A5E0
                adda.w  D0, A0
                move.l  (A0), (A4)
                lea     $0200(A0), A0
                lea     $0200(A4), A4
                move.l  (A0), (A4)
                lea     -$1FC(A4), A4
                addq.w  #$04, D0
                lea     (Art_Hydrocity_Water_Surface), A0      ; Offset_0x08A5E0
                adda.w  D0, A0
                move.l  (A0), (A4)
                lea     $0200(A0), A0
                lea     $0200(A4), A4
                move.l  (A0), (A4)
                lea     -$1FC(A4), A4
                dbra    D1, Offset_0x01E9BE
                move.l  #M68K_RAM_Start+$7C00, D1                    ; $FFFF7C00
                move.w  #$5100, D2
                move.w  #$0200, D3
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
                tst.w   $0002(A3)
                bmi.s   Offset_0x01EA22
                move.w  #$FFFF, $0002(A3)
                bsr     Offset_0x01EAC8
Offset_0x01EA22:
                bra     Offset_0x01EAA8
Offset_0x01EA26:
                neg.w   D1
                addi.w  #$0080, D1
                bcc.s   Offset_0x01EAA8
                lsl.w   #$05, D1
                andi.w  #$FFC0, D1
                lea     (M68K_RAM_Start+$7C00), A4                   ; $FFFF7C00
                lea     (Water_Surface_Scroll_Data), A5        ; Offset_0x1C8000
                adda.w  D1, A5
                move.w  #$003F, D1
Offset_0x01EA46:
                moveq   #$00, D0
                move.b  (A5)+, D0
                add.w   D0, D0
                add.w   D0, D0
                add.w   D0, D0
                lea     (Art_Hydrocity_Water_Surface_2), A0    ; Offset_0x08ADE0
                adda.w  D0, A0
                move.l  (A0), (A4)
                lea     $0200(A0), A0
                lea     $0200(A4), A4
                move.l  (A0), (A4)
                lea     -$1FC(A4), A4
                addq.w  #$04, D0
                lea     (Art_Hydrocity_Water_Surface_2), A0    ; Offset_0x08ADE0
                adda.w  D0, A0
                move.l  (A0), (A4)
                lea     $0200(A0), A0
                lea     $0200(A4), A4
                move.l  (A0), (A4)
                lea     -$1FC(A4), A4
                dbra    D1, Offset_0x01EA46
                move.l  #(M68K_RAM_Start+$7C00), D1                  ; $FFFF7C00
                move.w  #$4D00, D2
                move.w  #$0200, D3
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
                tst.w   $0002(A3)
                beq.s   Offset_0x01EAA8
                move.w  #$0000, $0002(A3)
                bsr.s   Offset_0x01EAB4
Offset_0x01EAA8:
                bra     Dynamic_Normal                         ; Offset_0x01F2DE
Offset_0x01EAAC:
                move.w  #$0001, $0002(A3)
                bsr.s   Offset_0x01EAC8
Offset_0x01EAB4:                                   
                move.l  #Art_Hydrocity_Background, D1          ; Offset_0x08A9E0
                move.w  #$5100, D2
                move.w  #$0200, D3
                jmp     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
Offset_0x01EAC8:
                move.l  #Art_Hydrocity_Background_2, D1        ; Offset_0x08B1E0
                move.w  #$4D00, D2
                move.w  #$0200, D3
                jmp     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
;-------------------------------------------------------------------------------
Offset_0x01EADC:
                lea     (MGz_1_Animate), A2                    ; Offset_0x01F408
                lea     (Animate_Counters+$02).w, A3                 ; $FFFFF7F2
                move.w  (Background_Events+$10).w, D1                ; $FFFFEEE2
                beq.s   Offset_0x01EAAC
                bpl.s   Offset_0x01EAF4
                bsr.s   Offset_0x01EAC8
                bra     Dynamic_Hz_1_A3                        ; Offset_0x01E986
Offset_0x01EAF4:
                bsr.s   Offset_0x01EAB4
                bra     Dynamic_Hz_1_A3                        ; Offset_0x01E986                
;-------------------------------------------------------------------------------
Dynamic_Hz_2:                                                  ; Offset_0x01EAFA
                lea     (Animate_Counters).w, A3                     ; $FFFFF7F0
                moveq   #$00, D1
                move.w  (Background_Events+$10).w, D1                ; $FFFFEEE2
                andi.w  #$001F, D1
                cmp.b   $0001(A3), D1
                beq.s   Offset_0x01EB56
                move.b  D1, $0001(A3)
                move.w  D1, D2
                andi.w  #$0007, D1
                lsl.w   #$07, D1
                move.l  D1, D5
                andi.w  #$0018, D2
                move.w  D2, D0
                lsl.w   #$02, D2
                add.w   D2, D1
                lsr.w   #$01, D0
                lea     Offset_0x01EB5A(PC, D0), A4
                lea     (Art_Hydrocity_Background_3), A0       ; Offset_0x08C060
                move.w  #$5900, D4
                add.l   A0, D1
                move.w  D4, D2
                move.w  (A4)+, D3
                add.w   D3, D4
                add.w   D3, D4
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
                move.l  D5, D1
                add.l   A0, D1
                move.w  D4, D2
                move.w  (A4)+, D3
                beq.s   Offset_0x01EB56
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
Offset_0x01EB56:
                addq.w  #$02, A3
                bra.s   Offset_0x01EB6A      
;-------------------------------------------------------------------------------
Offset_0x01EB5A:
                dc.w    $0040, $0000, $0030, $0010, $0020, $0020, $0010, $0030
;-------------------------------------------------------------------------------
Offset_0x01EB6A:
                moveq   #$00, D1
                move.w  (Background_Events+$12).w, D1                ; $FFFFEEE4
                andi.w  #$001F, D1
                cmp.b   $0001(A3), D1
                beq.s   Offset_0x01EBC2
                move.b  D1, $0001(A3)
                move.w  D1, D2
                andi.w  #$0007, D1
                lsl.w   #$08, D1
                move.l  D1, D5
                andi.w  #$0018, D2
                move.w  D2, D0
                lsl.w   #$03, D2
                add.w   D2, D1
                lsr.w   #$01, D0
                lea     Offset_0x01EBC6(PC, D0), A4
                lea     (Art_Hydrocity_Background_4), A0       ; Offset_0x08C460
                move.w  #$5980, D4
                add.l   A0, D1
                move.w  D4, D2
                move.w  (A4)+, D3
                add.w   D3, D4
                add.w   D3, D4
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
                move.l  D5, D1
                add.l   A0, D1
                move.w  D4, D2
                move.w  (A4)+, D3
                beq.s   Offset_0x01EBC2
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
Offset_0x01EBC2:
                addq.w  #$02, A3
                bra.s   Offset_0x01EBD6 
;-------------------------------------------------------------------------------   
Offset_0x01EBC6:
                dc.w    $0080, $0000, $0060, $0020, $0040, $0040, $0020, $0060
;-------------------------------------------------------------------------------   
Offset_0x01EBD6:
                moveq   #$00, D1
                move.w  (Background_Events+$14).w, D1                ; $FFFFEEE6
                andi.w  #$001F, D1
                cmp.b   $0001(A3), D1
                beq.s   Offset_0x01EC2E
                move.b  D1, $0001(A3)
                move.w  D1, D2
                andi.w  #$0007, D1
                ror.w   #$07, D1
                move.l  D1, D5
                andi.w  #$0018, D2
                move.w  D2, D0
                lsl.w   #$04, D2
                add.w   D2, D1
                lsr.w   #$01, D0
                lea     Offset_0x01EC32(PC, D0), A4
                lea     (Art_Hydrocity_Background_5), A0       ; Offset_0x08CC60
                move.w  #$5A80, D4
                add.l   A0, D1
                move.w  D4, D2
                move.w  (A4)+, D3
                add.w   D3, D4
                add.w   D3, D4
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
                move.l  D5, D1
                add.l   A0, D1
                move.w  D4, D2
                move.w  (A4)+, D3
                beq.s   Offset_0x01EC2E
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
Offset_0x01EC2E:
                addq.w  #$02, A3
                bra.s   Offset_0x01EC42
;-------------------------------------------------------------------------------   
Offset_0x01EC32:
                dc.w    $0100, $0000, $00C0, $0040, $0080, $0080, $0040, $00C0
;-------------------------------------------------------------------------------   
Offset_0x01EC42:
                moveq   #$00, D1
                move.w  (Background_Events+$14).w, D1                ; $FFFFEEE6
                andi.w  #$003F, D1
                cmp.b   $0001(A3), D1
                beq.s   Offset_0x01ECA8
                move.b  D1, $0001(A3)
                neg.w   D1
                move.w  D1, D2
                andi.w  #$0007, D1
                ror.w   #$07, D1
                move.w  D1, D0
                add.w   D0, D0
                add.w   D0, D1
                move.l  D1, D5
                not.w   D2
                andi.w  #$0038, D2
                move.w  D2, D0
                lsl.w   #$03, D2
                add.w   D2, D1
                add.w   D2, D2
                add.w   D2, D1
                lsr.w   #$01, D0
                lea     Offset_0x01ECAE(PC, D0), A4
                lea     (Art_Hydrocity_Background_6), A0       ; Offset_0x08DC60
                move.w  #$5C80, D4
                add.l   A0, D1
                move.w  D4, D2
                move.w  (A4)+, D3
                add.w   D3, D4
                add.w   D3, D4
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
                move.l  D5, D1
                add.l   A0, D1
                move.w  D4, D2
                move.w  (A4)+, D3
                beq.s   Offset_0x01ECA8
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
Offset_0x01ECA8:
                addq.w  #$02, A3
                bra     Dynamic_Normal_A3                      ; Offset_0x01F2E2 
;-------------------------------------------------------------------------------  
Offset_0x01ECAE:
                dc.w    $0300, $0000, $02A0, $0060, $0240, $00C0, $01E0, $0120
                dc.w    $0180, $0180, $0120, $01E0, $00C0, $0240, $0060, $02A0
;-------------------------------------------------------------------------------
Dynamic_MGz_1:                                                 ; Offset_0x01ECCE  
Dynamic_MGz_2:                                                 ; Offset_0x01ECCE
                tst.b   (Boss_Flag).w                                ; $FFFFF7AA
                beq     Dynamic_Normal                         ; Offset_0x01F2DE
                rts        
;-------------------------------------------------------------------------------
Dynamic_CNz_1:                                                 ; Offset_0x01ECD8  
Dynamic_CNz_2:                                                 ; Offset_0x01ECD8
                lea     (Animate_Counters).w, A3                     ; $FFFFF7F0
                moveq   #$00, D1
                move.w  (Background_Events+$10).w, D1                ; $FFFFEEE2
                sub.w   (Screen_Pos_Buffer_X_2).w, D1                ; $FFFFEE8C
                andi.w  #$003F, D1
                cmp.b   $0001(A3), D1
                beq.s   Offset_0x01ED38
                move.b  D1, $0001(A3)
                move.w  D1, D2
                andi.w  #$0007, D1
                ror.w   #$06, D1
                move.l  D1, D5
                andi.w  #$0038, D2
                move.w  D2, D0
                lsl.w   #$04, D2
                add.w   D2, D1
                lsr.w   #$01, D0
                lea     Offset_0x01ED3E(PC, D0), A4
                lea     (Art_Carnival_Night_Background), A0    ; Offset_0x099440
                move.w  #$6100, D4
                add.l   A0, D1
                move.w  D4, D2
                move.w  (A4)+, D3
                add.w   D3, D4
                add.w   D3, D4
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
                move.l  D5, D1
                add.l   A0, D1
                move.w  D4, D2
                move.w  (A4)+, D3
                beq.s   Offset_0x01ED38
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
Offset_0x01ED38:
                addq.w  #$02, A3
                bra     Dynamic_Normal_A3                      ; Offset_0x01F2E2  
;-------------------------------------------------------------------------------
Offset_0x01ED3E:
                dc.w    $0200, $0000, $01C0, $0040, $0180, $0080, $0140, $00C0
                dc.w    $0100, $0100, $00C0, $0140, $0080, $0180, $0040, $01C0
;------------------------------------------------------------------------------- 
Offset_0x01ED5E:                 
                dc.w    $0100, $0000, $00C0, $0040, $0080, $0080, $0040, $00C0 
;-------------------------------------------------------------------------------   
Dynamic_Iz_1:                                                  ; Offset_0x01ED6E     
Dynamic_Iz_2:                                                  ; Offset_0x01ED6E
                lea     (Animate_Counters).w, A3                     ; $FFFFF7F0
                moveq   #$00, D0
                move.w  (Background_Events+$10).w, D0                ; $FFFFEEE2
                sub.w   (Screen_Pos_Buffer_X_2).w, D0                ; $FFFFEE8C
                andi.w  #$001F, D0
                cmp.b   $0001(A3), D0
                beq.s   Offset_0x01EDD4
                move.b  D0, $0001(A3)
                move.l  D0, D1
                move.w  D0, D2
                andi.w  #$0007, D1
                ror.w   #$07, D1
                move.l  D1, D5
                andi.w  #$0018, D2
                move.w  D2, D0
                lsl.w   #$04, D2
                add.w   D2, D1
                lsr.w   #$01, D0
                lea     Offset_0x01ED5E(PC, D0), A4
                lea     (Art_Iz_Background), A0                ; Offset_0x09BE40
                move.w  #$2160, D4
                add.l   A0, D1
                move.w  D4, D2
                move.w  (A4)+, D3
                add.w   D3, D4
                add.w   D3, D4
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
                move.l  D5, D1
                add.l   A0, D1
                move.w  D4, D2
                move.w  (A4)+, D3
                beq.s   Offset_0x01EDD4
                add.w   D3, D4
                add.w   D3, D4
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
Offset_0x01EDD4:
                addq.w  #$02, A3
                tst.b   (Current_Act).w                                   ; $FFFFFE11
                bne     Offset_0x01EE68
                moveq   #$00, D1
                move.w  (Background_Events+$12).w, D1                ; $FFFFEEE4
                andi.w  #$003F, D1
                cmp.b   $0001(A3), D1
                beq.s   Offset_0x01EE68
                move.b  D1, $0001(A3)
                add.w   D1, D1
                add.w   D1, D1
                addi.l  #Art_Iz_Background_2, D1               ; Offset_0x09CE40
                move.w  #$23E0, D2
                move.w  #$0100, D3
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
                moveq   #$00, D1
                move.b  $0001(A3), D1
                andi.w  #$003E, D1
                add.w   D1, D1
                addi.l  #Art_Iz_Background_3, D1               ; Offset_0x09D040
                move.w  #$24E0, D2
                move.w  #$0080, D3
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
                moveq   #$00, D1
                move.b  $0001(A3), D1
                andi.w  #$003C, D1
                addi.l  #Art_Iz_Background_4, D1               ; Offset_0x09D140
                move.w  #$2560, D2
                move.w  #$0040, D3
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
                moveq   #$00, D1
                move.b  $0001(A3), D1
                andi.w  #$0038, D1
                lsr.w   #$01, D1
                addi.l  #Art_Iz_Background_5, D1               ; Offset_0x09D1C0
                move.w  #$25A0, D2
                move.w  #$0020, D3
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
Offset_0x01EE68:
                addq.w  #$02, A3
                bra     Dynamic_Normal_A3                      ; Offset_0x01F2E2
;-------------------------------------------------------------------------------                  
                rts     
;-------------------------------------------------------------------------------   
Dynamic_LBz_1:                                                 ; Offset_0x01EE70
                lea     (Animate_Counters).w, A3                     ; $FFFFF7F0
                subq.b  #$01, (A3)
                bcc.s   Offset_0x01EEA4
                move.b  #$03, (A3)
                moveq   #$00, D0
                move.b  $0001(A3), D0
                addq.b  #$01, $0001(A3)
                andi.b  #$0F, $0001(A3)
                ror.w   #$07, D0
                move.l  #Art_LBz_Foreground_Cylinder, D1       ; Offset_0x09FC00
                add.l   D0, D1
                move.w  #$6E80, D2
                move.w  #$0100, D3
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
Offset_0x01EEA4:
                addq.w  #$02, A3
                moveq   #$00, D0
                move.w  (Background_Events+$10).w, D0                ; $FFFFEEE2
                sub.w   (Screen_Pos_Buffer_X_2).w, D0                ; $FFFFEE8C
                andi.w  #$001F, D0
                cmp.b   $0001(A3), D0
                beq.s   Offset_0x01EF2C
                move.b  D0, $0001(A3)
                moveq   #$00, D1
                move.w  D0, D2
                andi.w  #$0007, D0
                move.l  D0, D6
                lsl.w   #$07, D0
                move.w  D0, D1
                lsl.w   #$02, D0
                add.w   D0, D1
                move.l  D1, D5
                andi.w  #$0018, D2
                move.w  D2, D0
                lsl.w   #$02, D2
                add.w   D2, D1
                lsl.w   #$02, D2
                add.w   D2, D1
                lsr.w   #$01, D0
                lea     Offset_0x01EF50(PC, D0), A4
                lea     (Art_LBz_Background_Mountains), A0     ; Offset_0x09DB00
                move.w  #$6AE0, D4
                add.l   A0, D1
                move.w  D4, D2
                move.w  (A4)+, D3
                add.w   D3, D4
                add.w   D3, D4
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
                move.l  D5, D1
                add.l   A0, D1
                move.w  D4, D2
                move.w  (A4)+, D3
                beq.s   Offset_0x01EF14
                add.w   D3, D4
                add.w   D3, D4
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
Offset_0x01EF14:
                move.l  D6, D1
                lsl.w   #$05, D1
                lea     (Art_LBz_Ocean), A0                    ; Offset_0x09EF00
                add.l   A0, D1
                move.w  D4, D2
                move.w  #$0010, D3
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
Offset_0x01EF2C:
                addq.w  #$02, A3
                tst.w   (A3)+
                bne.s   Offset_0x01EF3E
                cmpi.b  #$01, $0001(A3)
                beq.s   Offset_0x01EF42
                move.w  #$0000, (A3)
Offset_0x01EF3E:
                bsr     Dynamic_Normal_A3                      ; Offset_0x01F2E2
Offset_0x01EF42:
                lea     (Sprite_Table_Buffer-$04).w, A3              ; $FFFFF7FC
                lea     (LBz_1_Animate_2), A2                  ; Offset_0x01F4CC
                bra     Dynamic_Normal_A3                      ; Offset_0x01F2E2  
;-------------------------------------------------------------------------------
Offset_0x01EF50:
                dc.w    $0140, $0000, $00F0, $0050, $00A0, $00A0, $0050, $00F0   
;-------------------------------------------------------------------------------  
Dynamic_LBz_2:                                                 ; Offset_0x01EF60
                lea     (Animate_Counters).w, A3                     ; $FFFFF7F0
                subq.b  #$01, (A3)
                bcc.s   Offset_0x01EF94
                move.b  #$03, (A3)
                moveq   #$00, D0
                move.b  $0001(A3), D0
                addq.b  #$01, $0001(A3)
                andi.b  #$0F, $0001(A3)
                ror.w   #$07, D0
                move.l  #Art_LBz_Foreground_Cylinder, D1       ; Offset_0x09FC00
                add.l   D0, D1
                move.w  #$55E0, D2
                move.w  #$0100, D3
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
Offset_0x01EF94:
                addq.w  #$02, A3
                moveq   #$00, D1
                move.w  (Background_Events+$12).w, D1                ; $FFFFEEE4
                sub.w   (Screen_Pos_Buffer_X_2).w, D1                ; $FFFFEE8C
                andi.w  #$000F, D1
                cmp.b   $0001(A3), D1
                beq.s   Offset_0x01EFC4
                move.b  D1, $0001(A3)
                lsl.w   #$06, D1
                addi.l  #Art_LBz_Background_Bricks, D1         ; Offset_0x09F000
                move.w  #$5D00, D2
                move.w  #$0020, D3
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
Offset_0x01EFC4:
                bsr.s   Offset_0x01EFCC
                addq.w  #$02, A3
                bra     Dynamic_Normal_A3                      ; Offset_0x01F2E2
Offset_0x01EFCC:
                addq.w  #$02, A3
                moveq   #$00, D1
                move.w  (Background_Events+$10).w, D1                ; $FFFFEEE2
                cmp.w   (A3), D1
                beq     Offset_0x01F0B0
                move.w  D1, (A3)
                tst.w   D1
                beq     Offset_0x01F0B2
                bpl     Offset_0x01F04C
                addi.w  #$0040, D1
                bcc     Offset_0x01F0B0
                lsl.w   #$06, D1
                lea     (M68K_RAM_Start+$7E00), A4                   ; $FFFF7E00
                lea     (Water_Surface_Scroll_Data), A5        ; Offset_0x1C8000
                adda.w  D1, A5
                move.w  #$003F, D1
Offset_0x01F002:
                moveq   #$00, D0
                move.b  (A5)+, D0
                add.w   D0, D0
                add.w   D0, D0
                lea     (Art_LBz_Water_Surface), A0            ; Offset_0x09F400
                adda.w  D0, A0
                move.l  (A0), (A4)
                lea     $0100(A0), A0
                lea     $0100(A4), A4
                move.l  (A0), (A4)
                lea     -$FC(A4), A4
                dbra    D1, Offset_0x01F002
                move.l  #(M68K_RAM_Start+$7E00), D1                  ; $FFFF7E00
                move.w  #$5900, D2
                move.w  #$0100, D3
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
                tst.w   $0002(A3)
                bmi.s   Offset_0x01F04A
                move.w  #$FFFF, $0002(A3)
                bsr     Offset_0x01F0CE
Offset_0x01F04A:
                rts
Offset_0x01F04C:
                neg.w   D1
                addi.w  #$0040, D1
                bcc.s   Offset_0x01F0B0
                lsl.w   #$06, D1
                lea     (M68K_RAM_Start+$7E00), A4                   ; $FFFF7E00
                lea     (Water_Surface_Scroll_Data), A5        ; Offset_0x1C8000
                adda.w  D1, A5
                move.w  #$003F, D1
Offset_0x01F068:
                moveq   #$00, D0
                move.b  (A5)+, D0
                add.w   D0, D0
                add.w   D0, D0
                lea     (Art_LBz_Water_Surface_Above), A0      ; Offset_0x09F800
                adda.w  D0, A0
                move.l  (A0), (A4)
                lea     $0100(A0), A0
                lea     $0100(A4), A4
                move.l  (A0), (A4)
                lea     -$FC(A4), A4
                dbra    D1, Offset_0x01F068
                move.l  #(M68K_RAM_Start+$7E00), D1                  ; $FFFF7E00
                move.w  #$5B00, D2
                move.w  #$0100, D3
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
                tst.w   $0002(A3)
                beq.s   Offset_0x01F0AE
                move.w  #$0000, $0002(A3)
                bsr.s   Offset_0x01F0BA
Offset_0x01F0AE:
                rts
Offset_0x01F0B0:
                rts
Offset_0x01F0B2:
                move.w  #$0001, $0002(A3)
                bsr.s   Offset_0x01F0CE
Offset_0x01F0BA:
                move.l  #Art_LBz_Background_Above_Water, D1    ; Offset_0x09F600
                move.w  #$5900, D2
                move.w  #$0100, D3
                jmp     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
Offset_0x01F0CE:
                move.l  #Art_LBz_Background_Under_Water, D1    ; Offset_0x09FA00
                move.w  #$5B00, D2
                move.w  #$0100, D3
                jmp     (DMA_68KtoVRAM)                        ; Offset_0x0012FC   
;-------------------------------------------------------------------------------    
Offset_0x01F0E2:
                lea     (Animate_Counters).w, A3                     ; $FFFFF7F0
                move.w  (Background_Events+$10).w, D1                ; $FFFFEEE2
                beq.s   Offset_0x01F0B2
                bpl.s   Offset_0x01F0F4
                bsr.s   Offset_0x01F0CE
                bra     Offset_0x01EFCC
Offset_0x01F0F4:
                bsr.s   Offset_0x01F0BA
                bra     Offset_0x01EFCC  
;-------------------------------------------------------------------------------   
Dynamic_LRz_1:                                                 ; Offset_0x01F0FA
                lea     (Animate_Counters).w, A3                     ; $FFFFF7F0
                moveq   #$00, D0
                move.w  (Background_Events+$12).w, D0                ; $FFFFEEE4
                sub.w   (Screen_Pos_Buffer_X_2).w, D0                ; $FFFFEE8C
                divu.w  #$0030, D0
                swap.w  D0
                cmp.b   $0001(A3), D0
                beq.s   Offset_0x01F168
                move.b  D0, $0001(A3)
                moveq   #$00, D1
                move.w  D0, D2
                andi.w  #$0007, D0
                lsl.w   #$07, D0
                move.w  D0, D1
                lsl.w   #$03, D0
                add.w   D0, D1
                move.l  D1, D5
                andi.w  #$0038, D2
                move.w  D2, D0
                lsl.w   #$03, D2
                add.w   D2, D1
                add.w   D2, D2
                add.w   D2, D1
                lsr.w   #$01, D0
                lea     Offset_0x01F16E(PC, D0), A4
                lea     (Art_LRz_Background), A0               ; Offset_0x0A2180
                move.w  #$6020, D4
                add.l   A0, D1
                move.w  D4, D2
                move.w  (A4)+, D3
                add.w   D3, D4
                add.w   D3, D4
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
                move.l  D5, D1
                add.l   A0, D1
                move.w  D4, D2
                move.w  (A4)+, D3
                beq.s   Offset_0x01F168
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
Offset_0x01F168:
                addq.w  #$02, A3
                bra     Offset_0x01F186    
;-------------------------------------------------------------------------------
Offset_0x01F16E:
                dc.w    $0240, $0000, $01E0, $0060, $0180, $00C0, $0120, $0120
                dc.w    $00C0, $0180, $0060, $01E0
;------------------------------------------------------------------------------- 
Offset_0x01F186:
                moveq   #$00, D0
                move.w  (Background_Events+$10).w, D0                ; $FFFFEEE2
                sub.w   (Screen_Pos_Buffer_X_2).w, D0                ; $FFFFEE8C
                andi.w  #$001F, D0
                cmp.b   $0001(A3), D0
                beq.s   Offset_0x01F1E6
                move.b  D0, $0001(A3)
                moveq   #$00, D1
                move.w  D0, D2
                andi.w  #$0007, D0
                lsl.w   #$08, D0
                move.w  D0, D1
                move.l  D1, D5
                andi.w  #$0018, D2
                move.w  D2, D0
                lsl.w   #$03, D2
                add.w   D2, D1
                lsr.w   #$01, D0
                lea     Offset_0x01F1E8(PC, D0), A4
                lea     (Art_LRz_Background_Lava), A0          ; Offset_0x0A4580
                move.w  #$64A0, D4
                add.l   A0, D1
                move.w  D4, D2
                move.w  (A4)+, D3
                add.w   D3, D4
                add.w   D3, D4
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
                move.l  D5, D1
                add.l   A0, D1
                move.w  D4, D2
                move.w  (A4)+, D3
                beq.s   Offset_0x01F1E6
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
Offset_0x01F1E6:
                rts  
;-------------------------------------------------------------------------------  
Offset_0x01F1E8:
                dc.w    $0080, $0000, $0060, $0020, $0040, $0040, $0020, $0060   
;-------------------------------------------------------------------------------
Dynamic_DPz_1:                                                 ; Offset_0x01F1F8
Dynamic_DPz_2:                                                 ; Offset_0x01F1F8
                lea     (Animate_Counters).w, A3                     ; $FFFFF7F0
                moveq   #$00, D1
                move.w  (Background_Events+$10).w, D1                ; $FFFFEEE2
                sub.w   (Screen_Pos_Buffer_X_2).w, D1                ; $FFFFEE8C
                andi.w  #$003F, D1
                cmp.b   $0001(A3), D1
                beq.s   Offset_0x01F258
                move.b  D1, $0001(A3)
                move.w  D1, D2
                andi.w  #$0007, D1
                ror.w   #$06, D1
                move.l  D1, D5
                andi.w  #$0038, D2
                move.w  D2, D0
                lsl.w   #$04, D2
                add.w   D2, D1
                lsr.w   #$01, D0
                lea     Offset_0x01F25C(PC, D0), A4
                lea     (Art_DPz_Background_Sand_Dunes), A0    ; Offset_0x0A6640
                move.w  #$2A60, D4
                add.l   A0, D1
                move.w  D4, D2
                move.w  (A4)+, D3
                add.w   D3, D4
                add.w   D3, D4
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
                move.l  D5, D1
                add.l   A0, D1
                move.w  D4, D2
                move.w  (A4)+, D3
                beq.s   Offset_0x01F258
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
Offset_0x01F258:
                addq.w  #$02, A3
                bra.s   Offset_0x01F27C                 
;-------------------------------------------------------------------------------  
Offset_0x01F25C:
                dc.w    $0200, $0000, $01C0, $0040, $0180, $0080, $0140, $00C0
                dc.w    $0100, $0100, $00C0, $0140, $0080, $0180, $0040, $01C0 
;-------------------------------------------------------------------------------   
Offset_0x01F27C:
                moveq   #$00, D1
                move.w  (Background_Events+$12).w, D1                ; $FFFFEEE4
                sub.w   (Screen_Pos_Buffer_X_P2_2).w, D1             ; $FFFFEE70
                andi.w  #$003F, D1
                cmp.b   $0001(A3), D1
                beq.s   Offset_0x01F2D8
                move.b  D1, $0001(A3)
                move.w  D1, D2
                andi.w  #$0007, D1
                ror.w   #$06, D1
                move.l  D1, D5
                andi.w  #$0038, D2
                move.w  D2, D0
                lsl.w   #$04, D2
                add.w   D2, D1
                lsr.w   #$01, D0
                lea     Offset_0x01F25C(PC, D0), A4
                lea     (Art_DPz_Background_Sand_Dunes), A0    ; Offset_0x0A6640
                move.w  #$2E60, D4
                add.l   A0, D1
                move.w  D4, D2
                move.w  (A4)+, D3
                add.w   D3, D4
                add.w   D3, D4
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
                move.l  D5, D1
                add.l   A0, D1
                move.w  D4, D2
                move.w  (A4)+, D3
                beq.s   Offset_0x01F2D8
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
Offset_0x01F2D8:
                addq.w  #$02, A3
                bra     Dynamic_Normal_A3                      ; Offset_0x01F2E2
;------------------------------------------------------------------------------- 
Dynamic_ALz_1:                                                 ; Offset_0x01F2DE
Dynamic_ALz_2:                                                 ; Offset_0x01F2DE  
Dynamic_BPz_1:                                                 ; Offset_0x01F2DE  
Dynamic_BPz_2:                                                 ; Offset_0x01F2DE
;-------------------------------------------------------------------------------
Dynamic_Normal:                                                ; Offset_0x01F2DE
                lea     (Animate_Counters).w, A3                     ; $FFFFF7F0
Dynamic_Normal_A3:                                             ; Offset_0x01F2E2
                move.w  (A2)+, D6
Offset_0x01F2E4:
                subq.b  #$01, (A3)
                bcc.s   Offset_0x01F32A
                moveq   #$00, D0
                move.b  $0001(A3), D0
                cmp.b   $0006(A2), D0
                bcs.s   Offset_0x01F2FA
                moveq   #$00, D0
                move.b  D0, $0001(A3)
Offset_0x01F2FA:
                addq.b  #$01, $0001(A3)
                move.b  (A2), (A3)
                bpl.s   Offset_0x01F308
                add.w   D0, D0
                move.b  $09(A2, D0), (A3)
Offset_0x01F308:
                move.b  $08(A2, D0), D0
                lsl.w   #$05, D0
                move.w  $0004(A2), D2
                move.l  (A2), D1
                andi.l  #$00FFFFFF, D1
                add.l   D0, D1
                moveq   #$00, D3
                move.b  $0007(A2), D3
                lsl.w   #$04, D3
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
Offset_0x01F32A:
                move.b  $0006(A2), D0
                tst.b   (A2)
                bpl.s   Offset_0x01F334
                add.b   D0, D0
Offset_0x01F334:
                addq.b  #$01, D0
                andi.w  #$00FE, D0
                lea     $08(A2, D0), A2
                addq.w  #$02, A3
                dbra    D6, Offset_0x01F2E4
                rts               
;-------------------------------------------------------------------------------  
; Script de anima��o das sprites para a Angel Island
; ->>>    
;------------------------------------------------------------------------------- 
AIz_1_Animate:                                                 ; Offset_0x01F346
                dc.w    $0002                               ; Total de Anima��es
                dc.l    ($FF<<$18)|Art_Angel_Island_Stalk      ; Offset_0x0864C0
                dc.w    $5CC0                               ; VRAM
                dc.b    $09, $0C                            ; Quadros / Tiles
                dc.b    $3C, $4F, $30, $05, $18, $05        ; Quadro / Tempo
                dc.b    $0C, $05, $00, $4F, $0C, $03        ; Quadro / Tempo
                dc.b    $18, $03, $24, $01, $30, $01        ; Quadro / Tempo
                dc.l    ($FF<<$18)|Art_Angel_Island_Stalk      ; Offset_0x0864C0
                dc.w    $5E40                               ; VRAM 
                dc.b    $08, $0C                            ; Quadros / Tiles
                dc.b    $18, $05, $24, $05, $30, $05        ; Quadro / Tempo
                dc.b    $3C, $27, $00, $05, $0C, $05        ; Quadro / Tempo
                dc.b    $18, $05, $24, $05                  ; Quadro / Tempo
                dc.l    ($FF<<$18)|Art_Angel_Island_Stalk_with_Fruits ; Offset_0x086DC0
                dc.w    $5FC0                               ; VRAM 
                dc.b    $08, $06                            ; Quadros / Tiles
                dc.b    $00, $07, $06, $03, $0C, $03        ; Quadro / Tempo
                dc.b    $12, $03, $18, $07, $12, $03        ; Quadro / Tempo
                dc.b    $0C, $03, $06, $03                  ; Quadro / Tempo
;-------------------------------------------------------------------------------                  
AIz_2_Animate:                                                 ; Offset_0x01F392  
                dc.w    $0004                               ; Total de Anima��es
                dc.l    ($03<<$18)|Art_Angel_Island_Leaves_Burning ; Offset_0x087A80
                dc.w    $1660                               ; VRAM 
                dc.b    $04, $17                            ; Quadros / Tiles
                dc.b    $00, $17, $2E, $45                  ; Quadro / Tempo
                dc.l    ($FF<<$18)|Art_Angel_Island_Stalk_2    ; Offset_0x087180
                dc.w    $1940                               ; VRAM 
                dc.b    $09, $0C                            ; Quadros / Tiles
                dc.b    $3C, $4F, $30, $05, $18, $05        ; Quadro / Tempo
                dc.b    $0C, $05, $00, $4F, $0C, $03        ; Quadro / Tempo
                dc.b    $18, $03, $24, $01, $30, $01
                dc.l    ($FF<<$18)|Art_Angel_Island_Stalk_2    ; Offset_0x087180
                dc.w    $1AC0                               ; VRAM 
                dc.b    $08, $0C                            ; Quadros / Tiles
                dc.b    $18, $05, $24, $05, $30, $05        ; Quadro / Tempo
                dc.b    $3C, $27, $00, $05, $0C, $05        ; Quadro / Tempo
                dc.b    $18, $05, $24, $05                  ; Quadro / Tempo
                dc.l    ($03<<$18)|Art_Angel_Island_Leaves_Burning_Background ; Offset_0x089200        
                dc.w    $1C40                               ; VRAM 
                dc.b    $04, $04                            ; Quadros / Tiles
                dc.b    $00, $04, $08, $0C                  ; Quadro / Tempo
                dc.l    ($03<<$18)|Art_Angel_Island_Burning_Background ; Offset_0x088600 
                dc.w    $1CC0                               ; VRAM 
                dc.b    $04, $18                            ; Quadros / Tiles
                dc.b    $00, $18, $30, $48                  ; Quadro / Tempo
;-------------------------------------------------------------------------------  
; Script de anima��o das sprites para a Angel Island
; <<<-    
;-------------------------------------------------------------------------------                  
Hz_1_Animate:                                                  ; Offset_0x01F3EA   
                dc.w    $0000                               ; Total de Anima��es 
                dc.l    ($FF<<$18)|Art_Hydrocity_Conveyor_Belt ; Offset_0x089860
                dc.w    $2640                               ; VRAM 
                dc.b    $03, $24                            ; Quadros / Tiles
                dc.b    $00, $02, $24, $01, $48, $02        ; Quadro / Tempo
;-------------------------------------------------------------------------------                  
Hz_2_Animate:                                                  ; Offset_0x01F3FA
                dc.w    $0000                               ; Total de Anima��es
                dc.l    ($03<<$18)|Art_Hydrocity_Waterfall     ; Offset_0x08B5E0
                dc.w    $4A80                               ; VRAM 
                dc.b    $04, $15                            ; Quadros / Tiles
                dc.b    $00, $15, $2A, $3F                  ; Quadro / Tempo                 
;-------------------------------------------------------------------------------  
MGz_1_Animate:                                                 ; Offset_0x01F408   
MGz_2_Animate:                                                 ; Offset_0x01F408     
                dc.w    $0001                               ; Total de Anima��es
                dc.l    ($09<<$18)|Art_Marble_Garden_Mud       ; Offset_0x090C60
                dc.w    $44C0                               ; VRAM
                dc.b    $06, $30                            ; Quadros / Tiles
                dc.b    $00, $30, $60, $90, $C0, $F0        ; Quadro / Tempo  
                dc.l    ($FF<<$18)|Art_Marble_Garden_Fruits    ; Offset_0x093060
                dc.w    $4AC0                               ; VRAM
                dc.b    $04, $01                            ; Quadros / Tiles
                dc.b    $00, $07, $01, $0E, $02, $07        ; Quadro / Tempo 
                dc.b    $01, $0E                            ; Quadro / Tempo   
;-------------------------------------------------------------------------------  
CNz_1_Animate:                                                 ; Offset_0x01F428  
CNz_2_Animate:                                                 ; Offset_0x01F428 
                dc.w    $0006                               ; Total de Anima��es
                dc.l    ($03<<$18)|Art_Carnival_Night_Diagonal_Barber_Pole ; Offset_0x0930C0
                dc.w    $5640                               ; VRAM
                dc.b    $10, $09                            ; Quadros / Tiles
                dc.b    $00, $12, $24, $36, $48, $5A        ; Quadro / Tempo 
                dc.b    $6C, $7E, $09, $1B, $2D, $3F        ; Quadro / Tempo 
                dc.b    $51, $63, $75, $87                  ; Quadro / Tempo 
                dc.l    ($03<<$18)|Art_Carnival_Night_Diagonal_Barber_Pole ; Offset_0x0930C0
                dc.w    $5760                               ; VRAM
                dc.b    $10, $09                            ; Quadros / Tiles
                dc.b    $09, $1B, $2D, $3F, $51, $63        ; Quadro / Tempo 
                dc.b    $75, $87, $00, $12, $24, $36        ; Quadro / Tempo 
                dc.b    $48, $5A, $6C, $7E                  ; Quadro / Tempo 
                dc.l    ($03<<$18)|Art_Carnival_Night_Diagonal_Barber_Pole_2 ; Offset_0x0942C0
                dc.w    $5880                               ; VRAM
                dc.b    $10, $10                            ; Quadros / Tiles
                dc.b    $00, $10, $20, $30, $40, $50        ; Quadro / Tempo 
                dc.b    $60, $70, $80, $90, $A0, $B0        ; Quadro / Tempo 
                dc.b    $C0, $D0, $E0, $F0                  ; Quadro / Tempo 
                dc.l    ($03<<$18)|Art_Carnival_Night_Vacuum_Tubes ; Offset_0x0962C0
                dc.w    $5A80                               ; VRAM
                dc.b    $08, $20                            ; Quadros / Tiles
                dc.b    $00, $20, $40, $60, $80, $A0        ; Quadro / Tempo  
                dc.b    $C0, $E0                            ; Quadro / Tempo 
                dc.l    ($03<<$18)|Art_Carnival_Night_Rotating_Mesh ; Offset_0x0982C0
                dc.w    $5E80                               ; VRAM
                dc.b    $08, $10                            ; Quadros / Tiles
                dc.b    $00, $10, $20, $30, $40, $50        ; Quadro / Tempo 
                dc.b    $60, $70                            ; Quadro / Tempo 
                dc.l    ($03<<$18)|Art_Carnival_Night_Fan_Lights ; Offset_0x0992C0          
                dc.w    $6080                               ; VRAM
                dc.b    $06, $04                            ; Quadros / Tiles
                dc.b    $00, $04, $08, $00, $04, $08        ; Quadro / Tempo 
                dc.l    ($01<<$18)|Art_Carnival_Night_Wheel    ; Offset_0x09B440
                dc.w    $6500                               ; VRAM
                dc.b    $04, $14                            ; Quadros / Tiles
                dc.b    $00, $14, $28, $3C                  ; Quadro / Tempo 
;------------------------------------------------------------------------------- 
FBz_1_Animate:                                                 ; Offset_0x01F4AC  
FBz_2_Animate:                                                 ; Offset_0x01F4AC                                 
;------------------------------------------------------------------------------- 
Iz_1_Animate:                                                  ; Offset_0x01F4AC   
Iz_2_Animate:                                                  ; Offset_0x01F4AC  
                dc.w    $0000                               ; Total de Anima��es
                dc.l    ($03<<$18)|Art_Iz_Crystal              ; Offset_0x09D200
                dc.w    $2360                               ; VRAM
                dc.b    $08, $04                            ; Quadros / Tiles
                dc.b    $00, $04, $08, $0C, $10, $14        ; Quadro / Tempo 
                dc.b    $18, $1C                            ; Quadro / Tempo 
;-------------------------------------------------------------------------------   
LBz_1_Animate:                                                 ; Offset_0x01F4BE
                dc.w    $0000                               ; Total de Anima��es
                dc.l    ($02<<$18)|Art_LBz_Foreground_Buzzer   ; Offset_0x09D600
                dc.w    $6D80                               ; VRAM
                dc.b    $04, $08                            ; Quadros / Tiles
                dc.b    $00, $08, $10, $18                  ; Quadro / Tempo
;-------------------------------------------------------------------------------
LBz_1_Animate_2:                                               ; Offset_0x01F4CC
                dc.w    $0001                               ; Total de Anima��es
                dc.l    ($07<<$18)|Art_LBz_Foreground_Lights   ; Offset_0x0A1C00
                dc.w    $7080                               ; VRAM
                dc.b    $04, $05                            ; Quadros / Tiles
                dc.b    $00, $05, $0A, $0F                  ; Quadro / Tempo
                dc.l    ($07<<$18)|Art_LBz_Foreground_Pistons  ; Offset_0x0A1E80
                dc.w    $7120                               ; VRAM
                dc.b    $06, $04                            ; Quadros / Tiles
                dc.b    $00, $04, $08, $0C, $10, $14        ; Quadro / Tempo
;-------------------------------------------------------------------------------   
LBz_2_Animate:                                                 ; Offset_0x01F4E8
                dc.w    $0001                               ; Total de Anima��es
                dc.l    ($07<<$18)|Art_LBz_Foreground_Lights   ; Offset_0x0A1C00
                dc.w    $57E0                               ; VRAM
                dc.b    $04, $05                            ; Quadros / Tiles
                dc.b    $00, $05, $0A, $0F                  ; Quadro / Tempo
                dc.l    ($07<<$18)|Art_LBz_Foreground_Pistons  ; Offset_0x0A1E80
                dc.w    $5880                               ; VRAM
                dc.b    $06, $04                            ; Quadros / Tiles
                dc.b    $00, $04, $08, $0C, $10, $14        ; Quadro / Tempo
;-------------------------------------------------------------------------------   
MVz_1_Animate:                                                 ; Offset_0x01F504  
MVz_2_Animate:                                                 ; Offset_0x01F504  
Sz_1_Animate:                                                  ; Offset_0x01F504  
Sz_2_Animate:                                                  ; Offset_0x01F504    
LRz_1_Animate:                                                 ; Offset_0x01F504  
LRz_2_Animate:                                                 ; Offset_0x01F504
SSz_1_Animate:                                                 ; Offset_0x01F504
SSz_2_Animate:                                                 ; Offset_0x01F504
DEz_1_Animate:                                                 ; Offset_0x01F504
DEz_2_Animate:                                                 ; Offset_0x01F504
TDz_1_Animate:                                                 ; Offset_0x01F504
TDz_2_Animate:                                                 ; Offset_0x01F504
End_Seq_1_Animate:                                             ; Offset_0x01F504
End_Seq_2_Animate:                                             ; Offset_0x01F504
ALz_1_Animate:                                                 ; Offset_0x01F504
ALz_2_Animate:                                                 ; Offset_0x01F504
                dc.w    $0000                               ; Total de Anima��es
                dc.l    ($09<<$18)|Art_ALz_Quicksand           ; Offset_0x0A4D80
                dc.w    $4700                               ; VRAM
                dc.b    $03, $10                            ; Quadros / Tiles
                dc.b    $00, $10, $20, $00                  ; Quadro / Tempo
;-------------------------------------------------------------------------------
BPz_1_Animate:                                                 ; Offset_0x01F512
BPz_2_Animate:                                                 ; Offset_0x01F512 
                dc.w    $0003                               ; Total de Anima��es
                dc.l    ($07<<$18)|Art_BPz_Foreground_Flags    ; Offset_0x0A5380
                dc.w    $2300                               ; VRAM
                dc.b    $06, $07                            ; Quadros / Tiles
                dc.b    $00, $07, $0E, $15, $1C, $23        ; Quadro / Tempo
                dc.l    ($05<<$18)|Art_BPz_Cylinder         ; Offset_0x0A58C0
                dc.w    $23E0                               ; VRAM
                dc.b    $0A, $08                            ; Quadros / Tiles
                dc.b    $00, $08, $10, $18, $20, $00        ; Quadro / Tempo
                dc.b    $08, $10, $18, $20                  ; Quadro / Tempo
                dc.l    ($02<<$18)|Art_BPz_Background_People   ; Offset_0x0A5DC0
                dc.w    $24E0                               ; VRAM
                dc.b    $02, $03                            ; Quadros / Tiles
                dc.b    $00, $03                            ; Quadro / Tempo
                dc.l    ($04<<$18)|Art_BPz_Background_Flags    ; Offset_0x0A5E80
                dc.w    $2540                               ; VRAM
                dc.b    $02, $01                            ; Quadros / Tiles
                dc.b    $00, $01                            ; Quadro / Tempo
;-------------------------------------------------------------------------------
DPz_1_Animate:                                                 ; Offset_0x01F548
DPz_2_Animate:                                                 ; Offset_0x01F548  
                dc.w    $0000                               ; Total de Anima��es
                dc.l    ($0B<<$18)|Art_DPz_Quicksand           ; Offset_0x0A5EC0
                dc.w    $28E0                               ; VRAM
                dc.b    $05, $0C                            ; Quadros / Tiles
                dc.b    $00, $0C, $18, $24, $30, $00        ; Quadro / Tempo
;-------------------------------------------------------------------------------
CGz_1_Animate:                                                 ; Offset_0x01F558
CGz_2_Animate:                                                 ; Offset_0x01F558
EMz_1_Animate:                                                 ; Offset_0x01F558
EMz_2_Animate:                                                 ; Offset_0x01F558
GM_BS_1_Animate:                                               ; Offset_0x01F558
GM_BS_2_Animate:                                               ; Offset_0x01F558
GS_BS_1_Animate:                                               ; Offset_0x01F558
GS_BS_2_Animate:                                               ; Offset_0x01F558
SM_BS_1_Animate:                                               ; Offset_0x01F558
SM_BS_2_Animate:                                               ; Offset_0x01F558
LRz_2_Boss_Animate:                                            ; Offset_0x01F558
HPz_Animate:                                                   ; Offset_0x01F558
DEz_Final_Boss_Animate:                                        ; Offset_0x01F558
HPz_Portal_Animate:                                            ; Offset_0x01F558  
                rts                           
;===============================================================================
; Rotina para carregar os sprites dinamicamente para a VRAM
; <<<-     Ex: Flores na Emerald Hill, �leo na Oil Ocean, etc ....
;===============================================================================                                       
             
;===============================================================================
; Rotina para inicializar os contadores das anima��es
; ->>>
;===============================================================================
Animate_Counters_Init:                                         ; Offset_0x01F55A
                cmpi.w  #Hz_Act_1, (Current_ZoneAndAct).w               ; $0100, $FFFFFE10
                bne.s   Offset_0x01F566
                bsr     Offset_0x01EADC
Offset_0x01F566:
                cmpi.w  #Hz_Act_2, (Current_ZoneAndAct).w               ; $0101, $FFFFFE10
                bne.s   Offset_0x01F57A
                move.b  #$20, (Animate_Counters+$01).w               ; $FFFFF7F1
                move.b  #$40, (Animate_Counters+$03).w               ; $FFFFF7F3
Offset_0x01F57A:
                cmpi.b  #CNz_Id, (Current_Zone).w                   ; $03, $FFFFFE10
                bne.s   Offset_0x01F5B2
                move.b  #$40, (Animate_Counters+$01).w               ; $FFFFF7F1
                move.b  #$00, (Animate_Counters+$02).w               ; $FFFFF7F2
                move.b  #$00, (Animate_Counters+$04).w               ; $FFFFF7F4
                move.b  #$00, (Animate_Counters+$06).w               ; $FFFFF7F6
                move.b  #$02, (Animate_Counters+$08).w               ; $FFFFF7F8
                move.b  #$02, (Animate_Counters+$0A).w               ; $FFFFF7FA
                move.b  #$02, (Animate_Counters+$0C).w               ; $FFFFF7FC
                move.b  #$01, (Animate_Counters+$0E).w               ; $FFFFF7FE
Offset_0x01F5B2:
                cmpi.w  #LBz_Act_1, (Current_ZoneAndAct).w              ; $0600, $FFFFFE10
                bne.s   Offset_0x01F5C0
                move.b  #$20, (Animate_Counters+$03).w               ; $FFFFF7F3
Offset_0x01F5C0:
                cmpi.w  #LBz_Act_2, (Current_ZoneAndAct).w              ; $0601, $FFFFFE10
                bne.s   Offset_0x01F5D2
                bsr     Offset_0x01F0E2
                move.b  #$10, (Animate_Counters+$01).w               ; $FFFFF7F1
Offset_0x01F5D2:
                cmpi.w  #LRz_Act_1, (Current_ZoneAndAct).w              ; $0900, $FFFFFE10
                bne.s   Offset_0x01F5E6
                move.b  #$FF, (Animate_Counters+$01).w               ; $FFFFF7F1
                move.b  #$FF, (Animate_Counters+$03).w               ; $FFFFF7F3
Offset_0x01F5E6:
                cmpi.w  #DPz_Act_1, (Current_ZoneAndAct).w              ; $1000, $FFFFFE10
                bne.s   Offset_0x01F5FA
                move.b  #$40, (Animate_Counters+$01).w               ; $FFFFF7F1
                move.b  #$40, (Animate_Counters+$03).w               ; $FFFFF7F3
Offset_0x01F5FA:
                rts               
;===============================================================================
; Rotina para inicializar os contadores das anima��es
; <<<-
;===============================================================================   
Obj_0x1E_LBz_Spin_Launcher:                                    ; Offset_0x01F5FC
                include 'data\objects\obj_0x1E.asm'   
Obj_0x1F_LBz_Hook:                                             ; Offset_0x01F892
                include 'data\objects\obj_0x1F.asm' 
Obj_0x20_Smashing_Pillar_Spikes:                               ; Offset_0x01FDB6 
                include 'data\objects\obj_0x20.asm'    
Obj_0x21_LBz_Gate_Laser:                                       ; Offset_0x01FF28
                include 'data\objects\obj_0x21.asm'   
Obj_0x22_LBz_Buzzer:                                           ; Offset_0x02005A
                include 'data\objects\obj_0x22.asm'     
Obj_0x23:                                                      ; Offset_0x02010E 
                include 'data\objects\obj_0x23.asm'                                                                             
; Obj_0x24_Automatic_Tunnel:                                   ; Offset_0x0201C6 
                include 'data\objects\obj_0x24.asm' 
Obj_0x10_LBz_Tube_Elevator:                                    ; Offset_0x020856 
                include 'data\objects\obj_0x10.asm'
; Obj_0x29_AIz_Disappearing_Platform:                          ; Offset_0x020EE0 
                include 'data\objects\obj_0x29.asm'   
Obj_0x2A_Breakable_Floor:                                      ; Offset_0x0211D6
                include 'data\objects\obj_0x2A.asm'   
Obj_0x2B_AIz_Flipping_Bridge:                                  ; Offset_0x021B1C 
                include 'data\objects\obj_0x2B.asm'    
Obj_0x2C_AIz_Collapsing_Bridge:                                ; Offset_0x021F0C
                include 'data\objects\obj_0x2C.asm'   
Obj_0x32_AIz_Draw_Bridge:                                      ; Offset_0x02235C 
                include 'data\objects\obj_0x32.asm'  
; Obj_0x2D_AIz_Falling_Log:                                    ; Offset_0x0227AC 
                include 'data\objects\obj_0x2D.asm'   
Obj_0x2E_AIz_Spiked_Rotating_Log:                              ; Offset_0x022A7E 
                include 'data\objects\obj_0x2E.asm'                               
Obj_0x2F_Still_Sprite:                                         ; Offset_0x022E38
                include 'data\objects\obj_0x2F.asm'
Obj_0x30_Animated_Still_Sprite:                                ; Offset_0x0231C0
                include 'data\objects\obj_0x30.asm'  
Obj_0x35_AIz_Plants:                                           ; Offset_0x023284 
                include 'data\objects\obj_0x35.asm'
Obj_AIz_Tree:                                                  ; Offset_0x0234AA
                include 'data\objects\aiz_tree.asm'     
Obj_0x31_LBz_Rotating_Cylinders:                               ; Offset_0x02350C 
                include 'data\objects\obj_0x31.asm' 
Obj_0x33_Switch:                                               ; Offset_0x023662 
                include 'data\objects\obj_0x33.asm'                                            
Obj_Flickies:                                                  ; Offset_0x0238DA
                include 'data\objects\flickies.asm'                
Obj_Enemy_Points:                                              ; Offset_0x023E42
                include 'data\objects\enemypts.asm'  
;===============================================================================                
Flickies_Mappings:                                             ; Offset_0x023E88
                dc.w    Offset_0x023E96-Flickies_Mappings
                dc.w    Offset_0x023E9E-Flickies_Mappings
                dc.w    Offset_0x023E8E-Flickies_Mappings
Offset_0x023E8E:
                dc.w    $0001
                dc.w    $F406, $0000, $FFF8
Offset_0x023E96:
                dc.w    $0001
                dc.w    $F805, $0006, $FFF8
Offset_0x023E9E:
                dc.w    $0001
                dc.w    $F805, $000A, $FFF8  
;-------------------------------------------------------------------------------
Flickies_Mappings_01:                                          ; Offset_0x023EA6
                dc.w    Offset_0x023EB4-Flickies_Mappings_01
                dc.w    Offset_0x023EBC-Flickies_Mappings_01
                dc.w    Offset_0x023EAC-Flickies_Mappings_01
Offset_0x023EAC:
                dc.w    $0001
                dc.w    $F406, $0000, $FFF8
Offset_0x023EB4:
                dc.w    $0001
                dc.w    $F809, $0006, $FFF4
Offset_0x023EBC:
                dc.w    $0001
                dc.w    $F809, $000C, $FFF4    
;-------------------------------------------------------------------------------
Flickies_Mappings_02:                                          ; Offset_0x023EC4
                dc.w    Offset_0x023ED2-Flickies_Mappings_02
                dc.w    Offset_0x023EDA-Flickies_Mappings_02
                dc.w    Offset_0x023ECA-Flickies_Mappings_02
Offset_0x023ECA:
                dc.w    $0001
                dc.w    $F406, $0000, $FFF8
Offset_0x023ED2:
                dc.w    $0001
                dc.w    $F809, $0006, $FFF4
Offset_0x023EDA:
                dc.w    $0001
                dc.w    $F809, $000C, $FFF4 
;-------------------------------------------------------------------------------
Flickies_Mappings_03:                                          ; Offset_0x023EE2
                dc.w    Offset_0x023EF0-Flickies_Mappings_03
                dc.w    Offset_0x023EF8-Flickies_Mappings_03
                dc.w    Offset_0x023EE8-Flickies_Mappings_03
Offset_0x023EE8:
                dc.w    $0001
                dc.w    $F406, $0000, $FFF8
Offset_0x023EF0:
                dc.w    $0001
                dc.w    $F805, $0006, $FFF8
Offset_0x023EF8:
                dc.w    $0001
                dc.w    $F805, $000A, $FFF8
;-------------------------------------------------------------------------------
Flickies_Mappings_04:                                          ; Offset_0x023F00
                dc.w    Offset_0x023F0E-Flickies_Mappings_04
                dc.w    Offset_0x023F16-Flickies_Mappings_04
                dc.w    Offset_0x023F06-Flickies_Mappings_04
Offset_0x023F06:
                dc.w    $0001
                dc.w    $F406, $0000, $FFF8
Offset_0x023F0E:
                dc.w    $0001
                dc.w    $F406, $0006, $FFF8
Offset_0x023F16:
                dc.w    $0001
                dc.w    $F406, $000C, $FFF8
;-------------------------------------------------------------------------------
Enemy_Points_Mappings:                                         ; Offset_0x023F1E
                dc.w    Map_100_Points-Enemy_Points_Mappings   ; Offset_0x023F2C
                dc.w    Map_200_Points-Enemy_Points_Mappings   ; Offset_0x023F34
                dc.w    Map_500_Points-Enemy_Points_Mappings   ; Offset_0x023F3C
                dc.w    Map_1000_Points-Enemy_Points_Mappings  ; Offset_0x023F44
                dc.w    Map_10_Points-Enemy_Points_Mappings    ; Offset_0x023F52
                dc.w    Map_10000_Points-Enemy_Points_Mappings ; Offset_0x023F5A
                dc.w    Map_50000_Points-Enemy_Points_Mappings ; Offset_0x023F68
Map_100_Points:                                                ; Offset_0x023F2C
                dc.w    $0001
                dc.w    $FC04, $0000, $FFFA
Map_200_Points:                                                ; Offset_0x023F34
                dc.w    $0001
                dc.w    $FC04, $0002, $FFF8
Map_500_Points:                                                ; Offset_0x023F3C
                dc.w    $0001
                dc.w    $FC04, $0004, $FFF8
Map_1000_Points:                                               ; Offset_0x023F44
                dc.w    $0002
                dc.w    $FC00, $0000, $FFF8
                dc.w    $FC04, $0006, $0000
Map_10_Points:                                                 ; Offset_0x023F52
                dc.w    $0001
                dc.w    $FC00, $0000, $FFFC
Map_10000_Points:                                              ; Offset_0x023F5A
                dc.w    $0002
                dc.w    $FC04, $0000, $FFF8
                dc.w    $FC04, $0006, $0005
Map_50000_Points:                                              ; Offset_0x023F68
                dc.w    $0002
                dc.w    $FC04, $0004, $FFF8
                dc.w    $FC04, $0006, $0007                 
;===============================================================================
Obj_0x34_Star_Post:                                            ; Offset_0x023F76
                include 'data\objects\obj_0x34.asm'
Obj_Time_Over_Game_Over:                                       ; Offset_0x02444C
                include 'data\objects\tmgmover.asm'
; Offset_0x024546: Obj_Title_Cards: Obj_TitleCard:
		include	"data\objects\ttlcards.asm"
; Offset_0x0247D0: Obj_LevelResults:
		include	"data\objects\lvresult.asm"
;-------------------------------------------------------------------------------                                   
Offset_0x024BC4:
                jmp     (DeleteObject)                         ; Offset_0x011138
;-------------------------------------------------------------------------------
; Refer�ncia do objeto 0x6F (S2) Originalmente aponta para uma rotina no 
; objeto 0x34 - Title_Cards do Sonic 2 (Offset_0x013DB8 - Sonic 2 rev 2)                
S2_Rev_2_Obj_0x34_Offset_0x013DB8:                            ;  Offset_0x024BCA 
                rts  
Obj_S2_0x6F_Special_Stage_Results: ; Sonic 2 Left over         ; Offset_0x024BCC
                include 'data\s2_obj\obj_0x6F.asm'                                                                  
;-------------------------------------------------------------------------------
; Rotina para carregar os inimigos ap�s a exibi��o dos Title Cards
; ->>>
;-------------------------------------------------------------------------------  
Level_Load_Enemies_Art:                                        ; Offset_0x024F46
                lea     ArtLoadCues_KM(PC), A6                 ; Offset_0x02540C
                move.w  (Apparent_ZoneAndAct).w, D0                           ; $FFFFEE54
                ror.b   #$01, D0
                lsr.w   #$06, D0
                adda.w  $00(A6, D0), A6
                move.w  (A6)+, D6
                bmi.s   Offset_0x024F68
Offset_0x024F5A:
                move.l  (A6)+, A1
                move.w  (A6)+, D2
                jsr     (Queue_Kos_Module)                 ; Offset_0x0018A8
                dbra    D6, Offset_0x024F5A
Offset_0x024F68:
                rts        
;------------------------------------------------------------------------------- 
Special_Stage_Screen_Pos:                                      ; Offset_0x024F6A 
                dc.w    $0240, $0120, $00AA
                dc.b    $02, $00
                dc.w    $0000, $0120, $0098
                dc.b    $04, $01
                dc.w    $0118, $0000, $00C4
                dc.b    $06, $05
                dc.w    $0130, $0000, $00D0
                dc.b    $08, $06
                dc.w    $0130, $0000, $00E8
                dc.b    $0A, $07
                dc.w    $0118, $0000, $00F4
                dc.b    $0C, $08
                dc.w    $0100, $0000, $00E8
                dc.b    $0E, $09
                dc.w    $0100, $0000, $00D0
                dc.b    $10, $0A
                dc.w    $0118, $0000, $00DC
                dc.b    $12, $0B
                dc.w    $0330, $0120, $0108
                dc.b    $14, $0C
                dc.w    $0340, $0120, $0118
                dc.b    $16, $0D
                dc.w    $0350, $0120, $0128
                dc.b    $18, $0E
                dc.w    $0360, $0120, $0138
                dc.b    $1A, $10
;-------------------------------------------------------------------------------  
; Rotina para carregar os inimigos ap�s a exibi��o dos Title Cards
; ->>>
;-------------------------------------------------------------------------------  
Time_Over_Game_Over_Mappings:                                  ; Offset_0x024FD2
                dc.w    Map_Game-Time_Over_Game_Over_Mappings  ; Offset_0x024FDA
                dc.w    Map_Over-Time_Over_Game_Over_Mappings  ; Offset_0x024FE8
                dc.w    Map_Time-Time_Over_Game_Over_Mappings  ; Offset_0x024FF6
                dc.w    Map_Over_-Time_Over_Game_Over_Mappings ; Offset_0x025004
Map_Game:                                                      ; Offset_0x024FDA
                dc.w    $0002
                dc.w    $F80D, $0000, $FFB8
                dc.w    $F80D, $0008, $FFD8
Map_Over:                                                      ; Offset_0x024FE8
                dc.w    $0002
                dc.w    $F80D, $0014, $0008
                dc.w    $F80D, $000C, $0028
Map_Time:                                                      ; Offset_0x024FF6
                dc.w    $0002
                dc.w    $F809, $001C, $FFC4
                dc.w    $F80D, $0008, $FFDC
Map_Over_:                                                     ; Offset_0x025004
                dc.w    $0002
                dc.w    $F80D, $0014, $000C
                dc.w    $F80D, $000C, $002C
;------------------------------------------------------------------------------- 
Title_Cards_Mappings:                                          ; Offset_0x025012
                dc.w    TC_Map_Null-Title_Cards_Mappings            ; Offset_0x025034
                dc.w    TC_Map_Red_Bar-Title_Cards_Mappings         ; Offset_0x025036
                dc.w    TC_Map_Act_Number-Title_Cards_Mappings      ; Offset_0x025098
                dc.w    TC_Map_Zone-Title_Cards_Mappings            ; Offset_0x0250A6
                dc.w    TC_Map_Angel_Island-Title_Cards_Mappings    ; Offset_0x0250C0
                dc.w    TC_Map_Hydrocity-Title_Cards_Mappings       ; Offset_0x025104
                dc.w    TC_Map_Marble_Garden-Title_Cards_Mappings   ; Offset_0x02513C
                dc.w    TC_Map_Carnival_Night-Title_Cards_Mappings  ; Offset_0x025186
                dc.w    TC_Map_Flying_Battery-Title_Cards_Mappings  ; Offset_0x0251D6
                dc.w    TC_Map_Icecap-Title_Cards_Mappings          ; Offset_0x025226
                dc.w    TC_Map_Launch_Base-Title_Cards_Mappings     ; Offset_0x02524C
                dc.w    TC_Map_Mushroom_Valley-Title_Cards_Mappings ; Offset_0x02524C
                dc.w    TC_Map_Sandopolis-Title_Cards_Mappings      ; Offset_0x02524C
                dc.w    TC_Map_Lava_Reef-Title_Cards_Mappings       ; Offset_0x02524C
                dc.w    TC_Map_Sky_Sanctuary-Title_Cards_Mappings   ; Offset_0x02524C
                dc.w    TC_Map_Death_Egg-Title_Cards_Mappings       ; Offset_0x02524C
                dc.w    TC_Map_The_Doomsday-Title_Cards_Mappings    ; Offset_0x02524C
TC_Map_Null:                                                   ; Offset_0x025034
                dc.w    $0000
TC_Map_Red_Bar:                                                ; Offset_0x025036
                dc.w    $0010
                dc.w    $5809, $8510, $FFE8
                dc.w    $5809, $8516, $0000
                dc.w    $900F, $8500, $FFE0
                dc.w    $900F, $8500, $0000
                dc.w    $B00F, $8500, $FFE0
                dc.w    $B00F, $8500, $0000
                dc.w    $D00F, $8500, $FFE0
                dc.w    $D00F, $8500, $0000
                dc.w    $F00F, $8500, $FFE0
                dc.w    $F00F, $8500, $0000
                dc.w    $100F, $8500, $FFE0
                dc.w    $100F, $8500, $0000
                dc.w    $300F, $8500, $FFE0
                dc.w    $300F, $8500, $0000
                dc.w    $500F, $8500, $FFE0
                dc.w    $500F, $8500, $0000
TC_Map_Act_Number:                                             ; Offset_0x025098
                dc.w    $0002
                dc.w    $1009, $8537, $FFE4
                dc.w    $000F, $853D, $FFF5
TC_Map_Zone:                                                   ; Offset_0x0250A6
                dc.w    $0004
                dc.w    $0006, $8531, $FFDC ; Z
                dc.w    $000A, $8528, $FFEC ; O
                dc.w    $0006, $8522, $0004 ; N
                dc.w    $0006, $851C, $0014 ; E
TC_Map_Angel_Island:                                           ; Offset_0x0250C0
                dc.w    $000B
                dc.w    $0006, $854D, $FFE0 ; A
                dc.w    $0006, $8522, $FFF0 ; N
                dc.w    $0006, $8559, $0000 ; G
                dc.w    $0006, $851C, $0010 ; E
                dc.w    $0002, $8562, $0020 ; L
                dc.w    $0002, $855F, $0030 ; I
                dc.w    $0006, $8565, $0038 ; S
                dc.w    $0002, $8562, $0048 ; L
                dc.w    $0006, $854D, $0050 ; A
                dc.w    $0006, $8522, $0060 ; N
                dc.w    $0006, $8553, $0070 ; D
TC_Map_Hydrocity:                                              ; Offset_0x025104
                dc.w    $0009
                dc.w    $0006, $8559, $FFF0 ; H
                dc.w    $0006, $856E, $0000 ; Y
                dc.w    $0006, $8553, $0010 ; D
                dc.w    $0006, $8562, $0020 ; R
                dc.w    $000A, $8528, $0030 ; O
                dc.w    $0006, $854D, $0048 ; C
                dc.w    $0002, $855F, $0058 ; I
                dc.w    $0006, $8568, $0060 ; T
                dc.w    $0006, $856E, $0070 ; Y
TC_Map_Marble_Garden:                                          ; Offset_0x02513C
                dc.w    $000C
                dc.w    $000A, $8568, $FFB8 ; M
                dc.w    $0006, $854D, $FFD0 ; A
                dc.w    $0006, $8571, $FFE0 ; R
                dc.w    $0006, $8553, $FFF0 ; B
                dc.w    $0002, $8565, $0000 ; L
                dc.w    $0006, $851C, $0008 ; E
                dc.w    $0006, $855F, $0020 ; G
                dc.w    $0006, $854D, $0030 ; A
                dc.w    $0006, $8571, $0040 ; R
                dc.w    $0006, $8559, $0050 ; D
                dc.w    $0006, $851C, $0060 ; E
                dc.w    $0006, $8522, $0070 ; N
TC_Map_Carnival_Night:                                         ; Offset_0x025186
                dc.w    $000D
                dc.w    $0006, $8553, $FFC0 ; C
                dc.w    $0006, $854D, $FFD0 ; A
                dc.w    $0006, $856B, $FFE0 ; R
                dc.w    $0006, $8522, $FFF0 ; N
                dc.w    $0002, $8565, $0000 ; I
                dc.w    $0006, $8577, $0008 ; V
                dc.w    $0006, $854D, $0018 ; A
                dc.w    $0002, $8568, $0028 ; L
                dc.w    $0006, $8522, $0038 ; N
                dc.w    $0002, $8565, $0048 ; I
                dc.w    $0006, $8559, $0050 ; G
                dc.w    $0006, $855F, $0060 ; H
                dc.w    $0006, $8571, $0070 ; T
TC_Map_Flying_Battery:                                         ; Offset_0x0251D6
                dc.w    $000D
                dc.w    $0006, $8559, $FFB8 ; F
                dc.w    $0002, $8568, $FFC8 ; L
                dc.w    $0006, $8577, $FFD0 ; Y
                dc.w    $0002, $8565, $FFE0 ; I
                dc.w    $0006, $8522, $FFE8 ; N
                dc.w    $0006, $855F, $FFF8 ; G
                dc.w    $0006, $8553, $0010 ; B
                dc.w    $0006, $854D, $0020 ; A
                dc.w    $0006, $8571, $0030 ; T
                dc.w    $0006, $8571, $0040 ; T
                dc.w    $0006, $851C, $0050 ; E
                dc.w    $0006, $856B, $0060 ; R
                dc.w    $0006, $8577, $0070 ; Y
TC_Map_Icecap:                                                 ; Offset_0x025226
                dc.w    $0006
                dc.w    $0002, $8559, $0028 ; I
                dc.w    $0006, $8553, $0030 ; C
                dc.w    $0006, $851C, $0040 ; E
                dc.w    $0006, $8553, $0050 ; C
                dc.w    $0006, $854D, $0060 ; A
                dc.w    $0006, $855C, $0070 ; P
TC_Map_Launch_Base:                                            ; Offset_0x02524C
TC_Map_Mushroom_Valley:                                        ; Offset_0x02524C
TC_Map_Sandopolis:                                             ; Offset_0x02524C
TC_Map_Lava_Reef:                                              ; Offset_0x02524C
TC_Map_Sky_Sanctuary:                                          ; Offset_0x02524C
TC_Map_Death_Egg:                                              ; Offset_0x02524C
TC_Map_The_Doomsday:                                           ; Offset_0x02524C
                dc.w    $000A
                dc.w    $0002, $8565, $FFE0 ; L
                dc.w    $0006, $854D, $FFE8 ; A
                dc.w    $0006, $856E, $FFF8 ; U
                dc.w    $0006, $8522, $0008 ; N
                dc.w    $0006, $8559, $0018 ; C
                dc.w    $0006, $855F, $0028 ; H
                dc.w    $0006, $8553, $0040 ; B
                dc.w    $0006, $854D, $0050 ; A
                dc.w    $0006, $8568, $0060 ; S
                dc.w    $0006, $851C, $0070 ; E     
;-------------------------------------------------------------------------------  
Level_Results_Mappings:                                        ; Offset_0x02528A
                dc.w    TC_Res_Map_Null-Level_Results_Mappings ; Offset_0x0252B8
                dc.w    TC_Res_Map_Num_0-Level_Results_Mappings ; Offset_0x0252BA
                dc.w    TC_Res_Map_Num_1-Level_Results_Mappings ; Offset_0x0252C2
                dc.w    TC_Res_Map_Num_2-Level_Results_Mappings ; Offset_0x0252CA
                dc.w    TC_Res_Map_Num_3-Level_Results_Mappings ; Offset_0x0252D2
                dc.w    TC_Res_Map_Num_4-Level_Results_Mappings ; Offset_0x0252DA
                dc.w    TC_Res_Map_Num_5-Level_Results_Mappings ; Offset_0x0252E2
                dc.w    TC_Res_Map_Num_6-Level_Results_Mappings ; Offset_0x0252EA
                dc.w    TC_Res_Map_Num_7-Level_Results_Mappings ; Offset_0x0252F2
                dc.w    TC_Res_Map_Num_8-Level_Results_Mappings ; Offset_0x0252FA
                dc.w    TC_Res_Map_Num_9-Level_Results_Mappings ; Offset_0x025302
                dc.w    LR_Total-Level_Results_Mappings         ; Offset_0x02530A
                dc.w    TC_BONUS-Level_Results_Mappings         ; Offset_0x025330
                dc.w    TC_RING-Level_Results_Mappings          ; Offset_0x025356
                dc.w    TC_TIME-Level_Results_Mappings          ; Offset_0x02535E
                dc.w    Offset_0x025366-Level_Results_Mappings
                dc.w    Offset_0x025374-Level_Results_Mappings
                dc.w    Offset_0x025382-Level_Results_Mappings
                dc.w    Offset_0x0253A8-Level_Results_Mappings
                dc.w    Offset_0x0253BC-Level_Results_Mappings
                dc.w    Offset_0x0253D0-Level_Results_Mappings
                dc.w    Offset_0x0253E4-Level_Results_Mappings
                dc.w    Offset_0x0253F2-Level_Results_Mappings
TC_Res_Map_Null:                                               ; Offset_0x0252B8
                dc.w    $0000
TC_Res_Map_Num_0:                                              ; Offset_0x0252BA
                dc.w    $0001
                dc.w    $0001, $A520, $0000
TC_Res_Map_Num_1:                                              ; Offset_0x0252C2
                dc.w    $0001
                dc.w    $0001, $A522, $0000
TC_Res_Map_Num_2:                                              ; Offset_0x0252CA
                dc.w    $0001
                dc.w    $0001, $A524, $0000
TC_Res_Map_Num_3:                                              ; Offset_0x0252D2
                dc.w    $0001
                dc.w    $0001, $A526, $0000
TC_Res_Map_Num_4:                                              ; Offset_0x0252DA
                dc.w    $0001
                dc.w    $0001, $A528, $0000
TC_Res_Map_Num_5:                                              ; Offset_0x0252E2
                dc.w    $0001
                dc.w    $0001, $A52A, $0000
TC_Res_Map_Num_6:                                              ; Offset_0x0252EA
                dc.w    $0001
                dc.w    $0001, $A52C, $0000
TC_Res_Map_Num_7:                                              ; Offset_0x0252F2
                dc.w    $0001
                dc.w    $0001, $A52E, $0000
TC_Res_Map_Num_8:                                              ; Offset_0x0252FA
                dc.w    $0001
                dc.w    $0001, $A530, $0000
TC_Res_Map_Num_9:                                              ; Offset_0x025302
                dc.w    $0001
                dc.w    $0001, $A532, $0000
LR_Total:                                                      ; Offset_0x02530A
                dc.w    $0006
                dc.w    $0001, $A6DA, $0000
                dc.w    $0001, $A6CE, $0008
                dc.w    $0001, $A6DA, $0010
                dc.w    $0005, $A539, $0018
                dc.w    $F600, $8534, $002C
                dc.w    $FE05, $8535, $0024
TC_BONUS:                                                      ; Offset_0x025330
                dc.w    $0006
                dc.w    $0001, $A53D, $0000
                dc.w    $0001, $A6CE, $0008
                dc.w    $0005, $A53F, $0010
                dc.w    $0001, $A6CA, $0020
                dc.w    $F600, $8534, $002C
                dc.w    $FE05, $8535, $0024
TC_RING:                                                       ; Offset_0x025356
                dc.w    $0001
                dc.w    $000D, $A6D2, $0000
TC_TIME:                                                       ; Offset_0x02535E
                dc.w    $0001
                dc.w    $000D, $A6DA, $0000
Offset_0x025366:
                dc.w    $0002
                dc.w    $1009, $8543, $0000
                dc.w    $000F, $8580, $0011
Offset_0x025374:
                dc.w    $0002
                dc.w    $1009, $8543, $0000
                dc.w    $000F, $85A0, $0011
Offset_0x025382:
                dc.w    $0006
                dc.w    $0005, $8559, $0000
                dc.w    $0005, $854D, $0010
                dc.w    $0005, $8555, $0020
                dc.w    $0005, $8551, $0030
                dc.w    $0005, $855D, $0040
                dc.w    $000D, $8549, $0050
Offset_0x0253A8:
                dc.w    $0003
                dc.w    $0005, $8549, $0000
                dc.w    $0005, $8551, $0010
                dc.w    $0005, $8559, $001E
Offset_0x0253BC:
                dc.w    $0003
                dc.w    $000D, $8561, $0001
                dc.w    $000D, $8569, $0021
                dc.w    $0001, $8571, $0041
Offset_0x0253D0:
                dc.w    $0003
                dc.w    $000D, $8561, $0006
                dc.w    $000D, $8569, $0026
                dc.w    $0001, $8571, $0046
Offset_0x0253E4:
                dc.w    $0002
                dc.w    $000D, $8561, $0001
                dc.w    $000D, $8569, $0021
Offset_0x0253F2:
                dc.w    $0004
                dc.w    $000D, $8561, $0004
                dc.w    $000D, $8569, $0024
                dc.w    $000D, $8571, $0044
                dc.w    $0009, $8579, $0064
;-------------------------------------------------------------------------------
; Refer�ncia do objeto 0x6F - Left over do Sonic 2
; ->>>
;-------------------------------------------------------------------------------
Special_Stage_Results_Mappings:                                ; Offset_0x02540C  
;-------------------------------------------------------------------------------
; Refer�ncia do objeto 0x6F - Left over do Sonic 2
; <<<-
;-------------------------------------------------------------------------------     
ArtLoadCues_KM:                                                ; Offset_0x02540C
                dc.w    PLC_Angel_Island_Act_1_Enemies-ArtLoadCues_KM    ; Offset_0x025440
                dc.w    PLC_Angel_Island_Act_2_Enemies-ArtLoadCues_KM    ; Offset_0x025440
                dc.w    PLC_Hydrocity_Act_1_Enemies-ArtLoadCues_KM       ; Offset_0x025454
                dc.w    PLC_Hydrocity_Act_2_Enemies-ArtLoadCues_KM       ; Offset_0x02546E
                dc.w    PLC_Marble_Garden_Act_1_Enemies-ArtLoadCues_KM   ; Offset_0x025488
                dc.w    PLC_Marble_Garden_Act_2_Enemies-ArtLoadCues_KM   ; Offset_0x02549C
                dc.w    PLC_Carnival_Night_Act_1_Enemies-ArtLoadCues_KM  ; Offset_0x0254B0
                dc.w    PLC_Carnival_Night_Act_2_Enemies-ArtLoadCues_KM  ; Offset_0x0254B0
                dc.w    PLC_Flying_Battery_Act_1_Enemies-ArtLoadCues_KM  ; Offset_0x0254CA
                dc.w    PLC_Flying_Battery_Act_2_Enemies-ArtLoadCues_KM  ; Offset_0x0254CA
                dc.w    PLC_Icecap_Act_1_Enemies-ArtLoadCues_KM          ; Offset_0x0254D8
                dc.w    PLC_Icecap_Act_2_Enemies-ArtLoadCues_KM          ; Offset_0x0254D8
                dc.w    PLC_Launch_Bast_Act_1_Enemies-ArtLoadCues_KM     ; Offset_0x0254E6
                dc.w    PLC_Launch_Bast_Act_2_Enemies-ArtLoadCues_KM     ; Offset_0x0254E6
                dc.w    PLC_Mushroom_Valley_Act_1_Enemies-ArtLoadCues_KM ; Offset_0x0254E6
                dc.w    PLC_Mushroom_Valley_Act_1_Enemies-ArtLoadCues_KM ; Offset_0x0254E6
                dc.w    PLC_Sandopolis_Act_1_Enemies-ArtLoadCues_KM      ; Offset_0x0254E6
                dc.w    PLC_Sandopolis_Act_2_Enemies-ArtLoadCues_KM      ; Offset_0x0254E6
                dc.w    PLC_Lava_Reef_Act_1_Enemies-ArtLoadCues_KM       ; Offset_0x0254E6
                dc.w    PLC_Lava_Reef_Act_2_Enemies-ArtLoadCues_KM       ; Offset_0x0254E6
                dc.w    PLC_Sky_Sanctuary_Act_1_Enemies-ArtLoadCues_KM   ; Offset_0x0254E6
                dc.w    PLC_Sky_Sanctuary_Act_1_Enemies-ArtLoadCues_KM   ; Offset_0x0254E6
                dc.w    PLC_Death_Egg_Act_1_Enemies-ArtLoadCues_KM       ; Offset_0x0254E6
                dc.w    PLC_Death_Egg_Act_2_Enemies-ArtLoadCues_KM       ; Offset_0x0254E6
                dc.w    PLC_The_Doomsday_Act_1_Enemies-ArtLoadCues_KM    ; Offset_0x0254E6
                dc.w    PLC_The_Doomsday_Act_2_Enemies-ArtLoadCues_KM    ; Offset_0x0254E6   
;-------------------------------------------------------------------------------
PLC_Angel_Island_Act_1_Enemies:                                ; Offset_0x025440
PLC_Angel_Island_Act_2_Enemies:                                ; Offset_0x025440  
                dc.w    (((PLCE_00_End-PLCE_00)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLCE_00:
                dc.l    Art_Monkey_Dude                        ; Offset_0x1142A8
                dc.w    $A900
                dc.l    Art_Tulipon                            ; Offset_0x114066
                dc.w    $A540
                dc.l    Art_Catakiller_Jr                      ; Offset_0x11449A
                dc.w    $ABE0
PLCE_00_End:              
;-------------------------------------------------------------------------------
PLC_Hydrocity_Act_1_Enemies:                                   ; Offset_0x025454
                dc.w    (((PLCE_02_End-PLCE_02)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLCE_02:
                dc.l    Art_Blastoid                           ; Offset_0x1169C4
                dc.w    $A720
                dc.l    Art_Turbo_Spiker                       ; Offset_0x116B66
                dc.w    $A000
                dc.l    Art_Mega_Chopper                       ; Offset_0x1168C2
                dc.w    $A9A0
                dc.l    Art_Pointdexter                        ; Offset_0x116F88
                dc.w    $AB20
PLCE_02_End:
;-------------------------------------------------------------------------------
PLC_Hydrocity_Act_2_Enemies:                                   ; Offset_0x02546E
                dc.w    (((PLCE_03_End-PLCE_03)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLCE_03:
                dc.l    Art_Jawz                               ; Offset_0x116750
                dc.w    $A720
                dc.l    Art_Turbo_Spiker                       ; Offset_0x116B66
                dc.w    $A000
                dc.l    Art_Mega_Chopper                       ; Offset_0x1168C2
                dc.w    $A9A0
                dc.l    Art_Pointdexter                        ; Offset_0x116F88
                dc.w    $AB20
PLCE_03_End:
;-------------------------------------------------------------------------------
PLC_Marble_Garden_Act_1_Enemies:                               ; Offset_0x025488
                dc.w    (((PLCE_04_End-PLCE_04)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLCE_04:
                dc.l    Art_Spiker                             ; Offset_0x11A308
                dc.w    $A600
                dc.l    Art_Tunnelbot                          ; Offset_0x11722A
                dc.w    $A9E0
                dc.l    Art_Rocks                              ; Offset_0x1197B6
                dc.w    $AE00
PLCE_04_End:
;-------------------------------------------------------------------------------
PLC_Marble_Garden_Act_2_Enemies:                               ; Offset_0x02549C
                dc.w    (((PLCE_05_End-PLCE_05)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLCE_05:
                dc.l    Art_Spiker                             ; Offset_0x11A308
                dc.w    $A600
                dc.l    Art_Mantis                             ; Offset_0x11A51A
                dc.w    $A9E0
                dc.l    Art_Rocks                              ; Offset_0x1197B6
                dc.w    $7DE0
PLCE_05_End:
;-------------------------------------------------------------------------------
PLC_Carnival_Night_Act_1_Enemies:                              ; Offset_0x0254B0
PLC_Carnival_Night_Act_2_Enemies:                              ; Offset_0x0254B0
                dc.w    (((PLCE_06_End-PLCE_06)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLCE_06:
                dc.l    Art_Sparkle                            ; Offset_0x11C30E
                dc.w    $A480
                dc.l    Art_Batbot                             ; Offset_0x11C630
                dc.w    $AA40
                dc.l    Art_Spikeball                          ; Offset_0x11C29C
                dc.w    $AE00
                dc.l    Art_Balloon                            ; Offset_0x11C852
                dc.w    $AE80
PLCE_06_End:
;-------------------------------------------------------------------------------
PLC_Flying_Battery_Act_1_Enemies:                              ; Offset_0x0254CA
PLC_Flying_Battery_Act_2_Enemies:                              ; Offset_0x0254CA
                dc.w    (((PLCE_08_End-PLCE_08)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLCE_08:
                dc.l    Art_Blaster                            ; Offset_0x11D79E
                dc.w    $A000
                dc.l    Art_Technosqueek                       ; Offset_0x11DAA0
                dc.w    $A500
PLCE_08_End:
;-------------------------------------------------------------------------------
PLC_Icecap_Act_1_Enemies:                                      ; Offset_0x0254D8
PLC_Icecap_Act_2_Enemies:                                      ; Offset_0x0254D8
                dc.w    (((PLCE_0A_End-PLCE_0A)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLCE_0A:
                dc.l    Art_Ice_Block                          ; Offset_0x1213CE
                dc.w    $AB00
                dc.l    Art_Orbinaut                           ; Offset_0x121460
                dc.w    $A900
PLCE_0A_End:
;-------------------------------------------------------------------------------
PLC_Launch_Bast_Act_1_Enemies:                                 ; Offset_0x0254E6
PLC_Launch_Bast_Act_2_Enemies:                                 ; Offset_0x0254E6
PLC_Mushroom_Valley_Act_1_Enemies:                             ; Offset_0x0254E6
PLC_Mushroom_Valley_Act_2_Enemies:                             ; Offset_0x0254E6
PLC_Sandopolis_Act_1_Enemies:                                  ; Offset_0x0254E6
PLC_Sandopolis_Act_2_Enemies:                                  ; Offset_0x0254E6
PLC_Lava_Reef_Act_1_Enemies:                                   ; Offset_0x0254E6
PLC_Lava_Reef_Act_2_Enemies:                                   ; Offset_0x0254E6
PLC_Sky_Sanctuary_Act_1_Enemies:                               ; Offset_0x0254E6
PLC_Sky_Sanctuary_Act_2_Enemies:                               ; Offset_0x0254E6
PLC_Death_Egg_Act_1_Enemies:                                   ; Offset_0x0254E6
PLC_Death_Egg_Act_2_Enemies:                                   ; Offset_0x0254E6
PLC_The_Doomsday_Act_1_Enemies:                                ; Offset_0x0254E6
PLC_The_Doomsday_Act_2_Enemies:                                ; Offset_0x0254E6
                dc.w    (((PLCE_0C_End-PLCE_0C)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLCE_0C:
                dc.l    Art_Snale_Blaster                      ; Offset_0x12281E
                dc.w    $A480
                dc.l    Art_Orbinaut_2                         ; Offset_0x122BA2
                dc.w    $ADC0
                dc.l    Art_Ribot                              ; Offset_0x122A70
                dc.w    $A8E0
                dc.l    Art_Corkey                             ; Offset_0x122C84
                dc.w    $AB00
PLCE_0C_End:
;------------------------------------------------------------------------------- 
Obj_0x54_Oxygen_Bubbles:                                       ; Offset_0x025500 
                include 'data\objects\obj_0x54.asm'
;-------------------------------------------------------------------------------  
Sonic_Underwater_Mappings:                                     ; Offset_0x025872
                dc.w    Offset_0x0258CE-Sonic_Underwater_Mappings
                dc.w    Offset_0x0258D6-Sonic_Underwater_Mappings
                dc.w    Offset_0x0258DE-Sonic_Underwater_Mappings
                dc.w    Offset_0x0258E6-Sonic_Underwater_Mappings
                dc.w    Offset_0x0258EE-Sonic_Underwater_Mappings
                dc.w    Offset_0x0258F6-Sonic_Underwater_Mappings
                dc.w    Offset_0x0258FE-Sonic_Underwater_Mappings
                dc.w    Offset_0x025906-Sonic_Underwater_Mappings
                dc.w    Offset_0x025920-Sonic_Underwater_Mappings
                dc.w    Offset_0x02593A-Sonic_Underwater_Mappings
                dc.w    Offset_0x02593A-Sonic_Underwater_Mappings
                dc.w    Offset_0x02593A-Sonic_Underwater_Mappings
                dc.w    Offset_0x02593A-Sonic_Underwater_Mappings
                dc.w    Offset_0x02593A-Sonic_Underwater_Mappings
                dc.w    Offset_0x02593A-Sonic_Underwater_Mappings
                dc.w    Offset_0x02593A-Sonic_Underwater_Mappings
                dc.w    Offset_0x02593A-Sonic_Underwater_Mappings
                dc.w    Offset_0x02593A-Sonic_Underwater_Mappings
                dc.w    Offset_0x02593A-Sonic_Underwater_Mappings
                dc.w    Offset_0x025942-Sonic_Underwater_Mappings
                dc.w    Offset_0x02594A-Sonic_Underwater_Mappings
                dc.w    Offset_0x025952-Sonic_Underwater_Mappings
                dc.w    Offset_0x02595A-Sonic_Underwater_Mappings        
Miles_Underwater_Mappings:                                     ; Offset_0x0258A0
                dc.w    Offset_0x0258CE-Miles_Underwater_Mappings
                dc.w    Offset_0x0258D6-Miles_Underwater_Mappings
                dc.w    Offset_0x0258DE-Miles_Underwater_Mappings
                dc.w    Offset_0x0258E6-Miles_Underwater_Mappings
                dc.w    Offset_0x0258EE-Miles_Underwater_Mappings
                dc.w    Offset_0x0258F6-Miles_Underwater_Mappings
                dc.w    Offset_0x0258FE-Miles_Underwater_Mappings
                dc.w    Offset_0x025906-Miles_Underwater_Mappings
                dc.w    Offset_0x025920-Miles_Underwater_Mappings
                dc.w    Offset_0x02595C-Miles_Underwater_Mappings
                dc.w    Offset_0x02595C-Miles_Underwater_Mappings
                dc.w    Offset_0x02595C-Miles_Underwater_Mappings
                dc.w    Offset_0x02595C-Miles_Underwater_Mappings
                dc.w    Offset_0x02595C-Miles_Underwater_Mappings
                dc.w    Offset_0x02595C-Miles_Underwater_Mappings
                dc.w    Offset_0x02595C-Miles_Underwater_Mappings
                dc.w    Offset_0x02595C-Miles_Underwater_Mappings
                dc.w    Offset_0x02595C-Miles_Underwater_Mappings
                dc.w    Offset_0x02595C-Miles_Underwater_Mappings
                dc.w    Offset_0x025942-Miles_Underwater_Mappings
                dc.w    Offset_0x02594A-Miles_Underwater_Mappings
                dc.w    Offset_0x025952-Miles_Underwater_Mappings
                dc.w    Offset_0x02595A-Miles_Underwater_Mappings                
Offset_0x0258CE:
                dc.w    $0001
                dc.w    $FC00, $0000, $FFFC
Offset_0x0258D6:
                dc.w    $0001
                dc.w    $FC00, $0001, $FFFC
Offset_0x0258DE:
                dc.w    $0001
                dc.w    $FC00, $0002, $FFFC
Offset_0x0258E6:
                dc.w    $0001
                dc.w    $F805, $0003, $FFF8
Offset_0x0258EE:
                dc.w    $0001
                dc.w    $F805, $0007, $FFF8
Offset_0x0258F6:
                dc.w    $0001
                dc.w    $F40A, $000B, $FFF4
Offset_0x0258FE:
                dc.w    $0001
                dc.w    $F00F, $0014, $FFF0
Offset_0x025906:
                dc.w    $0004
                dc.w    $F005, $0024, $FFF0
                dc.w    $F005, $0824, $0000
                dc.w    $0005, $1024, $FFF0
                dc.w    $0005, $1824, $0000
Offset_0x025920:
                dc.w    $0004
                dc.w    $F005, $0028, $FFF0
                dc.w    $F005, $0828, $0000
                dc.w    $0005, $1028, $FFF0
                dc.w    $0005, $1828, $0000
Offset_0x02593A:
                dc.w    $0001
                dc.w    $F406, $0384, $FFF8
Offset_0x025942:
                dc.w    $0001
                dc.w    $F805, $002C, $FFF8
Offset_0x02594A:
                dc.w    $0001
                dc.w    $F805, $0030, $FFF8
Offset_0x025952:
                dc.w    $0001
                dc.w    $F805, $0034, $FFF8
Offset_0x02595A:
                dc.w    $0000
Offset_0x02595C:
                dc.w    $0001
                dc.w    $F406, $0394, $FFF8      
;-------------------------------------------------------------------------------
Obj_0x37_Hz_Vertical_Water_Stream:                             ; Offset_0x025964 
                include 'data\objects\obj_0x37.asm'    
Obj_0x3B_Hz_Water_Wall:                                        ; Offset_0x025C30
                include 'data\objects\obj_0x3B.asm'       
Obj_0x38_Hz_Fan:                                               ; Offset_0x026408
                include 'data\objects\obj_0x38.asm'
Obj_0x39_Hz_Large_Fan:                                         ; Offset_0x026736 
                include 'data\objects\obj_0x39.asm' 
Obj_0x38_CGz_Fan_2P:                                           ; Offset_0x026960
                include 'data\objects\obj2px38.asm' 
Obj_0x3A_Hz_Hand_Launcher:                                     ; Offset_0x026A80
                include 'data\objects\obj_0x3A.asm'   
; Obj_0x3C_Automatic_Door:                                     ; Offset_0x026ED0 
                include 'data\objects\obj_0x3C.asm'    
; Obj_0x3E_Conveyor_Belt_Attributes:                           ; Offset_0x0271C4 
                include 'data\objects\obj_0x3E.asm'   
Obj_0x3F_Hz_Spikes_On_Conveyor_Belt:                           ; Offset_0x027346 
                include 'data\objects\obj_0x3F.asm' 
Obj_0x41_CNz_Balloon:                                          ; Offset_0x027552 
                include 'data\objects\obj_0x41.asm'    
Obj_0x42_CNz_Cannon:                                           ; Offset_0x02794E 
                include 'data\objects\obj_0x42.asm' 
Obj_0x43_CNz_Platform:                                         ; Offset_0x027DBA
                include 'data\objects\obj_0x43.asm'   
Obj_0x44_CNz_Trapdoor:                                         ; Offset_0x027F0E 
                include 'data\objects\obj_0x44.asm'   
Obj_0x45_CNz_Light_Bulb:                                       ; Offset_0x027FDA 
                include 'data\objects\obj_0x45.asm'       
Obj_0x46_CNz_Fan:                                              ; Offset_0x02805C 
                include 'data\objects\obj_0x46.asm'  
Obj_0x48_CNz_Vacuum_Tubes:                                     ; Offset_0x028278 
                include 'data\objects\obj_0x48.asm'    
; Obj_0x47_CNz_Barrel:                                         ; Offset_0x028430
                include 'data\objects\obj_0x47.asm'   
Obj_0x68_Hz_Spinning_Column:                                   ; Offset_0x0289B8 
                include 'data\objects\obj_0x68.asm'  
Obj_0x49_CNz_Wheel:                                            ; Offset_0x028C62 
                include 'data\objects\obj_0x49.asm'  
Obj_0x4B_Triangular_Springs:                                   ; Offset_0x028D2E 
                include 'data\objects\obj_0x4B.asm'  
Obj_0x4F_Mud_Quicksand_Attributes:                             ; Offset_0x028E12 
                include 'data\objects\obj_0x4F.asm'  
Obj_0x5D_CGz_Triangular_Springs:                               ; Offset_0x029004 
                include 'data\objects\obj_0x5D.asm' 
Obj_0x4A_Bumper:                                               ; Offset_0x029188 
                include 'data\objects\obj_0x4A.asm'     
Obj_0x4C_Corkscrew:                                            ; Offset_0x029408 
                include 'data\objects\obj_0x4C.asm'     
Obj_0x4D_CNz_Barber_Pole:                                      ; Offset_0x0296A0 
                include 'data\objects\obj_0x4D.asm'  
Obj_0x4E_CNz_Rotating_Mesh:                                    ; Offset_0x029B5E 
                include 'data\objects\obj_0x4E.asm'   
Obj_0x50_MGz_Vertical_Pole:                                    ; Offset_0x029F86 
                include 'data\objects\obj_0x50.asm'  
Obj_0x53_MGz_Swinging_Platform:                                ; Offset_0x02A224 
                include 'data\objects\obj_0x53.asm'   
Obj_0x58_MGz_Swinging_Spiked_Ball:                             ; Offset_0x02A390 
                include 'data\objects\obj_0x58.asm'         
Obj_0x55_MGz_Head_Trigger:                                     ; Offset_0x02A5BC 
                include 'data\objects\obj_0x55.asm'    
; Obj_0x57_MGz_Trigger_Platform:                               ; Offset_0x02A884 
                include 'data\objects\obj_0x57.asm'   
Obj_0x56_MGz_Moving_Spike_Platform:                            ; Offset_0x02AA8A 
                include 'data\objects\obj_0x56.asm'  
Obj_0x5A_MGz_Pulley:                                           ; Offset_0x02ACD8 
                include 'data\objects\obj_0x5A.asm'  
Obj_0x5B_MGz_Blue_Spinning_Platform:                           ; Offset_0x02B19A 
                include 'data\objects\obj_0x5B.asm'   
Obj_0x5C_MGz_Blue_Platform_Launcher:                           ; Offset_0x02BED2 
                include 'data\objects\obj_0x5C.asm' 
Obj_0x5E_CGz_Blade_Platform:                                   ; Offset_0x02BFBE 
                include 'data\objects\obj_0x5E.asm'       
Obj_0x60_BPz_Elephant_Block:                                   ; Offset_0x02C13C
                include 'data\objects\obj_0x60.asm'    
Obj_0x61_BPz_Balloon:                                          ; Offset_0x02C2C4
                include 'data\objects\obj_0x61.asm'   
Obj_0x62_DPz_Dissolving_Sand_Bar:                              ; Offset_0x02C47E 
                include 'data\objects\obj_0x62.asm'   
Obj_0x63_DPz_Button:                                           ; Offset_0x02C7E6 
                include 'data\objects\obj_0x63.asm'    
Obj_0x64_Bubble_Container:                                     ; Offset_0x02C8A8 
                include 'data\objects\obj_0x64.asm'     
Obj_0x65_Goal_Marker:                                          ; Offset_0x02D124 
                include 'data\objects\obj_0x65.asm' 
Obj_0x66_EMz_Dripper:                                          ; Offset_0x02DF26  
                include 'data\objects\obj_0x66.asm' 
Obj_0x6E_Hz_Waterfall:                                         ; Offset_0x02E0A8 
                include 'data\objects\obj_0x6E.asm
Obj_0x6D_Hz_Water_Splash:                                      ; Offset_0x02E22E
                include 'data\objects\obj_0x6D.asm'  
Obj_0x6C_Bridge:                                               ; Offset_0x02E504 
                include 'data\objects\obj_0x6C.asm'    
; Obj_0x69_Hz_Curved_Twisting_Pipe:                            ; Offset_0x02EEEA 
                include 'data\objects\obj_0x69.asm'                                                    

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to setup level tile drawing routines
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x02F25C: Load_Tiles_From_Start:
Setup_TileDrawing:
		clr.b	(Background_Collision_Flag).w
		clr.l	(Plane_Double_Update_Flag).w
		clr.w	(Level_Repeat_Routine).w
		clr.l	(Level_Repeat_Offset).w
		clr.l	(Level_Events_Routine).w
		clr.l	(Foreground_Events_Y_Counter).w
		clr.w	(Earthquake_Flag).w
		clr.l	(Earthquake_Offset).w
		clr.l	(Background_Events).w
		clr.l	(Background_Events+4).w
		clr.l	(Background_Events+8).w
		clr.l	(Background_Events+$C).w
		move.w	#$FFF,(Screen_Wrap_Y).w
		move.w	#$FF0,(Level_Layout_Wrap_Y).w
		move.w	#$7C,(Level_Layout_Wrap_Row).w
		move.w	(Camera_X).w,(Screen_Pos_Buffer_X).w
		move.w	(Camera_Y).w,(Screen_Pos_Buffer_Y).w
		lea	(Plane_Buffer).w,a0
		lea	(Blocks_Mem_Address).w,a2
		lea	(Fg_Mem_Index_Address).w,a3
		move.w	#$C000,d7
		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#2,d0
		lsr.w	#3,d0
		move.l	Load_Tiles_From_Start_Pointers(pc,d0.w),a1
		jsr	(a1)
		addq.w	#2,a3
		move.w	#$E000,d7
		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#2,d0
		lsr.w	#3,d0
		move.l	Load_Tiles_From_Start_Pointers+4(pc,d0.w),a1
		jsr	(a1)
		move.w	(Screen_Pos_Buffer_Y).w,(Vertical_Scroll_Value).w
		move.w	(Screen_Pos_Buffer_Y_2).w,(Vertical_Scroll_Value_2).w
		rts
; End of function Setup_TileDrawing

; ---------------------------------------------------------------------------
; Subroutine to run level tile drawing routines
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x02F2EA: Background_Scroll_Layer:
Run_TileDrawing:
		move.w	(Camera_X).w,(Screen_Pos_Buffer_X).w
		move.w	(Camera_Y).w,(Screen_Pos_Buffer_Y).w
		lea	(Plane_Buffer).w,a0
		lea	(Blocks_Mem_Address).w,a2
		lea	(Fg_Mem_Index_Address).w,a3
		move.w	#$C000,d7
		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#2,d0
		lsr.w	#3,d0
		move.l	Load_Tiles_As_You_Move_Pointers(pc,d0.w),a1
		jsr	(a1)
		addq.w	#2,a3
		move.w	#$E000,d7
		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#2,d0
		lsr.w	#3,d0
		move.l	Load_Tiles_As_You_Move_Pointers+4(pc,d0.w),a1
		jsr	(a1)
		move.w	(Screen_Pos_Buffer_Y).w,(Vertical_Scroll_Value).w
		move.w	(Screen_Pos_Buffer_Y_2).w,(Vertical_Scroll_Value_2).w
		rts
; End of function Run_TileDrawing

; ---------------------------------------------------------------------------
; Offset_0x02F336:
Load_Tiles_From_Start_Pointers:
		dc.l	AIz_1_Events_Init
		dc.l	AIz_1_Events_Init_2
		dc.l	AIz_2_Events_Init
		dc.l	AIz_2_Events_Init_2
; Offset_0x02F346:
Load_Tiles_As_You_Move_Pointers:
		dc.l	AIz_1_Events_Run
		dc.l	AIz_1_Events_Run_2
		dc.l	AIz_2_Events_Run
		dc.l	AIz_2_Events_Run_2
;--------------
                dc.l    Hz_1_Events_Init                       ; Offset_0x031C52
                dc.l    Hz_1_Events_Init_2                     ; Offset_0x031C5E
                dc.l    Hz_2_Events_Init                       ; Offset_0x031CBC
                dc.l    Hz_2_Events_Init_2                     ; Offset_0x031CD0
;--------------                 
                dc.l    Hz_1_Events_Run                        ; Offset_0x031C5A
                dc.l    Hz_1_Events_Run_2                      ; Offset_0x031C70
                dc.l    Hz_2_Events_Run                        ; Offset_0x031CC4
                dc.l    Hz_2_Events_Run_2                      ; Offset_0x031D10
;--------------                 
                dc.l    MGz_1_Events_Init                      ; Offset_0x031F18
                dc.l    MGz_1_Events_Init_2                    ; Offset_0x031F2C
                dc.l    MGz_2_Events_Init                      ; Offset_0x0320E2
                dc.l    MGz_2_Events_Init_2                    ; Offset_0x032732
;--------------                 
                dc.l    MGz_1_Events_Run                       ; Offset_0x031F20
                dc.l    MGz_1_Events_Run_2                     ; Offset_0x031F44
                dc.l    MGz_2_Events_Run                       ; Offset_0x0320F2
                dc.l    MGz_2_Events_Run_2                     ; Offset_0x0327DE
;--------------                  
                dc.l    CNz_1_Events_Init                      ; Offset_0x032BAE
                dc.l    CNz_1_Events_Init_2                    ; Offset_0x032C8A
                dc.l    CNz_2_Events_Init                      ; Offset_0x032BAE
                dc.l    CNz_2_Events_Init_2                    ; Offset_0x032C8A
;--------------                  
                dc.l    CNz_1_Events_Run                       ; Offset_0x032BB6
                dc.l    CNz_1_Events_Run_2                     ; Offset_0x032CA4
                dc.l    CNz_2_Events_Run                       ; Offset_0x032BB6
                dc.l    CNz_2_Events_Run_2                     ; Offset_0x032CA4
;--------------                  
                dc.l    FBz_1_Events_Init                      ; Offset_0x0341C2
                dc.l    FBz_1_Events_Init_2                    ; Offset_0x0341CE
                dc.l    FBz_2_Events_Init                      ; Offset_0x0341C2
                dc.l    FBz_2_Events_Init_2                    ; Offset_0x0341CE
;--------------                 
                dc.l    FBz_1_Events_Run                       ; Offset_0x0341CA
                dc.l    FBz_1_Events_Run_2                     ; Offset_0x0341DE
                dc.l    FBz_2_Events_Run                       ; Offset_0x0341CA
                dc.l    FBz_2_Events_Run_2                     ; Offset_0x0341DE
;--------------                 
                dc.l    Iz_1_Events_Init                       ; Offset_0x032D36
                dc.l    Iz_1_Events_Init_2                     ; Offset_0x032D86
                dc.l    Iz_2_Events_Init                       ; Offset_0x033138
                dc.l    Iz_2_Events_Init_2                     ; Offset_0x033144
;--------------                 
                dc.l    Iz_1_Events_Run                        ; Offset_0x032D50
                dc.l    Iz_1_Events_Run_2                      ; Offset_0x032E00
                dc.l    Iz_2_Events_Run                        ; Offset_0x033140
                dc.l    Iz_2_Events_Run_2                      ; Offset_0x0331AC
;--------------                
                dc.l    LBz_1_Events_Init                      ; Offset_0x033422
                dc.l    LBz_1_Events_Init_2                    ; Offset_0x033736
                dc.l    LBz_2_Events_Init                      ; Offset_0x033900
                dc.l    LBz_2_Events_Init_2                    ; Offset_0x03395A
;--------------                  
                dc.l    LBz_1_Events_Run                       ; Offset_0x03348A
                dc.l    LBz_1_Events_Run_2                     ; Offset_0x03375E
                dc.l    LBz_2_Events_Run                       ; Offset_0x033910
                dc.l    LBz_2_Events_Run_2                     ; Offset_0x03397A
;--------------                 
                dc.l    MVz_1_Events_Init                      ; Offset_0x033C24
                dc.l    MVz_1_Events_Init_2                    ; Offset_0x033C30
                dc.l    MVz_2_Events_Init                      ; Offset_0x033C24
                dc.l    MVz_2_Events_Init_2                    ; Offset_0x033C30
;--------------                   
                dc.l    MVz_1_Events_Run                       ; Offset_0x033C2C
                dc.l    MVz_1_Events_Run_2                     ; Offset_0x033C42
                dc.l    MVz_2_Events_Run                       ; Offset_0x033C2C
                dc.l    MVz_2_Events_Run_2                     ; Offset_0x033C42
;--------------                   
                dc.l    Sz_1_Events_Init                       ; Offset_0x0341C2
                dc.l    Sz_1_Events_Init_2                     ; Offset_0x0341CE
                dc.l    Sz_2_Events_Init                       ; Offset_0x0341C2
                dc.l    Sz_2_Events_Init_2                     ; Offset_0x0341CE
;--------------                   
                dc.l    Sz_1_Events_Run                        ; Offset_0x0341CA
                dc.l    Sz_1_Events_Run_2                      ; Offset_0x0341DE
                dc.l    Sz_2_Events_Run                        ; Offset_0x0341CA
                dc.l    Sz_2_Events_Run_2                      ; Offset_0x0341DE
;--------------                  
                dc.l    LRz_1_Events_Init                      ; Offset_0x033C70
                dc.l    LRz_1_Events_Init_2                    ; Offset_0x033C84
                dc.l    LRz_2_Events_Init                      ; Offset_0x033C70
                dc.l    LRz_2_Events_Init_2                    ; Offset_0x033C84
;--------------                  
                dc.l    LRz_1_Events_Run                       ; Offset_0x033C78
                dc.l    LRz_1_Events_Run_2                     ; Offset_0x033CB0
                dc.l    LRz_2_Events_Run                       ; Offset_0x033C78
                dc.l    LRz_2_Events_Run_2                     ; Offset_0x033CB0
;--------------                  
                dc.l    SSz_1_Events_Init                      ; Offset_0x0341C2
                dc.l    SSz_1_Events_Init_2                    ; Offset_0x0341CE
                dc.l    SSz_2_Events_Init                      ; Offset_0x0341C2
                dc.l    SSz_2_Events_Init_2                    ; Offset_0x0341CE
;--------------                   
                dc.l    SSz_1_Events_Run                       ; Offset_0x0341CA
                dc.l    SSz_1_Events_Run_2                     ; Offset_0x0341DE
                dc.l    SSz_2_Events_Run                       ; Offset_0x0341CA
                dc.l    SSz_2_Events_Run_2                     ; Offset_0x0341DE
;--------------                   
                dc.l    DEz_1_Events_Init                      ; Offset_0x0341C2
                dc.l    DEz_1_Events_Init_2                    ; Offset_0x0341CE
                dc.l    DEz_2_Events_Init                      ; Offset_0x0341C2
                dc.l    DEz_2_Events_Init_2                    ; Offset_0x0341CE
;--------------                  
                dc.l    DEz_1_Events_Run                       ; Offset_0x0341CA
                dc.l    DEz_1_Events_Run_2                     ; Offset_0x0341DE
                dc.l    DEz_2_Events_Run                       ; Offset_0x0341CA
                dc.l    DEz_2_Events_Run_2                     ; Offset_0x0341DE
;--------------                 
                dc.l    TDz_1_Events_Init                      ; Offset_0x0341C2
                dc.l    TDz_1_Events_Init_2                    ; Offset_0x0341CE
                dc.l    TDz_2_Events_Init                      ; Offset_0x0341C2
                dc.l    TDz_2_Events_Init_2                    ; Offset_0x0341CE
;--------------                   
                dc.l    TDz_1_Events_Run                       ; Offset_0x0341CA
                dc.l    TDz_1_Events_Run_2                     ; Offset_0x0341DE
                dc.l    TDz_2_Events_Run                       ; Offset_0x0341CA
                dc.l    TDz_2_Events_Run_2                     ; Offset_0x0341DE
;--------------                   
                dc.l    End_Seq_Events_Init                    ; Offset_0x0341C2
                dc.l    End_Seq_Events_Init_2                  ; Offset_0x0341CE
                dc.l    End_Seq_Events_Init                    ; Offset_0x0341C2
                dc.l    End_Seq_Events_Init_2                  ; Offset_0x0341CE
;--------------                    
                dc.l    End_Seq_Events_Run                     ; Offset_0x0341CA
                dc.l    End_Seq_Events_Run_2                   ; Offset_0x0341DE
                dc.l    End_Seq_Events_Run                     ; Offset_0x0341CA
                dc.l    End_Seq_Events_Run_2                   ; Offset_0x0341DE
;--------------                    
                dc.l    ALz_Events_Init                        ; Offset_0x033D60
                dc.l    ALz_Events_Init_2                      ; Offset_0x033DF0
                dc.l    ALz_Events_Init                        ; Offset_0x033D60
                dc.l    ALz_Events_Init_2                      ; Offset_0x033DF0
;--------------                  
                dc.l    ALz_Events_Run                         ; Offset_0x033DAE
                dc.l    ALz_Events_Run_2                       ; Offset_0x033E66
                dc.l    ALz_Events_Run                         ; Offset_0x033DAE
                dc.l    ALz_Events_Run_2                       ; Offset_0x033E66
;--------------                  
                dc.l    BPz_Events_Init                        ; Offset_0x033D60
                dc.l    BPz_Events_Init_2                      ; Offset_0x033DF6
                dc.l    BPz_Events_Init                        ; Offset_0x033D60
                dc.l    BPz_Events_Init_2                      ; Offset_0x033DF6 
;--------------                 
                dc.l    BPz_Events_Run                         ; Offset_0x033DAE
                dc.l    BPz_Events_Run_2                       ; Offset_0x033E70
                dc.l    BPz_Events_Run                         ; Offset_0x033DAE
                dc.l    BPz_Events_Run_2                       ; Offset_0x033E70  
;--------------                  
                dc.l    DPz_Events_Init                        ; Offset_0x033D60
                dc.l    DPz_Events_Init_2                      ; Offset_0x033DFC
                dc.l    DPz_Events_Init                        ; Offset_0x033D60
                dc.l    DPz_Events_Init_2                      ; Offset_0x033DFC 
;--------------                 
                dc.l    DPz_Events_Run                         ; Offset_0x033DAE
                dc.l    DPz_Events_Run_2                       ; Offset_0x033EBE
                dc.l    DPz_Events_Run                         ; Offset_0x033DAE
                dc.l    DPz_Events_Run_2                       ; Offset_0x033EBE  
;--------------                  
                dc.l    CGz_Events_Init                        ; Offset_0x033D60
                dc.l    CGz_Events_Init_2                      ; Offset_0x033E02
                dc.l    CGz_Events_Init                        ; Offset_0x033D60
                dc.l    CGz_Events_Init_2                      ; Offset_0x033E02 
;--------------                  
                dc.l    CGz_Events_Run                         ; Offset_0x033DD0
                dc.l    CGz_Events_Run_2                       ; Offset_0x033E7A
                dc.l    CGz_Events_Run                         ; Offset_0x033DD0
                dc.l    CGz_Events_Run_2                       ; Offset_0x033E7A 
;--------------                   
                dc.l    EMz_Events_Init                        ; Offset_0x033D60
                dc.l    EMz_Events_Init_2                      ; Offset_0x033E3E
                dc.l    EMz_Events_Init                        ; Offset_0x033D60
                dc.l    EMz_Events_Init_2                      ; Offset_0x033E3E 
;--------------                
                dc.l    EMz_Events_Run                         ; Offset_0x033DAE
                dc.l    EMz_Events_Run_2                       ; Offset_0x033E84
                dc.l    EMz_Events_Run                         ; Offset_0x033DAE
                dc.l    EMz_Events_Run_2                       ; Offset_0x033E84 
;--------------                
                dc.l    GM_BS_Events_Init                      ; Offset_0x0341C2
                dc.l    GM_BS_Events_Init_2                    ; Offset_0x0341CE
                dc.l    GM_BS_Events_Init                      ; Offset_0x0341C2
                dc.l    GM_BS_Events_Init_2                    ; Offset_0x0341CE
;--------------                
                dc.l    GM_BS_Events_Run                       ; Offset_0x0341CA
                dc.l    GM_BS_Events_Run_2                     ; Offset_0x0341DE
                dc.l    GM_BS_Events_Run                       ; Offset_0x0341CA
                dc.l    GM_BS_Events_Run_2                     ; Offset_0x0341DE
;--------------                  
                dc.l    GS_BS_Events_Init                      ; Offset_0x0341C2
                dc.l    GS_BS_Events_Init_2                    ; Offset_0x0341CE
                dc.l    GS_BS_Events_Init                      ; Offset_0x0341C2
                dc.l    GS_BS_Events_Init_2                    ; Offset_0x0341CE
;--------------                   
                dc.l    GS_BS_Events_Run                       ; Offset_0x0341CA
                dc.l    GS_BS_Events_Run_2                     ; Offset_0x0341DE
                dc.l    GS_BS_Events_Run                       ; Offset_0x0341CA
                dc.l    GS_BS_Events_Run_2                     ; Offset_0x0341DE
;--------------                   
                dc.l    SM_BS_Events_Init                      ; Offset_0x0341C2
                dc.l    SM_BS_Events_Init_2                    ; Offset_0x0341CE
                dc.l    SM_BS_Events_Init                      ; Offset_0x0341C2
                dc.l    SM_BS_Events_Init_2                    ; Offset_0x0341CE
;--------------                 
                dc.l    SM_BS_Events_Run                       ; Offset_0x0341CA
                dc.l    SM_BS_Events_Run_2                     ; Offset_0x0341DE
                dc.l    SM_BS_Events_Run                       ; Offset_0x0341CA
                dc.l    SM_BS_Events_Run_2                     ; Offset_0x0341DE
;--------------                 
                dc.l    LRz_Boss_Events_Init                   ; Offset_0x0341C2
                dc.l    LRz_Boss_Events_Init_2                 ; Offset_0x0341CE
                dc.l    HPz_Events_Init                        ; Offset_0x0341C2
                dc.l    HPz_Events_Init_2                      ; Offset_0x0341CE
;--------------                 
                dc.l    LRz_Boss_Events_Run                    ; Offset_0x0341CA
                dc.l    LRz_Boss_Events_Run_2                  ; Offset_0x0341DE
                dc.l    HPz_Events_Run                         ; Offset_0x0341CA
                dc.l    HPz_Events_Run_2                       ; Offset_0x0341DE
;--------------                 
                dc.l    DEz_Final_Boss_Events_Init             ; Offset_0x0341C2
                dc.l    DEz_Final_Boss_Events_Init_2           ; Offset_0x0341CE
                dc.l    HPz_Portal_Events_Init                 ; Offset_0x0341C2
                dc.l    HPz_Portal_Events_Init_2               ; Offset_0x0341CE
;--------------                 
                dc.l    DEz_Final_Boss_Events_Run              ; Offset_0x0341CA
                dc.l    DEz_Final_Boss_Events_Run_2            ; Offset_0x0341DE
                dc.l    HPz_Portal_Events_Run                  ; Offset_0x0341CA
                dc.l    HPz_Portal_Events_Run_2                ; Offset_0x0341DE   
;-------------------------------------------------------------------------------   
Vint_Draw_Level:                                               ; Offset_0x02F636
                lea     (VDP_Data_Port), A6                          ; $00C00000
                lea     (Plane_Buffer).w, A0                         ; $FFFFF100
Offset_0x02F640:
                move.w  (A0), D0
                beq.s   Offset_0x02F672
                clr.w   (A0)+
                move.w  (A0)+, D1
                bmi.s   Offset_0x02F654
                move.w  #$8F02, D2
                move.w  #$0080, D3
                bra.s   Offset_0x02F65E
Offset_0x02F654:
                move.w  #$8F80, D2
                moveq   #$02, D3
                andi.w  #$7FFF, D1
Offset_0x02F65E:
                move.w  D2, $0004(A6)
                move.w  D0, D2
                move.w  D1, D4
                bsr.s   Special_Vint_VRAM_Write                ; Offset_0x02F67A
                move.w  D2, D0
                add.w   D3, D0
                move.w  D4, D1
                bsr.s   Special_Vint_VRAM_Write                ; Offset_0x02F67A
                bra.s   Offset_0x02F640
Offset_0x02F672:
                move.w  #$8F02, $0004(A6)
                rts
;-------------------------------------------------------------------------------                
Special_Vint_VRAM_Write:                                       ; Offset_0x02F67A
                swap.w  D0
                clr.w   D0
                swap.w  D0
                lsl.l   #$02, D0
                lsr.w   #$02, D0
                ori.w   #$4000, D0
                swap.w  D0
                move.l  D0, $0004(A6)
Offset_0x02F68E:
                move.l  (A0)+, (A6)
                dbra    D1, Offset_0x02F68E
                rts
;-------------------------------------------------------------------------------
Offset_0x02F696:
                lea     (VDP_Data_Port), A6                          ; $00C00000
                lea     (Plane_Buffer).w, A0                         ; $FFFFF100
Offset_0x02F6A0:
                move.w  (A0), D0
                beq.s   Offset_0x02F6BA
                clr.w   (A0)+
                move.w  (A0)+, D1
                move.w  D0, D2
                move.w  D1, D4
                bsr.s   Special_Vint_VRAM_Write                ; Offset_0x02F67A
                move.w  D2, D0
                add.w   (VRAM_Add).w, D0                             ; $FFFFEEB0
                move.w  D4, D1
                bsr.s   Special_Vint_VRAM_Write                ; Offset_0x02F67A
                bra.s   Offset_0x02F6A0
Offset_0x02F6BA:
                rts                    
;===============================================================================
Special_Vint:                                                  ; Offset_0x02F6BC  
                lea     (VDP_Data_Port), A6                          ; $00C00000
                move.w  (Special_Vint_Routine).w, D0                 ; $FFFFEEA6
                jmp     Special_Vint_Index(PC, D0)             ; Offset_0x02F6CA
Special_Vint_Index:                                            ; Offset_0x02F6CA
                rts
                bra.s   Special_Vint_VScroll_On                ; Offset_0x02F6DC
                bra.s   Special_Vint_VScroll_Copy              ; Offset_0x02F6E6    
;-------------------------------------------------------------------------------
; Special_Vint_VScroll_Off:                                    ; Offset_0x02F6D0
                move.w  #$8B03, $0004(A6)
                clr.w   (Special_Vint_Routine).w                     ; $FFFFEEA6
                rts                           
;-------------------------------------------------------------------------------
Special_Vint_VScroll_On:                                       ; Offset_0x02F6DC
                move.w  #$8B07, $0004(A6)
                addq.w  #$02, (Special_Vint_Routine).w               ; $FFFFEEA6
;-------------------------------------------------------------------------------                
Special_Vint_VScroll_Copy:                                     ; Offset_0x02F6E6                
                lea     (Vertical_Scroll_Buffer).w, A0               ; $FFFFEEEA
                move.l  #$40000010, $0004(A6)
                moveq   #$13, D0
Special_Vint_VScroll_Copy_Loop:                                ; Offset_0x02F6F4
                move.l  (A0)+, (A6)
                dbra    D0, Special_Vint_VScroll_Copy_Loop     ; Offset_0x02F6F4
                rts 
;=============================================================================== 
Draw_Tile_Column:                                              ; Offset_0x02F6FC
                move.w  (A6), D0
                andi.w  #$FFF0, D0
                move.w  (A5), D2
                move.w  D0, (A5)
                move.w  D2, D3
                sub.w   D0, D2
                beq     Offset_0x02F888
                tst.b   D2
                bpl.s   Offset_0x02F71A
                neg.w   D2
                move.w  D3, D0
                addi.w  #$0150, D0
Offset_0x02F71A:
                andi.w  #$0030, D2
                cmpi.w  #$0010, D2
                sne     (Plane_Double_Update_Flag).w                 ; $FFFFEEA4
                movem.w D1/D6, -(A7)
                bsr.s   Setup_Tile_Column_Drawn                ; Offset_0x02F780
                movem.w (A7)+, D1/D6
                tst.b   (Plane_Double_Update_Flag).w                 ; $FFFFEEA4
                beq     Offset_0x02F888
                addi.w  #$0010, D0
                bra.s   Setup_Tile_Column_Drawn                ; Offset_0x02F780
;-------------------------------------------------------------------------------   
Draw_Tile_Column_2:                                            ; Offset_0x02F73E
                move.w  (A6), D0
                andi.w  #$FFF0, D0
                move.w  (A5), D2
                move.w  D0, (A5)
                move.w  D2, D3
                sub.w   D0, D2
                beq     Offset_0x02F888
                tst.b   D2
                bpl.s   Offset_0x02F75E
                neg.w   D2
                move.w  D3, D0
                addi.w  #$0150, D0
                swap.w  D1
Offset_0x02F75E:
                andi.w  #$0030, D2
                cmpi.w  #$0010, D2
                sne     (Plane_Double_Update_Flag).w                 ; $FFFFEEA4
                movem.w D1/D6, -(A7)
                bsr.s   Setup_Tile_Column_Drawn                ; Offset_0x02F780
                movem.w (A7)+, D1/D6
                tst.b   (Plane_Double_Update_Flag).w                 ; $FFFFEEA4
                beq     Offset_0x02F888
                addi.w  #$0010, D0
Setup_Tile_Column_Drawn:                                       ; Offset_0x02F780
                move.w  D1, D2
                andi.w  #$0070, D2
                move.w  D1, D3
                lsl.w   #$04, D3
                andi.w  #$0F00, D3
                asr.w   #$04, D1
                move.w  D1, D4
                asr.w   #$01, D1
                and.w   (Level_Layout_Wrap_Row).w, D1                ; $FFFFEEAE
                andi.w  #$000F, D4
                moveq   #$10, D5
                sub.w   D4, D5
                move.w  D5, D4
                sub.w   D6, D5
                bmi.s   Offset_0x02F7CE
                move.w  D0, D5
                asr.w   #$02, D5
                andi.w  #$007C, D5
                add.w   D7, D5
                add.w   D3, D5
                move.w  D5, (A0)+
                move.w  D6, D5
                subq.w  #$01, D6
                move.w  D6, (A0)+
                bset    #$07, -2(A0)
                lea     (A0), A1
                add.w   D5, D5
                add.w   D5, D5
                adda.w  D5, A0
                jsr     Get_Level_Chunk_Column(PC)             ; Offset_0x02F88A
                bra.s   Offset_0x02F81C
Offset_0x02F7CE:
                neg.w   D5
                move.w  D5, -(A7)
                move.w  D0, D5
                asr.w   #$02, D5
                andi.w  #$007C, D5
                add.w   D7, D5
                add.w   D3, D5
                move.w  D5, (A0)+
                move.w  D4, D6
                subq.w  #$01, D6
                move.w  D6, (A0)+
                bset    #$07, -2(A0)
                lea     (A0), A1
                add.w   D4, D4
                add.w   D4, D4
                adda.w  D4, A0
                jsr     Get_Level_Chunk_Column(PC)             ; Offset_0x02F88A
                bsr.s   Offset_0x02F81C
                move.w  (A7)+, D6
                move.w  D0, D5
                asr.w   #$02, D5
                andi.w  #$007C, D5
                add.w   D7, D5
                move.w  D5, (A0)+
                move.w  D6, D5
                subq.w  #$01, D6
                move.w  D6, (A0)+
                bset    #$07, -2(A0)
                lea     (A0), A1
                add.w   D5, D5
                add.w   D5, D5
                adda.w  D5, A0
Offset_0x02F81C:
                swap.w  D7
Offset_0x02F81E:
                move.w  $00(A5, D2), D3
                move.w  D3, D4
                andi.w  #$03FF, D3
                lsl.w   #$03, D3
                move.w  $00(A2, D3), D5
                swap.w  D5
                move.w  $04(A2, D3), D5
                move.w  $06(A2, D3), D7
                move.w  $02(A2, D3), D3
                swap.w  D3
                move.w  D7, D3
                btst    #$0B, D4
                beq.s   Offset_0x02F856
                eori.l  #$10001000, D5
                eori.l  #$10001000, D3
                swap.w  D5
                swap.w  D3
Offset_0x02F856:
                btst    #$0A, D4
                beq.s   Offset_0x02F86A
                eori.l  #$08000800, D5
                eori.l  #$08000800, D3
                exg.l   D3, D5
Offset_0x02F86A:
                move.l  D5, (A1)+
                move.l  D3, (A0)+
                addi.w  #$0010, D2
                andi.w  #$0070, D2
                bne.s   Offset_0x02F880
                addq.w  #$04, D1
                and.w   (Level_Layout_Wrap_Row).w, D1                ; $FFFFEEAE
                bsr.s   Get_Level_Chunk_Column                 ; Offset_0x02F88A
Offset_0x02F880:
                dbra    D6, Offset_0x02F81E
                swap.w  D7
                clr.w   (A0)
Offset_0x02F888:
                rts
;-------------------------------------------------------------------------------                
Get_Level_Chunk_Column:                                        ; Offset_0x02F88A
                move.w  $00(A3, D1), A4
                move.w  D0, D3
                asr.w   #$07, D3
                adda.w  D3, A4
                moveq   #-$01, D3
                clr.w   D3
                move.b  (A4), D3
                lsl.w   #$07, D3
                move.w  D0, D4
                asr.w   #$03, D4
                andi.w  #$000E, D4
                add.w   D4, D3
                move.l  D3, A5
                rts   
;-------------------------------------------------------------------------------    
Draw_Tile_Row:                                                 ; Offset_0x02F8AA
                move.w  (A6), D0
                and.w   (Level_Layout_Wrap_Y).w, D0                  ; $FFFFEEAC
                move.w  (A5), D2
                move.w  D0, (A5)
                move.w  D2, D3
                sub.w   D0, D2
                beq     Offset_0x02FA18
                tst.b   D2
                bpl.s   Offset_0x02F8CC
                neg.w   D2
                move.w  D3, D0
                addi.w  #$00F0, D0
                and.w   (Level_Layout_Wrap_Y).w, D0                  ; $FFFFEEAC
Offset_0x02F8CC:
                andi.w  #$0030, D2
                cmpi.w  #$0010, D2
                sne     (Plane_Double_Update_Flag).w                 ; $FFFFEEA4
                movem.w D1/D6, -(A7)
                bsr.s   Setup_Tile_Row_Draw                    ; Offset_0x02F93E
                movem.w (A7)+, D1/D6
                tst.b   (Plane_Double_Update_Flag).w                 ; $FFFFEEA4
                beq     Offset_0x02FA18
                addi.w  #$0010, D0
                and.w   (Level_Layout_Wrap_Y).w, D0                  ; $FFFFEEAC
                bra.s   Setup_Tile_Row_Draw                    ; Offset_0x02F93E   
;-------------------------------------------------------------------------------
Draw_Tile_Row_2:                                               ; Offset_0x02F8F4
                move.w  (A6), D0
                and.w   (Level_Layout_Wrap_Y).w, D0                  ; $FFFFEEAC
                move.w  (A5), D2
                move.w  D0, (A5)
                move.w  D2, D3
                sub.w   D0, D2
                beq     Offset_0x02FA18
                tst.b   D2
                bpl.s   Offset_0x02F918
                neg.w   D2
                move.w  D3, D0
                addi.w  #$00F0, D0
                and.w   (Level_Layout_Wrap_Y).w, D0                  ; $FFFFEEAC
                swap.w  D1
Offset_0x02F918:
                andi.w  #$0030, D2
                cmpi.w  #$0010, D2
                sne     (Plane_Double_Update_Flag).w                 ; $FFFFEEA4
                movem.w D1/D6, -(A7)
                bsr.s   Setup_Tile_Row_Draw                    ; Offset_0x02F93E
                movem.w (A7)+, D1/D6
                tst.b   (Plane_Double_Update_Flag).w                 ; $FFFFEEA4
                beq     Offset_0x02FA18
                addi.w  #$0010, D0
                and.w   (Level_Layout_Wrap_Y).w, D0                  ; $FFFFEEAC
;-------------------------------------------------------------------------------
Setup_Tile_Row_Draw:                                           ; Offset_0x02F93E
                asr.w   #$04, D1
                move.w  D1, D2
                move.w  D1, D4
                asr.w   #$03, D1
                add.w   D2, D2
                move.w  D2, D3
                andi.w  #$000E, D2
                add.w   D3, D3
                andi.w  #$007C, D3
                andi.w  #$001F, D4
                moveq   #$20, D5
                sub.w   D4, D5
                move.w  D5, D4
                sub.w   D6, D5
                bmi.s   Offset_0x02F984
                move.w  D0, D5
                andi.w  #$00F0, D5
                lsl.w   #$04, D5
                add.w   D7, D5
                add.w   D3, D5
                move.w  D5, (A0)+
                move.w  D6, D5
                subq.w  #$01, D6
                move.w  D6, (A0)+
                lea     (A0), A1
                add.w   D5, D5
                add.w   D5, D5
                adda.w  D5, A0
                jsr     Get_Chunk_Addr(PC)                     ; Offset_0x02FA1A
                bra.s   Offset_0x02F9C4
Offset_0x02F984:
                neg.w   D5
                move.w  D5, -(A7)
                move.w  D0, D5
                andi.w  #$00F0, D5
                lsl.w   #$04, D5
                add.w   D7, D5
                add.w   D3, D5
                move.w  D5, (A0)+
                move.w  D4, D6
                subq.w  #$01, D6
                move.w  D6, (A0)+
                lea     (A0), A1
                add.w   D4, D4
                add.w   D4, D4
                adda.w  D4, A0
                bsr.s   Get_Chunk_Addr                         ; Offset_0x02FA1A
                bsr.s   Offset_0x02F9C4
                move.w  (A7)+, D6
                move.w  D0, D5
                andi.w  #$00F0, D5
                lsl.w   #$04, D5
                add.w   D7, D5
                move.w  D5, (A0)+
                move.w  D6, D5
                subq.w  #$01, D6
                move.w  D6, (A0)+
                lea     (A0), A1
                add.w   D5, D5
                add.w   D5, D5
                adda.w  D5, A0
Offset_0x02F9C4:
                move.w  $00(A5, D2), D3
                move.w  D3, D4
                andi.w  #$03FF, D3
                lsl.w   #$03, D3
                move.l  $00(A2, D3), D5
                move.l  $04(A2, D3), D3
                btst    #$0B, D4
                beq.s   Offset_0x02F9EC
                eori.l  #$10001000, D5
                eori.l  #$10001000, D3
                exg.l   D3, D5
Offset_0x02F9EC:
                btst    #$0A, D4
                beq.s   Offset_0x02FA02
                eori.l  #$08000800, D5
                eori.l  #$08000800, D3
                swap.w  D5
                swap.w  D3
Offset_0x02FA02:
                move.l  D5, (A1)+
                move.l  D3, (A0)+
                addq.w  #$02, D2
                andi.w  #$000E, D2
                bne.s   Offset_0x02FA12
                addq.w  #$01, D1
                bsr.s   Offset_0x02FA26
Offset_0x02FA12:
                dbra    D6, Offset_0x02F9C4
                clr.w   (A0)
Offset_0x02FA18:                
                rts
;-------------------------------------------------------------------------------                
Get_Chunk_Addr:                                                ; Offset_0x02FA1A
                move.w  D0, D3
                asr.w   #$05, D3
                and.w   (Level_Layout_Wrap_Row).w, D3                ; $FFFFEEAE
                move.w  $00(A3, D3), A4
Offset_0x02FA26:
                moveq   #-$01, D3
                clr.w   D3
                move.b  $00(A4, D1), D3
                lsl.w   #$07, D3
                move.w  D0, D4
                andi.w  #$0070, D4
                add.w   D4, D3
                move.l  D3, A5
                rts
;-------------------------------------------------------------------------------
Offset_0x02FA3C:
                asr.w   #$03, D1
                move.w  D1, D2
                asr.w   #$04, D1
                andi.w  #$000E, D2
                cmpi.w  #$0100, (VRAM_Add).w                         ; $FFFFEEB0
                beq.s   Offset_0x02FA56
                moveq   #$04, D3
                move.w  #$1F80, D4
                bra.s   Offset_0x02FA5C
Offset_0x02FA56:
                moveq   #$05, D3
                move.w  #$1F00, D4
Offset_0x02FA5C:
                move.w  D0, D5
                lsl.w   D3, D5
                and.w   D4, D5
                add.w   D7, D5
                move.w  D5, (A0)+
                move.w  D6, D5
                subq.w  #$01, D6
                move.w  D6, (A0)+
                lea     (A0), A1
                add.w   D5, D5
                add.w   D5, D5
                adda.w  D5, A0
                jsr     Get_Chunk_Addr(PC)                     ; Offset_0x02FA1A
                bra     Offset_0x02F9C4 
;-------------------------------------------------------------------------------
Refresh_Plane_Full:                                            ; Offset_0x02FA7C
                moveq   #$0F, D2
Offset_0x02FA7E:
                movem.l D0-D2/A0, -(A7)
                moveq   #$20, D6
                jsr     Setup_Tile_Row_Draw(PC)                ; Offset_0x02F93E
                jsr     Vint_Draw_Level(PC)                    ; Offset_0x02F636
                movem.l (A7)+, D0-D2/A0
                addi.w  #$0010, D0
                dbra    D2, Offset_0x02FA7E
                rts   
;-------------------------------------------------------------------------------
Refresh_Plane_Tile_Deform:                                     ; Offset_0x02FA9A
                move.w  (A4)+, D2
                moveq   #$0F, D3
Offset_0x02FA9E:
                cmp.w   D2, D0
                bmi.s   Offset_0x02FAA8
                add.w   (A4)+, D2
                addq.w  #$04, A5
                bra.s   Offset_0x02FA9E
Offset_0x02FAA8:
                move.w  (A5), D1
                moveq   #$20, D6
                movem.l D0/D2/D3/A0/A4/A5, -(A7)
                jsr     Setup_Tile_Row_Draw(PC)                ; Offset_0x02F93E
                jsr     Vint_Draw_Level(PC)                    ; Offset_0x02F636
                movem.l (A7)+, D0/D2/D3/A0/A4/A5
                addi.w  #$0010, D0
                dbra    D3, Offset_0x02FA9E
                rts   
;-------------------------------------------------------------------------------
Offset_0x02FAC6:
                movem.l D0-D2/D6/A0, -(A7)
                jsr     Offset_0x02FA3C(PC)
                jsr     Offset_0x02F696(PC)
                movem.l (A7)+, D0-D2/D6/A0
                addi.w  #$0010, D0
                dbra    D2, Offset_0x02FAC6
                rts                 
;-------------------------------------------------------------------------------             
Refresh_Plane_Screen_Direct:                                   ; Offset_0x02FAE0
                move    #$2700, SR
                move.w  (Screen_Pos_Buffer_Y).w, D0                  ; $FFFFEE84
                move.w  (Screen_Pos_Buffer_X).w, D1                  ; $FFFFEE80
                moveq   #$0E, D2
Offset_0x02FAEE:
                movem.l D0-D2/A0, -(A7)
                moveq   #$15, D6
                jsr     Setup_Tile_Row_Draw(PC)                ; Offset_0x02F93E
                jsr     Vint_Draw_Level(PC)                    ; Offset_0x02F636
                movem.l (A7)+, D0-D2/A0
                addi.w  #$0010, D0
                dbra    D2, Offset_0x02FAEE
                move    #$2300, SR
                rts
;-------------------------------------------------------------------------------
Load_Tiles_As_You_Move:                                        ; Offset_0x02FB0E
                lea     (Screen_Pos_Buffer_X).w, A6                  ; $FFFFEE80
                lea     (Screen_Pos_Rounded_X).w, A5                 ; $FFFFEE88
                move.w  (Screen_Pos_Buffer_Y).w, D1                  ; $FFFFEE84
                moveq   #$0F, D6
                jsr     Draw_Tile_Column(PC)                   ; Offset_0x02F6FC
                lea     (Screen_Pos_Buffer_Y).w, A6                  ; $FFFFEE84
                lea     (Screen_Pos_Rounded_Y).w, A5                 ; $FFFFEE8A
                move.w  (Screen_Pos_Buffer_X).w, D1                  ; $FFFFEE80
                moveq   #$15, D6
                jmp     Draw_Tile_Row(PC)                      ; Offset_0x02F8AA    
;-------------------------------------------------------------------------------
Load_Tiles_As_You_Move_2:                                      ; Offset_0x02FB32
                lea     (Screen_Pos_Buffer_X_2).w, A6                ; $FFFFEE8C
                lea     (Screen_Pos_Rounded_X_2).w, A5               ; $FFFFEE94
                move.w  (Screen_Pos_Buffer_Y_2).w, D1                ; $FFFFEE90
                moveq   #$0F, D6
                jsr     Draw_Tile_Column(PC)                   ; Offset_0x02F6FC
                lea     (Screen_Pos_Buffer_Y_2).w, A6                ; $FFFFEE90
                lea     (Screen_Pos_Rounded_Y_2).w, A5               ; $FFFFEE96
                move.w  (Screen_Pos_Buffer_X_2).w, D1                ; $FFFFEE8C
                moveq   #$15, D6
                jmp     Draw_Tile_Row(PC)                      ; Offset_0x02F8AA                                
;-------------------------------------------------------------------------------  
; Offset_0x02FB56:
                movem.l D5/A4/A5, -(A7)
                lea     (Screen_Pos_Buffer_Y).w, A6                  ; $FFFFEE84
                jsr     Get_Deform_Draw_Position_Vertical(PC)  ; Offset_0x02FBF4
                lea     (Screen_Pos_Rounded_Y).w, A5                 ; $FFFFEE8A
                jsr     Draw_Tile_Row_2(PC)                    ; Offset_0x02F8F4
                movem.l (A7)+, D5/A4/A6
                move.w  (Screen_Pos_Rounded_Y).w, D6                 ; $FFFFEE8A
                bra.s   Draw_Background_D6                     ; Offset_0x02FB90                              
;------------------------------------------------------------------------------- 
Draw_Background:                                               ; Offset_0x02FB74
                movem.l D5/A4/A5, -(A7)
                lea     (Screen_Pos_Buffer_Y_2).w, A6                ; $FFFFEE90
                jsr     Get_Deform_Draw_Position_Vertical(PC)  ; Offset_0x02FBF4
                lea     (Screen_Pos_Rounded_Y_2).w, A5               ; $FFFFEE96
                jsr     Draw_Tile_Row_2(PC)                    ; Offset_0x02F8F4
                movem.l (A7)+, D5/A4/A6
                move.w  (Screen_Pos_Rounded_Y_2).w, D6               ; $FFFFEE96
Draw_Background_D6:                                            ; Offset_0x02FB90
                move.w  D6, D1
Offset_0x02FB92:
                sub.w   (A4)+, D6
                bmi.s   Offset_0x02FBA2
                move.w  (A6)+, D0
                andi.w  #$FFF0, D0
                move.w  D0, (A6)+
                subq.w  #$01, D5
                bra.s   Offset_0x02FB92
Offset_0x02FBA2:
                neg.w   D6
                lsr.w   #$04, D6
                moveq   #$0F, D4
                sub.w   D6, D4
                bcc.s   Offset_0x02FBB0
                moveq   #$00, D4
                moveq   #$0F, D6
Offset_0x02FBB0:
                movem.w D1/D4-D6, -(A7)
                movem.l A4/A6, -(A7)
                lea     $0002(A6), A5
                jsr     Draw_Tile_Column(PC)                   ; Offset_0x02F6FC
                movem.l (A7)+, A4/A6
                movem.w (A7)+, D1/D4-D6
                addq.w  #$04, A6
                tst.w   D4
                beq.s   Offset_0x02FBE4
                lsl.w   #$04, D6
                add.w   D6, D1
                subq.w  #$01, D5
                move.w  (A4)+, D6
                lsr.w   #$04, D6
                move.w  D4, D0
                sub.w   D6, D4
                bpl.s   Offset_0x02FBB0
                move.w  D0, D6
                moveq   #$00, D4
                bra.s   Offset_0x02FBB0
Offset_0x02FBE4:
                subq.w  #$01, D5
                beq.s   Offset_0x02FBF2
                move.w  (A6)+, D0
                andi.w  #$FFF0, D0
                move.w  D0, (A6)+
                bra.s   Offset_0x02FBE4
Offset_0x02FBF2:
                rts
;-------------------------------------------------------------------------------
Get_Deform_Draw_Position_Vertical:                             ; Offset_0x02FBF4
                move.w  (A4)+, D2
                move.w  (A6), D0
                bsr.s   Offset_0x02FBFE
                addi.w  #$00E0, D0
Offset_0x02FBFE:
                cmp.w   D2, D0
                bmi.s   Offset_0x02FC08
                add.w   (A4)+, D2
                addq.w  #$04, A5
                bra.s   Offset_0x02FBFE
Offset_0x02FC08:
                move.w  (A5), D1
                swap.w  D1
                rts
;-------------------------------------------------------------------------------
Draw_Tiles_Vertical:                                           ; Offset_0x02FC0E
                movem.l D5/A4/A5, -(A7)
                lea     (Screen_Pos_Buffer_X).w, A6                  ; $FFFFEE80
                jsr     Get_X_Deform_Range(PC)                 ; Offset_0x02FCAC
                lea     (Screen_Pos_Rounded_X).w, A5                 ; $FFFFEE88
                jsr     Draw_Tile_Column_2(PC)                 ; Offset_0x02F73E
                movem.l (A7)+, D5/A4/A6
                move.w  (Screen_Pos_Rounded_X).w, D6                 ; $FFFFEE88
                bra.s   Offset_0x02FC48       
;-------------------------------------------------------------------------------
Draw_Tiles_Vertical_2:                                         ; Offset_0x02FC2C:
                movem.l D5/A4/A5, -(A7)
                lea     (Screen_Pos_Buffer_X_2).w, A6                ; $FFFFEE8C
                jsr     Get_X_Deform_Range(PC)                 ; Offset_0x02FCAC
                lea     (Screen_Pos_Rounded_X_2).w, A5               ; $FFFFEE94
                jsr     Draw_Tile_Column_2(PC)                 ; Offset_0x02F73E
                movem.l (A7)+, D5/A4/A6
                move.w  (Screen_Pos_Rounded_X_2).w, D6               ; $FFFFEE94
Offset_0x02FC48:                
                move.w  D6, D1
Offset_0x02FC4A:
                sub.w   (A4)+, D6
                bcs.s   Offset_0x02FC5A
                move.w  (A6)+, D0
                and.w   (Level_Layout_Wrap_Y).w, D0                  ; $FFFFEEAC
                move.w  D0, (A6)+
                subq.w  #$01, D5
                bra.s   Offset_0x02FC4A
Offset_0x02FC5A:
                neg.w   D6
                lsr.w   #$04, D6
                moveq   #$15, D4
                sub.w   D6, D4
                bcc.s   Offset_0x02FC68
                moveq   #$00, D4
                moveq   #$15, D6
Offset_0x02FC68:
                movem.w D1/D4-D6, -(A7)
                movem.l A4/A6, -(A7)
                lea     $0002(A6), A5
                jsr     Draw_Tile_Row(PC)                      ; Offset_0x02F8AA
                movem.l (A7)+, A4/A6
                movem.w (A7)+, D1/D4-D6
                addq.w  #$04, A6
                tst.w   D4
                beq.s   Offset_0x02FC9C
                lsl.w   #$04, D6
                add.w   D6, D1
                subq.w  #$01, D5
                move.w  (A4)+, D6
                lsr.w   #$04, D6
                move.w  D4, D0
                sub.w   D6, D4
                bcc.s   Offset_0x02FC68
                move.w  D0, D6
                moveq   #$00, D4
                bra.s   Offset_0x02FC68
Offset_0x02FC9C:
                subq.w  #$01, D5
                beq.s   Offset_0x02FCAA
                move.w  (A6)+, D0
                and.w   (Level_Layout_Wrap_Y).w, D0                  ; $FFFFEEAC
                move.w  D0, (A6)+
                bra.s   Offset_0x02FC9C
Offset_0x02FCAA:
                rts          
;-------------------------------------------------------------------------------  
Get_X_Deform_Range:                                            ; Offset_0x02FCAC
                move.w  (A4)+, D2
                move.w  (A6), D0
                bsr.s   Offset_0x02FCB6
                addi.w  #$0140, D0
Offset_0x02FCB6:
                cmp.w   D2, D0
                bcs.s   Offset_0x02FCC0
                add.w   (A4)+, D2
                addq.w  #$04, A5
                bra.s   Offset_0x02FCB6
Offset_0x02FCC0:
                move.w  (A5), D1
                swap.w  D1
                rts
;-------------------------------------------------------------------------------  
Draw_Plane_Vertical_Bottom_Up:                                 ; Offset_0x02FCC6
                movem.w D1/D2, -(A7)
                bsr.s   Offset_0x02FCD4
                movem.w (A7)+, D1/D2
                bpl.s   Offset_0x02FCD4
                rts
Offset_0x02FCD4:
                and.w   (Level_Layout_Wrap_Y).w, D2                  ; $FFFFEEAC
                move.w  D2, D3
                addi.w  #$00F0, D3
                and.w   (Level_Layout_Wrap_Y).w, D3                  ; $FFFFEEAC
                move.w  (Draw_Delayed_Position).w, D0                ; $FFFFEEC8
                cmp.w   D2, D0
                bcs.s   Offset_0x02FCF4
                cmp.w   D3, D0
                bhi.s   Offset_0x02FCF4
                moveq   #$20, D6
                jsr     Setup_Tile_Row_Draw(PC)                ; Offset_0x02F93E
Offset_0x02FCF4:
                subi.w  #$0010, (Draw_Delayed_Position).w            ; $FFFFEEC8
                subq.w  #$01, (Draw_Delayed_Position_Rowcount).w     ; $FFFFEECA
                rts 
;-------------------------------------------------------------------------------  
Draw_Plane_Vertical_Bottom_Up_Complex:                         ; Offset_0x02FD00
                movem.l D1/A4/A5, -(A7)
                bsr.s   Offset_0x02FD0E
                movem.l (A7)+, D1/A4/A5
                bpl.s   Offset_0x02FD0E
                rts
Offset_0x02FD0E:
                and.w   (Level_Layout_Wrap_Y).w, D1                  ; $FFFFEEAC
                move.w  D1, D2
                addi.w  #$00F0, D2
                and.w   (Level_Layout_Wrap_Y).w, D2                  ; $FFFFEEAC
                move.w  (Draw_Delayed_Position).w, D0                ; $FFFFEEC8
                cmp.w   D1, D0
                bcs.s   Offset_0x02FD36
                cmp.w   D2, D0
                bhi.s   Offset_0x02FD36
Offset_0x02FD28:
                addq.w  #$04, A5
                cmp.w   (A4)+, D0
                bpl.s   Offset_0x02FD28
                move.w  (A5), D1
                moveq   #$20, D6
                jsr     Setup_Tile_Row_Draw(PC)                ; Offset_0x02F93E
Offset_0x02FD36:
                subi.w  #$0010, (Draw_Delayed_Position).w            ; $FFFFEEC8
                subq.w  #$01, (Draw_Delayed_Position_Rowcount).w     ; $FFFFEECA
                rts
;------------------------------------------------------------------------------- 
Plain_Deformation:                                             ; Offset_0x02FD42
                lea     (Horizontal_Scroll_Buffer).w, A1             ; $FFFFE000
                move.w  (Screen_Pos_Buffer_X).w, D0                  ; $FFFFEE80
                neg.w   D0
                swap.w  D0
                move.w  (Screen_Pos_Buffer_X_2).w, D0                ; $FFFFEE8C
                neg.w   D0
                moveq   #$37, D1
Offset_0x02FD56:
                move.l  D0, (A1)+
                move.l  D0, (A1)+
                move.l  D0, (A1)+
                move.l  D0, (A1)+
                dbra    D1, Offset_0x02FD56
                rts 
;-------------------------------------------------------------------------------
Make_Foreground_Deform_Array:                                  ; Offset_0x02FD64
                move.w  D1, D0
                lsr.w   #$01, D0
                bcc.s   Offset_0x02FD70
Offset_0x02FD6A:
                move.w  (A6)+, D5
                add.w   D6, D5
                move.w  D5, (A1)+
Offset_0x02FD70:
                move.w  (A6)+, D5
                add.w   D6, D5
                move.w  D5, (A1)+
                dbra    D0, Offset_0x02FD6A
                rts  
;-------------------------------------------------------------------------------
Apply_Deformation:                                             ; Offset_0x02FD7C
                move.w  #$00DF, D1
Apply_Deformation_D1:                                          ; Offset_0x02FD80
                lea     (Horizontal_Scroll_Buffer).w, A1             ; $FFFFE000
                move.w  (Screen_Pos_Buffer_Y_2).w, D0                ; $FFFFEE90
                move.w  (Screen_Pos_Buffer_X).w, D3                  ; $FFFFEE80
Offset_0x02FD8C:
                move.w  (A4)+, D2
                smi     D4
                bpl.s   Offset_0x02FD96
                andi.w  #$7FFF, D2
Offset_0x02FD96:
                sub.w   D2, D0
                bmi.s   Offset_0x02FDA8
                addq.w  #$02, A5
                tst.b   D4
                beq.s   Offset_0x02FD8C
                subq.w  #$02, A5
                add.w   D2, D2
                adda.w  D2, A5
                bra.s   Offset_0x02FD8C
Offset_0x02FDA8:
                tst.b   D4
                beq.s   Offset_0x02FDB2
                add.w   D0, D2
                add.w   D2, D2
                adda.w  D2, A5
Offset_0x02FDB2:
                neg.w   D0
                move.w  D1, D2
                sub.w   D0, D2
                bcc.s   Offset_0x02FDBE
                move.w  D1, D0
                addq.w  #$01, D0
Offset_0x02FDBE:
                neg.w   D3
                swap.w  D3
Offset_0x02FDC2:
                subq.w  #$01, D0
Offset_0x02FDC4:
                tst.b   D4
                beq.s   Offset_0x02FDDE
                lsr.w   #$01, D0
                bcc.s   Offset_0x02FDD2
Offset_0x02FDCC:
                move.w  (A5)+, D3
                neg.w   D3
                move.l  D3, (A1)+
Offset_0x02FDD2:
                move.w  (A5)+, D3
                neg.w   D3
                move.l  D3, (A1)+
                dbra    D0, Offset_0x02FDCC
                bra.s   Offset_0x02FDEE
Offset_0x02FDDE:
                move.w  (A5)+, D3
                neg.w   D3
                lsr.w   #$01, D0
                bcc.s   Offset_0x02FDE8
Offset_0x02FDE6:
                move.l  D3, (A1)+
Offset_0x02FDE8:
                move.l  D3, (A1)+
                dbra    D0, Offset_0x02FDE6
Offset_0x02FDEE:
                tst.w   D2
                bmi.s   Offset_0x02FE06
                move.w  (A4)+, D0
                smi     D4
                bpl.s   Offset_0x02FDFC
                andi.w  #$7FFF, D0
Offset_0x02FDFC:
                move.w  D2, D3
                sub.w   D0, D2
                bpl.s   Offset_0x02FDC2
                move.w  D3, D0
                bra.s   Offset_0x02FDC4
Offset_0x02FE06:
                rts         
;-------------------------------------------------------------------------------
Apply_All_Deformation:                                         ; Offset_0x02FE08
                swap.w  D7
                swap.w  D3
Offset_0x02FE0C:
                move.w  (A4)+, D3
                smi     D7
                bpl.s   Offset_0x02FE16
                andi.w  #$7FFF, D3
Offset_0x02FE16:
                sub.w   D3, D0
                bmi.s   Offset_0x02FE28
                addq.w  #$02, A5
                tst.b   D7
                beq.s   Offset_0x02FE0C
                subq.w  #$02, A5
                add.w   D3, D3
                adda.w  D3, A5
                bra.s   Offset_0x02FE0C
Offset_0x02FE28:
                tst.b   D7
                beq.s   Offset_0x02FE32
                add.w   D0, D3
                add.w   D3, D3
                adda.w  D3, A5
Offset_0x02FE32:
                swap.w  D3
                neg.w   D0
                move.w  D1, D4
                sub.w   D0, D4
                bcc.s   Offset_0x02FE40
                move.w  D1, D0
                addq.w  #$01, D0
Offset_0x02FE40:
                subq.w  #$01, D0
Offset_0x02FE42:
                tst.b   D7
                beq.s   Offset_0x02FE68
                lsr.w   #$01, D0
                bcc.s   Offset_0x02FE56
Offset_0x02FE4A:
                move.w  (A2)+, D6
                swap.w  D6
                move.w  (A5)+, D6
                neg.w   D6
                add.w   (A6)+, D6
                move.l  D6, (A1)+
Offset_0x02FE56:
                move.w  (A2)+, D6
                swap.w  D6
                move.w  (A5)+, D6
                neg.w   D6
                add.w   (A6)+, D6
                move.l  D6, (A1)+
                dbra    D0, Offset_0x02FE4A
                bra.s   Offset_0x02FE88
Offset_0x02FE68:
                move.w  (A5)+, D5
                neg.w   D5
                lsr.w   #$01, D0
                bcc.s   Offset_0x02FE7A
Offset_0x02FE70:
                move.w  (A2)+, D6
                swap.w  D6
                move.w  (A6)+, D6
                add.w   D5, D6
                move.l  D6, (A1)+
Offset_0x02FE7A:
                move.w  (A2)+, D6
                swap.w  D6
                move.w  (A6)+, D6
                add.w   D5, D6
                move.l  D6, (A1)+
                dbra    D0, Offset_0x02FE70
Offset_0x02FE88:
                tst.w   D4
                bmi.s   Offset_0x02FEA0
                move.w  (A4)+, D0
                smi     D7
                bpl.s   Offset_0x02FE96
                andi.w  #$7FFF, D0
Offset_0x02FE96:
                move.w  D4, D5
                sub.w   D0, D4
                bpl.s   Offset_0x02FE40
                move.w  D5, D0
                bra.s   Offset_0x02FE42
Offset_0x02FEA0:
                swap.w  D7
                rts   
;-------------------------------------------------------------------------------
Apply_Foreground_Vertical_Scroll:                              ; Offset_0x02FEA4
                lea     (Vertical_Scroll_Buffer).w, A1               ; $FFFFEEEA
                move.w  (Screen_Pos_Buffer_Y_2).w, D1                ; $FFFFEE90
                move.w  (Screen_Pos_Buffer_X).w, D0                  ; $FFFFEE80
                move.w  D0, D2
                andi.w  #$000F, D2
                beq.s   Offset_0x02FEBC
                addi.w  #$0010, D0
Offset_0x02FEBC:
                lsr.w   #$04, D0
Offset_0x02FEBE:
                addq.w  #$02, A5
                move.w  (A4)+, D2
                lsr.w   #$04, D2
                sub.w   D2, D0
                bpl.s   Offset_0x02FEBE
                neg.w   D0
                moveq   #$13, D2
                sub.w   D0, D2
                bcc.s   Offset_0x02FED2
                moveq   #$14, D0
Offset_0x02FED2:
                subq.w  #$01, D0
Offset_0x02FED4:
                move.w  (A5)+, D3
Offset_0x02FED6:
                move.w  D3, (A1)+
                move.w  D1, (A1)+
                dbra    D0, Offset_0x02FED6
                tst.w   D2
                bmi.s   Offset_0x02FEF0
                move.w  (A4)+, D0
                lsr.w   #$04, D0
                move.w  D2, D3
                sub.w   D0, D2
                bpl.s   Offset_0x02FED2
                move.w  D3, D0
                bra.s   Offset_0x02FED4
Offset_0x02FEF0:
                rts
;-------------------------------------------------------------------------------
Reset_Tile_Offset_Position_Actual:                             ; Offset_0x02FEF2
                move.w  (Screen_Pos_Buffer_X).w, D0                  ; $FFFFEE80
                move.w  D0, D1
                andi.w  #$FFF0, D0
                move.w  D0, (Screen_Pos_Rounded_X).w                 ; $FFFFEE88
                move.w  (Screen_Pos_Buffer_Y).w, D0                  ; $FFFFEE84
                and.w   (Level_Layout_Wrap_Y).w, D0                  ; $FFFFEEAC
                move.w  D0, (Screen_Pos_Rounded_Y).w                 ; $FFFFEE8A
                rts           
;-------------------------------------------------------------------------------
Reset_Tile_Offset_Position_Actual_2:                           ; Offset_0x02FF0E
                move.w  (Screen_Pos_Buffer_X_2).w, D0                ; $FFFFEE8C
                move.w  D0, D1
                andi.w  #$FFF0, D0
                move.w  D0, D2
                move.w  D0, (Screen_Pos_Rounded_X_2).w               ; $FFFFEE94
                move.w  (Screen_Pos_Buffer_Y_2).w, D0                ; $FFFFEE90
                and.w   (Level_Layout_Wrap_Y).w, D0                  ; $FFFFEEAC
                move.w  D0, (Screen_Pos_Rounded_Y_2).w               ; $FFFFEE96
                rts                   
;------------------------------------------------------------------------------- 
Update_Camera_P2_2:                                            ; Offset_0x02FF2C
                move.w  (Camera_X_P2).w, (Screen_Pos_Buffer_X_P2).w ; $FFFFEE60, $FFFFEE68
                move.w  (Camera_Y_P2).w, (Screen_Pos_Buffer_Y_P2).w ; $FFFFEE64, $FFFFEE6C
                rts        
;------------------------------------------------------------------------------- 
Update_Vertical_Scroll_Value_P2:                               ; Offset_0x02FF3A
                move.w  (Screen_Pos_Buffer_Y_P2).w, D0               ; $FFFFEE6C
                subi.w  #$0070, D0
                move.w  D0, (Vertical_Scroll_Value_P2).w             ; $FFFFF61E
                move.w  (Screen_Pos_Buffer_Y_P2_2).w, D0             ; $FFFFEE74
                subi.w  #$0070, D0
                move.w  D0, (Vertical_Scroll_Value_P2_3).w           ; $FFFFF620
                rts

; ---------------------------------------------------------------------------
; Subroutine to repeat level tile drawing in a level segment
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x02FF54: Load_Tiles_As_You_Move_Loop:
Repeat_TileDrawing:
		cmpi.b	#6,(Obj_Player_One+Obj_Routine).w
		bcc.s	RepeatTiles_Index
		move.w	(Level_Repeat_Routine).w,d0
		jmp	RepeatTiles_Index(pc,d0.w)
; ===========================================================================
; Offset_0x02FF64:
RepeatTiles_Index:
		; these two instructions make a blank Act 1 entry
		rts
		nop
                bra.w	AIz_Do_Ship_Loop
; ===========================================================================
; Offset_0x02FF6C:
Adjust_Background_During_Loop:
                move.w  (A1), D1
                move.w  D0, (A1)+
                sub.w   D1, D0
                bpl.s   Offset_0x02FF80
                neg.w   D0
                cmp.w   D2, D0
                bcs.s   Offset_0x02FF7C
                sub.w   D3, D0
Offset_0x02FF7C:
                sub.w   D0, (A1)+
                rts
Offset_0x02FF80:
                cmp.w   D2, D0
                bcs.s   Offset_0x02FF86
                sub.w   D3, D0
Offset_0x02FF86:
                add.w   D0, (A1)+
                rts                               
;===============================================================================
; Rotina para recarregar os tiles ao se mover na tela
; <<<-
;===============================================================================
Calc_Screen_Pos_Difference:                                    ; Offset_0x02FF8A
                move.w  (Screen_Pos_Buffer_X).w, D0                  ; $FFFFEE80
                sub.w   (Screen_Pos_Buffer_X_2).w, D0                ; $FFFFEE8C
                move.w  D0, (Camera_X_Difference).w                  ; $FFFFEE3E
                move.w  (Screen_Pos_Buffer_Y).w, D0                  ; $FFFFEE84
                sub.w   (Screen_Pos_Buffer_Y_2).w, D0                ; $FFFFEE90
                move.w  D0, (Camera_Y_Difference).w                  ; $FFFFEE40
                rts
;-------------------------------------------------------------------------------
Earthquake_Setup:                                              ; Offset_0x02FFA4
                move.w  (Earthquake_Offset).w, (Earthquake_Last_Offset).w ; $FFFFEECE, $FFFFEED0
                cmpi.b  #$06, (Obj_Player_One+Obj_Routine).w         ; $FFFFB005
                bcc.s   Offset_0x02FFDE
                move.w  (Earthquake_Flag).w, D0                      ; $FFFFEECC
                beq.s   Offset_0x02FFDE
                bmi.s   Offset_0x02FFCC
                subq.w  #$01, D0
                move.w  D0, (Earthquake_Flag).w                      ; $FFFFEECC
                move.b  Earthquake_Data(PC, D0), D0            ; Offset_0x030008
                ext.w   D0
                move.w  D0, (Earthquake_Offset).w                    ; $FFFFEECE
                rts
Offset_0x02FFCC:
                move.w  (Level_Frame_Count).w, D0                    ; $FFFFFE04
                andi.w  #$003F, D0
                move.b  Earthquake_Data_2(PC, D0), D0          ; Offset_0x03001C
                move.w  D0, (Earthquake_Offset).w                    ; $FFFFEECE
                rts
Offset_0x02FFDE:
                clr.w   (Earthquake_Offset).w                        ; $FFFFEECE
                rts  
;-------------------------------------------------------------------------------
Calc_Objects_X_Y_During_Transition:                            ; Offset_0x02FFE4
                lea     (Obj_04_Mem_Address).w, A1                   ; $FFFFB128
                moveq   #$59, D2
Offset_0x02FFEA:
                tst.l   (A1)
                beq.s   Offset_0x02FFFE
                btst    #$02, Obj_Flags(A1)                              ; $0004
                beq.s   Offset_0x02FFFE
                sub.w   D0, Obj_X(A1)                                    ; $0010
                sub.w   D1, Obj_Y(A1)                                    ; $0014
Offset_0x02FFFE:
                lea     Obj_Size(A1), A1                                 ; $004A
                dbra    D2, Offset_0x02FFEA
                rts 
;-------------------------------------------------------------------------------
Earthquake_Data:                                               ; Offset_0x030008
                dc.b    $01, $FF, $01, $FF, $02, $FE, $02, $FE
                dc.b    $03, $FD, $03, $FD, $04, $FC, $04, $FC
                dc.b    $05, $FB, $05, $FB
;-------------------------------------------------------------------------------
Earthquake_Data_2:                                             ; Offset_0x03001C
                dc.b    $01, $02, $01, $03, $01, $02, $02, $01
                dc.b    $02, $03, $01, $02, $01, $02, $00, $00
                dc.b    $02, $00, $03, $02, $02, $03, $02, $02
                dc.b    $01, $03, $00, $00, $01, $00, $01, $03
                dc.b    $01, $02, $01, $03, $01, $02, $02, $01
                dc.b    $02, $03, $01, $02, $01, $02, $00, $00
                dc.b    $02, $00, $03, $02, $02, $03, $02, $02
                dc.b    $01, $03, $00, $00, $01, $00, $01, $03
;-------------------------------------------------------------------------------    
AIz_Water_Fg_Deform_Delta:                                     ; Offset_0x03005C            
                dc.b    $00, $01, $00, $01, $00, $01, $00, $01
                dc.b    $00, $01, $00, $01, $00, $01, $00, $01
                dc.b    $00, $01, $00, $01, $00, $01, $00, $01
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $01, $00, $01
                dc.b    $00, $01, $00, $01, $00, $01, $00, $01
                dc.b    $00, $01, $00, $01, $00, $01, $00, $01
                dc.b    $00, $01, $00, $01, $00, $01, $00, $01
                dc.b    $00, $01, $00, $01, $00, $01, $00, $01
                dc.b    $00, $01, $00, $01, $00, $01, $00, $01
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $01, $00, $01
                dc.b    $00, $01, $00, $01, $00, $01, $00, $01
                dc.b    $00, $01, $00, $01, $00, $01, $00, $01
                dc.b    $00, $01, $00, $01, $00, $01, $00, $01
                dc.b    $00, $01, $00, $01, $00, $01, $00, $01
                dc.b    $00, $01, $00, $01, $00, $01, $00, $01
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $01, $00, $01
                dc.b    $00, $01, $00, $01, $00, $01, $00, $01
                dc.b    $00, $01, $00, $01, $00, $01, $00, $01
                dc.b    $00, $01, $00, $01, $00, $01, $00, $01
                dc.b    $00, $01, $00, $01, $00, $01, $00, $01
                dc.b    $00, $01, $00, $01, $00, $01, $00, $01
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $01, $00, $01
                dc.b    $00, $01, $00, $01, $00, $01, $00, $01
                dc.b    $00, $01, $00, $01, $00, $01, $00, $01
                dc.b    $00, $01, $00, $01, $00, $01, $00, $01
                dc.b    $00, $01, $00, $01, $00, $01, $00, $01
                dc.b    $00, $01, $00, $01, $00, $01, $00, $01
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
;-------------------------------------------------------------------------------                
AIz_Water_Bg_Deform_Delta:                                     ; Offset_0x03029C
                dc.b    $00, $00, $00, $00, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b    $00, $00, $00, $00, $00, $00, $00, $01
                dc.b    $00, $01, $00, $01, $00, $01, $00, $01
                dc.b    $00, $01, $00, $00, $00, $00, $00, $00
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $FF, $FF, $00, $00, $00, $00
                dc.b    $00, $00, $00, $01, $00, $01, $00, $01
                dc.b    $00, $01, $00, $01, $00, $01, $00, $00
                dc.b    $00, $00, $00, $00, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b    $00, $00, $00, $00, $00, $00, $00, $01
                dc.b    $00, $01, $00, $01, $00, $01, $00, $01
                dc.b    $00, $01, $00, $00, $FF, $FF, $FF, $FE
                dc.b    $FF, $FE, $FF, $FF, $00, $00, $00, $02
                dc.b    $00, $02, $00, $02, $00, $02, $00, $00
                dc.b    $00, $00, $00, $00, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b    $00, $00, $00, $00, $00, $00, $00, $01
                dc.b    $00, $01, $00, $01, $00, $01, $00, $01
                dc.b    $00, $01, $00, $00, $00, $00, $00, $00
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $FF, $FF, $00, $00, $00, $00
                dc.b    $00, $00, $00, $01, $00, $01, $00, $01
                dc.b    $00, $01, $00, $01, $00, $01, $00, $00
                dc.b    $00, $00, $00, $00, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b    $00, $00, $00, $00, $00, $00, $00, $01
                dc.b    $00, $01, $00, $01, $00, $01, $00, $01
                dc.b    $00, $01, $00, $00, $FF, $FF, $FF, $FE
                dc.b    $FF, $FE, $FF, $FF, $00, $00, $00, $02
                dc.b    $00, $02, $00, $02, $00, $02, $00, $00
                dc.b    $00, $00, $00, $00, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b    $00, $00, $00, $00, $00, $00, $00, $01
                dc.b    $00, $01, $00, $01, $00, $01, $00, $01
                dc.b    $00, $01, $00, $00, $00, $00, $00, $00
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $FF, $FF, $00, $00, $00, $00
                dc.b    $00, $00, $00, $01, $00, $01, $00, $01
                dc.b    $00, $01, $00, $01, $00, $01, $00, $00
                dc.b    $00, $00, $00, $00, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b    $00, $00, $00, $00, $00, $00, $00, $01
                dc.b    $00, $01, $00, $01, $00, $01, $00, $01
                dc.b    $00, $01, $00, $00, $FF, $FF, $FF, $FE
                dc.b    $FF, $FE, $FF, $FF, $00, $00, $00, $02
                dc.b    $00, $02, $00, $02, $00, $02, $00, $00
                dc.b    $00, $00, $00, $00, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b    $00, $00, $00, $00, $00, $00, $00, $01
                dc.b    $00, $01, $00, $01, $00, $01, $00, $01
                dc.b    $00, $01, $00, $00, $00, $00, $00, $00
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $FF, $FF, $00, $00, $00, $00
                dc.b    $00, $00, $00, $01, $00, $01, $00, $01
;-------------------------------------------------------------------------------                
LBz_Water_Bg_Deform_Delta:                                     ; Offset_0x03045C
                dc.b    $00, $01, $00, $01, $00, $01, $00, $00
                dc.b    $00, $00, $00, $00, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b    $00, $00, $00, $00, $00, $00, $00, $01
                dc.b    $00, $01, $00, $01, $00, $01, $00, $01
                dc.b    $00, $01, $00, $00, $FF, $FF, $FF, $FE
                dc.b    $FF, $FE, $FF, $FF, $00, $00, $00, $02
                dc.b    $00, $02, $00, $02, $00, $02, $00, $00
                dc.b    $00, $00, $00, $00, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b    $00, $00, $00, $00, $00, $00, $00, $01
                dc.b    $00, $01, $00, $01, $00, $01, $00, $01
                dc.b    $00, $01, $00, $00, $00, $00, $00, $00
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $FF, $FF, $00, $00, $00, $00
                dc.b    $00, $00, $00, $01, $00, $01, $00, $01                 
;-------------------------------------------------------------------------------  
AIz_1_Events_Init:                                             ; Offset_0x0304DC 
                jsr     Reset_Tile_Offset_Position_Actual(PC)  ; Offset_0x02FEF2
                jmp     Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
;------------------------------------------------------------------------------- 
AIz_1_Events_Run:                                              ; Offset_0x0304E4
                jsr     Load_Tiles_As_You_Move(PC)             ; Offset_0x02FB0E
                move.w  (Foreground_Events_Y_Counter).w, D0          ; $FFFFEEC4
                beq     Offset_0x030580
                cmpi.w  #$0039, D0
                bcc     Offset_0x030582
                cmpi.w  #$0034, D0
                bcs.s   Offset_0x030504
                bsr     Offset_0x030596
                bra.s   Offset_0x03051A
Offset_0x030504:
                cmpi.w  #$0024, D0
                bcs.s   Offset_0x030510
                bsr     Offset_0x0305A8
                bra.s   Offset_0x03051A
Offset_0x030510:
                cmpi.w  #$0014, D0
                bcs.s   Offset_0x03051A
                bsr     Offset_0x0305BA
Offset_0x03051A:
                lea     AIz_Tree_Reveal_Array(PC), A6          ; Offset_0x030682
                btst    #$00, D0
                bne.s   Offset_0x030528
                lea     $0010(A6), A6
Offset_0x030528:
                subq.w  #$01, D0
                lsr.w   #$01, D0
                move.w  D0, (Background_Events).w                    ; $FFFFEED2
                cmpi.w  #$0003, D0
                bcs.s   Offset_0x03053C
                move.w  #$0002, (Background_Events).w                ; $FFFFEED2
Offset_0x03053C:
                lsl.w   #$04, D0
                neg.w   D0
                addi.w  #$0470, D0
Offset_0x030544:
                cmp.w   (Screen_Pos_Rounded_Y).w, D0                 ; $FFFFEE8A
                bcc.s   Offset_0x03055A
                lea     $0020(A6), A6
                addi.w  #$0010, D0
                subq.w  #$01, (Background_Events).w                  ; $FFFFEED2
                bpl.s   Offset_0x030544
                bra.s   Offset_0x030582
Offset_0x03055A:
                move.w  #$2C80, D1
                moveq   #$10, D6
                move.l  A0, -(A7)
                jsr     Setup_Tile_Row_Draw(PC)                ; Offset_0x02F93E
                move.l  (A7)+, A0
                subi.w  #$0280, D0
                moveq   #$00, D1
                moveq   #$0F, D6
                bsr.s   Offset_0x0305CE
                lea     $0010(A6), A6
                addi.w  #$0290, D0
                subq.w  #$01, (Background_Events).w                  ; $FFFFEED2
                bpl.s   Offset_0x030544
Offset_0x030580:
                rts
Offset_0x030582:
                clr.w   (Foreground_Events_Y_Counter).w              ; $FFFFEEC4
                move.w  $0014(A3), A1
                move.w  (A3), A5
                move.b  (A5), $0059(A1)
                move.b  $0001(A5), $005A(A1)
Offset_0x030596:
                move.w  $0018(A3), A1
                move.w  $0004(A3), A5
                move.b  (A5), $0059(A1)
                move.b  $0001(A5), $005A(A1)
Offset_0x0305A8:
                move.w  $001C(A3), A1
                move.w  $0008(A3), A5
                move.b  (A5), $0059(A1)
                move.b  $0001(A5), $005A(A1)
Offset_0x0305BA:
                move.w  $0020(A3), A1
                move.w  $000C(A3), A5
                move.b  (A5), $0059(A1)
                move.b  $0001(A5), $005A(A1)
                rts
Offset_0x0305CE:
                asr.w   #$04, D1
                move.w  D1, D2
                asr.w   #$03, D1
                add.w   D2, D2
                andi.w  #$000E, D2
                addq.w  #$04, A0
                move.l  A0, A1
                lea     $0040(A0), A0
                jsr     Get_Chunk_Addr(PC)                     ; Offset_0x02FA1A
Offset_0x0305E6:
                move.w  $00(A5, D2), D3
                move.w  D3, D4
                andi.w  #$03FF, D3
                lsl.w   #$03, D3
                move.l  $00(A2, D3), D5
                move.l  $04(A2, D3), D3
                btst    #$0B, D4
                beq.s   Offset_0x03060E
                eori.l  #$10001000, D5
                eori.l  #$10001000, D3
                exg.l   D3, D5
Offset_0x03060E:
                btst    #$0A, D4
                beq.s   Offset_0x030624
                eori.l  #$08000800, D5
                eori.l  #$08000800, D3
                swap.w  D5
                swap.w  D3
Offset_0x030624:
                tst.b   (A6)+
                beq.s   Offset_0x03062A
                move.l  D5, (A1)
Offset_0x03062A:
                addq.w  #$04, A1
                tst.b   $000F(A6)
                beq.s   Offset_0x030634
                move.l  D3, (A0)
Offset_0x030634:
                addq.w  #$04, A0
                addq.w  #$02, D2
                andi.w  #$000E, D2
                bne.s   Offset_0x030644
                addq.w  #$01, D1
                jsr     Offset_0x02FA26(PC)
Offset_0x030644:
                dbra    D6, Offset_0x0305E6
                clr.w   (A0)
                rts
;-------------------------------------------------------------------------------
Obj_AIz_Tree_Reveal_Control:                                   ; Offset_0x03064C
                tst.w   Obj_Timer(A0)                                    ; $002E
                beq.s   Offset_0x03065E
                tst.w   (Foreground_Events_Y_Counter).w              ; $FFFFEEC4
                bne.s   Offset_0x03065E
                jmp     (DeleteObject)                         ; Offset_0x011138
Offset_0x03065E:
                subq.w  #$01, Obj_Timer(A0)                              ; $002E
                move.w  #$0480, D0
                sub.w   (Obj_Player_One+Obj_Y).w, D0                 ; $FFFFB014
                lsr.w   #$03, D0
                addq.w  #$03, D0
                cmp.w   (Foreground_Events_Y_Counter).w, D0          ; $FFFFEEC4
                bcc.s   Offset_0x03067C
                btst    #Classic_Type, Obj_Player_Status(A0)        ; $00, $002F
                beq.s   Offset_0x030680
Offset_0x03067C:
                addq.w  #$01, (Foreground_Events_Y_Counter).w        ; $FFFFEEC4
Offset_0x030680:
                rts                   
;-------------------------------------------------------------------------------
AIz_Tree_Reveal_Array:                                         ; Offset_0x030682
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $01, $01, $01
                dc.b    $01, $01, $01, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $01, $01, $01, $01, $01
                dc.b    $01, $01, $01, $01, $01, $00, $00, $00
                dc.b    $00, $00, $01, $01, $01, $01, $01, $01
                dc.b    $01, $01, $01, $01, $01, $01, $00, $00
                dc.b    $00, $01, $01, $01, $01, $01, $01, $01
                dc.b    $01, $01, $01, $01, $01, $01, $01, $00
                dc.b    $01, $01, $01, $01, $01, $01, $01, $01
                dc.b    $01, $01, $01, $01, $01, $01, $01, $01
                dc.b    $01, $01, $01, $01, $01, $01, $01, $01
                dc.b    $01, $01, $01, $01, $01, $01, $01, $01                
;-------------------------------------------------------------------------------                
AIz_1_Events_Init_2:                                           ; Offset_0x0306F2  
                cmpi.w  #$1400, (Screen_Pos_Buffer_X).w              ; $FFFFEE80
                bcc.s   Offset_0x03071E
                lea     (Horizontal_Scroll_Table).w, A1              ; $FFFFA800
                moveq   #$09, D0
Offset_0x030700:
                clr.l   (A1)+
                dbra    D0, Offset_0x030700
                jsr     AIz_Intro_Deform(PC)                   ; Offset_0x0309F8
                jsr     Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
                jsr     Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
                lea     AIz_Intro_Deform_Array(PC), A4         ; Offset_0x030BF0
                lea     (Horizontal_Scroll_Table+$0028).w, A5        ; $FFFFA828
                jmp     Apply_Deformation(PC)                  ; Offset_0x02FD7C
Offset_0x03071E:
                move.w  #$0008, (Level_Events_Routine_2).w           ; $FFFFEEC2
                jsr     AIz_1_Deform(PC)                       ; Offset_0x030A64
                jsr     Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
                clr.l   (Horizontal_Scroll_Table).w                  ; $FFFFA800
                move.w  D2, (Horizontal_Scroll_Table+$0006).w        ; $FFFFA806
                lea     AIz_BG_Draw_Array(PC), A4              ; Offset_0x030C3A
                lea     (Horizontal_Scroll_Table).w, A5              ; $FFFFA800
                jsr     Refresh_Plane_Tile_Deform(PC)          ; Offset_0x02FA9A
                jmp     AIz_Apply_Deform_Water(PC)             ; Offset_0x030AFA
;------------------------------------------------------------------------------- 
AIz_1_Events_Run_2:                                            ; Offset_0x030744
                move.w  (Level_Events_Routine_2).w, D0               ; $FFFFEEC2
                jmp     Offset_0x03074C(PC, D0)   
Offset_0x03074C:
                bra     AIz_1_Intro                            ; Offset_0x030764
                bra     AIz_1_Normal_Refresh                   ; Offset_0x0307BE
                bra     AIz_1_Normal                           ; Offset_0x0307DA
                bra     AIz_1_Fire_Transition                  ; Offset_0x030832
                bra     AIz_1_Fire_Refresh                     ; Offset_0x0308F0
                bra     AIz_1_Finish                           ; Offset_0x03091C                
;------------------------------------------------------------------------------- 
AIz_1_Intro:                                                   ; Offset_0x030764
                tst.w   (Level_Events_Buffer_5).w                    ; $FFFFEEC6
                beq.s   Offset_0x03079E
                tst.w   (Kosinski_Mod_Queue_Count).w                 ; $FFFFFF0E
                bne     Offset_0x03079E
                clr.w   (Level_Events_Buffer_5).w                    ; $FFFFEEC6
                jsr     AIz_1_Deform(PC)                       ; Offset_0x030A64
                jsr     Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
                clr.l   (Horizontal_Scroll_Table).w                  ; $FFFFA800
                move.w  D2, (Horizontal_Scroll_Table+$0006).w        ; $FFFFA806
                addi.w  #$00E0, D0
                and.w   (Level_Layout_Wrap_Y).w, D0                  ; $FFFFEEAC
                move.w  D0, (Draw_Delayed_Position).w                ; $FFFFEEC8
                move.w  #$000F, (Draw_Delayed_Position_Rowcount).w   ; $FFFFEECA
                addq.w  #$04, (Level_Events_Routine_2).w             ; $FFFFEEC2
                bra.s   Offset_0x0307C2
Offset_0x03079E:
                jsr     AIz_Intro_Deform(PC)                   ; Offset_0x0309F8
                lea     AIz_Intro_Draw_Array(PC), A4           ; Offset_0x030BDC
                lea     (Horizontal_Scroll_Table).w, A5              ; $FFFFA800
                moveq   #$20, D6
                moveq   #$0A, D5
                jsr     Draw_Background(PC)                    ; Offset_0x02FB74
                lea     AIz_Intro_Deform_Array(PC), A4         ; Offset_0x030BF0
                lea     (Horizontal_Scroll_Table+$0028).w, A5        ; $FFFFA828
                jmp     Apply_Deformation(PC)                  ; Offset_0x02FD7C                 
;------------------------------------------------------------------------------- 
AIz_1_Normal_Refresh:                                          ; Offset_0x0307BE
                jsr     AIz_1_Deform(PC)                       ; Offset_0x030A64
Offset_0x0307C2:                
                lea     AIz_BG_Draw_Array(PC), A4              ; Offset_0x030C3A
                lea     (Horizontal_Scroll_Table-$0004).w, A5        ; $FFFFA7FC
                move.w  (Screen_Pos_Buffer_Y_2).w, D1                ; $FFFFEE90
                jsr     Draw_Plane_Vertical_Bottom_Up_Complex(PC) ; Offset_0x02FD00
                bpl.s   Offset_0x03081E
                addq.w  #$04, (Level_Events_Routine_2).w             ; $FFFFEEC2
                bra.s   Offset_0x03081E                 
;------------------------------------------------------------------------------- 
AIz_1_Normal:                                                  ; Offset_0x0307DA
                tst.w   (Level_Events_Buffer_5).w                    ; $FFFFEEC6
                beq.s   Offset_0x03081A
                clr.w   (Level_Events_Buffer_5).w                    ; $FFFFEEC6
                lea     (Palette_Row_3_Offset+$02).w, A1             ; $FFFFED62
                move.l  #$004E006E, (A1)+
                move.l  #$00AE00CE, (A1)+
                move.l  #$02EE0AEE, (A1)
                move.l  #$00200000, (Screen_Pos_Buffer_Y_2).w        ; $FFFFEE90
                move.w  #$0010, (Screen_Pos_Rounded_Y_2).w           ; $FFFFEE96
                move.w  #$0068, (Background_Events).w                ; $FFFFEED2
                move.w  #$0002, (Special_Vint_Routine).w             ; $FFFFEEA6
                addq.w  #$04, (Level_Events_Routine_2).w             ; $FFFFEEC2
                bra.s   AIz_1_Fire_Transition                  ; Offset_0x030832
Offset_0x03081A:
                jsr     AIz_1_Deform(PC)                       ; Offset_0x030A64
Offset_0x03081E:                
                lea     AIz_BG_Draw_Array(PC), A4              ; Offset_0x030C3A
                lea     (Horizontal_Scroll_Table).w, A5              ; $FFFFA800
                moveq   #$20, D6
                moveq   #$02, D5
                jsr     Draw_Background(PC)                    ; Offset_0x02FB74
                jmp     AIz_Apply_Deform_Water(PC)             ; Offset_0x030AFA
;------------------------------------------------------------------------------- 
AIz_1_Fire_Transition:                                         ; Offset_0x030832
                tst.w   (Background_Events+$02).w                    ; $FFFFEED4
                bne.s   Offset_0x030852
                move.w  (Background_Events).w, D0                    ; $FFFFEED2
                swap.w  D0
                clr.w   D0
                sub.l   (Screen_Pos_Buffer_Y_2).w, D0                ; $FFFFEE90
                asr.l   #$05, D0
                add.l   D0, (Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
                cmpi.l  #$00001400, D0
                bcc.s   Offset_0x030856
Offset_0x030852:
                jsr     AIz_1_Fire_Rise(PC)                    ; Offset_0x030B78
Offset_0x030856:
                lea     (Screen_Pos_Buffer_Y_2).w, A6                ; $FFFFEE90
                lea     (Screen_Pos_Rounded_Y_2).w, A5               ; $FFFFEE96
                move.w  #$1000, D1
                moveq   #$20, D6
                jsr     Draw_Tile_Row(PC)                      ; Offset_0x02F8AA
                cmpi.w  #$0190, (Screen_Pos_Buffer_Y_2).w            ; $FFFFEE90
                bcs.s   Offset_0x0308E8
                movem.l D7/A0/A2/A3, -(A7)
                lea     (Angel_Island_2_Chunks), A1            ; Offset_0x14EA6E
                lea     (M68K_RAM_Start), A2                         ; $FFFF0000
                jsr     (Queue_Kos)          ; Offset_0x0019AE
                lea     (Angel_Island_2_Blocks), A1            ; Offset_0x148128
                lea     (Blocks_Mem_Address).w, A2                   ; $FFFF9000
                jsr     (Queue_Kos)          ; Offset_0x0019AE
                lea     (Angel_Island_2_Blocks_2), A1          ; Offset_0x1489A8
                lea     (Blocks_Mem_Address+$0AA0).w, A2             ; $FFFF9AA0
                jsr     (Queue_Kos)          ; Offset_0x0019AE
                lea     (Angel_Island_2_Tiles), A1             ; Offset_0x1496B8
                move.w  #$0000, D2
                jsr     (Queue_Kos_Module)                 ; Offset_0x0018A8
                lea     (Angel_Island_2_Tiles_2), A1           ; Offset_0x14A1BA
                move.w  #$16A0, D2
                jsr     (Queue_Kos_Module)                 ; Offset_0x0018A8
                lea     (PLC_Spikes_Springs), A1               ; Offset_0x04192C
                jsr     (LoadPLC_Direct)                           ; Offset_0x001502
                movem.l (A7)+, D7/A0/A2/A3
                move.w  #$00F0, (Draw_Delayed_Position).w            ; $FFFFEEC8
                move.w  #$000F, (Draw_Delayed_Position_Rowcount).w   ; $FFFFEECA
                addq.w  #$04, (Level_Events_Routine_2).w             ; $FFFFEEC2
                bra.s   Offset_0x0308F4
Offset_0x0308E8:
                jsr     AIz_Transition_Wavy_Flame(PC)          ; Offset_0x030B98
                jmp     Plain_Deformation(PC)                  ; Offset_0x02FD42                              
;------------------------------------------------------------------------------- 
AIz_1_Fire_Refresh:                                            ; Offset_0x0308F0
                jsr     AIz_1_Fire_Rise(PC)                    ; Offset_0x030B78
Offset_0x0308F4:                
                lea     (Fg_Mem_Index_Address).w, A3                 ; $FFFF8008
                move.w  #$C000, D7
                move.w  #$0180, D1
                moveq   #$00, D2
                jsr     Draw_Plane_Vertical_Bottom_Up(PC)      ; Offset_0x02FCC6
                bpl.s   Offset_0x030914
                addq.w  #$02, A3
                move.w  #$E000, D7
                addq.w  #$04, (Level_Events_Routine_2).w             ; $FFFFEEC2
                bra.s   Offset_0x030920
Offset_0x030914:
                jsr     AIz_Transition_Wavy_Flame(PC)          ; Offset_0x030B98
                jmp     Plain_Deformation(PC)                  ; Offset_0x02FD42                 
;------------------------------------------------------------------------------- 
AIz_1_Finish:                                                  ; Offset_0x03091C
                jsr     AIz_1_Fire_Rise(PC)                    ; Offset_0x030B78
Offset_0x030920:                
                tst.b   (Kosinski_Modules_Left).w                    ; $FFFFFF60
                bne     Offset_0x0309F0
                move.w  #AIz_Act_2, (Current_ZoneAndAct).w              ; $0001, $FFFFFE10
                clr.b   (Saved_Level_Flag).w                         ; $FFFFFE30
                clr.b   (Saved_Level_Flag_P2).w                      ; $FFFFFEE0
                clr.b   (Dynamic_Resize_Routine).w                   ; $FFFFEE33
                clr.b   (Object_Pos_Routine).w                       ; $FFFFF76C
                clr.b   (Ring_Pos_Routine).w                         ; $FFFFF710
                clr.b   (Boss_Flag).w                                ; $FFFFF7AA
                clr.l   (Animate_Counters).w                         ; $FFFFF7F0
                clr.w   (Animate_Counters+$04).w                     ; $FFFFF7F4
                movem.l D7/A0/A2/A3, -(A7)
                jsr     (LoadLevelLayout)                    ; Offset_0x01247C
                jsr     (LoadCollisionIndex)                 ; Offset_0x0049B2
                jsr     (Level_InitWaterLevels)                    ; Offset_0x005056
                moveq   #$0B, D0
                jsr     (PalLoad_Now)                             ; Offset_0x002FBA
                movem.l (A7)+, D7/A0/A2/A3
                lea     (Palette_Row_3_Offset+$02).w, A1             ; $FFFFED62
                move.l  #$004E006E, (A1)+
                move.l  #$00AE00CE, (A1)+
                move.l  #$02EE0AEE, (A1)
                move.w  #$2F00, D0
                move.w  #$0080, D1
                sub.w   D0, (Obj_Player_One+Obj_X).w                 ; $FFFFB010
                sub.w   D1, (Obj_Player_One+Obj_Y).w                 ; $FFFFB014
                sub.w   D0, (Obj_Player_Two+Obj_X).w                 ; $FFFFB05A
                sub.w   D1, (Obj_Player_Two+Obj_Y).w                 ; $FFFFB05E
                sub.w   D0, (Camera_X).w                             ; $FFFFEE78
                sub.w   D1, (Camera_Y).w                             ; $FFFFEE7C
                sub.w   D0, (Screen_Pos_Buffer_X).w                  ; $FFFFEE80
                sub.w   D1, (Screen_Pos_Buffer_Y).w                  ; $FFFFEE84
                move.l  #$00100010, D0
                move.l  #$00000260, D1
                move.l  D0, (Sonic_Level_Limits_Min_X).w             ; $FFFFEE14
                move.l  D0, (Level_Limits_Min_X).w                   ; $FFFFEE0C
                move.l  D1, (Sonic_Level_Limits_Min_Y).w             ; $FFFFEE18
                move.l  D1, (Level_Limits_Min_Y).w                   ; $FFFFEE10
                move.w  (Screen_Pos_Buffer_X).w, (Level_Events_Buffer_0).w ; $FFFFEE80, $FFFFEEB4
                move.w  (Screen_Pos_Buffer_X).w, (Level_Events_Buffer_1).w ; $FFFFEE80, $FFFFEEB6
                jsr     Reset_Tile_Offset_Position_Actual(PC)  ; Offset_0x02FEF2
                addi.w  #$00E0, D0
                and.w   (Level_Layout_Wrap_Y).w, D0                  ; $FFFFEEAC
                move.w  D0, (Draw_Delayed_Position).w                ; $FFFFEEC8
                move.w  #$000F, (Draw_Delayed_Position_Rowcount).w   ; $FFFFEECA
                clr.w   (Level_Events_Routine_2).w                   ; $FFFFEEC2
Offset_0x0309F0:
                jsr     AIz_Transition_Wavy_Flame(PC)          ; Offset_0x030B98
                jmp     Plain_Deformation(PC)                  ; Offset_0x02FD42
;-------------------------------------------------------------------------------
AIz_Intro_Deform:                                              ; Offset_0x0309F8
                move.w  (Screen_Pos_Buffer_Y).w, (Screen_Pos_Buffer_Y_2).w ; $FFFFEE84, $FFFFEE90
                move.w  (Level_Events_Buffer_1).w, D0                ; $FFFFEEB6
                bmi.s   Offset_0x030A08
                move.w  (Screen_Pos_Buffer_X).w, D0                  ; $FFFFEE80
Offset_0x030A08:
                asr.w   #$01, D0
                lea     (Horizontal_Scroll_Table+$0028).w, A1        ; $FFFFA828
                cmpi.w  #$0580, D0
                blt.s   Offset_0x030A1E
                moveq   #$24, D1
Offset_0x030A16:
                move.w  D0, (A1)+
                dbra    D1, Offset_0x030A16
                bra.s   Offset_0x030A3E
Offset_0x030A1E:
                move.w  D0, (A1)+
                subi.w  #$0580, D0
                swap.w  D0
                clr.w   D0
                move.l  D0, D1
                asr.l   #$05, D1
                moveq   #$23, D2
Offset_0x030A2E:
                add.l   D1, D0
                move.l  D0, D3
                swap.w  D3
                addi.w  #$0580, D3
                move.w  D3, (A1)+
                dbra    D2, Offset_0x030A2E
Offset_0x030A3E:
                lea     (Horizontal_Scroll_Table+$0028).w, A1        ; $FFFFA828
                lea     (Horizontal_Scroll_Table).w, A5              ; $FFFFA800
                move.w  (A1)+, D0
                bpl.s   Offset_0x030A4C
                moveq   #$00, D0
Offset_0x030A4C:
                move.w  D0, (A5)
                addq.w  #$04, A5
                moveq   #$08, D0
Offset_0x030A52:
                move.w  (A1), D1
                bpl.s   Offset_0x030A58
                moveq   #$00, D1
Offset_0x030A58:
                move.w  D1, (A5)
                addq.w  #$08, A1
                addq.w  #$04, A5
                dbra    D0, Offset_0x030A52
                rts
;-------------------------------------------------------------------------------
AIz_1_Deform:                                                  ; Offset_0x030A64
                move.w  (Screen_Pos_Buffer_Y).w, D0                  ; $FFFFEE84
                asr.w   #$01, D0
                move.w  D0, (Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
                move.w  (Screen_Pos_Buffer_X).w, D0                  ; $FFFFEE80
                subi.w  #$1300, D0
                swap.w  D0
                clr.w   D0
                asr.l   #$05, D0
                move.l  D0, D2
                add.l   D0, D0
                move.l  D0, D1
                lsl.l   #$03, D0
                sub.l   D1, D0
                lea     (Horizontal_Scroll_Table+$0030).w, A1        ; $FFFFA830
                swap.w  D0
                move.w  D0, (A1)
                swap.w  D0
                add.l   D1, D0
                swap.w  D0
                move.w  D0, -$2C(A1)
                move.w  D0, $0002(A1)
                move.w  D0, $000A(A1)
                swap.w  D0
                add.l   D1, D0
                swap.w  D0
                move.w  D0, $0004(A1)
                move.w  D0, $0008(A1)
                swap.w  D0
                add.l   D1, D0
                swap.w  D0
                move.w  D0, $0006(A1)
                lea     (Horizontal_Scroll_Table+$0016).w, A1        ; $FFFFA816
                move.l  D2, D0
                swap.w  D0
                move.w  D0, -(A1)
                swap.w  D0
                move.l  (Horizontal_Scroll_Table+$003C).w, D3        ; $FFFFA83C
                addi.l  #$00002000, (Horizontal_Scroll_Table+$003C).w ; $FFFFA83C
                asr.l   #$01, D0
                moveq   #$05, D1
Offset_0x030AD4:
                add.l   D3, D0
                swap.w  D0
                move.w  D0, -(A1)
                swap.w  D0
                add.l   D2, D0
                dbra    D1, Offset_0x030AD4
                lea     (Horizontal_Scroll_Table+$0016).w, A1        ; $FFFFA816
                move.l  D2, D0
                asr.l   #$03, D2
                moveq   #$0C, D1
Offset_0x030AEC:
                add.l   D2, D0
                swap.w  D0
                move.w  D0, (A1)+
                swap.w  D0
                dbra    D1, Offset_0x030AEC
                rts 
;-------------------------------------------------------------------------------
AIz_Apply_Deform_Water:                                        ; Offset_0x030AFA
                lea     AIz_Deform_Array(PC), A4               ; Offset_0x030C3E
                lea     (Horizontal_Scroll_Table+$0008).w, A5        ; $FFFFA808
                move.w  (Water_Level_Move).w, D1                     ; $FFFFF646
                sub.w   (Screen_Pos_Buffer_Y).w, D1                  ; $FFFFEE84
                cmpi.w  #$00E0, D1
                blt.s   Offset_0x030B14
                jmp     Apply_Deformation(PC)                  ; Offset_0x02FD7C
Offset_0x030B14:
                subq.w  #$01, D1
                jsr     Apply_Deformation_D1(PC)               ; Offset_0x02FD80
                move.l  A1, -(A7)
                lea     (Horizontal_Scroll_Table+$0040).w, A1        ; $FFFFA840
                lea     AIz_Water_Fg_Deform_Delta(PC), A6      ; Offset_0x03005C
                move.w  (Water_Level_Move).w, D0                     ; $FFFFF646
                subi.w  #$00DE, D1
                neg.w   D1
                move.w  (Level_Frame_Count).w, D2                    ; $FFFFFE04
                add.w   D0, D2
                add.w   D0, D2
                andi.w  #$007E, D2
                adda.w  D2, A6
                move.w  (Screen_Pos_Buffer_X).w, D6                  ; $FFFFEE80
                neg.w   D6
                jsr     Make_Foreground_Deform_Array(PC)       ; Offset_0x02FD64
                move.l  (A7)+, A1
                lea     (Horizontal_Scroll_Table+$0040).w, A2        ; $FFFFA840
                lea     AIz_Deform_Array(PC), A4               ; Offset_0x030C3E
                lea     (Horizontal_Scroll_Table+$0008).w, A5        ; $FFFFA808
                lea     AIz_Water_Bg_Deform_Delta(PC), A6      ; Offset_0x03029C
                move.w  (Water_Level_Move).w, D0                     ; $FFFFF646
                sub.w   (Screen_Pos_Buffer_Y).w, D0                  ; $FFFFEE84
                add.w   (Screen_Pos_Buffer_Y_2).w, D0                ; $FFFFEE90
                move.w  (Level_Frame_Count).w, D2                    ; $FFFFFE04
                asr.w   #$01, D2
                add.w   D0, D2
                add.w   D0, D2
                andi.w  #$007E, D2
                adda.w  D2, A6
                jmp     Apply_All_Deformation(PC)              ; Offset_0x02FE08
;-------------------------------------------------------------------------------
AIz_1_Fire_Rise:                                               ; Offset_0x030B78
                moveq   #$00, D0
                move.w  (Background_Events+$02).w, D0                ; $FFFFEED4
                addi.w  #$0280, D0
                cmpi.w  #$A000, D0
                bcs.s   Offset_0x030B8C
                move.w  #$A000, D0
Offset_0x030B8C:
                move.w  D0, (Background_Events+$02).w                ; $FFFFEED4
                lsl.l   #$04, D0
                add.l   D0, (Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
                rts                         
;-------------------------------------------------------------------------------
AIz_Transition_Wavy_Flame:                                     ; Offset_0x030B98       
                addq.w  #$06, (AIz_Wavy_Flame_Counter).w             ; $FFFFEE8E
                move.w  (AIz_Wavy_Flame_Counter).w, D0               ; $FFFFEE8E
                andi.w  #$0060, D0
                addi.w  #$1000, D0
                move.w  D0, (Screen_Pos_Buffer_X_2).w                ; $FFFFEE8C
                lea     (Vertical_Scroll_Buffer).w, A1               ; $FFFFEEEA
                lea     AIz_Flame_Vertical_Scroll(PC), A5      ; Offset_0x030C5A
                move.w  (Screen_Pos_Buffer_Y).w, D0                  ; $FFFFEE84
                swap.w  D0
                move.w  (Screen_Pos_Buffer_Y_2).w, D1                ; $FFFFEE90
                move.w  (Level_Frame_Count).w, D2                    ; $FFFFFE04
                asr.w   #$02, D2
                moveq   #$13, D3
Offset_0x030BC6:
                addq.w  #$02, D2
                andi.w  #$000F, D2
                move.b  $00(A5, D2), D0
                ext.w   D0
                add.w   D1, D0
                move.l  D0, (A1)+
                dbra    D3, Offset_0x030BC6
                rts
;-------------------------------------------------------------------------------
AIz_Intro_Draw_Array:                                          ; Offset_0x030BDC
                dc.w    $03E0, $0010, $0010, $0010, $0010, $0010, $0010, $0010
                dc.w    $0010, $7FFF
;-------------------------------------------------------------------------------
AIz_Intro_Deform_Array:                                        ; Offset_0x030BF0
                dc.w    $03E0, $0004, $0004, $0004, $0004, $0004, $0004, $0004
                dc.w    $0004, $0004, $0004, $0004, $0004, $0004, $0004, $0004
                dc.w    $0004, $0004, $0004, $0004, $0004, $0004, $0004, $0004
                dc.w    $0004, $0004, $0004, $0004, $0004, $0004, $0004, $0004
                dc.w    $0004, $0004, $0004, $0004, $7FFF
;-------------------------------------------------------------------------------  
AIz_BG_Draw_Array:                                             ; Offset_0x030C3A
                dc.w    $0220, $7FFF
;-------------------------------------------------------------------------------
AIz_Deform_Array:                                              ; Offset_0x030C3E
                dc.w    $00D0, $0020, $0030, $0030, $0010, $0010, $0010, $800D
                dc.w    $000F, $0006, $000E, $0050, $0020, $7FFF 
;------------------------------------------------------------------------------- 
AIz_Flame_Vertical_Scroll:                                     ; Offset_0x030C5A
                dc.w    $00FF, $FEFB, $F8F6, $F3F2, $F1F2, $F3F6, $F9FB, $FEFF
;-------------------------------------------------------------------------------
AIz_2_Events_Init:                                             ; Offset_0x030C6A
                jsr     Reset_Tile_Offset_Position_Actual(PC)  ; Offset_0x02FEF2
                jmp     Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C  
;------------------------------------------------------------------------------- 
AIz_2_Events_Run:                                              ; Offset_0x030C72
                move.w  (Earthquake_Offset).w, D0                    ; $FFFFEECE
                add.w   D0, (Screen_Pos_Buffer_Y).w                  ; $FFFFEE84
                move.w  (Level_Events_Routine).w, D0                 ; $FFFFEEC0
                jmp     Offset_0x030C82(PC, D0) 
;-------------------------------------------------------------------------------
Offset_0x030C82:
                bra     AIz_2_Normal                           ; Offset_0x030C96
                bra     AIz_2_Ship_Refresh                     ; Offset_0x030CD6
                bra     AIz_2_Ship_Redraw                      ; Offset_0x030D36
                bra     AIz_2_End_Refresh                      ; Offset_0x030D80
                bra     AIz_2_End                              ; Offset_0x030DB6                 
;-------------------------------------------------------------------------------  
AIz_2_Normal:                                                  ; Offset_0x030C96
                tst.w   (Foreground_Events_Y_Counter).w              ; $FFFFEEC4
                beq.s   Offset_0x030CD2
                clr.w   (Foreground_Events_Y_Counter).w              ; $FFFFEEC4
                move.w  #$0180, (Draw_Delayed_Position).w            ; $FFFFEEC8
                move.w  #$0005, (Draw_Delayed_Position_Rowcount).w   ; $FFFFEECA
                clr.l   (Horizontal_Scroll_Table+$01F8).w            ; $FFFFA9F8
                move.w  (Screen_Pos_Buffer_X).w, D0                  ; $FFFFEE80
                andi.w  #$FFF0, D0
                subi.w  #$0010, D0
                move.w  D0, (Horizontal_Scroll_Table+$01FE).w        ; $FFFFA9FE
                move.w  #$0004, (Level_Repeat_Routine).w             ; $FFFFEEB2
                move.b  #$01, (Sonic_Scroll_Lock_Flag).w             ; $FFFFEE0A
                addq.w  #$04, (Level_Events_Routine).w               ; $FFFFEEC0
                bra.s   AIz_2_Ship_Refresh                     ; Offset_0x030CD6
Offset_0x030CD2:
                jmp     Load_Tiles_As_You_Move(PC)             ; Offset_0x02FB0E
;-------------------------------------------------------------------------------                
AIz_2_Ship_Refresh:                                            ; Offset_0x030CD6
                move.w  #$4380, D1
                move.w  (Screen_Pos_Buffer_Y).w, D2                  ; $FFFFEE84
                subi.w  #$0010, D2
                jsr     Draw_Plane_Vertical_Bottom_Up(PC)      ; Offset_0x02FCC6
                bpl     Offset_0x030D68
                move.w  #$4020, D0
                move.w  D0, (Horizontal_Scroll_Table+$01F6).w        ; $FFFFA9F6
                move.w  D0, (AIz_Flying_Battery_X).w                 ; $FFFFEE98
                clr.w   (AIz_Flying_Battery_X+$02).w                 ; $FFFFEE9A
                move.w  (Screen_Pos_Buffer_Y).w, D0                  ; $FFFFEE84
                addi.w  #$08F0, D0
                and.w   (Level_Layout_Wrap_Y).w, D0                  ; $FFFFEEAC
                move.w  D0, (AIz_Flying_Battery_Y).w                 ; $FFFFEE9C
                move.w  D0, (AIz_Flying_Battery_Rounded_Y).w         ; $FFFFEEA2
                jsr     (AllocateObject)                     ; Offset_0x011DD8
                bne.s   Offset_0x030D1C
                move.l  #Obj_AIz_Battle_Ship, (A1)             ; Offset_0x0311BC
Offset_0x030D1C:
                st      (Background_Events+$04).w                    ; $FFFFEED6
                move.l  #HInt_Angel_Island_2, (HBlank_Ptr+$02).w ; Offset_0x030DBA, $FFFFF60A
                clr.b   (Water_Level_Flag).w                         ; $FFFFF730
                move.b  #$40, (Scanline_Counter).w                   ; $FFFFF625
                addq.w  #$04, (Level_Events_Routine).w               ; $FFFFEEC0
;-------------------------------------------------------------------------------                
AIz_2_Ship_Redraw:                                             ; Offset_0x030D36
                tst.w   (Foreground_Events_Y_Counter).w              ; $FFFFEEC4
                beq.s   Offset_0x030D52
                clr.w   (Foreground_Events_Y_Counter).w              ; $FFFFEEC4
                move.w  #$0170, (Draw_Delayed_Position).w            ; $FFFFEEC8
                move.w  #$0004, (Draw_Delayed_Position_Rowcount).w   ; $FFFFEECA
                addq.w  #$04, (Level_Events_Routine).w               ; $FFFFEEC0
                bra.s   AIz_2_End_Refresh                      ; Offset_0x030D80
Offset_0x030D52:
                lea     (AIz_Ship_Draw_Array+$04)(PC), A4      ; Offset_0x030DDA
                lea     (Horizontal_Scroll_Table+$01F4).w, A6        ; $FFFFA9F4
                move.w  (AIz_Flying_Battery_X).w, (A6)               ; $FFFFEE98
                moveq   #$02, D5
                move.w  (AIz_Flying_Battery_Rounded_Y).w, D6         ; $FFFFEEA2
                jsr     Draw_Background_D6(PC)                 ; Offset_0x02FB90
Offset_0x030D68:
                lea     AIz_Ship_Draw_Array(PC), A4            ; Offset_0x030DD6
                lea     (Horizontal_Scroll_Table+$01F8).w, A6        ; $FFFFA9F8
                move.w  (Screen_Pos_Buffer_X).w, $0004(A6)           ; $FFFFEE80
                moveq   #$02, D5
                move.w  (Screen_Pos_Rounded_Y).w, D6                 ; $FFFFEE8A
                jmp     Draw_Background_D6(PC)                 ; Offset_0x02FB90
;-------------------------------------------------------------------------------
AIz_2_End_Refresh:                                             ; Offset_0x030D80
                move.w  #$4380, D1
                move.w  (Screen_Pos_Buffer_Y).w, D2                  ; $FFFFEE84
                subi.w  #$0010, D2
                jsr     Draw_Plane_Vertical_Bottom_Up(PC)      ; Offset_0x02FCC6
                bpl.s   Offset_0x030D68
                move.w  (Screen_Pos_Buffer_X).w, D0                  ; $FFFFEE80
                andi.w  #$FFF0, D0
                subi.w  #$0010, D0
                move.w  D0, (Screen_Pos_Rounded_X).w                 ; $FFFFEE88
                move.w  #$46C0, (Background_Events+$02).w            ; $FFFFEED4
                clr.w   (Background_Events+$04).w                    ; $FFFFEED6
                move.b  #$FF, (Scanline_Counter).w                   ; $FFFFF625
                addq.w  #$04, (Level_Events_Routine).w               ; $FFFFEEC0
;-------------------------------------------------------------------------------                
AIz_2_End:                                                     ; Offset_0x030DB6
                jmp     Load_Tiles_As_You_Move(PC)             ; Offset_0x02FB0E           
;------------------------------------------------------------------------------- 
HInt_Angel_Island_2:                                           ; Offset_0x030DBA
                move.w  #$8AFF, (VDP_Control_Port)                   ; $00C00004
                move.l  #$40000010, (VDP_Control_Port)               ; $00C00004
                move.w  (Screen_Pos_Buffer_Y).w, (VDP_Data_Port) ; $FFFFEE84, $00C00000
                rte
;-------------------------------------------------------------------------------
AIz_Ship_Draw_Array:                                           ; Offset_0x030DD6
                dc.w    $0180, $7FFF, $0A80, $7FFF  
;------------------------------------------------------------------------------- 
AIz_2_Events_Init_2:                                           ; Offset_0x030DDE
                move.w  (Screen_Pos_Buffer_X).w, (Level_Events_Buffer_0).w ; $FFFFEE80, $FFFFEEB4
                move.w  (Screen_Pos_Buffer_X).w, (Level_Events_Buffer_1).w ; $FFFFEE80, $FFFFEEB6
                move.w  #$000C, (Level_Events_Routine_2).w           ; $FFFFEEC2
                cmpi.w  #$3E80, (Screen_Pos_Buffer_X).w              ; $FFFFEE80
                bcs.s   Offset_0x030E04
                move.w  #$0014, (Level_Events_Routine_2).w           ; $FFFFEEC2
                move.w  #$4440, (Background_Events+$02).w            ; $FFFFEED4
Offset_0x030E04:
                jsr     AIZ_2_Deform(PC)                       ; Offset_0x031006
                jsr     Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
                moveq   #$00, D1
                jsr     Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
                jmp     AIz_2_Apply_Deform(PC)                 ; Offset_0x03105E
;-------------------------------------------------------------------------------            
AIz_2_Events_Run_2:                                            ; Offset_0x030E16
                lea     (Level_Events_Buffer_0).w, A1                ; $FFFFEEB4
                move.w  (Screen_Pos_Buffer_X).w, D0                  ; $FFFFEE80
                move.w  #$0100, D2
                move.w  #$0200, D3
                jsr     Adjust_Background_During_Loop(PC)      ; Offset_0x02FF6C
                move.w  (Level_Events_Routine_2).w, D0               ; $FFFFEEC2
                jmp     Offset_0x030E32(PC, D0)   
;-------------------------------------------------------------------------------  
Offset_0x030E32:
                bra     AIz_2_Fire_Redraw                      ; Offset_0x030E4A
                bra     AIz_2_Wait_Fire                        ; Offset_0x030E7C
                bra     AIz_2_Background_Redraw                ; Offset_0x030F5C
                bra     AIz_2_Background_Normal                ; Offset_0x030F72
                bra     AIz_2_Ship_Refresh_2                   ; Offset_0x030FC0
                bra     AIZ_2_Ship_Move                        ; Offset_0x030FD6    
;-------------------------------------------------------------------------------
AIz_2_Fire_Redraw:                                             ; Offset_0x030E4A
                lea     (Fg_Mem_Index_Address).w, A3                 ; $FFFF8008
                move.w  #$C000, D7
                move.w  (Screen_Pos_Buffer_X).w, D1                  ; $FFFFEE80
                move.w  (Screen_Pos_Buffer_Y).w, D2                  ; $FFFFEE84
                jsr     Draw_Plane_Vertical_Bottom_Up(PC)      ; Offset_0x02FCC6
                bpl.s   Offset_0x030E70
                addq.w  #$02, A3
                move.w  #$E000, D7
                clr.w   (Background_Events).w                        ; $FFFFEED2
                addq.w  #$04, (Level_Events_Routine_2).w             ; $FFFFEEC2
                bra.s   AIz_2_Wait_Fire                        ; Offset_0x030E7C
Offset_0x030E70:
                jsr     AIz_1_Fire_Rise(PC)                    ; Offset_0x030B78
                jsr     AIz_Transition_Wavy_Flame(PC)          ; Offset_0x030B98
                jmp     Plain_Deformation(PC)                  ; Offset_0x02FD42
;-------------------------------------------------------------------------------                
AIz_2_Wait_Fire:                                               ; Offset_0x030E7C
                jsr     AIz_1_Fire_Rise(PC)                    ; Offset_0x030B78
                jsr     AIz_Transition_Wavy_Flame(PC)          ; Offset_0x030B98
                tst.w   (Background_Events).w                        ; $FFFFEED2
                bne.s   Offset_0x030EBA
                move.w  (Screen_Pos_Buffer_Y_2).w, D0                ; $FFFFEE90
                andi.w  #$007F, D0
                cmpi.w  #$0020, D0
                bcs.s   Offset_0x030E9E
                cmpi.w  #$0030, D0
                bcs.s   Offset_0x030EA2
Offset_0x030E9E:
                jmp     Plain_Deformation(PC)                  ; Offset_0x02FD42
Offset_0x030EA2:
                addi.w  #$0180, D0
                move.w  D0, (Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
                and.w   (Level_Layout_Wrap_Y).w, D0                  ; $FFFFEEAC
                subi.w  #$0010, D0
                move.w  D0, (Screen_Pos_Rounded_Y_2).w               ; $FFFFEE96
                st      (Background_Events).w                        ; $FFFFEED2
Offset_0x030EBA:
                lea     (Screen_Pos_Buffer_Y_2).w, A6                ; $FFFFEE90
                lea     (Screen_Pos_Rounded_Y_2).w, A5               ; $FFFFEE96
                move.w  #$0200, D1
                moveq   #$20, D6
                jsr     Draw_Tile_Row(PC)                      ; Offset_0x02F8AA
                cmpi.w  #$0310, (Screen_Pos_Buffer_Y_2).w            ; $FFFFEE90
                bcs.s   Offset_0x030F36
                movem.l D7/A0/A2/A3, -(A7)
                moveq   #$0C, D0
                jsr     (LoadPLC)                              ; Offset_0x0014D0
                move.w  (Current_ZoneAndAct).w, D0                             ; $FFFFFE10
                jsr     (Level_Load_Enemies_Art)               ; Offset_0x024F46
                movem.l (A7)+, D7/A0/A2/A3
                lea     (Palette_Row_3_Offset+$02).w, A1             ; $FFFFED62
                move.l  #$08EE00AA, (A1)+
                move.l  #$008E004E, (A1)+
                move.l  #$002E000C, (A1)
                move.w  #$6000, D0
                move.w  D0, (Sonic_Level_Limits_Max_X).w             ; $FFFFEE16
                move.w  D0, (Level_Limits_Max_X).w                   ; $FFFFEE0E
                jsr     AIZ_2_Deform(PC)                       ; Offset_0x031006
                jsr     Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
                addi.w  #$00E0, D0
                and.w   (Level_Layout_Wrap_Y).w, D0                  ; $FFFFEEAC
                move.w  D0, (Draw_Delayed_Position).w                ; $FFFFEEC8
                move.w  #$000F, (Draw_Delayed_Position_Rowcount).w   ; $FFFFEECA
                move.w  #$0006, (Special_Vint_Routine).w             ; $FFFFEEA6
                addq.w  #$04, (Level_Events_Routine_2).w             ; $FFFFEEC2
                bra.s   Offset_0x030F60
Offset_0x030F36:
                jsr     AIz_2_Apply_Deform(PC)                 ; Offset_0x03105E
                lea     (Horizontal_Scroll_Buffer+$0002).w, A1       ; $FFFFE002
                move.w  (Screen_Pos_Buffer_X_2).w, D0                ; $FFFFEE8C
                neg.w   D0
                moveq   #$37, D1
Offset_0x030F46:
                move.w  D0, (A1)
                addq.w  #$04, A1
                move.w  D0, (A1)
                addq.w  #$04, A1
                move.w  D0, (A1)
                addq.w  #$04, A1
                move.w  D0, (A1)
                addq.w  #$04, A1
                dbra    D1, Offset_0x030F46
                rts
;-------------------------------------------------------------------------------                
AIz_2_Background_Redraw:                                       ; Offset_0x030F5C
                jsr     AIZ_2_Deform(PC)                       ; Offset_0x031006
Offset_0x030F60:
                moveq   #$00, D1
                move.w  (Screen_Pos_Buffer_Y_2).w, D2                ; $FFFFEE90
                jsr     Draw_Plane_Vertical_Bottom_Up(PC)      ; Offset_0x02FCC6
                bpl.s   Offset_0x030FA8
                addq.w  #$04, (Level_Events_Routine_2).w             ; $FFFFEEC2
                bra.s   Offset_0x030FA8
;-------------------------------------------------------------------------------                
AIz_2_Background_Normal:                                       ; Offset_0x030F72
                jsr     AIZ_2_Deform(PC)                       ; Offset_0x031006
                tst.w   (Level_Events_Buffer_5).w                    ; $FFFFEEC6
                beq.s   Offset_0x030FA8
                clr.w   (Level_Events_Buffer_5).w                    ; $FFFFEEC6
                addi.w  #$00A8, (Screen_Pos_Buffer_Y_2).w            ; $FFFFEE90
                jsr     Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
                addi.w  #$00E0, D0
                and.w   (Level_Layout_Wrap_Y).w, D0                  ; $FFFFEEAC
                move.w  D0, (Draw_Delayed_Position).w                ; $FFFFEEC8
                move.w  #$000F, (Draw_Delayed_Position_Rowcount).w   ; $FFFFEECA
                move.w  #$4440, (Background_Events+$02).w            ; $FFFFEED4
                addq.w  #$04, (Level_Events_Routine_2).w             ; $FFFFEEC2
                bra.s   Offset_0x030FC4
Offset_0x030FA8:
                lea     (Screen_Pos_Buffer_Y_2).w, A6                ; $FFFFEE90
                lea     (Screen_Pos_Rounded_Y_2).w, A5               ; $FFFFEE96
                moveq   #$00, D1
                moveq   #$20, D6
                jsr     Draw_Tile_Row(PC)                      ; Offset_0x02F8AA
                jsr     AIz_2_Apply_Deform(PC)                 ; Offset_0x03105E
                jmp     Earthquake_Setup(PC)                   ; Offset_0x02FFA4
;-------------------------------------------------------------------------------                
AIz_2_Ship_Refresh_2:                                          ; Offset_0x030FC0
                jsr     AIZ_2_Deform(PC)                       ; Offset_0x031006
Offset_0x030FC4:
                moveq   #$00, D1
                move.w  (Screen_Pos_Buffer_Y_2).w, D2                ; $FFFFEE90
                jsr     Draw_Plane_Vertical_Bottom_Up(PC)      ; Offset_0x02FCC6
                bpl.s   Offset_0x030FDA
                addq.w  #$04, (Level_Events_Routine_2).w             ; $FFFFEEC2
                bra.s   Offset_0x030FDA
;-------------------------------------------------------------------------------                
AIZ_2_Ship_Move:                                               ; Offset_0x030FD6
                jsr     AIZ_2_Deform(PC)                       ; Offset_0x031006
Offset_0x030FDA:
                lea     (Screen_Pos_Buffer_Y_2).w, A6                ; $FFFFEE90
                lea     (Screen_Pos_Rounded_Y_2).w, A5               ; $FFFFEE96
                moveq   #$00, D1
                moveq   #$20, D6
                jsr     Draw_Tile_Row(PC)                      ; Offset_0x02F8AA
                jsr     AIz_2_Apply_Deform(PC)                 ; Offset_0x03105E
                tst.w   (Background_Events+$04).w                    ; $FFFFEED6
                beq.s   Offset_0x031002
                move.w  (AIz_Flying_Battery_Y).w, (Vertical_Scroll_Value).w ; $FFFFEE9C, $FFFFF616
                move.w  (Screen_Pos_Buffer_Y_2).w, (Vertical_Scroll_Value_2).w ; $FFFFEE90, $FFFFF618
                addq.w  #$04, A7
Offset_0x031002:
                jmp     Earthquake_Setup(PC)                   ; Offset_0x02FFA4
;-------------------------------------------------------------------------------                    
AIZ_2_Deform:                                                  ; Offset_0x031006
                move.w  (Screen_Pos_Buffer_Y).w, D0                  ; $FFFFEE84
                move.w  (Earthquake_Offset).w, D1                    ; $FFFFEECE
                sub.w   D1, D0
                asr.w   #$01, D0
                add.w   D1, D0
                move.w  D0, (Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
                cmpi.w  #$0010, (Level_Events_Routine_2).w           ; $FFFFEEC2
                bcs.s   Offset_0x031026
                addi.w  #$00A8, (Screen_Pos_Buffer_Y_2).w            ; $FFFFEE90
Offset_0x031026:
                move.w  (Level_Events_Buffer_1).w, D0                ; $FFFFEEB6
                swap.w  D0
                clr.w   D0
                asr.l   #$01, D0
                move.l  D0, D1
                asr.l   #$05, D1
                move.l  D1, D2
                add.l   D1, D1
                add.l   D2, D1
                lea     (Horizontal_Scroll_Table+$01C0).w, A1        ; $FFFFA9C0
                lea     AIz_2_Background_Deform_Make(PC), A5   ; Offset_0x0315FE
                moveq   #$00, D2
Offset_0x031044:
                move.b  (A5)+, D3
                bmi.s   Offset_0x03105C
                ext.w   D3
                swap.w  D0
Offset_0x03104C:
                move.b  (A5)+, D2
                move.w  D0, $00(A1, D2)
                dbra    D3, Offset_0x03104C
                swap.w  D0
                add.l   D1, D0
                bra.s   Offset_0x031044
Offset_0x03105C:
                rts    
;------------------------------------------------------------------------------- 
AIz_2_Apply_Deform:                                            ; Offset_0x03105E
                lea     (Horizontal_Scroll_Table).w, A1              ; $FFFFA800
                lea     AIz_2_Deform_Delta(PC), A6             ; Offset_0x031620
                move.w  (Screen_Pos_Buffer_Y).w, D0                  ; $FFFFEE84
                move.w  #$00DF, D1
                move.w  (Level_Frame_Count).w, D2                    ; $FFFFFE04
                add.w   D0, D2
                add.w   D0, D2
                moveq   #$3E, D3
                move.w  (Screen_Pos_Buffer_X).w, D6                  ; $FFFFEE80
                neg.w   D6
                move.w  (Water_Level_Move).w, D4                     ; $FFFFF646
                sub.w   D0, D4
                bls.s   Offset_0x0310A8
                cmp.w   D1, D4
                bhi.s   Offset_0x0310AE
                move.w  D4, D1
                subq.w  #$01, D1
                and.w   D3, D2
                adda.w  D2, A6
                jsr     Make_Foreground_Deform_Array(PC)       ; Offset_0x02FD64
                move.w  (Water_Level_Move).w, D0                     ; $FFFFF646
                subi.w  #$00DE, D1
                neg.w   D1
                move.w  (Level_Frame_Count).w, D2                    ; $FFFFFE04
                add.w   D0, D2
                add.w   D0, D2
Offset_0x0310A8:
                lea     AIz_Water_Fg_Deform_Delta(PC), A6      ; Offset_0x03005C
                moveq   #$7E, D3
Offset_0x0310AE:
                and.w   D3, D2
                adda.w  D2, A6
                jsr     Make_Foreground_Deform_Array(PC)       ; Offset_0x02FD64
                lea     (Horizontal_Scroll_Buffer).w, A1             ; $FFFFE000
                lea     (Horizontal_Scroll_Table).w, A2              ; $FFFFA800
                lea     AIz_2_Background_Deform_Array(PC), A4  ; Offset_0x0315CC
                lea     (Horizontal_Scroll_Table+$01C0).w, A5        ; $FFFFA9C0
                lea     Default_Background_Deform_Delta(PC), A6 ; Offset_0x031820
                move.w  (Screen_Pos_Buffer_Y_2).w, D0                ; $FFFFEE90
                move.w  #$00DF, D1
                move.w  (Level_Frame_Count).w, D2                    ; $FFFFFE04
                asr.w   #$01, D2
                add.w   D0, D2
                add.w   D0, D2
                moveq   #$3E, D3
                move.w  (Water_Level_Move).w, D4                     ; $FFFFF646
                sub.w   (Screen_Pos_Buffer_Y).w, D4                  ; $FFFFEE84
                bls.s   Offset_0x03111C
                cmp.w   D1, D4
                bhi.s   Offset_0x031122
                move.w  D4, D1
                subq.w  #$01, D1
                and.w   D3, D2
                adda.w  D2, A6
                jsr     Apply_All_Deformation(PC)              ; Offset_0x02FE08
                lea     AIz_2_Background_Deform_Array(PC), A4  ; Offset_0x0315CC
                lea     (Horizontal_Scroll_Table+$01C0).w, A5        ; $FFFFA9C0
                move.w  (Water_Level_Move).w, D0                     ; $FFFFF646
                sub.w   (Screen_Pos_Buffer_Y).w, D0                  ; $FFFFEE84
                add.w   (Screen_Pos_Buffer_Y_2).w, D0                ; $FFFFEE90
                subi.w  #$00DE, D1
                neg.w   D1
                move.w  (Level_Frame_Count).w, D2                    ; $FFFFFE04
                asr.w   #$01, D2
                add.w   D0, D2
                add.w   D0, D2
Offset_0x03111C:
                lea     AIz_Water_Bg_Deform_Delta(PC), A6      ; Offset_0x03029C
                moveq   #$7E, D3
Offset_0x031122:
                and.w   D3, D2
                adda.w  D2, A6
                jsr     Apply_All_Deformation(PC)              ; Offset_0x02FE08
                tst.w   (Background_Events+$04).w                    ; $FFFFEED6
                beq.s   Offset_0x031150
                lea     (Horizontal_Scroll_Buffer).w, A1             ; $FFFFE000
                move.w  (AIz_Flying_Battery_X).w, D0                 ; $FFFFEE98
                neg.w   D0
                moveq   #$0F, D1
Offset_0x03113C:
                move.w  D0, (A1)
                addq.w  #$04, A1
                move.w  D0, (A1)
                addq.w  #$04, A1
                move.w  D0, (A1)
                addq.w  #$04, A1
                move.w  D0, (A1)
                addq.w  #$04, A1
                dbra    D1, Offset_0x03113C
Offset_0x031150:
                rts
;-------------------------------------------------------------------------------
AIz_Do_Ship_Loop:                                              ; Offset_0x031152    
                clr.w   (Level_Repeat_Offset).w                      ; $FFFFEEBC
                move.w  (Camera_X).w, D0                             ; $FFFFEE78
                addq.w  #$04, D0
                cmp.w   (Background_Events+$02).w, D0                ; $FFFFEED4
                bcs.s   Offset_0x031186
                move.w  #$0200, D1
                move.w  D1, (Level_Repeat_Offset).w                  ; $FFFFEEBC
                sub.w   D1, (Obj_Player_One+Obj_X).w                 ; $FFFFB010
                sub.w   D1, (Obj_Player_Two+Obj_X).w                 ; $FFFFB05A
                sub.w   D1, D0
                move.w  D0, D1
                andi.w  #$FFF0, D1
                subi.w  #$0010, D1
                move.w  D1, (Screen_Pos_Rounded_X).w                 ; $FFFFEE88
                move.w  D1, (Horizontal_Scroll_Table+$01FE).w        ; $FFFFA9FE
Offset_0x031186:
                move.w  D0, (Camera_X).w                             ; $FFFFEE78
                move.w  D0, (Screen_Pos_Buffer_X).w                  ; $FFFFEE80
                move.w  D0, (Sonic_Level_Limits_Min_X).w             ; $FFFFEE14
                move.w  D0, (Sonic_Level_Limits_Max_X).w             ; $FFFFEE16
                addi.w  #$0018, D0
                cmp.w   (Obj_Player_One+Obj_X).w, D0                 ; $FFFFB010
                bls.s   Offset_0x0311AC
                move.w  D0, (Obj_Player_One+Obj_X).w                 ; $FFFFB010
                move.w  #$0400, (Obj_Player_One+Obj_Inertia).w       ; $FFFFB01C
                bra.s   Offset_0x0311BA
Offset_0x0311AC:
                addi.w  #$0088, D0
                cmp.w   (Obj_Player_One+Obj_X).w, D0                 ; $FFFFB010
                bhi.s   Offset_0x0311BA
                move.w  D0, (Obj_Player_One+Obj_X).w                 ; $FFFFB010
Offset_0x0311BA:
                rts
;-------------------------------------------------------------------------------
Obj_AIz_Battle_Ship:                                           ; Offset_0x0311BC
                include 'data\objects\aiz_bshp.asm'                
;-------------------------------------------------------------------------------  
AIz_2_Background_Deform_Array:                                 ; Offset_0x0315CC
                dc.b    $00, $10, $00, $20, $00, $38, $00, $58
                dc.b    $00, $28, $00, $40, $00, $38, $00, $18
                dc.b    $00, $18, $00, $90, $00, $48, $00, $10
                dc.b    $00, $18, $00, $20, $00, $38, $00, $58
                dc.b    $00, $28, $00, $40, $00, $38, $00, $18
                dc.b    $00, $18, $00, $90, $00, $48, $00, $10
                dc.b    $7F, $FF
;-------------------------------------------------------------------------------
AIz_2_Background_Deform_Make:                                  ; Offset_0x0315FE
                dc.b    $01, $12, $2A, $03, $10, $14, $28, $2C
                dc.b    $03, $0E, $16, $26, $2E, $04, $00, $0C
                dc.b    $18, $24, $30, $03, $02, $0A, $1A, $22
                dc.b    $03, $04, $08, $1C, $20, $01, $06, $1E
                dc.b    $FF, $00
;------------------------------------------------------------------------------- 
AIz_2_Deform_Delta:                                            ; Offset_0x031620
                dc.b    $00, $00, $00, $00, $00, $01, $00, $01
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $01, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $01, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $01, $00, $00, $00, $00
                dc.b    $00, $01, $00, $01, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $01, $00, $01
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $01, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $01, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $01, $00, $00, $00, $00
                dc.b    $00, $01, $00, $01, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $01, $00, $01
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $01, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $01, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $01, $00, $00, $00, $00
                dc.b    $00, $01, $00, $01, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $01, $00, $01
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $01, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $01, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $01, $00, $00, $00, $00
                dc.b    $00, $01, $00, $01, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $01, $00, $01
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $01, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $01, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $01, $00, $00, $00, $00
                dc.b    $00, $01, $00, $01, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $01, $00, $01
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $01, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $01, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $01, $00, $00, $00, $00
                dc.b    $00, $01, $00, $01, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $01, $00, $01
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $01, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $01, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $01, $00, $00, $00, $00
                dc.b    $00, $01, $00, $01, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $01, $00, $01
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $01, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $01, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $01, $00, $00, $00, $00
                dc.b    $00, $01, $00, $01, $00, $00, $00, $00  
;-------------------------------------------------------------------------------  
Default_Background_Deform_Delta:                               ; Offset_0x031820
                dc.b    $FF, $FE, $00, $01, $00, $02, $00, $02
                dc.b    $FF, $FF, $00, $02, $00, $02, $00, $01
                dc.b    $00, $02, $FF, $FF, $FF, $FE, $FF, $FE
                dc.b    $FF, $FE, $00, $01, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $00, $00, $FF, $FE, $00, $00
                dc.b    $00, $00, $00, $00, $FF, $FE, $00, $00
                dc.b    $FF, $FE, $00, $02, $00, $00, $FF, $FE
                dc.b    $00, $02, $00, $02, $FF, $FF, $FF, $FE
                dc.b    $FF, $FE, $00, $01, $00, $02, $00, $02
                dc.b    $FF, $FF, $00, $02, $00, $02, $00, $01
                dc.b    $00, $02, $FF, $FF, $FF, $FE, $FF, $FE
                dc.b    $FF, $FE, $00, $01, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $00, $00, $FF, $FE, $00, $00
                dc.b    $00, $00, $00, $00, $FF, $FE, $00, $00
                dc.b    $FF, $FE, $00, $02, $00, $00, $FF, $FE
                dc.b    $00, $02, $00, $02, $FF, $FF, $FF, $FE
                dc.b    $FF, $FE, $00, $01, $00, $02, $00, $02
                dc.b    $FF, $FF, $00, $02, $00, $02, $00, $01
                dc.b    $00, $02, $FF, $FF, $FF, $FE, $FF, $FE
                dc.b    $FF, $FE, $00, $01, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $00, $00, $FF, $FE, $00, $00
                dc.b    $00, $00, $00, $00, $FF, $FE, $00, $00
                dc.b    $FF, $FE, $00, $02, $00, $00, $FF, $FE
                dc.b    $00, $02, $00, $02, $FF, $FF, $FF, $FE
                dc.b    $FF, $FE, $00, $01, $00, $02, $00, $02
                dc.b    $FF, $FF, $00, $02, $00, $02, $00, $01
                dc.b    $00, $02, $FF, $FF, $FF, $FE, $FF, $FE
                dc.b    $FF, $FE, $00, $01, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $00, $00, $FF, $FE, $00, $00
                dc.b    $00, $00, $00, $00, $FF, $FE, $00, $00
                dc.b    $FF, $FE, $00, $02, $00, $00, $FF, $FE
                dc.b    $00, $02, $00, $02, $FF, $FF, $FF, $FE
                dc.b    $FF, $FE, $00, $01, $00, $02, $00, $02
                dc.b    $FF, $FF, $00, $02, $00, $02, $00, $01
                dc.b    $00, $02, $FF, $FF, $FF, $FE, $FF, $FE
                dc.b    $FF, $FE, $00, $01, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $00, $00, $FF, $FE, $00, $00
                dc.b    $00, $00, $00, $00, $FF, $FE, $00, $00
                dc.b    $FF, $FE, $00, $02, $00, $00, $FF, $FE
                dc.b    $00, $02, $00, $02, $FF, $FF, $FF, $FE
                dc.b    $FF, $FE, $00, $01, $00, $02, $00, $02
                dc.b    $FF, $FF, $00, $02, $00, $02, $00, $01
                dc.b    $00, $02, $FF, $FF, $FF, $FE, $FF, $FE
                dc.b    $FF, $FE, $00, $01, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $00, $00, $FF, $FE, $00, $00
                dc.b    $00, $00, $00, $00, $FF, $FE, $00, $00
                dc.b    $FF, $FE, $00, $02, $00, $00, $FF, $FE
                dc.b    $00, $02, $00, $02, $FF, $FF, $FF, $FE
                dc.b    $FF, $FE, $00, $01, $00, $02, $00, $02
                dc.b    $FF, $FF, $00, $02, $00, $02, $00, $01
                dc.b    $00, $02, $FF, $FF, $FF, $FE, $FF, $FE
                dc.b    $FF, $FE, $00, $01, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $00, $00, $FF, $FE, $00, $00
                dc.b    $00, $00, $00, $00, $FF, $FE, $00, $00
                dc.b    $FF, $FE, $00, $02, $00, $00, $FF, $FE
                dc.b    $00, $02, $00, $02, $FF, $FF, $FF, $FE
                dc.b    $FF, $FE, $00, $01, $00, $02, $00, $02
                dc.b    $FF, $FF, $00, $02, $00, $02, $00, $01
                dc.b    $00, $02, $FF, $FF, $FF, $FE, $FF, $FE
                dc.b    $FF, $FE, $00, $01, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $00, $00, $FF, $FE, $00, $00
                dc.b    $00, $00, $00, $00, $FF, $FE, $00, $00
                dc.b    $FF, $FE, $00, $02, $00, $00, $FF, $FE
                dc.b    $00, $02, $00, $02, $FF, $FF, $FF, $FE                   
;-------------------------------------------------------------------------------  
Pal_AIz_Battleship:                                            ; Offset_0x031A20  
                dc.w    $0000, $0EEE, $02AE, $006E, $004C, $00EE, $0088, $0224
                dc.w    $00CA, $0066, $0042, $0020, $0CAA, $0866, $0644, $0044
;-------------------------------------------------------------------------------  
Pal_AIz_Boss_Small:                                            ; Offset_0x031A40  
                dc.w    $0EEE, $0CAA, $0E26, $0222, $00EE, $0000, $0008, $02AE
                dc.w    $004C, $0006, $0020, $0C68, $0A24, $0622
;-------------------------------------------------------------------------------  
AIz_Battleship_Bobbing_Motion:                                 ; Offset_0x031A5C  
                dc.b    $04, $04, $03, $03, $02, $01, $01, $00
                dc.b    $00, $00, $01, $01, $02, $03, $03, $04
;-------------------------------------------------------------------------------  
AIz_FBz_Bomb_Script:                                           ; Offset_0x031A6C 
                dc.w    $001E, $3F5C
                dc.w    $001E, $3F2C
                dc.w    $001E, $3F5C
                dc.w    $001E, $3F2C
                dc.w    $001E, $3F5C
                dc.w    $000F, $3F2C
                dc.w    $001E, $3EDC
                dc.w    $001E, $3EAC
                dc.w    $001E, $3EDC
                dc.w    $001E, $3EAC
                dc.w    $001E, $3EDC
                dc.w    $000F, $3EAC
                dc.w    $001E, $3E5C
                dc.w    $001E, $3E2C
                dc.w    $001E, $3E5C
                dc.w    $001E, $3E2C
                dc.w    $001E, $3E5C
                dc.w    $000F, $3E2C
                dc.w    $003C, $3DEC
                dc.w    $003C, $3DEC
                dc.w    $003C, $3DEC
                dc.w    $FFFF  
;------------------------------------------------------------------------------- 
AIz_FBz_Bomb_Explosion_Data:                                   ; Offset_0x031AC2
                dc.w    $0000, $FFC4, $0000, $000A, $0000, $FFF4, $0101, $0009
                dc.w    $FFFC, $FFCC, $0000, $0008, $000C, $FFFC, $0101, $0007
                dc.w    $FFF4, $FFFC, $0101, $0005, $0008, $FFDC, $0000, $0004
                dc.w    $FFF8, $FFE4, $0000, $0002, $0000, $FFF4, $0000, $0000   
;------------------------------------------------------------------------------- 
AIz_Make_Tree_Script:                                          ; Offset_0x031B02
                dc.w    $0000, $0280
                dc.w    $0032, $0380
                dc.w    $008E, $0280
                dc.w    $0103, $0380
                dc.w    $0179, $0280
                dc.w    $01C6, $0380
                dc.w    $0233, $0280
                dc.w    $02A0, $0380
                dc.w    $030A, $0280
                dc.w    $037C, $0380
                dc.w    $03C7, $0280
                dc.w    $0401, $0380
                dc.w    $0439, $0280
                dc.w    $046E, $0380
                dc.w    $04CA, $0280
                dc.w    $050C, $0380
                dc.w    $0557, $0280
                dc.w    $FFFF   
;------------------------------------------------------------------------------- 
AIz_Battleship_Propeller_Mappings:                             ; Offset_0x031B48  
                dc.w    Offset_0x031B50-AIz_Battleship_Propeller_Mappings
                dc.w    Offset_0x031B58-AIz_Battleship_Propeller_Mappings
                dc.w    Offset_0x031B60-AIz_Battleship_Propeller_Mappings
                dc.w    Offset_0x031B68-AIz_Battleship_Propeller_Mappings
Offset_0x031B50:
                dc.w    $0001
                dc.w    $F003, $A000, $FFFC
Offset_0x031B58:
                dc.w    $0001
                dc.w    $F402, $A004, $FFFC
Offset_0x031B60:
                dc.w    $0001
                dc.w    $FC00, $A007, $FFFC
Offset_0x031B68:
                dc.w    $0001
                dc.w    $F402, $B004, $FFFC
;------------------------------------------------------------------------------- 
AIz_Battleship_Propeller_Animate_Data:                         ; Offset_0x031B70
                dc.w    Offset_0x031B72-AIz_Battleship_Propeller_Animate_Data
Offset_0x031B72:
                dc.b    $02, $00, $01, $02, $03, $FF  
;------------------------------------------------------------------------------- 
AIz_FBz_Ship_Bomb_Main_Mappings:                               ; Offset_0x031B78 
                dc.w    Offset_0x031B90-AIz_FBz_Ship_Bomb_Main_Mappings
                dc.w    Offset_0x031B98-AIz_FBz_Ship_Bomb_Main_Mappings
                dc.w    Offset_0x031BA0-AIz_FBz_Ship_Bomb_Main_Mappings
                dc.w    Offset_0x031BA8-AIz_FBz_Ship_Bomb_Main_Mappings
                dc.w    Offset_0x031BB0-AIz_FBz_Ship_Bomb_Main_Mappings
                dc.w    Offset_0x031BB8-AIz_FBz_Ship_Bomb_Main_Mappings
                dc.w    Offset_0x031BC0-AIz_FBz_Ship_Bomb_Main_Mappings
                dc.w    Offset_0x031BC8-AIz_FBz_Ship_Bomb_Main_Mappings
                dc.w    Offset_0x031BD0-AIz_FBz_Ship_Bomb_Main_Mappings
                dc.w    Offset_0x031BD8-AIz_FBz_Ship_Bomb_Main_Mappings
                dc.w    Offset_0x031BE0-AIz_FBz_Ship_Bomb_Main_Mappings
                dc.w    Offset_0x031BE8-AIz_FBz_Ship_Bomb_Main_Mappings
Offset_0x031B90:
                dc.w    $0001
                dc.w    $F00B, $2008, $FFF4
Offset_0x031B98:
                dc.w    $0001
                dc.w    $FC0E, $0014, $FFF0
Offset_0x031BA0:
                dc.w    $0001
                dc.w    $F40F, $0020, $FFF0
Offset_0x031BA8:
                dc.w    $0001
                dc.w    $F40F, $0030, $FFF0
Offset_0x031BB0:
                dc.w    $0001
                dc.w    $F40E, $0040, $FFF0
Offset_0x031BB8:
                dc.w    $0001
                dc.w    $F40E, $004C, $FFF0
Offset_0x031BC0:
                dc.w    $0001
                dc.w    $0005, $0058, $FFF8
Offset_0x031BC8:
                dc.w    $0001
                dc.w    $FC0A, $005C, $FFF4
Offset_0x031BD0:
                dc.w    $0001
                dc.w    $FC0A, $0065, $FFF4
Offset_0x031BD8:
                dc.w    $0001
                dc.w    $FC0A, $006E, $FFF4
Offset_0x031BE0:
                dc.w    $0001
                dc.w    $FC0A, $0077, $FFF4
Offset_0x031BE8:
                dc.w    $0001
                dc.w    $FC09, $0080, $FFF4
;------------------------------------------------------------------------------- 
AIz_FBz_Bomb_Explosion_Animate_Data:                           ; Offset_0x031BF0     
                dc.w    Offset_0x031BF4-AIz_FBz_Bomb_Explosion_Animate_Data
                dc.w    Offset_0x031C00-AIz_FBz_Bomb_Explosion_Animate_Data
Offset_0x031BF4:
                dc.b    $01, $03, $02, $04, $03, $05, $04, $05
                dc.b    $05, $05, $FC, $00
Offset_0x031C00:
                dc.b    $06, $02, $07, $03, $08, $04, $09, $05
                dc.b    $0A, $05, $0B, $05, $FC, $00
;------------------------------------------------------------------------------- 
AIz_Background_Tree_Mappings:                                  ; Offset_0x031C0E
                dc.w    Offset_0x031C10-AIz_Background_Tree_Mappings
Offset_0x031C10:
                dc.w    $0004
                dc.w    $C007, $4000, $0000
                dc.w    $E007, $4000, $0000
                dc.w    $0007, $4000, $0000
                dc.w    $2007, $4000, $0000   
;------------------------------------------------------------------------------- 
AIz_Boss_Small_Mappings:                                       ; Offset_0x031C2A
                dc.w    Offset_0x031C2C-AIz_Boss_Small_Mappings
Offset_0x031C2C:
                dc.w    $0006
                dc.w    $E40E, $2086, $FFF0
                dc.w    $F400, $2092, $FFE8
                dc.w    $F400, $2093, $0010
                dc.w    $FC0E, $2094, $FFE0
                dc.w    $FC0E, $20A0, $0000
                dc.w    $140C, $20AC, $FFF0             
;-------------------------------------------------------------------------------           
Hz_1_Events_Init:                                              ; Offset_0x031C52
                jsr     Reset_Tile_Offset_Position_Actual(PC)  ; Offset_0x02FEF2
                jmp     Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C 
;------------------------------------------------------------------------------- 
Hz_1_Events_Run:                                               ; Offset_0x031C5A  
                jmp     Load_Tiles_As_You_Move(PC)             ; Offset_0x02FB0E  
;-------------------------------------------------------------------------------  
Hz_1_Events_Init_2:                                            ; Offset_0x031C5E
                jsr     Hz_1_Deform(PC)                        ; Offset_0x031C88
                jsr     Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
                moveq   #$00, D1
                jsr     Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
                jmp     Plain_Deformation(PC)                  ; Offset_0x02FD42  
;-------------------------------------------------------------------------------  
Hz_1_Events_Run_2:                                             ; Offset_0x031C70 
                jsr     Hz_1_Deform(PC)                        ; Offset_0x031C88
                lea     (Screen_Pos_Buffer_Y_2).w, A6                ; $FFFFEE90
                lea     (Screen_Pos_Rounded_Y_2).w, A5               ; $FFFFEE96
                moveq   #$00, D1
                moveq   #$20, D6
                jsr     Draw_Tile_Row(PC)                      ; Offset_0x02F8AA
                jmp     Plain_Deformation(PC)                  ; Offset_0x02FD42 
;-------------------------------------------------------------------------------  
Hz_1_Deform:                                                   ; Offset_0x031C88
                move.w  (Screen_Pos_Buffer_Y).w, D0                  ; $FFFFEE84
                subi.w  #$0610, D0
                move.w  D0, D1
                swap.w  D0
                clr.w   D0
                asr.l   #$04, D0
                move.l  D0, D2
                add.l   D0, D0
                add.l   D2, D0
                swap.w  D0
                move.w  D0, D2
                addi.w  #$0110, D0
                move.w  D0, (Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
                sub.w   D1, D2
                move.w  D2, (Background_Events+$10).w                ; $FFFFEEE2
                move.w  (Screen_Pos_Buffer_X).w, D0                  ; $FFFFEE80
                asr.w   #$01, D0
                move.w  D0, (Screen_Pos_Buffer_X_2).w                ; $FFFFEE8C
                rts  
;------------------------------------------------------------------------------- 
Hz_2_Events_Init:                                              ; Offset_0x031CBC   
                jsr     Reset_Tile_Offset_Position_Actual(PC)  ; Offset_0x02FEF2
                jmp     Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C  
;-------------------------------------------------------------------------------  
Hz_2_Events_Run:                                               ; Offset_0x031CC4  
                move.w  (Earthquake_Offset).w, D0                    ; $FFFFEECE
                add.w   D0, (Screen_Pos_Buffer_Y).w                  ; $FFFFEE84
                jmp     Load_Tiles_As_You_Move(PC)             ; Offset_0x02FB0E  
;------------------------------------------------------------------------------- 
Hz_2_Events_Init_2:                                            ; Offset_0x031CD0    
                cmpi.w  #$0C00, (Screen_Pos_Buffer_X).w              ; $FFFFEE80
                bcc.s   Offset_0x031CF0
                cmpi.w  #$0500, (Screen_Pos_Buffer_Y).w              ; $FFFFEE84
                bcs.s   Offset_0x031CF0
                jsr     Hz_2_Wall_Move_2(PC)                   ; Offset_0x031DD0
                jsr     Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
                jsr     Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
                jmp     Plain_Deformation(PC)                  ; Offset_0x02FD42
Offset_0x031CF0:
                move.w  #$000C, (Level_Events_Routine_2).w           ; $FFFFEEC2
                jsr     Hz_2_Deform(PC)                        ; Offset_0x031E26
                jsr     Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
                moveq   #$00, D1
                jsr     Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
                lea     Hz_2_Deform_Array(PC), A4              ; Offset_0x031ECA
                lea     (Horizontal_Scroll_Table).w, A5              ; $FFFFA800
                jmp     Apply_Deformation(PC)                  ; Offset_0x02FD7C
;------------------------------------------------------------------------------- 
Hz_2_Events_Run_2:                                             ; Offset_0x031D10 
                move.w  (Level_Events_Routine_2).w, D0               ; $FFFFEEC2
                jmp     Offset_0x031D18(PC, D0)   
;-------------------------------------------------------------------------------
Offset_0x031D18:
                bra     Hz_2_Wall_Move                         ; Offset_0x031D28
                bra     Hz_2_Normal_Transition                 ; Offset_0x031D6A
                bra     Hz_2_Normal_Refresh                    ; Offset_0x031D9A
                bra     Hz_2_Normal                            ; Offset_0x031DB0   
;-------------------------------------------------------------------------------   
Hz_2_Wall_Move:                                                ; Offset_0x031D28
                tst.w   (Level_Events_Buffer_5).w                    ; $FFFFEEC6
                beq.s   Offset_0x031D52
                clr.w   (Level_Events_Buffer_5).w                    ; $FFFFEEC6
                tst.w   (Earthquake_Flag).w                          ; $FFFFEECC
                bpl.s   Offset_0x031D3C
                clr.w   (Earthquake_Flag).w                          ; $FFFFEECC
Offset_0x031D3C:
                clr.b   (Background_Collision_Flag).w                ; $FFFFF664
                move.w  #$00E0, (Draw_Delayed_Position).w            ; $FFFFEEC8
                move.w  #$000F, (Draw_Delayed_Position_Rowcount).w   ; $FFFFEECA
                addq.w  #$04, (Level_Events_Routine_2).w             ; $FFFFEEC2
                bra.s   Hz_2_Normal_Transition                 ; Offset_0x031D6A
Offset_0x031D52:
                jsr     Hz_2_Wall_Move_2(PC)                   ; Offset_0x031DD0
                jsr     Load_Tiles_As_You_Move_2(PC)           ; Offset_0x02FB32
                jsr     Plain_Deformation(PC)                  ; Offset_0x02FD42
                st      (Background_Collision_Flag).w                ; $FFFFF664
                jsr     Calc_Screen_Pos_Difference(PC)         ; Offset_0x02FF8A
                jmp     Earthquake_Setup(PC)                   ; Offset_0x02FFA4
;-------------------------------------------------------------------------------   
Hz_2_Normal_Transition:                                        ; Offset_0x031D6A
                move.w  #$0400, D1
                move.w  #$0000, D2
                jsr     Draw_Plane_Vertical_Bottom_Up(PC)      ; Offset_0x02FCC6
                bpl     Plain_Deformation                      ; Offset_0x02FD42
                jsr     Hz_2_Deform(PC)                        ; Offset_0x031E26
                jsr     Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
                addi.w  #$00E0, D0
                and.w   (Level_Layout_Wrap_Y).w, D0                  ; $FFFFEEAC
                move.w  D0, (Draw_Delayed_Position).w                ; $FFFFEEC8
                move.w  #$000F, (Draw_Delayed_Position_Rowcount).w   ; $FFFFEECA
                addq.w  #$04, (Level_Events_Routine_2).w             ; $FFFFEEC2
                bra.s   Offset_0x031D9E             
;-------------------------------------------------------------------------------   
Hz_2_Normal_Refresh:                                           ; Offset_0x031D9A
                jsr     Hz_2_Deform(PC)                        ; Offset_0x031E26
Offset_0x031D9E:
                moveq   #$00, D1
                move.w  (Screen_Pos_Buffer_Y_2).w, D2                ; $FFFFEE90
                jsr     Draw_Plane_Vertical_Bottom_Up(PC)      ; Offset_0x02FCC6
                bpl.s   Offset_0x031DB4
                addq.w  #$04, (Level_Events_Routine_2).w             ; $FFFFEEC2
                bra.s   Offset_0x031DB4         
;-------------------------------------------------------------------------------   
Hz_2_Normal:                                                   ; Offset_0x031DB0
                jsr     Hz_2_Deform(PC)                        ; Offset_0x031E26
Offset_0x031DB4:
                lea     (Screen_Pos_Buffer_Y_2).w, A6                ; $FFFFEE90
                lea     (Screen_Pos_Rounded_Y_2).w, A5               ; $FFFFEE96
                moveq   #$00, D1
                moveq   #$20, D6
                jsr     Draw_Tile_Row(PC)                      ; Offset_0x02F8AA
                lea     Hz_2_Deform_Array(PC), A4              ; Offset_0x031ECA
                lea     (Horizontal_Scroll_Table).w, A5              ; $FFFFA800
                jmp     Apply_Deformation(PC)                  ; Offset_0x02FD7C 
;-------------------------------------------------------------------------------   
Hz_2_Wall_Move_2:                                              ; Offset_0x031DD0
                cmpi.b  #$06, (Obj_Player_One+Obj_Routine).w         ; $FFFFB005
                bcc.s   Offset_0x031E08
                move.l  #$0000E000, D0
                move.w  (Background_Events).w, D1                    ; $FFFFEED2
                beq.s   Offset_0x031DF8
                cmpi.w  #$FA00, D1
                bgt.s   Offset_0x031E04
                tst.w   (Earthquake_Flag).w                          ; $FFFFEECC
                bpl.s   Offset_0x031E08
                move.w  #$000E, (Earthquake_Flag).w                  ; $FFFFEECC
                bra.s   Offset_0x031E08
Offset_0x031DF8:
                cmpi.w  #$0688, (Obj_Player_One+Obj_X).w             ; $FFFFB010
                bcs.s   Offset_0x031E08
                st      (Earthquake_Flag).w                          ; $FFFFEECC
Offset_0x031E04:
                sub.l   D0, (Background_Events).w                    ; $FFFFEED2
Offset_0x031E08:
                move.w  (Screen_Pos_Buffer_Y).w, D0                  ; $FFFFEE84
                subi.w  #$0500, D0
                move.w  D0, (Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
                move.w  (Screen_Pos_Buffer_X).w, D0                  ; $FFFFEE80
                subi.w  #$0200, D0
                add.w   (Background_Events).w, D0                    ; $FFFFEED2
                move.w  D0, (Screen_Pos_Buffer_X_2).w                ; $FFFFEE8C
                rts
;-------------------------------------------------------------------------------   
Hz_2_Deform:                                                   ; Offset_0x031E26
                move.w  (Screen_Pos_Buffer_Y).w, D0                  ; $FFFFEE84
                asr.w   #$02, D0
                move.w  D0, (Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
                move.w  (Screen_Pos_Buffer_X).w, D0                  ; $FFFFEE80
                swap.w  D0
                clr.w   D0
                asr.l   #$01, D0
                move.l  D0, D1
                asr.l   #$03, D1
                lea     (Horizontal_Scroll_Table).w, A1              ; $FFFFA800
                lea     Hz_2_Deform_Index(PC), A5              ; Offset_0x031EF8
                moveq   #$00, D2
Offset_0x031E48:
                move.b  (A5)+, D3
                bmi.s   Offset_0x031E62
                beq.s   Offset_0x031E5E
                ext.w   D3
                swap.w  D0
Offset_0x031E52:
                move.b  (A5)+, D2
                move.w  D0, $00(A1, D2)
                dbra    D3, Offset_0x031E52
                swap.w  D0
Offset_0x031E5E:
                sub.l   D1, D0
                bra.s   Offset_0x031E48
Offset_0x031E62:
                move.w  $0012(A1), D0
                sub.w   $000A(A1), D0
                move.w  D0, (Background_Events+$10).w                ; $FFFFEEE2
                move.w  $0006(A1), D0
                sub.w   $0012(A1), D0
                move.w  D0, (Background_Events+$12).w                ; $FFFFEEE4
                move.w  $0004(A1), D0
                sub.w   $0012(A1), D0
                move.w  D0, (Background_Events+$14).w                ; $FFFFEEE6
                rts
;-------------------------------------------------------------------------------
; Offset_0x031E88:  ; Left over ???
                nop
                nop
                cmpi.w  #$0004, (Level_Events_Routine_2).w           ; $FFFFEEC2
                bcs.s   Offset_0x031E9A
                jmp     (DeleteObject)                         ; Offset_0x011138
Offset_0x031E9A:
                move.w  (Background_Events).w, D4                    ; $FFFFEED2
                neg.w   D4
                addi.w  #$05C0, D4
                move.w  D4, Obj_X(A0)                                    ; $0010
                move.w  #$0700, Obj_Y(A0)                                ; $0014
                move.b  #$40, Obj_Width(A0)                              ; $0007
                bset    #$07, Obj_Status(A0)                             ; $002A
                moveq   #$4B, D1
                move.w  #$0100, D2
                move.w  #$0100, D3
                jmp     (Solid_Object_2)                       ; Offset_0x0135B6                 
;------------------------------------------------------------------------------- 
Hz_2_Deform_Array:                                             ; Offset_0x031ECA
                dc.w    $0008, $0008, $0090, $0010, $0008, $0030, $0018, $0008
                dc.w    $0008, $00A8, $0030, $0018, $0008, $0008, $00A8, $0030
                dc.w    $0018, $0008, $0008, $00B0, $0010, $0008, $7FFF 
;------------------------------------------------------------------------------- 
Hz_2_Deform_Index:                                             ; Offset_0x031EF8
                dc.b    $03, $0A, $14, $1E, $2C, $02, $0C, $16
                dc.b    $20, $05, $00, $08, $0E, $18, $22, $2A
                dc.b    $03, $02, $10, $1A, $24, $01, $12, $1C
                dc.b    $01, $06, $28, $01, $04, $26, $FF, $00
;------------------------------------------------------------------------------- 
MGz_1_Events_Init:                                             ; Offset_0x031F18
                jsr     Reset_Tile_Offset_Position_Actual(PC)  ; Offset_0x02FEF2
                jmp     Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C  
;------------------------------------------------------------------------------- 
MGz_1_Events_Run:                                              ; Offset_0x031F20
                move.w  (Earthquake_Offset).w, D0                    ; $FFFFEECE
                add.w   D0, (Screen_Pos_Buffer_Y).w                  ; $FFFFEE84
                jmp     Load_Tiles_As_You_Move(PC)             ; Offset_0x02FB0E  
;-------------------------------------------------------------------------------                                      
MGz_1_Events_Init_2:                                           ; Offset_0x031F2C
                jsr     MGz_1_Deform(PC)                       ; Offset_0x032068
                moveq   #$00, D0
                moveq   #$00, D1
                jsr     Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
                lea     MGz_1_Deform_Array(PC), A4             ; Offset_0x0320C6
                lea     (Horizontal_Scroll_Table).w, A5              ; $FFFFA800
                jmp     Apply_Deformation(PC)                  ; Offset_0x02FD7C  
;------------------------------------------------------------------------------- 
MGz_1_Events_Run_2:                                            ; Offset_0x031F44  
                move.w  (Level_Events_Routine_2).w, D0               ; $FFFFEEC2
                jmp     Offset_0x031F4C(PC, D0)
;-------------------------------------------------------------------------------  
Offset_0x031F4C:
                bra     MGz_1_Normal                           ; Offset_0x031F54
                bra     MGz_1_Transition                       ; Offset_0x031FB8  
;------------------------------------------------------------------------------- 
MGz_1_Normal:                                                  ; Offset_0x031F54
                tst.w   (Level_Events_Buffer_5).w                    ; $FFFFEEC6
                beq.s   Offset_0x031FA4
                clr.w   (Level_Events_Buffer_5).w                    ; $FFFFEEC6
                movem.l D7/A0/A2/A3, -(A7)
                lea     (Marble_Garden_2_Chunks_2), A1         ; Offset_0x16403A
                lea     (M68K_RAM_Start+$6B80), A2                   ; $FFFF6B80
                jsr     (Queue_Kos)          ; Offset_0x0019AE
                lea     (Marble_Garden_2_Blocks_2), A1         ; Offset_0x162E58
                lea     (Blocks_Mem_Address+$0C78).w, A2             ; $FFFF9C78
                jsr     (Queue_Kos)          ; Offset_0x0019AE
                lea     (Marble_Garden_2_Tiles_2), A1          ; Offset_0x1632A8
                move.w  #$4FC0, D2
                jsr     (Queue_Kos_Module)                 ; Offset_0x0018A8
                moveq   #$14, D0
                jsr     (LoadPLC)                              ; Offset_0x0014D0
                movem.l (A7)+, D7/A0/A2/A3
                addq.w  #$04, (Level_Events_Routine_2).w             ; $FFFFEEC2
Offset_0x031FA4:
                jsr     MGz_1_Deform(PC)                       ; Offset_0x032068
                lea     MGz_1_Deform_Array(PC), A4             ; Offset_0x0320C6
                lea     (Horizontal_Scroll_Table).w, A5              ; $FFFFA800
                jsr     Apply_Deformation(PC)                  ; Offset_0x02FD7C
                jmp     Earthquake_Setup(PC)                   ; Offset_0x02FFA4
;-------------------------------------------------------------------------------                
MGz_1_Transition:                                              ; Offset_0x031FB8
                tst.b   (Kosinski_Modules_Left).w                    ; $FFFFFF60
                bne     Offset_0x032054
                move.w  #MGz_Act_2, (Current_ZoneAndAct).w              ; $0201, $FFFFFE10
                clr.b   (Saved_Level_Flag).w                         ; $FFFFFE30
                clr.b   (Saved_Level_Flag_P2).w                      ; $FFFFFEE0
                clr.b   (Dynamic_Resize_Routine).w                   ; $FFFFEE33
                clr.b   (Object_Pos_Routine).w                       ; $FFFFF76C
                clr.b   (Ring_Pos_Routine).w                         ; $FFFFF710
                clr.b   (Boss_Flag).w                                ; $FFFFF7AA
                clr.l   (Animate_Counters).w                         ; $FFFFF7F0
                clr.w   (Animate_Counters+$04).w                     ; $FFFFF7F4
                movem.l D7/A0/A2/A3, -(A7)
                jsr     (LoadLevelLayout)                    ; Offset_0x01247C
                jsr     (LoadCollisionIndex)                 ; Offset_0x0049B2
                moveq   #$0F, D0
                jsr     (PalLoad_Now)                             ; Offset_0x002FBA
                movem.l (A7)+, D7/A0/A2/A3
                move.w  #$2E00, D0
                move.w  #$0600, D1
                sub.w   D0, (Obj_Player_One+Obj_X).w                 ; $FFFFB010
                sub.w   D1, (Obj_Player_One+Obj_Y).w                 ; $FFFFB014
                sub.w   D0, (Obj_Player_Two+Obj_X).w                 ; $FFFFB05A
                sub.w   D1, (Obj_Player_Two+Obj_Y).w                 ; $FFFFB05E
                jsr     Calc_Objects_X_Y_During_Transition(PC) ; Offset_0x02FFE4
                sub.w   D0, (Camera_X).w                             ; $FFFFEE78
                sub.w   D1, (Camera_Y).w                             ; $FFFFEE7C
                sub.w   D0, (Screen_Pos_Buffer_X).w                  ; $FFFFEE80
                sub.w   D1, (Screen_Pos_Buffer_Y).w                  ; $FFFFEE84
                sub.w   D0, (Sonic_Level_Limits_Min_X).w             ; $FFFFEE14
                sub.w   D0, (Sonic_Level_Limits_Max_X).w             ; $FFFFEE16
                sub.w   D1, (Sonic_Level_Limits_Min_Y).w             ; $FFFFEE18
                sub.w   D1, (Sonic_Level_Limits_Max_Y).w             ; $FFFFEE1A
                move.w  (Sonic_Level_Limits_Max_Y).w, (Level_Limits_Max_Y).w ; $FFFFEE1A, $FFFFEE12
                jsr     Reset_Tile_Offset_Position_Actual(PC)  ; Offset_0x02FEF2
                clr.l   (Background_Events+$10).w                    ; $FFFFEEE2
                clr.w   (Background_Events+$14).w                    ; $FFFFEEE6
                clr.w   (Level_Events_Routine_2).w                   ; $FFFFEEC2
Offset_0x032054:
                jsr     MGz_1_Deform(PC)                       ; Offset_0x032068
                lea     MGz_1_Deform_Array(PC), A4             ; Offset_0x0320C6
                lea     (Horizontal_Scroll_Table).w, A5              ; $FFFFA800
                jsr     Apply_Deformation(PC)                  ; Offset_0x02FD7C
                jmp     Earthquake_Setup(PC)                   ; Offset_0x02FFA4                  
;-------------------------------------------------------------------------------  
MGz_1_Deform:                                                  ; Offset_0x032068
                move.w  (Earthquake_Offset).w, (Screen_Pos_Buffer_Y_2).w ; $FFFFEECE, $FFFFEE90
                move.w  (Screen_Pos_Buffer_X).w, D0                  ; $FFFFEE80
                swap.w  D0
                clr.w   D0
                asr.l   #$02, D0
                move.l  D0, D1
                asr.l   #$04, D1
                lea     (Horizontal_Scroll_Table+$001C).w, A1        ; $FFFFA81C
                moveq   #$08, D2
Offset_0x032082:
                swap.w  D0
                move.w  D0, -(A1)
                swap.w  D0
                sub.l   D1, D0
                dbra    D2, Offset_0x032082
                lea     (Horizontal_Scroll_Table).w, A1              ; $FFFFA800
                move.l  (Horizontal_Scroll_Table+$001C).w, D2        ; $FFFFA81C
                addi.l  #$00000500, (Horizontal_Scroll_Table+$001C).w  ; $FFFFA81C
                asr.l   #$01, D0
                moveq   #$04, D3
Offset_0x0320A2:
                add.l   D2, D0
                addi.l  #$00000500, D2
                swap.w  D0
                move.w  D0, (A1)+
                swap.w  D0
                add.l   D1, D0
                dbra    D3, Offset_0x0320A2
                move.w  -2(A1), D0
                move.w  -4(A1), -2(A1)
                move.w  D0, -4(A1)
                rts                         
;-------------------------------------------------------------------------------  
MGz_1_Deform_Array:                                            ; Offset_0x0320C6
                dc.w    $0010, $0004, $0004, $0008, $0008, $0008, $000D, $0013
                dc.w    $0008, $0008, $0008, $0008, $0018, $7FFF
;------------------------------------------------------------------------------- 
MGz_2_Events_Init:                                             ; Offset_0x0320E2  
                clr.l   (Background_Events+$10).w                    ; $FFFFEEE2
                clr.w   (Background_Events+$14).w                    ; $FFFFEEE6
                jsr     Reset_Tile_Offset_Position_Actual(PC)  ; Offset_0x02FEF2
                jmp     Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
;------------------------------------------------------------------------------- 
MGz_2_Events_Run:                                              ; Offset_0x0320F2
                move.w  (Earthquake_Offset).w, D0                    ; $FFFFEECE
                add.w   D0, (Screen_Pos_Buffer_Y).w                  ; $FFFFEE84
                move.w  (Level_Events_Routine).w, D0                 ; $FFFFEEC0
                jmp     Offset_0x032102(PC, D0)          
;-------------------------------------------------------------------------------    
Offset_0x032102:
                bra     MGz_2_Normal                           ; Offset_0x03210E
                bra     MGz_2_Collapse                         ; Offset_0x03212E
                bra     MGz_2_Move_Background                  ; Offset_0x03214C
;-------------------------------------------------------------------------------  
MGz_2_Normal:                                                 ;  Offset_0x03210E
                tst.w   (Foreground_Events_Y_Counter).w              ; $FFFFEEC4
                bne.s   Offset_0x032120
                jsr     MGz_2_Quake(PC)                        ; Offset_0x0322B0
                jsr     MGz_2_Chunk(PC)                        ; Offset_0x03247A
                jmp     Load_Tiles_As_You_Move(PC)             ; Offset_0x02FB0E
Offset_0x032120:
                clr.w   (Foreground_Events_Y_Counter).w              ; $FFFFEEC4
                move.w  #$0014, (Earthquake_Flag).w                  ; $FFFFEECC
                addq.w  #$04, (Level_Events_Routine).w               ; $FFFFEEC0
;-------------------------------------------------------------------------------                
MGz_2_Collapse:                
                jsr     MGz_2_Collapse_2(PC)                   ; Offset_0x03216C
                tst.w   (Earthquake_Flag).w                          ; $FFFFEECC
                bmi.s   Offset_0x03213C
                jmp     Load_Tiles_As_You_Move(PC)             ; Offset_0x02FB0E
Offset_0x03213C:
                lea     MGz_2_Vertical_Scroll_Array(PC), A4    ; Offset_0x03271E
                lea     (Horizontal_Scroll_Table+$0100).w, A5        ; $FFFFA900
                moveq   #$0F, D6
                moveq   #$0A, D5
                jmp     Draw_Tiles_Vertical(PC)                ; Offset_0x02FC0E 
;------------------------------------------------------------------------------- 
MGz_2_Move_Background:                                         ; Offset_0x03214C
                move.l  (Background_Events+$08).w, D0                ; $FFFFEEDA
                cmpi.l  #$00050000, D0
                bcc.s   Offset_0x032162
                addi.l  #$00000800, D0
                move.l  D0, (Background_Events+$08).w                ; $FFFFEEDA
Offset_0x032162:
                swap.w  D0
                add.w   D0, (Background_Events+$0C).w                ; $FFFFEEDE
                jmp     Load_Tiles_As_You_Move(PC)             ; Offset_0x02FB0E 
;-------------------------------------------------------------------------------  
MGz_2_Collapse_2:                                              ; Offset_0x03216C
                cmpi.b  #$06, (Obj_Player_One+Obj_Routine).w         ; $FFFFB005
                bcc     Offset_0x0322AE
                tst.w   (Earthquake_Flag).w                          ; $FFFFEECC
                bmi     Offset_0x032228
                bne     Offset_0x0322AE
                move.w  $0038(A3), A1
                lea     $0079(A1), A1
                move.w  -8(A3), D0
                subq.w  #$03, D0
                moveq   #$02, D1
Offset_0x032192:
                clr.b   (A1)+
                clr.b   (A1)+
                clr.b   (A1)+
                adda.w  D0, A1
                dbra    D1, Offset_0x032192
                lea     (Horizontal_Scroll_Table+$0102).w, A1        ; $FFFFA902
                lea     (Horizontal_Scroll_Table+$013C).w, A5        ; $FFFFA93C
                lea     $0028(A5), A6
                move.w  (Screen_Pos_Buffer_Y).w, D0                  ; $FFFFEE84
                and.w   (Level_Layout_Wrap_Y).w, D0                  ; $FFFFEEAC
                moveq   #$09, D1
Offset_0x0321B4:
                move.w  D0, (A1)
                addq.w  #$04, A1
                clr.l   (A5)+
                clr.l   (A6)+
                dbra    D1, Offset_0x0321B4
                jsr     (AllocateObject)                     ; Offset_0x011DD8
                bne.s   Offset_0x03221A
                move.w  #$3C90, D1
                move.l  #$05C00790, D2
                move.l  #$FFFFA93C, D3
                moveq   #$09, D4
Offset_0x0321DA:
                move.l  #Obj_Earthquake_Tiles_Attributes, (A1) ; Offset_0x0325CE
                move.w  D1, Obj_X(A1)                                    ; $0010
                move.w  D2, Obj_Timer(A1)                                ; $002E
                move.l  D3, Obj_Control_Var_00(A1)                       ; $0030
                swap.w  D2
                jsr     (AllocateObject_Immediate)               ; Offset_0x011DC8
                bne.s   Offset_0x03221A
                move.l  #Obj_Earthquake_Tiles_Attributes, (A1) ; Offset_0x0325CE
                move.w  D1, Obj_X(A1)                                    ; $0010
                move.w  D2, Obj_Timer(A1)                                ; $002E
                move.l  D3, Obj_Control_Var_00(A1)                       ; $0030
                addi.w  #$0020, D1
                swap.w  D2
                addq.l  #$04, D3
                jsr     (AllocateObject_Immediate)               ; Offset_0x011DC8
                dbne    D4, Offset_0x0321DA
Offset_0x03221A:
                st      (Earthquake_Flag).w                          ; $FFFFEECC
                clr.w   (Background_Events+$06).w                    ; $FFFFEED8
                move.w  #$0002, (Special_Vint_Routine).w             ; $FFFFEEA6
Offset_0x032228:
                lea     (Horizontal_Scroll_Table+$0100).w, A1        ; $FFFFA900
                lea     $0028(A1), A4
                lea     $0014(A4), A5
                lea     MGz_2_Collapse_Scroll_Delay(PC), A6    ; Offset_0x03270A
                move.w  (Background_Events+$06).w, D0                ; $FFFFEED8
                addq.w  #$01, (Background_Events+$06).w              ; $FFFFEED8
                moveq   #$0A, D1
                moveq   #$09, D2
Offset_0x032244:
                cmp.w   (A6)+, D0
                bcs.s   Offset_0x032250
                addi.l  #$00000500, $0064(A1)
Offset_0x032250:
                move.l  $0064(A1), D3
                add.l   D3, (A5)+
                move.w  -4(A5), D3
                cmpi.w  #$02E0, D3
                bcs.s   Offset_0x032266
                move.w  #$02E0, D3
                subq.w  #$01, D1
Offset_0x032266:
                move.w  (Screen_Pos_Buffer_Y).w, D4                  ; $FFFFEE84
                sub.w   D3, D4
                move.w  D4, (A4)+
                move.w  D4, (A1)
                addq.w  #$04, A1
                dbra    D2, Offset_0x032244
                tst.w   D1
                bne.s   Offset_0x0322AE
                move.w  $002C(A3), A1
                lea     $0079(A1), A1
                move.w  -8(A3), D0
                subq.w  #$03, D0
                moveq   #$02, D1
Offset_0x03228A:
                clr.b   (A1)+
                clr.b   (A1)+
                clr.b   (A1)+
                adda.w  D0, A1
                dbra    D1, Offset_0x03228A
                clr.w   (Earthquake_Flag).w                          ; $FFFFEECC
                clr.l   (Background_Events+$08).w                    ; $FFFFEEDA
                move.w  (Screen_Pos_Buffer_X).w, (Background_Events+$0C).w ; $FFFFEE80, $FFFFEEDE
                move.w  #$0006, (Special_Vint_Routine).w             ; $FFFFEEA6
                addq.w  #$04, (Level_Events_Routine).w               ; $FFFFEEC0
Offset_0x0322AE:
                rts
;------------------------------------------------------------------------------- 
MGz_2_Quake:                                                   ; Offset_0x0322B0
                move.w  (Obj_Player_One+Obj_X).w, D0                 ; $FFFFB010
                move.w  (Obj_Player_One+Obj_Y).w, D1                 ; $FFFFB014
                move.w  (Background_Events+$10).w, D2                ; $FFFFEEE2
                jmp     Offset_0x0322C0(PC, D2)                                
;-------------------------------------------------------------------------------    
Offset_0x0322C0:
                bra     MGz_Quake_0                            ; Offset_0x0322DC
                bra     MGz_Quake_1                            ; Offset_0x03233E
                bra     MGz_Quake_2                            ; Offset_0x032382
                bra     MGz_Quake_3                            ; Offset_0x0323CC
                bra     MGz_Quake_4                            ; Offset_0x032434
                bra     MGz_Quake_5                            ; Offset_0x03243E
                bra     MGz_Quake_6                            ; Offset_0x03245E
;-------------------------------------------------------------------------------  
MGz_Quake_0:                                                   ; Offset_0x0322DC
                lea     (Background_Events+$12).w, A5                ; $FFFFEEE4
                lea     MGz_Quake_Array(PC), A1                ; Offset_0x032606
                moveq   #$04, D2
                moveq   #$02, D3
Offset_0x0322E8:
                tst.b   (A5)
                bne.s   Offset_0x032330
                cmp.w   (A1), D0
                bcs.s   Offset_0x032330
                cmp.w   $0002(A1), D0
                bcc.s   Offset_0x032330
                cmp.w   Obj_Flags(A1), D1                                ; $0004
                bcs.s   Offset_0x032330
                cmp.w   Obj_Height(A1), D1                               ; $0006
                bcc.s   Offset_0x032330
                move.w  D2, (Background_Events+$10).w                ; $FFFFEEE2
                move.w  Obj_Priority(A1), D0                             ; $0008
                move.w  D0, (Sonic_Level_Limits_Max_Y).w             ; $FFFFEE1A
                move.w  D0, (Level_Limits_Max_Y).w                   ; $FFFFEE12
                move.w  Obj_Art_VRAM(A1), D0                             ; $000A
                cmpi.w  #$0004, D2
                bne.s   Offset_0x032326
                move.w  D0, (Sonic_Level_Limits_Max_X).w             ; $FFFFEE16
                move.w  D0, (Level_Limits_Max_X).w                   ; $FFFFEE0E
                rts
Offset_0x032326:
                move.w  D0, (Sonic_Level_Limits_Min_X).w             ; $FFFFEE14
                move.w  D0, (Level_Limits_Min_X).w                   ; $FFFFEE0C
                rts
Offset_0x032330:
                lea     Obj_Map(A1), A1                                  ; $000C
                addq.w  #$01, A5
                addq.w  #$04, D2
                dbra    D3, Offset_0x0322E8
                rts                                                           
;-------------------------------------------------------------------------------
MGz_Quake_1:                                                   ; Offset_0x03233E
                cmpi.w  #$0780, D0
                bcs     Offset_0x032414
                move.w  (Sonic_Level_Limits_Max_X).w, D0             ; $FFFFEE16
                cmp.w   (Camera_X).w, D0                             ; $FFFFEE78
                bhi.s   Offset_0x032380
                move.w  D0, (Sonic_Level_Limits_Min_X).w             ; $FFFFEE14
                move.w  D0, (Level_Limits_Min_X).w                   ; $FFFFEE0C
                st      (Background_Events+$12).w                    ; $FFFFEEE4
                addi.w  #$000C, (Background_Events+$10).w            ; $FFFFEEE2
                st      (Earthquake_Flag).w                          ; $FFFFEECC
                jsr     (AllocateObject)                     ; Offset_0x011DD8
                bne.s   Offset_0x032380
                move.l  #Obj_0xAF_MGz_Drill_Mobile, (A1)       ; Offset_0x039920
                move.w  #$08E0, Obj_X(A1)                                ; $0010
                move.w  #$0690, Obj_Y(A1)                                ; $0014
Offset_0x032380:
                rts 
;-------------------------------------------------------------------------------  
MGz_Quake_2:                                                   ; Offset_0x032382   
                cmpi.w  #$3200, D0
                bcc     Offset_0x032414
                move.w  (Sonic_Level_Limits_Min_X).w, D0             ; $FFFFEE14
                cmp.w   (Camera_X).w, D0                             ; $FFFFEE78
                bcs.s   Offset_0x0323CA
                move.w  D0, (Sonic_Level_Limits_Max_X).w             ; $FFFFEE16
                move.w  D0, (Level_Limits_Max_X).w                   ; $FFFFEE0E
                st      (Background_Events+$13).w                    ; $FFFFEEE5
                addi.w  #$000C, (Background_Events+$10).w            ; $FFFFEEE2
                st      (Earthquake_Flag).w                          ; $FFFFEECC
                jsr     (AllocateObject)                     ; Offset_0x011DD8
                bne.s   Offset_0x0323CA
                move.l  #Obj_0xAF_MGz_Drill_Mobile, (A1)       ; Offset_0x039920
                bset    #$00, Obj_Flags(A1)                              ; $0004
                move.w  #$3320, Obj_X(A1)                                ; $0010
                move.w  #$0790, Obj_Y(A1)                                ; $0014
Offset_0x0323CA:
                rts       
;------------------------------------------------------------------------------- 
MGz_Quake_3:                                                   ; Offset_0x0323CC  
                cmpi.w  #$3480, D0
                bcc.s   Offset_0x032414
                move.w  (Sonic_Level_Limits_Min_X).w, D0             ; $FFFFEE14
                cmp.w   (Camera_X).w, D0                             ; $FFFFEE78
                bcs.s   Offset_0x032412
                move.w  D0, (Sonic_Level_Limits_Max_X).w             ; $FFFFEE16
                move.w  D0, (Level_Limits_Max_X).w                   ; $FFFFEE0E
                st      (Background_Events+$14).w                    ; $FFFFEEE6
                addi.w  #$000C, (Background_Events+$10).w            ; $FFFFEEE2
                st      (Earthquake_Flag).w                          ; $FFFFEECC
                jsr     (AllocateObject)                     ; Offset_0x011DD8
                bne.s   Offset_0x032412
                move.l  #Obj_0xAF_MGz_Drill_Mobile, (A1)       ; Offset_0x039920
                bset    #$00, Obj_Flags(A1)                              ; $0004
                move.w  #$3300, Obj_X(A1)                                ; $0010
                move.w  #$0780, Obj_Y(A1)                                ; $0014
Offset_0x032412:
                rts
Offset_0x032414:
                move.w  #$1000, D0
                move.w  D0, (Sonic_Level_Limits_Max_Y).w             ; $FFFFEE1A
                move.w  D0, (Level_Limits_Max_Y).w                   ; $FFFFEE12
                move.l  #$00006000, D0
                move.l  D0, (Sonic_Level_Limits_Min_X).w             ; $FFFFEE14
                move.l  D0, (Level_Limits_Min_X).w                   ; $FFFFEE0C
                clr.w   (Background_Events+$10).w                    ; $FFFFEEE2
                rts 
;------------------------------------------------------------------------------- 
MGz_Quake_4:                                                   ; Offset_0x032434  
                cmpi.w  #$0980, (Obj_Player_One+Obj_X).w             ; $FFFFB010
                bcc.s   Offset_0x032468
                rts
;------------------------------------------------------------------------------- 
MGz_Quake_5:                                                   ; Offset_0x03243E
                cmpi.w  #$0100, (Obj_Player_One+Obj_Y).w             ; $FFFFB014
                bcc.s   Offset_0x03245C
                cmpi.w  #$2F80, (Obj_Player_One+Obj_X).w             ; $FFFFB010
                bcs.s   Offset_0x03245C
                move.w  #$6000, D0
                move.w  D0, (Sonic_Level_Limits_Max_X).w             ; $FFFFEE16
                move.w  D0, (Level_Limits_Max_X).w                   ; $FFFFEE0E
                bra.s   Offset_0x032468
Offset_0x03245C:
                rts  
;------------------------------------------------------------------------------- 
MGz_Quake_6:                                                   ; Offset_0x03245E
                cmpi.w  #$3200, (Obj_Player_One+Obj_X).w             ; $FFFFB010
                bcs.s   Offset_0x032468
                rts
Offset_0x032468:
                move.w  #$1000, D0
                move.w  D0, (Sonic_Level_Limits_Max_Y).w             ; $FFFFEE1A
                move.w  D0, (Level_Limits_Max_Y).w                   ; $FFFFEE12
                clr.w   (Background_Events+$10).w                    ; $FFFFEEE2
                rts
;------------------------------------------------------------------------------- 
MGz_2_Chunk:                                                   ; Offset_0x03247A
                move.w  (Background_Events+$04).w, D0                ; $FFFFEED6
                jmp     Offset_0x032482(PC, D0)  
;-------------------------------------------------------------------------------
Offset_0x032482:
                bra     MGz_Chunk_0                            ; Offset_0x032498
                bra     MGz_Chunk_1                            ; Offset_0x0324EE
                bra     MGz_Chunk_2                            ; Offset_0x03250C
                bra     MGz_Chunk_3                            ; Offset_0x03250C
                bra     MGz_Chunk_4                            ; Offset_0x03258A  
; Offset_0x032496:
                rts                
;-------------------------------------------------------------------------------  
MGz_Chunk_0:                                                   ; Offset_0x032498 
                move.w  (Obj_Player_One+Obj_X).w, D0                 ; $FFFFB010
                move.w  (Obj_Player_One+Obj_Y).w, D1                 ; $FFFFB014
                lea     MGz_Chunk_Array(PC), A1                ; Offset_0x03262A
                moveq   #$04, D2
                moveq   #$02, D3
Offset_0x0324A8:
                cmp.w   (A1), D0
                bcs.s   Offset_0x0324CA
                cmp.w   $0002(A1), D0
                bcc.s   Offset_0x0324CA
                cmp.w   $0004(A1), D1
                bcs.s   Offset_0x0324CA
                cmp.w   $0006(A1), D1
                bcc.s   Offset_0x0324CA
                cmpi.w  #$0004, D2
                bne.s   Offset_0x0324D6
                tst.w   (Earthquake_Flag).w                          ; $FFFFEECC
                bmi.s   Offset_0x0324D6
Offset_0x0324CA:
                lea     $000C(A1), A1
                addq.w  #$04, D2
                dbra    D3, Offset_0x0324A8
                rts
Offset_0x0324D6:
                move.w  D2, (Background_Events+$04).w                ; $FFFFEED6
                clr.w   (Background_Events+$06).w                    ; $FFFFEED8
                clr.w   (Background_Events+$08).w                    ; $FFFFEEDA
                move.w  $0008(A1), (Background_Events+$0A).w         ; $FFFFEEDC
                move.w  $000A(A1), (Background_Events+$0C).w         ; $FFFFEEDE
;------------------------------------------------------------------------------- 
MGz_Chunk_1:                                                   ; Offset_0x0324EE                 
                move.w  (Background_Events+$06).w, D0                ; $FFFFEED8
                cmpi.w  #$005C, D0
                bcs.s   Offset_0x03252A
                clr.w   (Earthquake_Flag).w                          ; $FFFFEECC
                clr.w   (Sonic_Level_Limits_Min_X).w                 ; $FFFFEE14
                clr.w   (Level_Limits_Min_X).w                       ; $FFFFEE0C
                move.w  #$0010, (Background_Events+$04).w            ; $FFFFEED6
                rts   
;------------------------------------------------------------------------------- 
MGz_Chunk_2:                                                   ; Offset_0x03250C
MGz_Chunk_3:                                                   ; Offset_0x03250C
                move.w  (Background_Events+$06).w, D0                ; $FFFFEED8
                cmpi.w  #$005C, D0
                bcs.s   Offset_0x03252A
                move.w  #$6000, D0
                move.w  D0, (Sonic_Level_Limits_Max_X).w             ; $FFFFEE16
                move.w  D0, (Level_Limits_Max_X).w                   ; $FFFFEE0E
                move.w  #$0014, (Background_Events+$04).w            ; $FFFFEED6
                rts
Offset_0x03252A:
                subq.w  #$01, (Background_Events+$08).w              ; $FFFFEEDA
                bpl.s   Offset_0x032588
                move.w  #$0006, (Background_Events+$08).w            ; $FFFFEEDA
                move.w  D0, D2
                bsr.s   MGz_Change_Chunk                       ; Offset_0x03259C
                move.w  (Background_Events+$0A).w, D0                ; $FFFFEEDC
                addi.w  #$0080, D0
                sub.w   (Screen_Pos_Buffer_X).w, D0                  ; $FFFFEE80
                bcs.s   Offset_0x032588
                cmpi.w  #$01C0, D0
                bcc.s   Offset_0x032588
                move.w  (Background_Events+$0C).w, D0                ; $FFFFEEDE
                lea     MGz_2_Screen_Redraw_Array(PC), A1      ; Offset_0x03264E
                add.w   $00(A1, D2), D0
                move.w  $02(A1, D2), D2
Offset_0x03255E:
                move.w  (Screen_Pos_Buffer_Y).w, D3                  ; $FFFFEE84
                and.w   (Level_Layout_Wrap_Y).w, D3                  ; $FFFFEEAC
                cmp.w   D3, D0
                bcs.s   Offset_0x032580
                addi.w  #$00F0, D3
                cmp.w   D3, D0
                bcc.s   Offset_0x032580
                move.w  (Background_Events+$0A).w, D1                ; $FFFFEEDC
                moveq   #$08, D6
                swap.w  D2
                jsr     Setup_Tile_Row_Draw(PC)                ; Offset_0x02F93E
                swap.w  D2
Offset_0x032580:
                addi.w  #$0010, D0
                dbra    D2, Offset_0x03255E
Offset_0x032588:
                rts   
;------------------------------------------------------------------------------- 
MGz_Chunk_4:                                                   ; Offset_0x03258A
                cmpi.w  #$2A00, (Obj_Player_One+Obj_X).w             ; $FFFFB010
                bcs.s   Offset_0x03259A
                clr.w   (Background_Events+$04).w                    ; $FFFFEED6
                moveq   #$5C, D0
                bra.s   MGz_Change_Chunk                       ; Offset_0x03259C
Offset_0x03259A:
                rts
;-------------------------------------------------------------------------------                 
MGz_Change_Chunk:                                              ; Offset_0x03259C
                lea     MGz_2_Chunk_Replace_Array(PC), A1      ; Offset_0x0326AA
                lea     ((M68K_RAM_Start+$5900)&$00FFFFFF), A5       ; $00FF5900
                bsr.s   Offset_0x0325AE
                lea     ((M68K_RAM_Start+$7500)&$00FFFFFF), A5       ; $00FF7500
Offset_0x0325AE:
                lea     (Marble_Garden_2_Dynamic_Chunks), A4   ; Offset_0x1649DA
                adda.w  $00(A1, D0), A4
                moveq   #$07, D1
Offset_0x0325BA:
                move.l  (A4)+, (A5)+
                move.l  (A4)+, (A5)+
                move.l  (A4)+, (A5)+
                move.l  (A4)+, (A5)+
                dbra    D1, Offset_0x0325BA
                addq.w  #$02, D0
                move.w  D0, (Background_Events+$06).w                ; $FFFFEED8
                rts   
;-------------------------------------------------------------------------------  
Obj_Earthquake_Tiles_Attributes:                               ; Offset_0x0325CE
                include 'data\objects\earthqka.asm'
;------------------------------------------------------------------------------- 
MGz_Quake_Array:                                               ; Offset_0x032606
                dc.w    $0780, $07C0, $0580, $0600, $05A0, $07E0, $31C0, $3200
                dc.w    $01C0, $0280, $01E0, $2F60, $3440, $3480, $0680, $0700
                dc.w    $06A0, $32C0   
;------------------------------------------------------------------------------- 
MGz_Chunk_Array:                                               ; Offset_0x03262A
                dc.w    $0F6C, $0F78, $0538, $0580, $0F00, $0500, $3680, $3700
                dc.w    $02F0, $0380, $3700, $0280, $3000, $3080, $0770, $0800
                dc.w    $3080, $0700
;-------------------------------------------------------------------------------  
MGz_2_Screen_Redraw_Array:                                     ; Offset_0x03264E
                dc.w    $0040, $0003, $0050, $0003, $0050, $0004, $0060, $0004
                dc.w    $0060, $0003, $0070, $0002, $0070, $0003, $0080, $0003
                dc.w    $0080, $0003, $0080, $0004, $0080, $0004, $0080, $0004
                dc.w    $0080, $0005, $0090, $0005, $00A0, $0004, $0090, $0006
                dc.w    $0080, $0006, $0090, $0006, $00A0, $0005, $00B0, $0004
                dc.w    $00C0, $0003, $00D0, $0002, $00E0, $0001
;------------------------------------------------------------------------------- 
MGz_2_Chunk_Replace_Array:                                     ; Offset_0x0326AA
                dc.w    $0100, $0500, $0180, $0580, $0200, $0600, $0280, $0680
                dc.w    $0300, $0700, $0380, $0780, $0000, $0800, $0000, $0880
                dc.w    $0000, $0900, $0000, $0980, $0000, $0A00, $0000, $0A80
                dc.w    $0000, $0B00, $0000, $0B80, $0000, $0C00, $0000, $0C80
                dc.w    $0000, $0D00, $0000, $0D80, $0000, $0E00, $0000, $0E80
                dc.w    $0000, $0F00, $0000, $0F80, $0000, $1000, $0080, $0480 
;------------------------------------------------------------------------------- 
MGz_2_Collapse_Scroll_Delay:                                   ; Offset_0x03270A
                dc.w    $000A, $0010, $0002, $0008, $000E, $0006, $0000, $000C
                dc.w    $0012, $0004  
;------------------------------------------------------------------------------- 
MGz_2_Vertical_Scroll_Array:                                   ; Offset_0x03271E
                dc.w    $3CA0, $0020, $0020, $0020, $0020, $0020, $0020, $0020
                dc.w    $0020, $7FFF
;-------------------------------------------------------------------------------
MGz_2_Events_Init_2:                                           ; Offset_0x032732
                jsr     MGz_2_Clear_Bottom_Background(PC)      ; Offset_0x032968
                move.w  #$0004, (Level_Events_Routine_2).w           ; $FFFFEEC2
                move.w  (Obj_Player_One+Obj_X).w, D0                 ; $FFFFB010
                move.w  (Obj_Player_One+Obj_Y).w, D1                 ; $FFFFB014
                cmpi.w  #$0500, D1
                bcc.s   Offset_0x03276A
                cmpi.w  #$3800, D0
                bcs.s   Offset_0x0327B6
                move.w  #$0004, (Background_Events).w                ; $FFFFEED2
                move.l  #Obj_MGz_2_Move_Bg_Knuckles_Path, D1   ; Offset_0x032A6A
                cmpi.w  #$3A80, D0
                bcs.s   Offset_0x0327AC
                move.w  #$0220, (Background_Events+$02).w            ; $FFFFEED4
                bra.s   Offset_0x0327B6
Offset_0x03276A:
                cmpi.w  #$0800, D1
                bcs.s   Offset_0x032790
                cmpi.w  #$34C0, D0
                bcs.s   Offset_0x0327B6
                move.w  #$0008, (Background_Events).w                ; $FFFFEED2
                move.l  #Obj_MGz_2_Move_Bg_Sonic_Path, D1      ; Offset_0x032A7E
                cmpi.w  #$3800, D0
                bcs.s   Offset_0x0327AC
                move.w  #$01D0, (Background_Events+$02).w            ; $FFFFEED4
                bra.s   Offset_0x0327B6
Offset_0x032790:
                cmpi.w  #$3900, D0
                bcs.s   Offset_0x0327B6
                move.w  #$000C, (Background_Events).w                ; $FFFFEED2
                move.w  #$01D0, (Background_Events+$02).w            ; $FFFFEED4
                st      (Background_Events+$0E).w                    ; $FFFFEEE0
                clr.l   (Horizontal_Scroll_Table+$0038).w            ; $FFFFA838
                bra.s   Offset_0x0327B6
Offset_0x0327AC:
                jsr     (AllocateObject)                     ; Offset_0x011DD8
                bne.s   Offset_0x0327B6
                move.l  D1, (A1)
Offset_0x0327B6:
                jsr     MGz_2_Deform(PC)                       ; Offset_0x03287A
                jsr     Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
                clr.l   (Horizontal_Scroll_Table).w                  ; $FFFFA800
                move.w  D2, (Horizontal_Scroll_Table+$0006).w        ; $FFFFA806
                lea     MGz_2_Draw_Array(PC), A4               ; Offset_0x032B2E
                lea     (Horizontal_Scroll_Table).w, A5              ; $FFFFA800
                jsr     Refresh_Plane_Tile_Deform(PC)          ; Offset_0x02FA9A
                lea     MGz_2_Deform_Array(PC), A4             ; Offset_0x032B32
                lea     (Horizontal_Scroll_Table+$0008).w, A5        ; $FFFFA808
                jmp     Apply_Deformation(PC)                  ; Offset_0x02FD7C  
;-------------------------------------------------------------------------------    
MGz_2_Events_Run_2:                                            ; Offset_0x0327DE
                move.w  (Level_Events_Routine_2).w, D0               ; $FFFFEEC2
                jmp     Offset_0x0327E6(PC, D0) 
;-------------------------------------------------------------------------------
Offset_0x0327E6:
                bra     MGz_2_Refresh                          ; Offset_0x0327F2
                bra     MGz_2_Normal_2                         ; Offset_0x032800
                bra     MGz_2_Refresh_2                        ; Offset_0x03285E   
;-------------------------------------------------------------------------------  
MGz_2_Refresh:                                                 ; Offset_0x0327F2
                jsr     MGz_2_Clear_Bottom_Background(PC)      ; Offset_0x032968
                clr.l   (Horizontal_Scroll_Table).w                  ; $FFFFA800
                addq.w  #$04, (Level_Events_Routine_2).w             ; $FFFFEEC2
                bra.s   Offset_0x03283A   
;------------------------------------------------------------------------------- 
MGz_2_Normal_2:                                                ; Offset_0x032800
                jsr     MGz_2_Event_Trigger(PC)                ; Offset_0x03297A
                bne.s   Offset_0x03283A
                jsr     MGz_2_Deform(PC)                       ; Offset_0x03287A
Offset_0x03280A:                
                lea     MGz_2_Draw_Array(PC), A4               ; Offset_0x032B2E
                lea     (Horizontal_Scroll_Table).w, A5              ; $FFFFA800
                moveq   #$20, D6
                moveq   #$02, D5
                jsr     Draw_Background(PC)                    ; Offset_0x02FB74
                lea     MGz_2_Deform_Array(PC), A4             ; Offset_0x032B32
                lea     (Horizontal_Scroll_Table+$0008).w, A5        ; $FFFFA808
                jsr     Apply_Deformation(PC)                  ; Offset_0x02FD7C
                lea     MGz_2_Vertical_Scroll_Array(PC), A4    ; Offset_0x03271E
                lea     (Horizontal_Scroll_Table+$0126).w, A5        ; $FFFFA926
                jsr     Apply_Foreground_Vertical_Scroll(PC)   ; Offset_0x02FEA4
                jsr     Calc_Screen_Pos_Difference(PC)         ; Offset_0x02FF8A
                jmp     Earthquake_Setup(PC)                   ; Offset_0x02FFA4
Offset_0x03283A:
                jsr     MGz_2_Deform(PC)                       ; Offset_0x03287A
                jsr     Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
                move.w  D2, (Horizontal_Scroll_Table+$0006).w        ; $FFFFA806
                addi.w  #$00E0, D0
                and.w   (Level_Layout_Wrap_Y).w, D0                  ; $FFFFEEAC
                move.w  D0, (Draw_Delayed_Position).w                ; $FFFFEEC8
                move.w  #$000F, (Draw_Delayed_Position_Rowcount).w   ; $FFFFEECA
                addq.w  #$04, (Level_Events_Routine_2).w             ; $FFFFEEC2
                bra.s   Offset_0x032862        
;------------------------------------------------------------------------------- 
MGz_2_Refresh_2:                                               ; Offset_0x03285E
                jsr     MGz_2_Deform(PC)                       ; Offset_0x03287A
Offset_0x032862:
                lea     MGz_2_Draw_Array(PC), A4               ; Offset_0x032B2E
                lea     (Horizontal_Scroll_Table-$0004).w, A5        ; $FFFFA7FC
                move.w  (Screen_Pos_Buffer_Y_2).w, D1                ; $FFFFEE90
                jsr     Draw_Plane_Vertical_Bottom_Up_Complex(PC) ; Offset_0x02FD00
                bpl.s   Offset_0x03280A
                subq.w  #$04, (Level_Events_Routine_2).w             ; $FFFFEEC2
                bra.s   Offset_0x03280A 
;------------------------------------------------------------------------------- 
MGz_2_Deform:                                                  ; Offset_0x03287A
                move.w  (Background_Events).w, D0                    ; $FFFFEED2
                jmp     Offset_0x032882(PC, D0)   
;------------------------------------------------------------------------------- 
Offset_0x032882:
                bra     MGz_2_Deform_0                         ; Offset_0x0328C8
                bra     MGz_2_Deform_1                         ; Offset_0x03289E
                bra     MGz_2_Deform_2                         ; Offset_0x032894 
; Offset_0x03288E:
                move.w  #$0500, D1
                bra.s   Offset_0x0328CA
;------------------------------------------------------------------------------- 
MGz_2_Deform_2:                                                ; Offset_0x032894 
                move.w  #$08F0, D1
                move.w  #$3200, D2
                bra.s   Offset_0x0328A6
;------------------------------------------------------------------------------- 
MGz_2_Deform_1:                                                ; Offset_0x03289E  
                move.w  #$01E0, D1
                move.w  #$3580, D2
Offset_0x0328A6:
                move.w  (Screen_Pos_Buffer_Y).w, D0                  ; $FFFFEE84
                sub.w   D1, D0
                add.w   (Background_Events+$02).w, D0                ; $FFFFEED4
                move.w  D0, (Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
                move.w  (Screen_Pos_Buffer_X).w, D0                  ; $FFFFEE80
                sub.w   D2, D0
                move.w  D0, (Screen_Pos_Buffer_X_2).w                ; $FFFFEE8C
                move.w  D0, (Horizontal_Scroll_Table+$0004).w        ; $FFFFA804
                move.w  D0, (Horizontal_Scroll_Table+$0036).w        ; $FFFFA836
                bra.s   Offset_0x0328F6
;------------------------------------------------------------------------------- 
MGz_2_Deform_0:                                                ; Offset_0x0328C8  
                moveq   #$00, D1
Offset_0x0328CA:
                move.w  (Screen_Pos_Buffer_Y).w, D0                  ; $FFFFEE84
                move.w  (Earthquake_Offset).w, D2                    ; $FFFFEECE
                sub.w   D2, D0
                sub.w   D1, D0
                swap.w  D0
                clr.w   D0
                asr.l   #$04, D0
                move.l  D0, D1
                add.l   D0, D0
                add.l   D1, D0
                swap.w  D0
                add.w   D2, D0
                move.w  D0, (Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
                clr.w   (Screen_Pos_Buffer_X_2).w                    ; $FFFFEE8C
                clr.w   (Horizontal_Scroll_Table+$0004).w            ; $FFFFA804
                clr.w   (Horizontal_Scroll_Table+$0036).w            ; $FFFFA836
Offset_0x0328F6:
                move.w  (Screen_Pos_Buffer_X).w, D0                  ; $FFFFEE80
                cmpi.w  #$0008, (Level_Events_Routine).w             ; $FFFFEEC0
                bne.s   Offset_0x032906
                move.w  (Background_Events+$0C).w, D0                ; $FFFFEEDE
Offset_0x032906:
                swap.w  D0
                clr.w   D0
                asr.l   #$01, D0
                move.l  D0, D1
                asr.l   #$03, D1
                move.l  D1, D2
                asr.l   #$02, D2
                lea     (Horizontal_Scroll_Table+$0036).w, A1        ; $FFFFA836
                moveq   #$07, D3
Offset_0x03291A:
                swap.w  D0
                move.w  D0, -(A1)
                swap.w  D0
                sub.l   D1, D0
                dbra    D3, Offset_0x03291A
                tst.w   (Background_Events+$0E).w                    ; $FFFFEEE0
                bne.s   Offset_0x032934
                addi.l  #$00000800, (Horizontal_Scroll_Table+$0038).w ; $FFFFA838
Offset_0x032934:
                move.l  (Horizontal_Scroll_Table+$0038).w, D1        ; $FFFFA838
                lea     (Horizontal_Scroll_Table+$0008).w, A1        ; $FFFFA808
                lea     MGz_2_Deform_Index(PC), A5             ; Offset_0x032B62
                move.l  D2, D0
                asr.l   #$01, D2
                moveq   #$0E, D3
Offset_0x032946:
                move.w  (A5)+, D4
                add.l   D1, D0
                swap.w  D0
                move.w  D0, $00(A1, D4)
                swap.w  D0
                add.l   D2, D0
                dbra    D3, Offset_0x032946
                lea     MGz_2_Deform_Offset(PC), A5            ; Offset_0x032B80
                moveq   #$16, D0
Offset_0x03295E:
                move.w  (A5)+, D1
                add.w   D1, (A1)+
                dbra    D0, Offset_0x03295E
                rts                    
;-------------------------------------------------------------------------------  
MGz_2_Clear_Bottom_Background:                                 ; Offset_0x032968
                move.w  (A3), D0
                addq.w  #$08, D0
                move.w  D0, $0074(A3)
                move.w  D0, $0078(A3)
                move.w  D0, $007C(A3)
                rts 
;-------------------------------------------------------------------------------  
MGz_2_Event_Trigger:                                           ; Offset_0x03297A
                move.w  (Obj_Player_One+Obj_X).w, D0                 ; $FFFFB010
                move.w  (Obj_Player_One+Obj_Y).w, D1                 ; $FFFFB014
                move.w  (Background_Events).w, D2                    ; $FFFFEED2
                jmp     Offset_0x03298A(PC, D2) 
;------------------------------------------------------------------------------- 
Offset_0x03298A:
                bra     Event_Trigger_0                        ; Offset_0x032A18
                bra     Event_Trigger_1                        ; Offset_0x0329EA
                bra     Event_Trigger_2                        ; Offset_0x0329B2 
; Offset_0x032996:
                clr.b   (Background_Collision_Flag).w                ; $FFFFF664
                cmpi.w  #$0800, D1
                bcs     Offset_0x032A66
                cmpi.w  #$3A40, D0
                bcs     Offset_0x032A66
                move.w  #$0008, (Background_Events).w                ; $FFFFEED2
                rts
;-------------------------------------------------------------------------------  
Event_Trigger_2:                                               ; Offset_0x0329B2  
                st      (Background_Collision_Flag).w                ; $FFFFF664
                cmpi.w  #$0800, D1
                bcc.s   Offset_0x0329D0
                cmpi.w  #$3900, D0
                bcs     Offset_0x032A66
                st      (Background_Events+$0E).w                    ; $FFFFEEE0
                clr.l   (Horizontal_Scroll_Table+$0038).w            ; $FFFFA838
                moveq   #$0C, D0
                bra.s   Offset_0x0329E2
Offset_0x0329D0:
                cmpi.w  #$0900, D1
                bcc     Offset_0x032A66
                cmpi.w  #$34C0, D0
                bcc     Offset_0x032A66
                moveq   #$00, D0
Offset_0x0329E2:
                move.w  D0, (Background_Events).w                    ; $FFFFEED2
                moveq   #-$01, D0
                rts
;-------------------------------------------------------------------------------                
Event_Trigger_1:                                               ; Offset_0x0329EA 
                st      (Background_Collision_Flag).w                ; $FFFFF664
                cmpi.w  #$0100, D1
                bcc.s   Offset_0x0329FE
                cmpi.w  #$3C00, D0
                bcs.s   Offset_0x0329FE
                clr.b   (Background_Collision_Flag).w                ; $FFFFF664
Offset_0x0329FE:
                cmpi.w  #$0080, D1
                bcs.s   Offset_0x032A66
                cmpi.w  #$0180, D1
                bcc.s   Offset_0x032A66
                cmpi.w  #$3800, D0
                bcc.s   Offset_0x032A66
                clr.w   (Background_Events).w                        ; $FFFFEED2
                moveq   #-$01, D0
                rts
;-------------------------------------------------------------------------------                
Event_Trigger_0:                                               ; Offset_0x032A18
                clr.b   (Background_Collision_Flag).w                ; $FFFFF664
                cmpi.w  #$0080, D1
                bcs.s   Offset_0x032A66
                cmpi.w  #$0180, D1
                bcc.s   Offset_0x032A38
                cmpi.w  #$3800, D0
                bcs.s   Offset_0x032A66
                moveq   #$04, D0
                move.l  #Obj_MGz_2_Move_Bg_Knuckles_Path, D1   ; Offset_0x032A6A
                bra.s   Offset_0x032A52
Offset_0x032A38:
                cmpi.w  #$0800, D1
                bcs.s   Offset_0x032A66
                cmpi.w  #$0900, D1
                bcc.s   Offset_0x032A66
                cmpi.w  #$34C0, D0
                bcs.s   Offset_0x032A66
                moveq   #$08, D0
                move.l  #Obj_MGz_2_Move_Bg_Sonic_Path, D1      ; Offset_0x032A7E
Offset_0x032A52:
                move.w  D0, (Background_Events).w                    ; $FFFFEED2
                clr.w   (Background_Events+$02).w                    ; $FFFFEED4
                jsr     (AllocateObject)                     ; Offset_0x011DD8
                bne.s   Offset_0x032A64
                move.l  D1, (A1)
Offset_0x032A64:
                rts
Offset_0x032A66:
                moveq   #$00, D0
                rts
;-------------------------------------------------------------------------------
; Obj_MGz_2_Move_Bg_Knuckles_Path:                             ; Offset_0x032A6A 
; Obj_MGz_2_Move_Bg_Sonic_Path:                                ; Offset_0x032A7E
                include 'data\objects\mgz_mvbg.asm' 
;------------------------------------------------------------------------------- 
MGz_2_Draw_Array:                                              ; Offset_0x032B2E
                dc.w    $0200, $7FFF  
;------------------------------------------------------------------------------- 
MGz_2_Deform_Array:                                            ; Offset_0x032B32
                dc.w    $0010, $0010, $0010, $0010, $0010, $0018, $0008, $0010
                dc.w    $0008, $0008, $0010, $0008, $0008, $0008, $0005, $002B
                dc.w    $000C, $0006, $0006, $0008, $0008, $0018, $00D8, $7FFF
;------------------------------------------------------------------------------- 
MGz_2_Deform_Index:                                            ; Offset_0x032B62
                dc.w    $001C, $0018, $001A, $000C, $0006, $0014, $0002, $0010
                dc.w    $0016, $0012, $000A, $0000, $0008, $0004, $000E 
;-------------------------------------------------------------------------------  
MGz_2_Deform_Offset:                                           ; Offset_0x032B80
                dc.w    $FFFB, $FFF8, $0009, $000A, $0002, $FFF4, $0003, $0010
                dc.w    $FFFF, $000D, $FFF1, $0006, $FFF5, $FFFC, $000E, $FFF8
                dc.w    $0010, $0008, $0000, $FFF8, $0010, $0008, $0000 
;------------------------------------------------------------------------------- 
CNz_1_Events_Init:                                             ; Offset_0x032BAE
CNz_2_Events_Init:                                             ; Offset_0x032BAE  
                jsr     Reset_Tile_Offset_Position_Actual(PC)  ; Offset_0x02FEF2
                jmp     Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C 
;------------------------------------------------------------------------------- 
CNz_1_Events_Run:                                              ; Offset_0x032BB6
CNz_2_Events_Run:                                              ; Offset_0x032BB6   
                tst.w   (Background_Events+$06).w                    ; $FFFFEED8
                beq.s   Offset_0x032BC4
                clr.w   (Background_Events+$06).w                    ; $FFFFEED8
                jmp     Refresh_Plane_Screen_Direct(PC)        ; Offset_0x02FAE0
Offset_0x032BC4:
                jsr     Offset_0x032BCC(PC)
                jmp     Load_Tiles_As_You_Move(PC)             ; Offset_0x02FB0E
;-------------------------------------------------------------------------------
Offset_0x032BCC:
                lea     (Background_Events).w, A5                    ; $FFFFEED2
                tst.l   (A5)
                beq     Offset_0x032C88
                move.w  (A5)+, D0
                move.w  (A5), D1
                clr.l   -2(A5)
                move.w  D0, D2
                move.w  D1, D3
                asr.w   #$03, D2
                move.w  D2, D4
                asr.w   #$04, D2
                move.w  D3, D5
                asr.w   #$05, D3
                and.w   (Level_Layout_Wrap_Row).w, D3                ; $FFFFEEAE
                move.w  $00(A3, D3), A4
                moveq   #-$01, D6
                clr.w   D6
                move.b  $00(A4, D2), D6
                lsl.w   #$07, D6
                andi.w  #$000C, D4
                andi.w  #$0060, D5
                add.w   D4, D6
                add.w   D5, D6
                move.l  D6, A4
                clr.l   (A4)
                clr.l   $0010(A4)
                asr.w   #$02, D0
                andi.w  #$0078, D0
                lsl.w   #$04, D1
                andi.w  #$0E00, D1
                add.w   D1, D0
                add.w   D7, D0
                moveq   #$00, D1
                move.w  D0, (A0)+
                move.w  #$0001, (A0)+
                move.l  D1, (A0)+
                move.l  D1, (A0)+
                move.l  D1, (A0)+
                move.l  D1, (A0)+
                addi.w  #$0100, D0
                move.w  D0, (A0)+
                move.w  #$0001, (A0)+
                move.l  D1, (A0)+
                move.l  D1, (A0)+
                move.l  D1, (A0)+
                move.l  D1, (A0)+
                clr.w   (A0)
                move.w  $0018(A3), A4
                lea     $0064(A4), A4
                moveq   #$00, D1
                clr.w   (Background_Events+$04).w                    ; $FFFFEED6
                moveq   #$03, D3
Offset_0x032C56:
                lea     (A4), A5
                moveq   #$02, D2
Offset_0x032C5A:
                moveq   #-$01, D0
                clr.w   D0
                move.b  (A5)+, D0
                lsl.w   #$07, D0
                add.w   D1, D0
                move.l  D0, A6
                tst.l   (A6)+
                bne.s   Offset_0x032C88
                tst.l   (A6)+
                bne.s   Offset_0x032C88
                tst.l   (A6)+
                bne.s   Offset_0x032C88
                tst.l   (A6)
                bne.s   Offset_0x032C88
                dbra    D2, Offset_0x032C5A
                addi.w  #$0020, D1
                addi.w  #$0020, (Background_Events+$04).w            ; $FFFFEED6
                dbra    D3, Offset_0x032C56
Offset_0x032C88:
                rts   
;------------------------------------------------------------------------------- 
CNz_1_Events_Init_2:                                           ; Offset_0x032C8A
CNz_2_Events_Init_2:                                           ; Offset_0x032C8A 
                jsr     CNz_Deform(PC)                         ; Offset_0x032CC4
                jsr     Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
                moveq   #$00, D1
                jsr     Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
                lea     CNz_Deform_Array(PC), A4               ; Offset_0x032D2C
                lea     (Horizontal_Scroll_Table).w, A5              ; $FFFFA800
                jmp     Apply_Deformation(PC)                  ; Offset_0x02FD7C
;------------------------------------------------------------------------------- 
CNz_1_Events_Run_2:                                            ; Offset_0x032CA4
CNz_2_Events_Run_2:                                            ; Offset_0x032CA4
                jsr     CNz_Deform(PC)                         ; Offset_0x032CC4
                lea     (Screen_Pos_Buffer_Y_2).w, A6                ; $FFFFEE90
                lea     (Screen_Pos_Rounded_Y_2).w, A5               ; $FFFFEE96
                moveq   #$00, D1
                moveq   #$20, D6
                jsr     Draw_Tile_Row(PC)                      ; Offset_0x02F8AA
                lea     CNz_Deform_Array(PC), A4               ; Offset_0x032D2C
                lea     (Horizontal_Scroll_Table).w, A5              ; $FFFFA800
                jmp     Apply_Deformation(PC)                  ; Offset_0x02FD7C
;------------------------------------------------------------------------------- 
CNz_Deform:                                                    ; Offset_0x032CC4
                move.w  (Screen_Pos_Buffer_Y).w, D0                  ; $FFFFEE84
                swap.w  D0
                clr.w   D0
                asr.l   #$04, D0
                move.l  D0, D1
                asr.l   #$01, D1
                add.l   D1, D0
                asr.l   #$02, D1
                add.l   D1, D0
                swap.w  D0
                move.w  D0, (Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
                move.w  (Screen_Pos_Buffer_X).w, D0                  ; $FFFFEE80
                swap.w  D0
                clr.w   D0
                asr.l   #$01, D0
                move.l  D0, D1
                asr.l   #$03, D1
                lea     (Horizontal_Scroll_Table+$000A).w, A1        ; $FFFFA80A
                swap.w  D0
                move.w  D0, -(A1)
                swap.w  D0
                sub.l   D1, D0
                swap.w  D0
                move.w  D0, (Screen_Pos_Buffer_X_2).w                ; $FFFFEE8C
                move.w  D0, -(A1)
                swap.w  D0
                sub.l   D1, D0
                sub.l   D1, D0
                swap.w  D0
                move.w  D0, (Background_Events+$10).w                ; $FFFFEEE2
                swap.w  D0
                sub.l   D1, D0
                swap.w  D0
                move.w  D0, -(A1)
                swap.w  D0
                sub.l   D1, D0
                sub.l   D1, D0
                swap.w  D0
                move.w  D0, -(A1)
                swap.w  D0
                sub.l   D1, D0
                asr.l   #$01, D1
                sub.l   D1, D0
                swap.w  D0
                move.w  D0, -(A1)
                rts 
;-------------------------------------------------------------------------------                 
CNz_Deform_Array:                                              ; Offset_0x032D2C
                dc.w    $0080, $0030, $0060, $00C0, $7FFF
;-------------------------------------------------------------------------------   
Iz_1_Events_Init:                                              ; Offset_0x032D36
                move.w  #$07FF, (Screen_Wrap_Y).w                    ; $FFFFEEAA
                move.w  #$07F0, (Level_Layout_Wrap_Y).w              ; $FFFFEEAC
                move.w  #$003C, (Level_Layout_Wrap_Row).w            ; $FFFFEEAE
                jsr     Reset_Tile_Offset_Position_Actual(PC)  ; Offset_0x02FEF2
                jmp     Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
;-------------------------------------------------------------------------------  
Iz_1_Events_Run:                                               ; Offset_0x032D50
                move.w  (Level_Events_Routine_2).w, D0               ; $FFFFEEC2
                jmp     Offset_0x032D58(PC, D0)                    
;-------------------------------------------------------------------------------
Offset_0x032D58:
                bra     Iz_1_Init                              ; Offset_0x032D70
                bra     Iz_1_Wait_Quake                        ; Offset_0x032D7A
                bra     Iz_1_Normal                            ; Offset_0x032D82
                bra     Iz_1_Normal                            ; Offset_0x032D82
                bra     Iz_1_Normal                            ; Offset_0x032D82
                bra     Iz_1_Normal                            ; Offset_0x032D82 
;-------------------------------------------------------------------------------
Iz_1_Init:                                                     ; Offset_0x032D70
                move.w  (Earthquake_Offset).w, D0                    ; $FFFFEECE
                add.w   D0, (Screen_Pos_Buffer_X).w                  ; $FFFFEE80
                bra.s   Iz_1_Normal                            ; Offset_0x032D82         
;-------------------------------------------------------------------------------
Iz_1_Wait_Quake:                                               ; Offset_0x032D7A
                move.w  (Earthquake_Offset).w, D0                    ; $FFFFEECE
                add.w   D0, (Screen_Pos_Buffer_Y).w                  ; $FFFFEE84    
;-------------------------------------------------------------------------------
Iz_1_Normal:                                                   ; Offset_0x032D82
                jmp     Load_Tiles_As_You_Move(PC)             ; Offset_0x02FB0E   
;------------------------------------------------------------------------------- 
Iz_1_Events_Init_2:                                            ; Offset_0x032D86
                lea     (A3), A1
                moveq   #$07, D0
Offset_0x032D8A:
                move.w  (A1), $0020(A1)
                addq.w  #$04, A1
                dbra    D0, Offset_0x032D8A
                move.w  (Screen_Pos_Buffer_Y).w, (Level_Events_Buffer_0).w ; $FFFFEE84, $FFFFEEB4
                move.w  (Screen_Pos_Buffer_Y).w, (Level_Events_Buffer_1).w ; $FFFFEE84, $FFFFEEB6
                cmpi.w  #$3940, (Screen_Pos_Buffer_X).w              ; $FFFFEE80
                bcc.s   Offset_0x032DE2
                cmpi.w  #$3600, (Screen_Pos_Buffer_X).w              ; $FFFFEE80
                bcs.s   Offset_0x032DB6
                addi.w  #$2800, (Level_Events_Buffer_1).w            ; $FFFFEEB6
Offset_0x032DB6:
                cmpi.w  #$0580, (Screen_Pos_Buffer_Y).w              ; $FFFFEE84
                bcc.s   Offset_0x032DE2
                clr.w   (Background_Events+$16).w                    ; $FFFFEEE8
                jsr     Iz_1_Set_Intro_Pal(PC)                 ; Offset_0x0330B4
                jsr     Iz_1_Intro_Deform(PC)                  ; Offset_0x032FF0
                jsr     Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
                move.w  #$1880, D1
                jsr     Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
                lea     Iz_1_Intro_Deform_Array(PC), A4        ; Offset_0x03311C
                lea     (Horizontal_Scroll_Table).w, A5              ; $FFFFA800
                jmp     Apply_Deformation(PC)                  ; Offset_0x02FD7C
Offset_0x032DE2:
                move.w  #$0010, (Level_Events_Routine_2).w           ; $FFFFEEC2
                st      (Background_Events+$16).w                    ; $FFFFEEE8
                jsr     Iz_1_Set_Indoor_Pal(PC)                ; Offset_0x0330EE
                jsr     Iz_1_Deform(PC)                        ; Offset_0x03308E
                jsr     Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
                jsr     Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
                jmp     Plain_Deformation(PC)                  ; Offset_0x02FD42  
;------------------------------------------------------------------------------- 
Iz_1_Events_Run_2:                                             ; Offset_0x032E00
                move.w  (Level_Events_Routine_2).w, D0               ; $FFFFEEC2
                jmp     Offset_0x032E08(PC, D0)  
;-------------------------------------------------------------------------------
Offset_0x032E08:
                bra     Iz_1_Intro                             ; Offset_0x032E20
                bra     Iz_1_Snow_Fall                         ; Offset_0x032E66
                bra     Iz_1_Refresh                           ; Offset_0x032E92
                bra     Iz_1_Refresh_2                         ; Offset_0x032EC2
                bra     Iz_1_Normal_2                          ; Offset_0x032EE2
                bra     Iz_1_Transition                        ; Offset_0x032F3C  
;-------------------------------------------------------------------------------
Iz_1_Intro:                                                    ; Offset_0x032E20
                tst.w   (Level_Events_Buffer_5).w                    ; $FFFFEEC6
                beq.s   Offset_0x032E40
                clr.w   (Level_Events_Buffer_5).w                    ; $FFFFEEC6
                clr.l   (Background_Events).w                        ; $FFFFEED2
                clr.l   (Background_Events+$04).w                    ; $FFFFEED6
                jsr     Iz_1_Big_Snow_Fall(PC)                 ; Offset_0x033046
                jsr     Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
                addq.w  #$04, (Level_Events_Routine_2).w             ; $FFFFEEC2
                bra.s   Offset_0x032E86
Offset_0x032E40:
                jsr     Iz_1_Intro_Deform(PC)                  ; Offset_0x032FF0
                lea     (Screen_Pos_Buffer_Y_2).w, A6                ; $FFFFEE90
                lea     (Screen_Pos_Rounded_Y_2).w, A5               ; $FFFFEE96
                move.w  #$1880, D1
                moveq   #$20, D6
                jsr     Draw_Tile_Row(PC)                      ; Offset_0x02F8AA
                lea     Iz_1_Intro_Deform_Array(PC), A4        ; Offset_0x03311C
                lea     (Horizontal_Scroll_Table).w, A5              ; $FFFFA800
                jsr     Apply_Deformation(PC)                  ; Offset_0x02FD7C
                jmp     Earthquake_Setup(PC)                   ; Offset_0x02FFA4
;-------------------------------------------------------------------------------                
Iz_1_Snow_Fall:                                                ; Offset_0x032E66
                tst.w   (Level_Events_Buffer_5).w                    ; $FFFFEEC6
                beq.s   Offset_0x032E82
                clr.w   (Level_Events_Buffer_5).w                    ; $FFFFEEC6
                move.w  #$02E0, (Draw_Delayed_Position).w            ; $FFFFEEC8
                move.w  #$000F, (Draw_Delayed_Position_Rowcount).w   ; $FFFFEECA
                addq.w  #$04, (Level_Events_Routine_2).w             ; $FFFFEEC2
                bra.s   Iz_1_Refresh                           ; Offset_0x032E92
Offset_0x032E82:
                jsr     Iz_1_Big_Snow_Fall(PC)                 ; Offset_0x033046
Offset_0x032E86:
                jsr     Load_Tiles_As_You_Move_2(PC)           ; Offset_0x02FB32
                jsr     Plain_Deformation(PC)                  ; Offset_0x02FD42
                jmp     Earthquake_Setup(PC)                   ; Offset_0x02FFA4
;-------------------------------------------------------------------------------                
Iz_1_Refresh:                                                  ; Offset_0x032E92  
                move.w  #$1880, D1
                move.w  #$0200, D2
                jsr     Draw_Plane_Vertical_Bottom_Up(PC)      ; Offset_0x02FCC6
                bpl     Plain_Deformation                      ; Offset_0x02FD42
                jsr     Iz_1_Deform(PC)                        ; Offset_0x03308E
                jsr     Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
                addi.w  #$00E0, D0
                and.w   (Level_Layout_Wrap_Y).w, D0                  ; $FFFFEEAC
                move.w  D0, (Draw_Delayed_Position).w                ; $FFFFEEC8
                move.w  #$000F, (Draw_Delayed_Position_Rowcount).w   ; $FFFFEECA
                addq.w  #$04, (Level_Events_Routine_2).w             ; $FFFFEEC2
                bra.s   Offset_0x032EC6
;-------------------------------------------------------------------------------                
Iz_1_Refresh_2:                                                ; Offset_0x032EC2
                jsr     Iz_1_Deform(PC)                        ; Offset_0x03308E
Offset_0x032EC6:
                move.w  (Screen_Pos_Buffer_X_2).w, D1                ; $FFFFEE8C
                move.w  (Screen_Pos_Buffer_Y_2).w, D2                ; $FFFFEE90
                jsr     Draw_Plane_Vertical_Bottom_Up(PC)      ; Offset_0x02FCC6
                bpl.s   Offset_0x032F34
                st      (Background_Events+$16).w                    ; $FFFFEEE8
                jsr     Iz_1_Set_Indoor_Pal(PC)                ; Offset_0x0330EE
                addq.w  #$04, (Level_Events_Routine_2).w             ; $FFFFEEC2
                bra.s   Offset_0x032F34
;-------------------------------------------------------------------------------                
Iz_1_Normal_2:                                                 ; Offset_0x032EE2
                cmpi.w  #$6900, (Screen_Pos_Buffer_X).w              ; $FFFFEE80
                bcs.s   Offset_0x032F30
                movem.l D7/A0/A2/A3, -(A7)
                lea     (Icecap_2_Chunks_2), A1                ; Offset_0x182746
                lea     (M68K_RAM_Start+$0B80), A2                   ; $FFFF0B80
                jsr     (Queue_Kos)          ; Offset_0x0019AE
                lea     (Icecap_2_Blocks_2), A1                ; Offset_0x17FB24
                lea     (Blocks_Mem_Address+$0418).w, A2             ; $FFFF9418
                jsr     (Queue_Kos)          ; Offset_0x0019AE
                lea     (Icecap_2_Tiles_2), A1                 ; Offset_0x180734
                move.w  #$23E0, D2
                jsr     (Queue_Kos_Module)                 ; Offset_0x0018A8
                moveq   #$20, D0
                jsr     (LoadPLC)                              ; Offset_0x0014D0
                movem.l (A7)+, D7/A0/A2/A3
                addq.w  #$04, (Level_Events_Routine_2).w             ; $FFFFEEC2
Offset_0x032F30:
                jsr     Iz_1_Deform(PC)                        ; Offset_0x03308E
Offset_0x032F34:
                jsr     Load_Tiles_As_You_Move_2(PC)           ; Offset_0x02FB32
                jmp     Plain_Deformation(PC)                  ; Offset_0x02FD42
;-------------------------------------------------------------------------------                
Iz_1_Transition:                                               ; Offset_0x032F3C
                tst.w   (Kosinski_Mod_Queue_Count).w                 ; $FFFFFF0E
                bne     Offset_0x032FE8
                move.w  #Iz_Act_2, (Current_ZoneAndAct).w               ; $0501, $FFFFFE10
                clr.b   (Saved_Level_Flag).w                         ; $FFFFFE30
                clr.b   (Saved_Level_Flag_P2).w                      ; $FFFFFEE0
                clr.b   (Dynamic_Resize_Routine).w                   ; $FFFFEE33
                clr.b   (Object_Pos_Routine).w                       ; $FFFFF76C
                clr.b   (Ring_Pos_Routine).w                         ; $FFFFF710
                clr.b   (Boss_Flag).w                                ; $FFFFF7AA
                clr.l   (Animate_Counters).w                         ; $FFFFF7F0
                clr.w   (Animate_Counters+$04).w                     ; $FFFFF7F4
                movem.l D7/A0/A2/A3, -(A7)
                jsr     (LoadLevelLayout)                    ; Offset_0x01247C
                jsr     (LoadCollisionIndex)                 ; Offset_0x0049B2
                moveq   #$15, D0
                jsr     (PalLoad_Now)                             ; Offset_0x002FBA
                movem.l (A7)+, D7/A0/A2/A3
                move.w  #$6880, D0
                move.w  #$FF00, D1
                sub.w   D0, (Obj_Player_One+Obj_X).w                 ; $FFFFB010
                sub.w   D1, (Obj_Player_One+Obj_Y).w                 ; $FFFFB014
                sub.w   D0, (Obj_Player_Two+Obj_X).w                 ; $FFFFB05A
                sub.w   D1, (Obj_Player_Two+Obj_Y).w                 ; $FFFFB05E
                jsr     Calc_Objects_X_Y_During_Transition(PC) ; Offset_0x02FFE4
                sub.w   D0, (Camera_X).w                             ; $FFFFEE78
                sub.w   D1, (Camera_Y).w                             ; $FFFFEE7C
                sub.w   D0, (Screen_Pos_Buffer_X).w                  ; $FFFFEE80
                sub.w   D1, (Screen_Pos_Buffer_Y).w                  ; $FFFFEE84
                move.l  #$00007000, D0
                move.l  D0, (Sonic_Level_Limits_Min_X).w             ; $FFFFEE14
                move.l  D0, (Level_Limits_Min_X).w                   ; $FFFFEE0C
                move.l  #$00000B20, D0
                move.l  D0, (Sonic_Level_Limits_Min_Y).w             ; $FFFFEE18
                move.l  D0, (Level_Limits_Min_Y).w                   ; $FFFFEE10
                move.w  #$0FFF, (Screen_Wrap_Y).w                    ; $FFFFEEAA
                move.w  #$0FF0, (Level_Layout_Wrap_Y).w              ; $FFFFEEAC
                move.w  #$007C, (Level_Layout_Wrap_Row).w            ; $FFFFEEAE
                jsr     Reset_Tile_Offset_Position_Actual(PC)  ; Offset_0x02FEF2
                clr.w   (Level_Events_Routine_2).w                   ; $FFFFEEC2
Offset_0x032FE8:
                jsr     Iz_1_Deform(PC)                        ; Offset_0x03308E
                jmp     Plain_Deformation(PC)                  ; Offset_0x02FD42    
;------------------------------------------------------------------------------- 
Iz_1_Intro_Deform:                                             ; Offset_0x032FF0
                lea     (Level_Events_Buffer_0).w, A1                ; $FFFFEEB4
                move.w  (Screen_Pos_Buffer_Y).w, D0                  ; $FFFFEE84
                move.w  #$0400, D2
                move.w  #$0800, D3
                jsr     Adjust_Background_During_Loop(PC)      ; Offset_0x02FF6C
                move.w  (Level_Events_Buffer_1).w, D0                ; $FFFFEEB6
                asr.w   #$07, D0
                move.w  D0, (Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
                move.w  (Screen_Pos_Buffer_X).w, D0                  ; $FFFFEE80
                move.w  (Earthquake_Offset).w, D3                    ; $FFFFEECE
                sub.w   D3, D0
                swap.w  D0
                clr.w   D0
                asr.l   #$05, D0
                move.l  D0, D1
                swap.w  D0
                add.w   D3, D0
                swap.w  D0
                lea     (Horizontal_Scroll_Table).w, A1              ; $FFFFA800
                moveq   #$04, D2
                bsr.s   Offset_0x033038
                add.l   D1, D0
                move.l  D1, D2
                asr.l   #$01, D2
                add.l   D2, D1
                moveq   #$08, D2
Offset_0x033038:
                swap.w  D0
                move.w  D0, (A1)+
                swap.w  D0
                add.l   D1, D0
                dbra    D2, Offset_0x033038
                rts 
;-------------------------------------------------------------------------------  
Iz_1_Big_Snow_Fall:                                            ; Offset_0x033046
                cmpi.w  #$FEE0, (Background_Events).w                ; $FFFFEED2
                ble.s   Offset_0x033064
                st      (Earthquake_Flag).w                          ; $FFFFEECC
                addi.l  #$00002400, (Background_Events+$04).w        ; $FFFFEED6
                move.l  (Background_Events+$04).w, D0                ; $FFFFEED6
                sub.l   D0, (Background_Events).w                    ; $FFFFEED2
                bra.s   Offset_0x033070
Offset_0x033064:
                tst.w   (Earthquake_Flag).w                          ; $FFFFEECC
                bpl.s   Offset_0x033070
                move.w  #$0004, (Earthquake_Flag).w                  ; $FFFFEECC
Offset_0x033070:
                move.w  (Screen_Pos_Buffer_Y).w, D0                  ; $FFFFEE84
                subi.w  #$0460, D0
                add.w   (Background_Events).w, D0                    ; $FFFFEED2
                move.w  D0, (Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
                move.w  (Screen_Pos_Buffer_X).w, D0                  ; $FFFFEE80
                subi.w  #$1D40, D0
                move.w  D0, (Screen_Pos_Buffer_X_2).w                ; $FFFFEE8C
                rts
;-------------------------------------------------------------------------------  
Iz_1_Deform:                                                   ; Offset_0x03308E
                move.w  (Screen_Pos_Buffer_Y).w, D0                  ; $FFFFEE84
                asr.w   #$01, D0
                move.w  D0, (Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
                asr.w   #$01, D0
                move.w  D0, (Background_Events+$12).w                ; $FFFFEEE4
                move.w  (Screen_Pos_Buffer_X).w, D0                  ; $FFFFEE80
                asr.w   #$01, D0
                subi.w  #$1D80, D0
                move.w  D0, (Screen_Pos_Buffer_X_2).w                ; $FFFFEE8C
                asr.w   #$01, D0
                move.w  D0, (Background_Events+$10).w                ; $FFFFEEE2
                rts                   
;-------------------------------------------------------------------------------   
Iz_1_Set_Intro_Pal:                                            ; Offset_0x0330B4
                lea     (Palette_Row_3_Offset+$02).w, A1             ; $FFFFED62
                bsr.s   Offset_0x0330BE
                lea     (Palette_Row_3_Data_Target+$02).w, A1        ; $FFFFEDE2
Offset_0x0330BE:
                move.l  #$0EEE0EEC, (A1)+
                move.l  #$0EEA0ECA, (A1)+
                move.l  #$0EC80EA6, (A1)+
                move.l  #$0E860E64, (A1)+
                move.l  #$0E400E00, (A1)+
                move.l  #$0C000000, (A1)+
                move.l  #$0AEC0CEA, (A1)+
                move.w  #$0E80, (A1)
                rts
;------------------------------------------------------------------------------- 
Iz_1_Set_Indoor_Pal:                                           ; Offset_0x0330EE
                lea     (Palette_Row_3_Offset+$02).w, A1             ; $FFFFED62
                bsr.s   Offset_0x0330F8
                lea     (Palette_Row_3_Data_Target+$02).w, A1        ; $FFFFEDE2
Offset_0x0330F8:
                move.l  #$0EC00E40, (A1)+
                move.l  #$0E040C00, (A1)+
                move.l  #$06000200, (A1)+
                move.l  #$00000E64, (A1)+
                move.l  #$0E240A02, (A1)+
                move.w  #$0402, (A1)
                rts   
;-------------------------------------------------------------------------------  
Iz_1_Intro_Deform_Array:                                       ; Offset_0x03311C
                dc.w    $0044, $000C, $000B, $000D, $0018, $0050, $0002, $0006
                dc.w    $0008, $0010, $0018, $0020, $0028, $7FFF
;------------------------------------------------------------------------------- 
Iz_2_Events_Init:                                              ; Offset_0x033138
                jsr     Reset_Tile_Offset_Position_Actual(PC)  ; Offset_0x02FEF2
                jmp     Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C   
;------------------------------------------------------------------------------- 
Iz_2_Events_Run:                                               ; Offset_0x033140
                jmp     Load_Tiles_As_You_Move(PC)             ; Offset_0x02FB0E 
;------------------------------------------------------------------------------- 
Iz_2_Events_Init_2:                                            ; Offset_0x033144
                move.w  #$0004, (Level_Events_Routine_2).w           ; $FFFFEEC2
                cmpi.w  #$3600, (Screen_Pos_Buffer_X).w              ; $FFFFEE80
                bcc.s   Offset_0x03316A
                cmpi.w  #$0720, (Screen_Pos_Buffer_Y).w              ; $FFFFEE84
                bcc.s   Offset_0x03318A
                cmpi.w  #$1000, (Screen_Pos_Buffer_X).w              ; $FFFFEE80
                bcc.s   Offset_0x03316A
                cmpi.w  #$0580, (Screen_Pos_Buffer_Y).w              ; $FFFFEE84
                bcc.s   Offset_0x03318A
Offset_0x03316A:
                clr.w   (Background_Events+$16).w                    ; $FFFFEEE8
                jsr     Iz_2_Set_Outdoors_Pal(PC)              ; Offset_0x0333B0
                jsr     Iz_2_Out_Deform(PC)                    ; Offset_0x0332C8
                moveq   #$00, D0
                moveq   #$00, D1
                jsr     Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
                lea     Iz_2_Out_Deform_Array(PC), A4          ; Offset_0x033408
                lea     (Horizontal_Scroll_Table).w, A5              ; $FFFFA800
                jmp     Apply_Deformation(PC)                  ; Offset_0x02FD7C
Offset_0x03318A:
                st      (Background_Events+$16).w                    ; $FFFFEEE8
                jsr     Iz_2_Set_Indoors_Pal(PC)               ; Offset_0x0333DA
                jsr     Iz_2_Set_In_Deform(PC)                 ; Offset_0x033340
                jsr     Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
                moveq   #$00, D1
                jsr     Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
                lea     Iz_2_In_Deform_Array(PC), A4           ; Offset_0x033410
                lea     (Horizontal_Scroll_Table).w, A5              ; $FFFFA800
                jmp     Apply_Deformation(PC)                  ; Offset_0x02FD7C  
;------------------------------------------------------------------------------- 
Iz_2_Events_Run_2:                                             ; Offset_0x0331AC
                move.w  (Level_Events_Routine_2).w, D0               ; $FFFFEEC2
                jmp     Offset_0x0331B4(PC, D0)                
;-------------------------------------------------------------------------------    
Offset_0x0331B4:
                bra     Iz_2_From_Iz_1                         ; Offset_0x0331C0
                bra     Iz_2_Normal                            ; Offset_0x0331CE
                bra     Iz_2_Refresh                           ; Offset_0x033292
;-------------------------------------------------------------------------------
Iz_2_From_Iz_1:                                                ; Offset_0x0331C0
                addq.w  #$04, (Level_Events_Routine_2).w             ; $FFFFEEC2
                cmpi.w  #$0580, (Screen_Pos_Buffer_Y).w              ; $FFFFEE84
                bcc.s   Offset_0x0331EC
                bra.s   Offset_0x03324A     
;-------------------------------------------------------------------------------
Iz_2_Normal:                                                   ; Offset_0x0331CE
                tst.w   (Background_Events+$16).w                    ; $FFFFEEE8
                bne.s   Offset_0x033226
                move.w  (Screen_Pos_Buffer_X).w, D0                  ; $FFFFEE80
                cmpi.w  #$1000, D0
                bcs.s   Offset_0x033216
                cmpi.w  #$3600, D0
                bcc.s   Offset_0x033216
                cmpi.w  #$0720, (Screen_Pos_Buffer_Y).w              ; $FFFFEE84
                bcs.s   Offset_0x033216
Offset_0x0331EC:
                st      (Background_Events+$16).w                    ; $FFFFEEE8
                jsr     Iz_2_Set_Indoors_Pal(PC)               ; Offset_0x0333DA
                jsr     Iz_2_Set_In_Deform(PC)                 ; Offset_0x033340
                jsr     Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
                addi.w  #$00E0, D0
                and.w   (Level_Layout_Wrap_Y).w, D0                  ; $FFFFEEAC
                move.w  D0, (Draw_Delayed_Position).w                ; $FFFFEEC8
                move.w  #$000F, (Draw_Delayed_Position_Rowcount).w   ; $FFFFEECA
                addq.w  #$04, (Level_Events_Routine_2).w             ; $FFFFEEC2
                bra     Offset_0x0332B6
Offset_0x033216:
                jsr     Iz_2_Out_Deform(PC)                    ; Offset_0x0332C8
Offset_0x03321A:
                lea     Iz_2_Out_Deform_Array(PC), A4          ; Offset_0x033408
                lea     (Horizontal_Scroll_Table).w, A5              ; $FFFFA800
                jmp     Apply_Deformation(PC)                  ; Offset_0x02FD7C
Offset_0x033226:
                move.w  (Screen_Pos_Buffer_X).w, D0                  ; $FFFFEE80
                cmpi.w  #$1900, D0
                bcs.s   Offset_0x033236
                cmpi.w  #$1B80, D0
                bcs.s   Offset_0x033272
Offset_0x033236:
                cmpi.w  #$1000, D0
                bcs.s   Offset_0x033272
                cmpi.w  #$3600, D0
                bcc.s   Offset_0x033272
                cmpi.w  #$0720, (Screen_Pos_Buffer_Y).w              ; $FFFFEE84
                bcc.s   Offset_0x033272
Offset_0x03324A:
                clr.w   (Background_Events+$16).w                    ; $FFFFEEE8
                jsr     Iz_2_Set_Outdoors_Pal(PC)              ; Offset_0x0333B0
                jsr     Iz_2_Out_Deform(PC)                    ; Offset_0x0332C8
                jsr     Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
                addi.w  #$00E0, D0
                and.w   (Level_Layout_Wrap_Y).w, D0                  ; $FFFFEEAC
                move.w  D0, (Draw_Delayed_Position).w                ; $FFFFEEC8
                move.w  #$000F, (Draw_Delayed_Position_Rowcount).w   ; $FFFFEECA
                addq.w  #$04, (Level_Events_Routine_2).w             ; $FFFFEEC2
                bra.s   Offset_0x03329C
Offset_0x033272:
                jsr     Iz_2_Set_In_Deform(PC)                 ; Offset_0x033340
Offset_0x033276:
                lea     (Screen_Pos_Buffer_Y_2).w, A6                ; $FFFFEE90
                lea     (Screen_Pos_Rounded_Y_2).w, A5               ; $FFFFEE96
                moveq   #$00, D1
                moveq   #$20, D6
                jsr     Draw_Tile_Row(PC)                      ; Offset_0x02F8AA
                lea     Iz_2_In_Deform_Array(PC), A4           ; Offset_0x033410
                lea     (Horizontal_Scroll_Table).w, A5              ; $FFFFA800
                jmp     Apply_Deformation(PC)                  ; Offset_0x02FD7C
;-------------------------------------------------------------------------------                
Iz_2_Refresh:                                                  ; Offset_0x033292
                tst.w   (Background_Events+$16).w                    ; $FFFFEEE8
                bne.s   Offset_0x0332B2
                jsr     Iz_2_Out_Deform(PC)                    ; Offset_0x0332C8
Offset_0x03329C:
                moveq   #$00, D1
                move.w  (Screen_Pos_Buffer_Y_2).w, D2                ; $FFFFEE90
                jsr     Draw_Plane_Vertical_Bottom_Up(PC)      ; Offset_0x02FCC6
                bpl     Offset_0x03321A
                subq.w  #$04, (Level_Events_Routine_2).w             ; $FFFFEEC2
                bra     Offset_0x03321A
Offset_0x0332B2:
                jsr     Iz_2_Set_In_Deform(PC)                 ; Offset_0x033340
Offset_0x0332B6:
                moveq   #$00, D1
                move.w  (Screen_Pos_Buffer_Y_2).w, D2                ; $FFFFEE90
                jsr     Draw_Plane_Vertical_Bottom_Up(PC)      ; Offset_0x02FCC6
                bpl.s   Offset_0x033276
                subq.w  #$04, (Level_Events_Routine_2).w             ; $FFFFEEC2
                bra.s   Offset_0x033276   
;------------------------------------------------------------------------------- 
Iz_2_Out_Deform:                                               ; Offset_0x0332C8
                clr.w   (Screen_Pos_Buffer_Y_2).w                    ; $FFFFEE90
                move.w  (Screen_Pos_Buffer_X).w, D0                  ; $FFFFEE80
                move.w  (Level_Frame_Count).w, D1                    ; $FFFFFE04
                asr.w   #$01, D1
                add.w   D1, D0
                swap.w  D0
                clr.w   D0
                asr.l   #$01, D0
                andi.l  #$007FFFFF, D0
                move.l  D0, D1
                asr.l   #$06, D1
                lea     (Horizontal_Scroll_Table+$0064).w, A1        ; $FFFFA864
                moveq   #$27, D2
Offset_0x0332EE:
                swap.w  D0
                move.w  D0, -(A1)
                swap.w  D0
                sub.l   D1, D0
                dbra    D2, Offset_0x0332EE
                lea     (Horizontal_Scroll_Table).w, A1              ; $FFFFA800
                move.w  (Screen_Pos_Buffer_X).w, D0                  ; $FFFFEE80
                swap.w  D0
                clr.w   D0
                asr.l   #$01, D0
                move.l  D0, D1
                asr.l   #$01, D0
                add.l   D0, D1
                move.l  D1, $0064(A1)
                asr.l   #$02, D0
                move.l  D0, D1
                swap.w  D0
                move.w  D0, (A1)+
                swap.w  D0
                add.l   D1, D0
                swap.w  D0
                move.w  D0, (A1)+
                move.w  (Level_Frame_Count).w, D1                    ; $FFFFFE04
                lsr.w   #$02, D1
                andi.w  #$003E, D1
                lea     Default_Background_Deform_Delta(PC), A5 ; Offset_0x031820
                adda.w  D1, A5
                moveq   #$07, D1
Offset_0x033334:
                move.w  (A5)+, D2
                add.w   D0, D2
                move.w  D2, (A1)+
                dbra    D1, Offset_0x033334
                rts             
;-------------------------------------------------------------------------------   
Iz_2_Set_In_Deform:                                            ; Offset_0x033340
                move.w  (Screen_Pos_Buffer_Y).w, D0                  ; $FFFFEE84
                subi.w  #$0700, D0
                asr.w   #$02, D0
                addi.w  #$0118, D0
                move.w  D0, (Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
                lea     (Horizontal_Scroll_Table).w, A1              ; $FFFFA800
                move.w  (Screen_Pos_Buffer_X).w, D0                  ; $FFFFEE80
                swap.w  D0
                clr.w   D0
                asr.l   #$01, D0
                move.l  D0, D1
                asr.l   #$03, D1
                swap.w  D0
                move.w  D0, (A1)
                move.w  D0, $0010(A1)
                swap.w  D0
                sub.l   D1, D0
                swap.w  D0
                move.w  D0, $0002(A1)
                move.w  D0, $000E(A1)
                swap.w  D0
                sub.l   D1, D0
                swap.w  D0
                move.w  D0, $0004(A1)
                move.w  D0, $000C(A1)
                swap.w  D0
                sub.l   D1, D0
                swap.w  D0
                move.w  D0, $0006(A1)
                move.w  D0, $000A(A1)
                swap.w  D0
                sub.l   D1, D0
                swap.w  D0
                move.w  D0, (Screen_Pos_Buffer_X_2).w                ; $FFFFEE8C
                move.w  D0, $0008(A1)
                swap.w  D0
                sub.l   D1, D0
                swap.w  D0
                move.w  D0, (Background_Events+$10).w                ; $FFFFEEE2
                rts            
;------------------------------------------------------------------------------- 
Iz_2_Set_Outdoors_Pal:                                         ; Offset_0x0333B0
                lea     (Palette_Row_3_Offset+$02).w, A1             ; $FFFFED62
                bsr.s   Offset_0x0333BA
                lea     (Palette_Row_3_Data_Target+$02).w, A1        ; $FFFFEDE2
Offset_0x0333BA:
                move.l  #$0EEE0EEA, (A1)+
                move.l  #$0EC80EA4, (A1)+
                move.l  #$0C820C60, (A1)+
                move.l  #$0C400E20, (A1)+
                move.l  #$0A000E00, (A1)
                rts                
;-------------------------------------------------------------------------------     
Iz_2_Set_Indoors_Pal:                                          ; Offset_0x0333DA
                lea     (Palette_Row_3_Offset+$02).w, A1             ; $FFFFED62
                bsr.s   Offset_0x0333E4
                lea     (Palette_Row_3_Data_Target+$02).w, A1        ; $FFFFEDE2
Offset_0x0333E4:
                move.l  #$0EE20E24, (A1)+
                move.l  #$0E040C02, (A1)+
                move.l  #$06020400, (A1)+
                move.l  #$02000E20, (A1)+
                move.l  #$0E400840, (A1)+
                move.w  #$0600, (A1)
                rts              
;-------------------------------------------------------------------------------  
Iz_2_Out_Deform_Array:                                         ; Offset_0x033408
                dc.w    $005A, $0026, $8030, $7FFF              
;-------------------------------------------------------------------------------  
Iz_2_In_Deform_Array:                                          ; Offset_0x033410
                dc.w    $01A0, $0040, $0020, $0018, $0040, $0008, $0008, $0018
                dc.w    $7FFF            
;-------------------------------------------------------------------------------   
LBz_1_Events_Init:                                             ; Offset_0x033422
                move.w  $0004(A3), D0
                subi.w  #$0076, D0
                move.w  D0, $0074(A3)
                move.w  D0, $0078(A3)
                move.w  D0, $007C(A3)
                lea     (Horizontal_Scroll_Table+$0148).w, A1        ; $FFFFA948
                moveq   #$0D, D0
Offset_0x03343C:
                clr.l   (A1)+
                dbra    D0, Offset_0x03343C
                jsr     LBz_1_Vertical_Scroll(PC)              ; Offset_0x033512
                lea     (Horizontal_Scroll_Table+$0100).w, A1        ; $FFFFA900
                moveq   #$0B, D0
Offset_0x03344C:
                move.w  (A1)+, D1
                and.w   (Level_Layout_Wrap_Y).w, D1                  ; $FFFFEEAC
                move.w  D1, (A1)+
                dbra    D0, Offset_0x03344C
                cmpi.w  #$3B60, (Screen_Pos_Buffer_X).w              ; $FFFFEE80
                bcs.s   Offset_0x033474
                jsr     (AllocateObject)                     ; Offset_0x011DD8
                bne.s   Offset_0x03346E
                move.l  #Obj_LBz_1_Invisible_Block, (A1)       ; Offset_0x0336A6
Offset_0x03346E:
                move.w  (A3), A5
                jsr     LBz_1_Do_Mod_3(PC)                     ; Offset_0x03364E
Offset_0x033474:
                move.w  (Obj_Player_One+Obj_X).w, D0                 ; $FFFFB010
                move.w  (Obj_Player_One+Obj_Y).w, D1                 ; $FFFFB014
                moveq   #$00, D2
                jsr     LBz_1_Check_Layout_Mod(PC)             ; Offset_0x0335CA
                jsr     Reset_Tile_Offset_Position_Actual(PC)  ; Offset_0x02FEF2
                jmp     Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C  
;------------------------------------------------------------------------------- 
LBz_1_Events_Run:                                              ; Offset_0x03348A
                move.w  (Earthquake_Offset).w, D0                    ; $FFFFEECE
                add.w   D0, (Screen_Pos_Buffer_Y).w                  ; $FFFFEE84
                move.w  (Obj_Player_One+Obj_X).w, D0                 ; $FFFFB010
                move.w  (Obj_Player_One+Obj_Y).w, D1                 ; $FFFFB014
                move.w  (Background_Events).w, D2                    ; $FFFFEED2
                bne.s   Offset_0x0334AC
                jsr     LBz_1_Check_Layout_Mod(PC)             ; Offset_0x0335CA
                tst.w   D3
                bmi.s   Offset_0x0334FE
                jmp     Refresh_Plane_Screen_Direct(PC)        ; Offset_0x02FAE0
Offset_0x0334AC:
                lea     (LBz_1_Layout_Mod_Exit_Range-$04)(PC), A1  ; Offset_0x033712
                adda.w  D2, A1
                cmp.w   (A1)+, D0
                bcs.s   Offset_0x0334BC
                cmp.w   (A1)+, D0
                bhi.s   Offset_0x0334BC
                bra.s   Offset_0x0334FE
Offset_0x0334BC:
                clr.w   (Background_Events).w                        ; $FFFFEED2
                lsr.w   #$01, D2
                jsr     (Offset_0x0334CA-$02)(PC, D2)
                jmp     Refresh_Plane_Screen_Direct(PC)        ; Offset_0x02FAE0  
;-------------------------------------------------------------------------------
Offset_0x0334CA:
                bra.s   LBz_1_Layout_Exit_Mod_1                ; Offset_0x0334D2
                bra.s   LBz_1_Layout_Exit_Mod_2                ; Offset_0x0334DC
                bra.s   LBz_1_Layout_Exit_Mod_3                ; Offset_0x0334E8
                bra.s   LBz_1_Layout_Exit_Mod_4                ; Offset_0x0334F2    
;-------------------------------------------------------------------------------
LBz_1_Layout_Exit_Mod_1:                                       ; Offset_0x0334D2
                move.w  (A3), A5
                lea     $0088(A5), A5
                bra     LBz_1_Do_Mod_1                         ; Offset_0x033688           
;-------------------------------------------------------------------------------
LBz_1_Layout_Exit_Mod_2:                                       ; Offset_0x0334DC
                move.w  $0024(A3), A5
                lea     $008A(A5), A5
                bra     LBz_1_Do_Mod_2                         ; Offset_0x033668   
;-------------------------------------------------------------------------------
LBz_1_Layout_Exit_Mod_3:                                       ; Offset_0x0334E8
                move.w  (A3), A5
                lea     $0098(A5), A5
                bra     LBz_1_Do_Mod_3                         ; Offset_0x03364E   
;-------------------------------------------------------------------------------
LBz_1_Layout_Exit_Mod_4:                                       ; Offset_0x0334F2
                move.w  $0030(A3), A5
                lea     $009A(A5), A5
                bra     LBz_1_Do_Mod_4                         ; Offset_0x033632     
;-------------------------------------------------------------------------------
Offset_0x0334FE:
                jsr     LBz_1_Vertical_Scroll(PC)              ; Offset_0x033512
                lea     LBz_1_Vertical_Scroll_Array(PC), A4    ; Offset_0x0336DE
                lea     (Horizontal_Scroll_Table+$0100).w, A5        ; $FFFFA900
                moveq   #$0F, D6
                moveq   #$0C, D5
                jmp     Draw_Tiles_Vertical(PC)                ; Offset_0x02FC0E     
;------------------------------------------------------------------------------- 
LBz_1_Vertical_Scroll:                                         ; Offset_0x033512
                tst.w   (Foreground_Events_Y_Counter).w              ; $FFFFEEC4
                beq     Offset_0x0335A6
                bpl.s   Offset_0x033536
                move.w  #$0001, (Foreground_Events_Y_Counter).w      ; $FFFFEEC4
                move.w  #$0002, (Special_Vint_Routine).w             ; $FFFFEEA6
                jsr     (AllocateObject)                     ; Offset_0x011DD8
                bne.s   Offset_0x033536
                move.l  #Obj_LBz_1_Invisible_Block, (A1)       ; Offset_0x0336A6
Offset_0x033536:
                lea     (Horizontal_Scroll_Table+$014C).w, A1        ; $FFFFA94C
                lea     LBz_1_Collapse_Scroll_Speed(PC), A5    ; Offset_0x033726
                move.l  $002C(A1), D0
                addi.l  #$00000100, $002C(A1)
                move.w  $0030(A1), D1
                addq.w  #$01, $0030(A1)
                asr.w   #$06, D1
                moveq   #$0A, D2
                moveq   #$09, D3
Offset_0x033558:
                addq.w  #$02, D1
                andi.w  #$000E, D1
                move.w  $00(A5, D1), D4
                ext.l   D4
                lsl.l   #$04, D4
                move.l  (A1), D5
                sub.l   D4, D5
                sub.l   D0, D5
                swap.w  D5
                cmpi.w  #$FD00, D5
                bgt.s   Offset_0x03357A
                move.w  #$FD00, D5
                subq.w  #$01, D2
Offset_0x03357A:
                swap.w  D5
                move.l  D5, (A1)+
                dbra    D3, Offset_0x033558
                tst.w   D2
                bne.s   Offset_0x0335A6
                clr.w   (Earthquake_Flag).w                          ; $FFFFEECC
                clr.w   (Foreground_Events_Y_Counter).w              ; $FFFFEEC4
                move.w  #$0006, (Special_Vint_Routine).w             ; $FFFFEEA6
                move.w  (A3), A5
                jsr     LBz_1_Do_Mod_3(PC)                     ; Offset_0x03364E
                lea     (Horizontal_Scroll_Table+$0148).w, A1        ; $FFFFA948
                moveq   #$0D, D0
Offset_0x0335A0:
                clr.l   (A1)+
                dbra    D0, Offset_0x0335A0
Offset_0x0335A6:
                lea     (Horizontal_Scroll_Table+$0100).w, A1        ; $FFFFA900
                lea     (Horizontal_Scroll_Table+$0130).w, A4        ; $FFFFA930
                lea     (Horizontal_Scroll_Table+$0148).w, A5        ; $FFFFA948
                move.w  (Screen_Pos_Buffer_Y).w, D0                  ; $FFFFEE84
                moveq   #$0B, D1
Offset_0x0335B8:
                move.w  (A5), D2
                add.w   D0, D2
                move.w  D2, (A1)
                move.w  D2, (A4)+
                addq.w  #$04, A1
                addq.w  #$04, A5
                dbra    D1, Offset_0x0335B8
                rts 
;-------------------------------------------------------------------------------  
LBz_1_Check_Layout_Mod:                                        ; Offset_0x0335CA
                lea     LBz_1_Layout_Mod_Range(PC), A1         ; Offset_0x0336F6
                moveq   #$03, D3
Offset_0x0335D0:
                lea     (A1), A5
                cmp.w   (A5)+, D0
                bcs.s   Offset_0x0335F2
                cmp.w   (A5)+, D0
                bhi.s   Offset_0x0335F2
                cmp.w   (A5)+, D1
                bcs.s   Offset_0x0335F2
                cmp.w   (A5)+, D1
                bhi.s   Offset_0x0335F2
                tst.w   D2
                bne.s   Offset_0x0335FC
                cmpi.w  #$1580, D0
                bcs.s   Offset_0x0335FC
                cmpi.w  #$0400, D1
                bcs.s   Offset_0x0335FC
Offset_0x0335F2:
                addq.w  #$08, A1
                addq.w  #$04, D2
                dbra    D3, Offset_0x0335D0
                rts
Offset_0x0335FC:
                addq.w  #$04, D2
                move.w  D2, (Background_Events).w                    ; $FFFFEED2
                lsr.w   #$01, D2
                jmp     (Offset_0x033608-$02)(PC, D2)
;-------------------------------------------------------------------------------
Offset_0x033608:
                bra.s   LBz_1_Layout_Mod_1                     ; Offset_0x033610
                bra.s   LBz_1_Layout_Mod_2                     ; Offset_0x033618
                bra.s   LBz_1_Layout_Mod_3                     ; Offset_0x033622
                bra.s   LBz_1_Layout_Mod_4                     ; Offset_0x03362A   
;-------------------------------------------------------------------------------
LBz_1_Layout_Mod_1:                                            ; Offset_0x033610
                move.w  (A3), A5
                lea     $0080(A5), A5
                bra.s   LBz_1_Do_Mod_1                         ; Offset_0x033688      
;-------------------------------------------------------------------------------
LBz_1_Layout_Mod_2:                                            ; Offset_0x033618
                move.w  $0024(A3), A5
                lea     $0080(A5), A5
                bra.s   LBz_1_Do_Mod_2                         ; Offset_0x033668      
;-------------------------------------------------------------------------------
LBz_1_Layout_Mod_3:                                            ; Offset_0x033622
                move.w  (A3), A5
                lea     $0094(A5), A5
                bra.s   LBz_1_Do_Mod_3                         ; Offset_0x03364E        
;-------------------------------------------------------------------------------
LBz_1_Layout_Mod_4:                                            ; Offset_0x03362A
                move.w  $0030(A3), A5
                lea     $0094(A5), A5
;-------------------------------------------------------------------------------
LBz_1_Do_Mod_4:                                                ; Offset_0x033632                
                move.w  (A3), A1
                lea     $007A(A1), A1
                move.w  -8(A3), D0
                subq.w  #$06, D0
                moveq   #$05, D1
Offset_0x033640:
                move.l  (A5)+, (A1)+
                move.w  (A5)+, (A1)+
                adda.w  D0, A5
                adda.w  D0, A1
                dbra    D1, Offset_0x033640
                rts
;-------------------------------------------------------------------------------  
LBz_1_Do_Mod_3:                                                ; Offset_0x03364E
                move.w  (A3), A1
                lea     $0074(A1), A1
                move.w  -8(A3), D0
                subq.w  #$04, D0
                moveq   #$0B, D1
Offset_0x03365C:
                move.l  (A5)+, (A1)+
                adda.w  D0, A5
                adda.w  D0, A1
                dbra    D1, Offset_0x03365C
                rts
;-------------------------------------------------------------------------------    
LBz_1_Do_Mod_2:                                                ; Offset_0x033668
                move.w  (A3), A1
                lea     $0042(A1), A1
                move.w  -8(A3), D0
                subi.w  #$000A, D0
                moveq   #$0D, D1
Offset_0x033678:
                move.l  (A5)+, (A1)+
                move.l  (A5)+, (A1)+
                move.w  (A5)+, (A1)+
                adda.w  D0, A5
                adda.w  D0, A1
                dbra    D1, Offset_0x033678
                rts
;-------------------------------------------------------------------------------  
LBz_1_Do_Mod_1:                                                ; Offset_0x033688
                move.w  $0008(A3), A1
                lea     $0026(A1), A1
                move.w  -8(A3), D0
                subq.w  #$08, D0
                moveq   #$08, D1
Offset_0x033698:
                move.l  (A5)+, (A1)+
                move.l  (A5)+, (A1)+
                adda.w  D0, A5
                adda.w  D0, A1
                dbra    D1, Offset_0x033698
                rts   
;-------------------------------------------------------------------------------  
Obj_LBz_1_Invisible_Block:                                     ; Offset_0x0336A6 
                include 'data\objects\invblock.asm'
;------------------------------------------------------------------------------- 
LBz_1_Vertical_Scroll_Array:                                   ; Offset_0x0336DE
                dc.w    $3B60, $0010, $0010, $0010, $0010, $0010, $0010, $0010
                dc.w    $0010, $0010, $0010, $7FFF 
;-------------------------------------------------------------------------------  
LBz_1_Layout_Mod_Range:                                        ; Offset_0x0336F6
                dc.w    $13E0, $16A0, $0100, $0580
                dc.w    $2160, $2520, $0000, $0700
                dc.w    $3A60, $3BA0, $0000, $0600
                dc.w    $3DE0, $3FA0, $0000, $0300
;-------------------------------------------------------------------------------  
LBz_1_Layout_Mod_Exit_Range:                                   ; Offset_0x033716
                dc.w    $1376, $170A, $20F6, $258A
                dc.w    $39F6, $3C0A, $3D76, $400A
;-------------------------------------------------------------------------------   
LBz_1_Collapse_Scroll_Speed:                                   ; Offset_0x033726
                dc.w    $01EE, $01F2, $00C7, $01B3, $01B7, $0198, $000E, $0139
;------------------------------------------------------------------------------- 
LBz_1_Events_Init_2:                                           ; Offset_0x033736
                jsr     LBz_1_Deform(PC)                       ; Offset_0x033884
                jsr     Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
                move.w  D2, (Horizontal_Scroll_Table+$0002).w        ; $FFFFA802
                clr.l   (Horizontal_Scroll_Table+$0004).w            ; $FFFFA804
                lea     LBz_1_Draw_Array(PC), A4               ; Offset_0x0338F2
                lea     (Horizontal_Scroll_Table).w, A5              ; $FFFFA800
                jsr     Refresh_Plane_Tile_Deform(PC)          ; Offset_0x02FA9A
                lea     LBz_1_Deform_Array(PC), A4             ; Offset_0x0338F6
                lea     (Horizontal_Scroll_Table+$0008).w, A5        ; $FFFFA808
                jmp     Apply_Deformation(PC)                  ; Offset_0x02FD7C
;------------------------------------------------------------------------------- 
LBz_1_Events_Run_2:                                            ; Offset_0x03375E
                move.w  (Level_Events_Routine_2).w, D0               ; $FFFFEEC2
                jmp     Offset_0x033766(PC, D0) 
;-------------------------------------------------------------------------------  
Offset_0x033766:
                bra     LBz_1_Normal                           ; Offset_0x03376E
                bra     LBz_1_Transition                       ; Offset_0x0337F6 
;-------------------------------------------------------------------------------  
LBz_1_Normal:                                                  ; Offset_0x03376E
                tst.w   (Level_Events_Buffer_5).w                    ; $FFFFEEC6
                beq.s   Offset_0x0337C6
                clr.w   (Level_Events_Buffer_5).w                    ; $FFFFEEC6
                movem.l D7/A0/A2/A3, -(A7)
                lea     (Launch_Base_2_Chunks), A1             ; Offset_0x190A3E
                lea     (M68K_RAM_Start), A2                         ; $FFFF0000
                jsr     (Queue_Kos)          ; Offset_0x0019AE
                lea     (Launch_Base_2_Blocks_2), A1           ; Offset_0x18B6DA
                lea     (Blocks_Mem_Address+$0628).w, A2             ; $FFFF9628
                jsr     (Queue_Kos)          ; Offset_0x0019AE
                lea     (Launch_Base_2_Tiles_2), A1            ; Offset_0x18D03A
                move.w  #$2D60, D2
                jsr     (Queue_Kos_Module)                 ; Offset_0x0018A8
                moveq   #$24, D0
                jsr     (LoadPLC)                              ; Offset_0x0014D0
                moveq   #$25, D0
                jsr     (LoadPLC)                              ; Offset_0x0014D0
                movem.l (A7)+, D7/A0/A2/A3
                addq.w  #$04, (Level_Events_Routine_2).w             ; $FFFFEEC2
Offset_0x0337C6:
                jsr     LBz_1_Deform(PC)                       ; Offset_0x033884
                lea     LBz_1_Draw_Array(PC), A4               ; Offset_0x0338F2
                lea     (Horizontal_Scroll_Table).w, A5              ; $FFFFA800
                moveq   #$20, D6
                moveq   #$02, D5
                jsr     Draw_Background(PC)                    ; Offset_0x02FB74
                lea     LBz_1_Deform_Array(PC), A4             ; Offset_0x0338F6
                lea     (Horizontal_Scroll_Table+$0008).w, A5        ; $FFFFA808
                jsr     Apply_Deformation(PC)                  ; Offset_0x02FD7C
                lea     LBz_1_Vertical_Scroll_Array(PC), A4    ; Offset_0x0336DE
                lea     (Horizontal_Scroll_Table+$012E).w, A5        ; $FFFFA92E
                jsr     Apply_Foreground_Vertical_Scroll(PC)   ; Offset_0x02FEA4
                jmp     Earthquake_Setup(PC)                   ; Offset_0x02FFA4  
;-------------------------------------------------------------------------------   
LBz_1_Transition:                                              ; Offset_0x0337F6
                tst.b   (Kosinski_Modules_Left).w                    ; $FFFFFF60
                bne     Offset_0x033878
                move.w  #LBz_Act_2, (Current_ZoneAndAct).w              ; $0601, $FFFFFE10
                clr.b   (Saved_Level_Flag).w                         ; $FFFFFE30
                clr.b   (Saved_Level_Flag_P2).w                      ; $FFFFFEE0
                clr.b   (Dynamic_Resize_Routine).w                   ; $FFFFEE33
                clr.b   (Object_Pos_Routine).w                       ; $FFFFF76C
                clr.b   (Ring_Pos_Routine).w                         ; $FFFFF710
                clr.b   (Boss_Flag).w                                ; $FFFFF7AA
                clr.l   (Animate_Counters).w                         ; $FFFFF7F0
                clr.w   (Animate_Counters+$04).w                     ; $FFFFF7F4
                movem.l D7/A0/A2/A3, -(A7)
                jsr     (LoadLevelLayout)                    ; Offset_0x01247C
                jsr     (LoadCollisionIndex)                 ; Offset_0x0049B2
                jsr     (Level_InitWaterLevels)                    ; Offset_0x005056
                moveq   #$17, D0
                jsr     (PalLoad_Now)                             ; Offset_0x002FBA
                movem.l (A7)+, D7/A0/A2/A3
                move.w  #$3A00, D0
                moveq   #$00, D1
                sub.w   D0, (Obj_Player_One+Obj_X).w                 ; $FFFFB010
                sub.w   D1, (Obj_Player_One+Obj_Y).w                 ; $FFFFB014
                sub.w   D0, (Obj_Player_Two+Obj_X).w                 ; $FFFFB05A
                sub.w   D1, (Obj_Player_Two+Obj_Y).w                 ; $FFFFB05E
                jsr     Calc_Objects_X_Y_During_Transition(PC) ; Offset_0x02FFE4
                sub.w   D0, (Camera_X).w                             ; $FFFFEE78
                sub.w   D1, (Camera_Y).w                             ; $FFFFEE7C
                sub.w   D0, (Screen_Pos_Buffer_X).w                  ; $FFFFEE80
                sub.w   D1, (Screen_Pos_Buffer_Y).w                  ; $FFFFEE84
                jsr     Reset_Tile_Offset_Position_Actual(PC)  ; Offset_0x02FEF2
                clr.w   (Level_Events_Routine_2).w                   ; $FFFFEEC2
Offset_0x033878:                                     
                lea     LBz_1_Deform_Array(PC), A4             ; Offset_0x0338F6
                lea     (Horizontal_Scroll_Table+$0008).w, A5        ; $FFFFA808
                jmp     Apply_Deformation(PC)                  ; Offset_0x02FD7C
;------------------------------------------------------------------------------- 
LBz_1_Deform:                                                  ; Offset_0x033884
                move.w  (Screen_Pos_Buffer_Y).w, D0                  ; $FFFFEE84
                move.w  (Earthquake_Offset).w, D1                    ; $FFFFEECE
                sub.w   D1, D0
                asr.w   #$04, D0
                add.w   D1, D0
                move.w  D0, (Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
                move.w  (Screen_Pos_Buffer_X).w, D0                  ; $FFFFEE80
                swap.w  D0
                clr.w   D0
                asr.l   #$04, D0
                move.l  D0, D1
                asr.l   #$01, D0
                swap.w  D0
                move.w  D0, (Background_Events+$10).w                ; $FFFFEEE2
                swap.w  D0
                swap.w  D1
                move.w  D1, (Screen_Pos_Buffer_X_2).w                ; $FFFFEE8C
                move.w  D1, (Horizontal_Scroll_Table).w              ; $FFFFA800
                move.w  D1, (Horizontal_Scroll_Table+$0008).w        ; $FFFFA808
                swap.w  D1
                lea     (Horizontal_Scroll_Table+$000A).w, A1        ; $FFFFA80A
                add.l   D0, D1
                add.l   D0, D1
                asr.l   #$02, D0
                moveq   #$03, D2
Offset_0x0338C8:
                swap.w  D1
                move.w  D1, (A1)+
                swap.w  D1
                add.l   D0, D1
                dbra    D2, Offset_0x0338C8
                moveq   #$0A, D0
                add.w   D0, (Background_Events+$10).w                ; $FFFFEEE2
                add.w   D0, (Screen_Pos_Buffer_X_2).w                ; $FFFFEE8C
                add.w   D0, (Horizontal_Scroll_Table).w              ; $FFFFA800
                add.w   D0, (Horizontal_Scroll_Table+$0008).w        ; $FFFFA808
                lea     (Horizontal_Scroll_Table+$000A).w, A1        ; $FFFFA80A
                addq.w  #$04, (A1)+
                subq.w  #$02, (A1)+
                addq.w  #$07, (A1)
                rts
;-------------------------------------------------------------------------------   
LBz_1_Draw_Array:                                              ; Offset_0x0338F2
                dc.w    $00D0, $7FFF 
;------------------------------------------------------------------------------- 
LBz_1_Deform_Array:                                            ; Offset_0x0338F6
                dc.w    $00D0, $0018, $0008, $0008, $7FFF
;------------------------------------------------------------------------------- 
LBz_2_Events_Init:                                             ; Offset_0x033900
                move.w  #$0004, (Level_Events_Routine).w             ; $FFFFEEC0
                bsr.s   LBz_2_Layout_Mod                       ; Offset_0x033936
                jsr     Reset_Tile_Offset_Position_Actual(PC)  ; Offset_0x02FEF2
                jmp     Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C  
;------------------------------------------------------------------------------- 
LBz_2_Events_Run:                                              ; Offset_0x033910
                move.w  (Level_Events_Routine).w, D0                 ; $FFFFEEC0
                jmp     Offset_0x033918(PC, D0) 
;-------------------------------------------------------------------------------
Offset_0x033918:
                bra     LBz_2_From_Transition                  ; Offset_0x033920
                bra     LBz_2_Normal                           ; Offset_0x033956 
;------------------------------------------------------------------------------- 
LBz_2_From_Transition:                                         ; Offset_0x033920
                cmpi.w  #$060A, (Obj_Player_One+Obj_X).w             ; $FFFFB010
                bcs.s   Offset_0x033932
                bsr.s   LBz_2_Layout_Mod                       ; Offset_0x033936
                addq.w  #$04, (Level_Events_Routine).w               ; $FFFFEEC0
                jmp     Refresh_Plane_Screen_Direct(PC)        ; Offset_0x02FAE0
Offset_0x033932:
                jmp     Load_Tiles_As_You_Move(PC)             ; Offset_0x02FB0E   
;------------------------------------------------------------------------------- 
LBz_2_Layout_Mod:                                              ; Offset_0x033936
                move.w  (A3), A5
                lea     $0094(A5), A5
                move.w  (A3), A1
                addq.w  #$06, A1
                move.w  -8(A3), D0
                subq.w  #$06, D0
                moveq   #$05, D1
Offset_0x033948:
                move.l  (A5)+, (A1)+
                move.w  (A5)+, (A1)+
                adda.w  D0, A5
                adda.w  D0, A1
                dbra    D1, Offset_0x033948
                rts  
;------------------------------------------------------------------------------- 
LBz_2_Normal:                                                  ; Offset_0x033956
                jmp     Load_Tiles_As_You_Move(PC)             ; Offset_0x02FB0E    
;-------------------------------------------------------------------------------  
LBz_2_Events_Init_2:                                           ; Offset_0x03395A
                move.w  #$0008, (Level_Events_Routine_2).w           ; $FFFFEEC2
                jsr     LBz_2_Deform(PC)                       ; Offset_0x0339E4
                jsr     Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
                moveq   #$00, D1
                jsr     Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
                lea     LBz_2_Deform_Array(PC), A4             ; Offset_0x033BDC
                lea     (Horizontal_Scroll_Table).w, A5              ; $FFFFA800
                jmp     Apply_Deformation(PC)                  ; Offset_0x02FD7C 
;-------------------------------------------------------------------------------   
LBz_2_Events_Run_2:                                            ; Offset_0x03397A
                move.w  (Level_Events_Routine_2).w, D0               ; $FFFFEEC2
                jmp     Offset_0x033982(PC, D0)  
;-------------------------------------------------------------------------------
Offset_0x033982:
                bra     LBz_2_From_Transition_2                ; Offset_0x03398E
                bra     LBz_2_Refresh                          ; Offset_0x0339AE
                bra     LBz_2_Normal_2                         ; Offset_0x0339C4    
;-------------------------------------------------------------------------------   
LBz_2_From_Transition_2:                                       ; Offset_0x03398E
                jsr     LBz_2_Deform(PC)                       ; Offset_0x0339E4
                jsr     Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
                addi.w  #$00E0, D0
                and.w   (Level_Layout_Wrap_Y).w, D0                  ; $FFFFEEAC
                move.w  D0, (Draw_Delayed_Position).w                ; $FFFFEEC8
                move.w  #$000F, (Draw_Delayed_Position_Rowcount).w   ; $FFFFEECA
                addq.w  #$04, (Level_Events_Routine_2).w             ; $FFFFEEC2
                bra.s   Offset_0x0339B2   
;-------------------------------------------------------------------------------  
LBz_2_Refresh:                                                 ; Offset_0x0339AE
                jsr     LBz_2_Deform(PC)                       ; Offset_0x0339E4
Offset_0x0339B2:
                moveq   #$00, D1
                move.w  (Screen_Pos_Buffer_Y_2).w, D2                ; $FFFFEE90
                jsr     Draw_Plane_Vertical_Bottom_Up(PC)      ; Offset_0x02FCC6
                bpl.s   Offset_0x0339C8
                addq.w  #$04, (Level_Events_Routine_2).w             ; $FFFFEEC2
                bra.s   Offset_0x0339C8 
;-------------------------------------------------------------------------------   
LBz_2_Normal_2:                                                ; Offset_0x0339C4
                jsr     LBz_2_Deform(PC)                       ; Offset_0x0339E4
Offset_0x0339C8:
                lea     (Screen_Pos_Buffer_Y_2).w, A6                ; $FFFFEE90
                lea     (Screen_Pos_Rounded_Y_2).w, A5               ; $FFFFEE96
                moveq   #$00, D1
                moveq   #$20, D6
                jsr     Draw_Tile_Row(PC)                      ; Offset_0x02F8AA
                lea     LBz_2_Deform_Array(PC), A4             ; Offset_0x033BDC
                lea     (Horizontal_Scroll_Table).w, A5              ; $FFFFA800
                jmp     Apply_Deformation(PC)                  ; Offset_0x02FD7C
;------------------------------------------------------------------------------- 
LBz_2_Deform:                                                  ; Offset_0x0339E4
                move.w  (Screen_Pos_Buffer_Y).w, D0                  ; $FFFFEE84
                subi.w  #$05F0, D0
                move.w  D0, D1
                swap.w  D0
                clr.w   D0
                asr.l   #$01, D0
                move.l  D0, D2
                asr.l   #$03, D2
                sub.l   D2, D0
                asr.l   #$02, D2
                sub.l   D2, D0
                swap.w  D0
                move.w  D0, D2
                addi.w  #$02C0, D0
                move.w  D0, (Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
                sub.w   D1, D2
                move.w  D2, (Background_Events+$10).w                ; $FFFFEEE2
                move.w  (Screen_Pos_Buffer_X).w, D0                  ; $FFFFEE80
                swap.w  D0
                clr.w   D0
                tst.w   D2
                beq     Offset_0x033ACE
                move.l  D0, D1
                move.l  D0, D3
                asr.l   #$06, D3
                move.l  D3, D4
                asr.l   #$03, D4
                sub.l   D4, D3
                moveq   #$1F, D4
                cmpi.w  #$FFC0, D2
                bgt.s   Offset_0x033A4E
                lea     (Horizontal_Scroll_Table+$001E).w, A1        ; $FFFFA81E
Offset_0x033A36:
                swap.w  D1
                move.w  D1, (A1)+
                swap.w  D1
                sub.l   D3, D1
                swap.w  D1
                move.w  D1, (A1)+
                swap.w  D1
                sub.l   D3, D1
                dbra    D4, Offset_0x033A36
                bra     Offset_0x033ACE
Offset_0x033A4E:
                lea     (Horizontal_Scroll_Table+$011E).w, A1        ; $FFFFA91E
Offset_0x033A52:
                swap.w  D1
                move.w  D1, -(A1)
                swap.w  D1
                sub.l   D3, D1
                swap.w  D1
                move.w  D1, -(A1)
                swap.w  D1
                sub.l   D3, D1
                dbra    D4, Offset_0x033A52
                cmpi.w  #$0040, D2
                bge.s   Offset_0x033ACE
                lea     (Horizontal_Scroll_Table+$009E).w, A1        ; $FFFFA89E
                lea     (A1), A5
                lea     (Water_Surface_Scroll_Data), A6        ; Offset_0x1C8000
                move.w  D2, D1
                bmi.s   Offset_0x033AA6
                move.w  D1, D3
                neg.w   D3
                addi.w  #$0040, D3
                lsl.w   #$06, D3
                adda.w  D3, A6
                subq.w  #$01, D1
                moveq   #$00, D3
                lsr.w   #$01, D1
                bcc.s   Offset_0x033A98
Offset_0x033A90:
                move.b  (A6)+, D3
                add.w   D3, D3
                move.w  $00(A5, D3), (A1)+
Offset_0x033A98:
                move.b  (A6)+, D3
                add.w   D3, D3
                move.w  $00(A5, D3), (A1)+
                dbra    D1, Offset_0x033A90
                bra.s   Offset_0x033ACE
Offset_0x033AA6:
                move.w  D1, D3
                addi.w  #$0040, D3
                lsl.w   #$06, D3
                adda.w  D3, A6
                neg.w   D1
                subq.w  #$01, D1
                moveq   #$00, D3
                lsr.w   #$01, D1
                bcc.s   Offset_0x033AC2
Offset_0x033ABA:
                move.b  (A6)+, D3
                add.w   D3, D3
                move.w  $00(A5, D3), -(A1)
Offset_0x033AC2:
                move.b  (A6)+, D3
                add.w   D3, D3
                move.w  $00(A5, D3), -(A1)
                dbra    D1, Offset_0x033ABA
Offset_0x033ACE:
                lea     (Horizontal_Scroll_Table+$01E2).w, A1        ; $FFFFA9E2
                move.l  D0, D1
                asr.l   #$01, D1
                move.l  D1, D3
                asr.l   #$03, D3
                swap.w  D1
                move.w  D1, (Screen_Pos_Buffer_X_2).w                ; $FFFFEE8C
                move.w  D1, -(A1)
                swap.w  D1
                sub.l   D3, D1
                swap.w  D1
                move.w  D1, (Background_Events+$12).w                ; $FFFFEEE4
                move.w  D1, -(A1)
                swap.w  D1
                lea     LBz_2_Underwater_Deform_Array(PC), A5  ; Offset_0x033C1A
                sub.l   D3, D1
                moveq   #$04, D4
Offset_0x033AF8:
                sub.l   D3, D1
                swap.w  D1
                move.w  (A5)+, D5
Offset_0x033AFE:
                move.w  D1, -(A1)
                move.w  D1, -(A1)
                move.w  D1, -(A1)
                move.w  D1, -(A1)
                dbra    D5, Offset_0x033AFE
                swap.w  D1
                dbra    D4, Offset_0x033AF8
                moveq   #$3F, D3
                tst.w   D2
                bmi.s   Offset_0x033B1A
                sub.w   D2, D3
                bcs.s   Offset_0x033B28
Offset_0x033B1A:
                swap.w  D1
                lsr.w   #$01, D3
                bcc.s   Offset_0x033B22
Offset_0x033B20:
                move.w  D1, -(A1)
Offset_0x033B22:
                move.w  D1, -(A1)
                dbra    D3, Offset_0x033B20
Offset_0x033B28:
                lea     (Horizontal_Scroll_Table).w, A1              ; $FFFFA800
                lea     LBz_2_Cloud_Deform_Array(PC), A5       ; Offset_0x033C00
                move.l  D0, D1
                asr.l   #$06, D1
                move.l  D1, D3
                move.l  (Horizontal_Scroll_Table+$01E2).w, D4        ; $FFFFA9E2
                addi.l  #$00000E00, (Horizontal_Scroll_Table+$01E2).w ; $FFFFA9E2
                moveq   #$0C, D5
Offset_0x033B44:
                move.w  (A5)+, D6
                add.l   D4, D1
                swap.w  D1
                move.w  D1, $00(A1, D6)
                swap.w  D1
                add.l   D3, D1
                dbra    D5, Offset_0x033B44
                move.l  D0, D1
                asr.l   #$04, D1
                move.l  D1, D3
                asr.l   #$01, D3
                lea     (Horizontal_Scroll_Table+$001A).w, A1        ; $FFFFA81A
                swap.w  D1
                move.w  D1, (A1)+
                swap.w  D1
                add.l   D3, D1
                swap.w  D1
                move.w  D1, (A1)+
                tst.w   D2
                bpl.s   Offset_0x033B84
                moveq   #$3F, D4
                add.w   D2, D4
                bmi.s   Offset_0x033BA2
                cmpi.w  #$0030, D4
                bcs.s   Offset_0x033B96
                subi.w  #$0030, D4
                bra.s   Offset_0x033B86
Offset_0x033B84:
                moveq   #$0F, D4
Offset_0x033B86:
                moveq   #$17, D5
Offset_0x033B88:
                move.w  D1, (A1)+
                move.w  D1, (A1)+
                dbra    D5, Offset_0x033B88
                swap.w  D1
                add.l   D3, D1
                swap.w  D1
Offset_0x033B96:
                lsr.w   #$01, D4
                bcc.s   Offset_0x033B9C
Offset_0x033B9A:
                move.w  D1, (A1)+
Offset_0x033B9C:
                move.w  D1, (A1)+
                dbra    D4, Offset_0x033B9A
Offset_0x033BA2:
                moveq   #$3F, D0
                sub.w   D2, D0
                bmi.s   Offset_0x033BDA
                addi.w  #$0060, D0
                cmpi.w  #$00E0, D0
                bcs.s   Offset_0x033BB6
                move.w  #$00DF, D0
Offset_0x033BB6:
                lea     (Horizontal_Scroll_Table+$01DE).w, A1        ; $FFFFA9DE
                lea     LBz_Water_Bg_Deform_Delta(PC), A5      ; Offset_0x03045C
                move.w  (Level_Frame_Count).w, D1                    ; $FFFFFE04
                asr.w   #$01, D1
                andi.w  #$007E, D1
                adda.w  D1, A5
                lsr.w   #$01, D0
                bcc.s   Offset_0x033BD2
Offset_0x033BCE:
                move.w  -(A5), D3
                add.w   D3, -(A1)
Offset_0x033BD2:
                move.w  -(A5), D3
                add.w   D3, -(A1)
                dbra    D0, Offset_0x033BCE
Offset_0x033BDA:
                rts 
;------------------------------------------------------------------------------- 
LBz_2_Deform_Array:                                            ; Offset_0x033BDC
                dc.w    $00C0, $0040, $0038, $0018, $0028, $0010, $0010, $0010
                dc.w    $0018, $0040, $0020, $0010, $0020, $0070, $0030, $80E0
                dc.w    $0020, $7FFF      
;------------------------------------------------------------------------------- 
LBz_2_Cloud_Deform_Array:                                      ; Offset_0x033C00
                dc.w    $0016, $000E, $000A, $0014, $000C, $0006, $0018, $0010
                dc.w    $0012, $0002, $0008, $0004, $0000   
;------------------------------------------------------------------------------- 
LBz_2_Underwater_Deform_Array:                                 ; Offset_0x033C1A       
                dc.w    $0007, $0001, $0003, $0001, $0007
;-------------------------------------------------------------------------------
MVz_1_Events_Init:                                             ; Offset_0x033C24
MVz_2_Events_Init:                                             ; Offset_0x033C24
                jsr     Reset_Tile_Offset_Position_Actual(PC)  ; Offset_0x02FEF2
                jmp     Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C               
;------------------------------------------------------------------------------- 
MVz_1_Events_Run:                                              ; Offset_0x033C2C
MVz_2_Events_Run:                                              ; Offset_0x033C2C
                jmp     Load_Tiles_As_You_Move(PC)             ; Offset_0x02FB0E               
;------------------------------------------------------------------------------- 
MVz_1_Events_Init_2:                                           ; Offset_0x033C30
MVz_2_Events_Init_2:                                           ; Offset_0x033C30
                jsr     MVz_Deform(PC)                         ; Offset_0x033C5A
                jsr     Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
                moveq   #$00, D1
                jsr     Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
                jmp     Plain_Deformation(PC)                  ; Offset_0x02FD42                
;------------------------------------------------------------------------------- 
MVz_1_Events_Run_2:                                            ; Offset_0x033C42
MVz_2_Events_Run_2:                                            ; Offset_0x033C42
                jsr     MVz_Deform(PC)                         ; Offset_0x033C5A
                lea     (Screen_Pos_Buffer_Y_2).w, A6                ; $FFFFEE90
                lea     (Screen_Pos_Rounded_Y_2).w, A5               ; $FFFFEE96
                moveq   #$00, D1
                moveq   #$20, D6
                jsr     Draw_Tile_Row(PC)                      ; Offset_0x02F8AA
                jmp     Plain_Deformation(PC)                  ; Offset_0x02FD42                
;-------------------------------------------------------------------------------  
MVz_Deform:                                                    ; Offset_0x033C5A
                move.w  (Screen_Pos_Buffer_X).w, D0                  ; $FFFFEE80
                asr.w   #$01, D0
                move.w  D0, (Screen_Pos_Buffer_X_2).w                ; $FFFFEE8C
                move.w  (Screen_Pos_Buffer_Y).w, D0                  ; $FFFFEE84
                asr.w   #$01, D0
                move.w  D0, (Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
                rts
;------------------------------------------------------------------------------- 
LRz_1_Events_Init:                                             ; Offset_0x033C70
LRz_2_Events_Init:                                             ; Offset_0x033C70
                jsr     Reset_Tile_Offset_Position_Actual(PC)  ; Offset_0x02FEF2
                jmp     Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C 
;-------------------------------------------------------------------------------
LRz_1_Events_Run:                                              ; Offset_0x033C78
LRz_2_Events_Run:                                              ; Offset_0x033C78
                move.w  (Earthquake_Offset).w, D0                    ; $FFFFEECE
                add.w   D0, (Screen_Pos_Buffer_Y).w                  ; $FFFFEE84
                jmp     Load_Tiles_As_You_Move(PC)             ; Offset_0x02FB0E 
;-------------------------------------------------------------------------------
LRz_1_Events_Init_2:                                           ; Offset_0x033C84
LRz_2_Events_Init_2:                                           ; Offset_0x033C84
                jsr     LRz_Deform(PC)                         ; Offset_0x033CD4
                jsr     Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
                clr.l   (Horizontal_Scroll_Table).w                  ; $FFFFA800
                move.w  D2, (Horizontal_Scroll_Table+$0006).w        ; $FFFFA806
                clr.l   (Horizontal_Scroll_Table+$0008).w            ; $FFFFA808
                lea     LRz_Deform_Array(PC), A4               ; Offset_0x033D40
                lea     (Horizontal_Scroll_Table).w, A5              ; $FFFFA800
                jsr     Refresh_Plane_Tile_Deform(PC)          ; Offset_0x02FA9A
                lea     LRz_Deform_Array_2(PC), A4             ; Offset_0x033D46
                lea     (Horizontal_Scroll_Table+$000C).w, A5        ; $FFFFA80C
                jmp     Apply_Deformation(PC)                  ; Offset_0x02FD7C 
;-------------------------------------------------------------------------------
LRz_1_Events_Run_2:                                            ; Offset_0x033CB0
LRz_2_Events_Run_2:                                            ; Offset_0x033CB0  
                jsr     LRz_Deform(PC)                         ; Offset_0x033CD4
                lea     LRz_Deform_Array(PC), A4               ; Offset_0x033D40
                lea     (Horizontal_Scroll_Table).w, A5              ; $FFFFA800
                moveq   #$20, D6
                moveq   #$03, D5
                jsr     Draw_Background(PC)                    ; Offset_0x02FB74
                lea     LRz_Deform_Array_2(PC), A4             ; Offset_0x033D46
                lea     (Horizontal_Scroll_Table+$000C).w, A5        ; $FFFFA80C
                jsr     Apply_Deformation(PC)                  ; Offset_0x02FD7C
                jmp     Earthquake_Setup(PC)                   ; Offset_0x02FFA4
;-------------------------------------------------------------------------------
LRz_Deform:                                                    ; Offset_0x033CD4
                move.w  (Screen_Pos_Buffer_Y).w, D0                  ; $FFFFEE84
                move.w  (Earthquake_Offset).w, D1                    ; $FFFFEECE
                sub.w   D1, D0
                asr.w   #$03, D0
                add.w   D1, D0
                move.w  D0, (Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
                move.w  (Screen_Pos_Buffer_X).w, D0                  ; $FFFFEE80
                swap.w  D0
                clr.w   D0
                asr.l   #$03, D0
                move.l  D0, D1
                move.l  D0, D2
                asr.l   #$02, D0
                swap.w  D1
                move.w  D1, (Screen_Pos_Buffer_X_2).w                ; $FFFFEE8C
                move.w  D1, (Horizontal_Scroll_Table+$0004).w        ; $FFFFA804
                swap.w  D1
                sub.l   D0, D1
                swap.w  D1
                move.w  D1, (Background_Events+$10).w                ; $FFFFEEE2
                swap.w  D1
                sub.l   D0, D1
                swap.w  D1
                move.w  D1, (Background_Events+$12).w                ; $FFFFEEE4
                lea     (Horizontal_Scroll_Table+$001C).w, A1        ; $FFFFA81C
                move.l  D2, D1
                moveq   #$07, D3
Offset_0x033D1C:
                swap.w  D1
                move.w  D1, -(A1)
                swap.w  D1
                add.l   D0, D1
                dbra    D3, Offset_0x033D1C
                lea     (Horizontal_Scroll_Table+$001C).w, A1        ; $FFFFA81C
                add.l   D0, D2
                add.l   D0, D0
                moveq   #$04, D3
Offset_0x033D32:
                swap.w  D2
                move.w  D2, (A1)+
                swap.w  D2
                add.l   D0, D2
                dbra    D3, Offset_0x033D32
                rts 
;-------------------------------------------------------------------------------  
LRz_Deform_Array:                                              ; Offset_0x033D40
                dc.w    $00B0, $0100, $7FFF  
;------------------------------------------------------------------------------- 
LRz_Deform_Array_2:                                            ; Offset_0x033D46
                dc.w    $0040, $0020, $0010, $0010, $0010, $0010, $0010, $0100
                dc.w    $0010, $0010, $0010, $0020, $7FFF
;-------------------------------------------------------------------------------
ALz_Events_Init:                                               ; Offset_0x033D60
BPz_Events_Init:                                               ; Offset_0x033D60
DPz_Events_Init:                                               ; Offset_0x033D60
CGz_Events_Init:                                               ; Offset_0x033D60
EMz_Events_Init:                                               ; Offset_0x033D60
                jsr     Update_Camera_P2_2(PC)                 ; Offset_0x02FF2C
                move.w  (Screen_Pos_Buffer_X).w, D0                  ; $FFFFEE80
                move.w  D0, (Level_Events_Buffer_0).w                ; $FFFFEEB4
                move.w  D0, (Level_Events_Buffer_1).w                ; $FFFFEEB6
                move.w  (Screen_Pos_Buffer_X_P2).w, D0               ; $FFFFEE68
                move.w  D0, (Level_Events_Buffer_0_P2).w             ; $FFFFEEB8
                move.w  D0, (Level_Events_Buffer_1_P2).w             ; $FFFFEEBA
                moveq   #$00, D0
                move.b  (Current_Zone).w, D0                             ; $FFFFFE10
                lsl.w   #$04, D0
                lea     (Competition_Screen_Init_Array-$E0)(PC), A1 ; Offset_0x034050
                adda.w  D0, A1
                move.w  (A1)+, (Screen_Wrap_X).w                     ; $FFFFEEA8
                move.w  (A1)+, (Screen_Wrap_Y).w                     ; $FFFFEEAA
                move.w  (A1)+, (Level_Layout_Wrap_Y).w               ; $FFFFEEAC
                move.w  (A1)+, (Level_Layout_Wrap_Row).w             ; $FFFFEEAE
                move.w  (A1)+, (VRAM_Add).w                          ; $FFFFEEB0
                move.w  (A1)+, D0
                move.w  (A1)+, D2
                move.w  (A1)+, D6
                moveq   #$00, D1
                move.w  #$8000, D7
                jmp     Offset_0x02FAC6(PC) 
;-------------------------------------------------------------------------------
ALz_Events_Run:                                                ; Offset_0x033DAE
BPz_Events_Run:                                                ; Offset_0x033DAE
DPz_Events_Run:                                                ; Offset_0x033DAE
CGz_Events_Run_Main:                                           ; Offset_0x033DAE
EMz_Events_Run:                                                ; Offset_0x033DAE
                jsr     Update_Camera_P2_2(PC)                 ; Offset_0x02FF2C
                move.w  (Screen_Wrap_X).w, D2                        ; $FFFFEEA8
                addq.w  #$01, D2
                move.w  D2, D3
                lsr.w   #$01, D2
                lea     (Level_Events_Buffer_0).w, A1                ; $FFFFEEB4
                move.w  (Screen_Pos_Buffer_X).w, D0                  ; $FFFFEE80
                jsr     Adjust_Background_During_Loop(PC)      ; Offset_0x02FF6C
                move.w  (Screen_Pos_Buffer_X_P2).w, D0               ; $FFFFEE68
                jmp     Adjust_Background_During_Loop(PC)      ; Offset_0x02FF6C 
;-------------------------------------------------------------------------------
CGz_Events_Run:                                                ; Offset_0x033DD0
                bsr.s   CGz_Events_Run_Main                    ; Offset_0x033DAE
                move.w  (Screen_Wrap_Y).w, D2                        ; $FFFFEEAA
                addq.w  #$01, D2
                move.w  D2, D3
                lsr.w   #$01, D2
                lea     (Background_Events).w, A1                    ; $FFFFEED2
                move.w  (Screen_Pos_Buffer_Y).w, D0                  ; $FFFFEE84
                jsr     Adjust_Background_During_Loop(PC)      ; Offset_0x02FF6C
                move.w  (Screen_Pos_Buffer_Y_P2).w, D0               ; $FFFFEE6C
                jmp     Adjust_Background_During_Loop(PC)      ; Offset_0x02FF6C
;-------------------------------------------------------------------------------
ALz_Events_Init_2:                                             ; Offset_0x033DF0
                jsr     ALz_Events_Run_2(PC)                   ; Offset_0x033E66
                bra.s   Competition_Event_Init                 ; Offset_0x033E42 
;-------------------------------------------------------------------------------
BPz_Events_Init_2:                                             ; Offset_0x033DF6
                jsr     BPz_Events_Run_2(PC)                   ; Offset_0x033E70
                bra.s   Competition_Event_Init                 ; Offset_0x033E42 
;------------------------------------------------------------------------------- 
DPz_Events_Init_2:                                             ; Offset_0x033DFC
                jsr     DPz_Events_Run_2(PC)                   ; Offset_0x033EBE
                bra.s   Competition_Event_Init                 ; Offset_0x033E42
;-------------------------------------------------------------------------------   
CGz_Events_Init_2:                                             ; Offset_0x033E02
                move.w  (Screen_Pos_Buffer_Y).w, D0                  ; $FFFFEE84
                move.w  D0, (Background_Events).w                    ; $FFFFEED2
                move.w  D0, (Background_Events+$02).w                ; $FFFFEED4
                move.w  (Screen_Pos_Buffer_Y_P2).w, D0               ; $FFFFEE6C
                move.w  D0, (Background_Events+$04).w                ; $FFFFEED6
                move.w  D0, (Background_Events+$06).w                ; $FFFFEED8
                move.w  #$0005, (Background_Events+$0A).w            ; $FFFFEEDC
                move.w  (Background_Events+$0A).w, D0                ; $FFFFEEDC
                addq.w  #$01, D0
                lsl.w   #$08, D0
                subi.w  #$0070, D0
                move.l  #$00900000, D1
                divu.w  D0, D1
                move.w  D1, (Background_Events+$08).w                ; $FFFFEEDA
                jsr     CGz_Events_Run_2(PC)                   ; Offset_0x033E7A
                bra.s   Competition_Event_Init                 ; Offset_0x033E42
;-------------------------------------------------------------------------------
EMz_Events_Init_2:                                             ; Offset_0x033E3E
                jsr     EMz_Events_Run_2(PC)                   ; Offset_0x033E84
;-------------------------------------------------------------------------------                
Competition_Event_Init:                                        ; Offset_0x033E42
                move.l  (Vertical_Scroll_Value_P2).w, (Vertical_Scroll_Value_P2_2).w ; $FFFFF61E, $FFFFEE3A
                moveq   #$00, D0
                move.b  (Current_Zone).w, D0                             ; $FFFFFE10
                lsl.w   #$04, D0
                lea     (Competition_Screen_Init_Array-$D4)(PC), A1 ; Offset_0x03405C
                adda.w  D0, A1
                move.w  (A1)+, D2
                move.w  (A1)+, D6
                moveq   #$00, D0
                moveq   #$00, D1
                move.w  #$A000, D7
                jmp     Offset_0x02FAC6(PC)  
;------------------------------------------------------------------------------- 
ALz_Events_Run_2:                                              ; Offset_0x033E66
                jsr     ALz_Deform(PC)                         ; Offset_0x033EF8
                lea     ALz_Deform_Array(PC), A4               ; Offset_0x034180
                bra.s   Offset_0x033E8C
;-------------------------------------------------------------------------------
BPz_Events_Run_2:                                              ; Offset_0x033E70
                jsr     BPz_Deform(PC)                         ; Offset_0x033FB6
                lea     BPz_Deform_Array(PC), A4               ; Offset_0x034196
                bra.s   Offset_0x033E8C 
;-------------------------------------------------------------------------------
CGz_Events_Run_2:                                              ; Offset_0x033E7A
                jsr     CGz_Deform(PC)                         ; Offset_0x03404C
                lea     CGz_Deform_Array(PC), A4               ; Offset_0x0341A4
                bra.s   Offset_0x033E8C      
;-------------------------------------------------------------------------------
EMz_Events_Run_2:                                              ; Offset_0x033E84
                jsr     EMz_Deform(PC)                         ; Offset_0x0340A8
                lea     EMz_Deform_Array(PC), A4               ; Offset_0x0341AE
Offset_0x033E8C:
                lea     (Horizontal_Scroll_Buffer).w, A1             ; $FFFFE000
                move.l  A4, A6
                lea     (Horizontal_Scroll_Table).w, A5              ; $FFFFA800
                move.w  (Screen_Pos_Buffer_Y_2).w, D0                ; $FFFFEE90
                move.w  (Screen_Pos_Buffer_X).w, D3                  ; $FFFFEE80
                moveq   #$6B, D1
                jsr     Offset_0x02FD8C(PC)
                move.l  A6, A4
                lea     (Horizontal_Scroll_Table+$0100).w, A5        ; $FFFFA900
                move.w  (Screen_Pos_Buffer_Y_P2_2).w, D0             ; $FFFFEE74
                subq.w  #$04, D0
                move.w  (Screen_Pos_Buffer_X_P2).w, D3               ; $FFFFEE68
                moveq   #$73, D1
                jsr     Offset_0x02FD8C(PC)
                jmp     Update_Vertical_Scroll_Value_P2(PC)    ; Offset_0x02FF3A
;-------------------------------------------------------------------------------
DPz_Events_Run_2:                                              ; Offset_0x033EBE
                jsr     DPz_Deform(PC)                         ; Offset_0x034004
                lea     (Horizontal_Scroll_Buffer).w, A1             ; $FFFFE000
                move.w  (Screen_Pos_Buffer_X).w, D0                  ; $FFFFEE80
                move.w  (Screen_Pos_Buffer_X_2).w, D1                ; $FFFFEE8C
                moveq   #$1A, D2
                bsr.s   Offset_0x033EE2
                move.w  (Screen_Pos_Buffer_X_P2).w, D0               ; $FFFFEE68
                move.w  (Screen_Pos_Buffer_X_P2_2).w, D1             ; $FFFFEE70
                moveq   #$1C, D2
                bsr.s   Offset_0x033EE2
                jmp     Update_Vertical_Scroll_Value_P2(PC)    ; Offset_0x02FF3A
Offset_0x033EE2:
                neg.w   D0
                swap.w  D0
                neg.w   D1
                move.w  D1, D0
Offset_0x033EEA:
                move.l  D0, (A1)+
                move.l  D0, (A1)+
                move.l  D0, (A1)+
                move.l  D0, (A1)+
                dbra    D2, Offset_0x033EEA
                rts  
;-------------------------------------------------------------------------------
ALz_Deform:                                                    ; Offset_0x033EF8
                move.w  (Screen_Pos_Buffer_Y).w, D0                  ; $FFFFEE84
                bsr.s   Offset_0x033F30
                move.w  D0, (Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
                move.w  (Screen_Pos_Buffer_Y_P2).w, D0               ; $FFFFEE6C
                bsr.s   Offset_0x033F30
                move.w  D0, (Screen_Pos_Buffer_Y_P2_2).w             ; $FFFFEE74
                addq.w  #$03, (Background_Events).w                  ; $FFFFEED2
                addi.l  #$00001000, (Background_Events+$02).w        ; $FFFFEED4
                lea     Default_Background_Deform_Delta(PC), A4 ; Offset_0x031820
                lea     (Horizontal_Scroll_Table).w, A1              ; $FFFFA800
                move.w  (Level_Events_Buffer_1).w, D0                ; $FFFFEEB6
                bsr.s   Offset_0x033F46
                lea     (Horizontal_Scroll_Table+$0100).w, A1        ; $FFFFA900
                move.w  (Level_Events_Buffer_1_P2).w, D0             ; $FFFFEEBA
                bra.s   Offset_0x033F46
Offset_0x033F30:
                subi.w  #$0148, D0
                swap.w  D0
                clr.w   D0
                move.l  D0, D1
                asr.l   #$02, D1
                sub.l   D1, D0
                swap.w  D0
                addi.w  #$0048, D0
                rts
Offset_0x033F46:
                swap.w  D0
                clr.w   D0
                asr.l   #$01, D0
                move.l  D0, $0090(A1)
                asr.l   #$03, D0
                lea     $000C(A1), A5
                move.l  D0, D1
                asr.l   #$02, D1
                move.l  D1, D2
                move.l  (Background_Events+$02).w, D3                ; $FFFFEED4
                moveq   #$05, D4
Offset_0x033F62:
                add.l   D3, D1
                swap.w  D1
                move.w  D1, -(A5)
                swap.w  D1
                add.l   D2, D1
                dbra    D4, Offset_0x033F62
                movem.w (A5), D1-D6
                move.w  D2, (A5)+
                move.w  D6, (A5)+
                move.w  D1, (A5)+
                move.w  D4, (A5)+
                move.w  D3, (A5)+
                move.w  D5, (A5)
                lea     $000C(A1), A5
                move.l  D0, D1
                move.l  D1, D2
                asr.l   #$01, D2
                moveq   #$02, D3
Offset_0x033F8C:
                swap.w  D1
                move.w  D1, (A5)+
                swap.w  D1
                add.l   D2, D1
                dbra    D3, Offset_0x033F8C
                move.w  (Background_Events).w, D1                    ; $FFFFEED2
                lsr.w   #$03, D1
                andi.w  #$003E, D1
                lea     $00(A4, D1), A6
                swap.w  D0
                moveq   #$3E, D1
Offset_0x033FAA:
                move.w  (A6)+, D2
                add.w   D0, D2
                move.w  D2, (A5)+
                dbra    D1, Offset_0x033FAA
                rts  
;-------------------------------------------------------------------------------  
BPz_Deform:                                                    ; Offset_0x033FB6
                move.w  (Screen_Pos_Buffer_Y).w, D0                  ; $FFFFEE84
                bsr.s   Offset_0x033FDE
                move.w  D0, (Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
                move.w  (Screen_Pos_Buffer_Y_P2).w, D0               ; $FFFFEE6C
                bsr.s   Offset_0x033FDE
                move.w  D0, (Screen_Pos_Buffer_Y_P2_2).w             ; $FFFFEE74
                lea     (Horizontal_Scroll_Table+$000E).w, A1        ; $FFFFA80E
                move.w  (Level_Events_Buffer_1).w, D0                ; $FFFFEEB6
                bsr.s   Offset_0x033FEA
                lea     (Horizontal_Scroll_Table+$010E).w, A1        ; $FFFFA90E
                move.w  (Level_Events_Buffer_1_P2).w, D0             ; $FFFFEEBA
                bsr.s   Offset_0x033FEA
Offset_0x033FDE:
                subi.w  #$02C8, D0
                asr.w   #$01, D0
                addi.w  #$0090, D0
                rts
Offset_0x033FEA:
                swap.w  D0
                clr.w   D0
                asr.l   #$01, D0
                move.l  D0, D1
                asr.l   #$03, D1
                moveq   #$06, D2
Offset_0x033FF6:
                swap.w  D0
                move.w  D0, -(A1)
                swap.w  D0
                sub.l   D1, D0
                dbra    D2, Offset_0x033FF6
                rts  
;------------------------------------------------------------------------------- 
DPz_Deform:                                                    ; Offset_0x034004
                move.w  (Screen_Pos_Buffer_Y).w, D0                  ; $FFFFEE84
                bsr.s   Offset_0x03403A
                move.w  D0, (Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
                move.w  (Screen_Pos_Buffer_Y_P2).w, D0               ; $FFFFEE6C
                bsr.s   Offset_0x03403A
                addi.w  #$0080, D0
                move.w  D0, (Screen_Pos_Buffer_Y_P2_2).w             ; $FFFFEE74
                move.w  (Level_Events_Buffer_1).w, D0                ; $FFFFEEB6
                bsr.s   Offset_0x034044
                move.w  D0, (Screen_Pos_Buffer_X_2).w                ; $FFFFEE8C
                move.w  D1, (Background_Events+$10).w                ; $FFFFEEE2
                move.w  (Level_Events_Buffer_1_P2).w, D0             ; $FFFFEEBA
                bsr.s   Offset_0x034044
                move.w  D0, (Screen_Pos_Buffer_X_P2_2).w             ; $FFFFEE70
                move.w  D1, (Background_Events+$12).w                ; $FFFFEEE4
                rts
Offset_0x03403A:
                subi.w  #$0148, D0
                asr.w   #$04, D0
                addq.w  #$08, D0
                rts
Offset_0x034044:
                asr.w   #$01, D0
                move.w  D0, D1
                asr.w   #$02, D1
                rts  
;------------------------------------------------------------------------------- 
CGz_Deform:                                                    ; Offset_0x03404C
                move.w  (Background_Events+$02).w, D0                ; $FFFFEED4
                bsr.s   Offset_0x034074
                move.w  D0, (Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
                move.w  (Background_Events+$06).w, D0                ; $FFFFEED8
                bsr.s   Offset_0x034074
                move.w  D0, (Screen_Pos_Buffer_Y_P2_2).w             ; $FFFFEE74
                lea     (Horizontal_Scroll_Table+$000A).w, A1        ; $FFFFA80A
                move.w  (Level_Events_Buffer_1).w, D0                ; $FFFFEEB6
                bsr.s   Offset_0x034084
                lea     (Horizontal_Scroll_Table+$010A).w, A1        ; $FFFFA90A
                move.w  (Level_Events_Buffer_1_P2).w, D0             ; $FFFFEEBA
                bsr.s   Offset_0x034084
Offset_0x034074:
                bmi.s   Offset_0x034080
                move.w  (Background_Events+$08).w, D1                ; $FFFFEEDA
                mulu.w  D1, D0
                swap.w  D0
                rts
Offset_0x034080:
                moveq   #$00, D0
                rts
Offset_0x034084:
                swap.w  D0
                clr.w   D0
                asr.l   #$01, D0
                move.l  D0, D1
                asr.l   #$02, D1
                moveq   #$03, D2
Offset_0x034090:
                swap.w  D0
                move.w  D0, -(A1)
                swap.w  D0
                sub.l   D1, D0
                dbra    D2, Offset_0x034090
                asr.l   #$02, D1
                swap.w  D1
                addi.w  #$0100, D1
                move.w  D1, -(A1)
                rts  
;------------------------------------------------------------------------------- 
EMz_Deform:                                                    ; Offset_0x0340A8
                move.w  (Screen_Pos_Buffer_Y).w, D0                  ; $FFFFEE84
                bsr.s   Offset_0x0340D0
                move.w  D0, (Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
                move.w  (Screen_Pos_Buffer_Y_P2).w, D0               ; $FFFFEE6C
                bsr.s   Offset_0x0340D0
                move.w  D0, (Screen_Pos_Buffer_Y_P2_2).w             ; $FFFFEE74
                lea     (Horizontal_Scroll_Table).w, A1              ; $FFFFA800
                move.w  (Level_Events_Buffer_1).w, D0                ; $FFFFEEB6
                bsr.s   Offset_0x0340E6
                lea     (Horizontal_Scroll_Table+$0100).w, A1        ; $FFFFA900
                move.w  (Level_Events_Buffer_1_P2).w, D0             ; $FFFFEEBA
                bsr.s   Offset_0x0340E6
Offset_0x0340D0:
                subi.w  #$0148, D0
                swap.w  D0
                clr.w   D0
                move.l  D0, D1
                asr.l   #$02, D1
                sub.l   D1, D0
                swap.w  D0
                addi.w  #$0048, D0
                rts
Offset_0x0340E6:
                swap.w  D0
                clr.w   D0
                asr.l   #$03, D0
                move.l  D0, D1
                swap.w  D0
                move.w  D0, $000E(A1)
                swap.w  D0
                add.l   D1, D0
                swap.w  D0
                move.w  D0, $000C(A1)
                move.w  D0, $0010(A1)
                swap.w  D0
                add.l   D1, D0
                swap.w  D0
                move.w  D0, $0006(A1)
                move.w  D0, $000A(A1)
                move.w  D0, $0012(A1)
                swap.w  D0
                add.l   D1, D0
                swap.w  D0
                move.w  D0, (A1)
                move.w  D0, $0004(A1)
                move.w  D0, $0008(A1)
                swap.w  D0
                add.l   D1, D0
                swap.w  D0
                move.w  D0, $0002(A1)
                rts          
;-------------------------------------------------------------------------------
Competition_Screen_Init_Array:                                 ; Offset_0x034130
                dc.w    $03FF, $01FF, $01F0, $000C, $0100, $0100, $000F, $0040
                dc.w    $01FF, $03FF, $03F0, $001C, $0080, $0200, $001F, $0020
                dc.w    $03FF, $01FF, $01F0, $000C, $0100, $0100, $000F, $0040
                dc.w    $03FF, $00FF, $00F0, $0004, $0100, $0100, $000F, $0040
                dc.w    $03FF, $01FF, $01F0, $000C, $0100, $0100, $000F, $0040 
;-------------------------------------------------------------------------------
ALz_Deform_Array:                                              ; Offset_0x034180                
                dc.w    $0018, $0008, $0008, $0008, $0008, $0008, $002E, $0006
                dc.w    $000D, $803F, $7FFF 
;-------------------------------------------------------------------------------
BPz_Deform_Array:                                              ; Offset_0x034196
                dc.w    $0088, $0016, $000A, $0028, $0010, $0008, $7FFF         
;-------------------------------------------------------------------------------
CGz_Deform_Array:                                              ; Offset_0x0341A4
                dc.w    $0050, $0008, $0010, $0010, $7FFF                       
;------------------------------------------------------------------------------- 
EMz_Deform_Array:                                              ; Offset_0x0341AE
                dc.w    $0010, $0010, $0010, $0010, $0008, $000C, $0024, $0038
                dc.w    $0020, $7FFF 
;-------------------------------------------------------------------------------
FBz_1_Events_Init:                                             ; Offset_0x0341C2
FBz_2_Events_Init:                                             ; Offset_0x0341C2
Sz_1_Events_Init:                                              ; Offset_0x0341C2
Sz_2_Events_Init:                                              ; Offset_0x0341C2
SSz_1_Events_Init:                                             ; Offset_0x0341C2
SSz_2_Events_Init;                                             ; Offset_0x0341C2
DEz_1_Events_Init;                                             ; Offset_0x0341C2
DEz_2_Events_Init;                                             ; Offset_0x0341C2
TDz_1_Events_Init;                                             ; Offset_0x0341C2
TDz_2_Events_Init;                                             ; Offset_0x0341C2
End_Seq_Events_Init:                                           ; Offset_0x0341C2
GM_BS_Events_Init:                                             ; Offset_0x0341C2
GS_BS_Events_Init:                                             ; Offset_0x0341C2
SM_BS_Events_Init:                                             ; Offset_0x0341C2
LRz_Boss_Events_Init:                                          ; Offset_0x0341C2
HPz_Events_Init:                                               ; Offset_0x0341C2
DEz_Final_Boss_Events_Init:                                    ; Offset_0x0341C2
HPz_Portal_Events_Init:                                        ; Offset_0x0341C2
                jsr     Reset_Tile_Offset_Position_Actual(PC)  ; Offset_0x02FEF2
                jmp     Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C 
;------------------------------------------------------------------------------- 
FBz_1_Events_Run:                                              ; Offset_0x0341CA 
FBz_2_Events_Run:                                              ; Offset_0x0341CA
Sz_1_Events_Run:                                               ; Offset_0x0341CA
Sz_2_Events_Run:                                               ; Offset_0x0341CA
SSz_1_Events_Run;                                              ; Offset_0x0341CA
SSz_2_Events_Run;                                              ; Offset_0x0341CA
DEz_1_Events_Run;                                              ; Offset_0x0341CA
DEz_2_Events_Run;                                              ; Offset_0x0341CA
TDz_1_Events_Run:                                              ; Offset_0x0341CA
TDz_2_Events_Run:                                              ; Offset_0x0341CA
End_Seq_Events_Run:                                            ; Offset_0x0341CA
GM_BS_Events_Run:                                              ; Offset_0x0341CA
GS_BS_Events_Run:                                              ; Offset_0x0341CA
SM_BS_Events_Run:                                              ; Offset_0x0341CA
LRz_Boss_Events_Run:                                           ; Offset_0x0341CA
HPz_Events_Run:                                                ; Offset_0x0341CA
DEz_Final_Boss_Events_Run:                                     ; Offset_0x0341CA
HPz_Portal_Events_Run:                                         ; Offset_0x0341CA
                jmp     Load_Tiles_As_You_Move(PC)             ; Offset_0x02FB0E
;------------------------------------------------------------------------------- 
FBz_1_Events_Init_2:                                           ; Offset_0x0341CE
FBz_2_Events_Init_2:                                           ; Offset_0x0341CE
Sz_1_Events_Init_2:                                            ; Offset_0x0341CE  
Sz_2_Events_Init_2:                                            ; Offset_0x0341CE
SSz_1_Events_Init_2;                                           ; Offset_0x0341CE
SSz_2_Events_Init_2;                                           ; Offset_0x0341CE 
DEz_1_Events_Init_2;                                           ; Offset_0x0341CE
DEz_2_Events_Init_2;                                           ; Offset_0x0341CE                
TDz_1_Events_Init_2;                                           ; Offset_0x0341CE
TDz_2_Events_Init_2;                                           ; Offset_0x0341CE
End_Seq_Events_Init_2:                                         ; Offset_0x0341CE
GM_BS_Events_Init_2:                                           ; Offset_0x0341CE 
GS_BS_Events_Init_2:                                           ; Offset_0x0341CE
SM_BS_Events_Init_2:                                           ; Offset_0x0341CE
LRz_Boss_Events_Init_2:                                        ; Offset_0x0341CE
HPz_Events_Init_2:                                             ; Offset_0x0341CE
DEz_Final_Boss_Events_Init_2:                                  ; Offset_0x0341CE
HPz_Portal_Events_Init_2:                                      ; Offset_0x0341CE  
                jsr     Default_Deform(PC)                     ; Offset_0x0341EA
                jsr     Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
                jsr     Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
                jmp     Plain_Deformation(PC)                  ; Offset_0x02FD42 
;------------------------------------------------------------------------------- 
FBz_1_Events_Run_2:                                            ; Offset_0x0341DE
FBz_2_Events_Run_2:                                            ; Offset_0x0341DE
Sz_1_Events_Run_2:                                             ; Offset_0x0341DE
Sz_2_Events_Run_2:                                             ; Offset_0x0341DE
SSz_1_Events_Run_2;                                            ; Offset_0x0341DE
SSz_2_Events_Run_2;                                            ; Offset_0x0341DE
DEz_1_Events_Run_2;                                            ; Offset_0x0341DE 
DEz_2_Events_Run_2;                                            ; Offset_0x0341DE
TDz_1_Events_Run_2:                                            ; Offset_0x0341DE
TDz_2_Events_Run_2:                                            ; Offset_0x0341DE
End_Seq_Events_Run_2:                                          ; Offset_0x0341DE
GM_BS_Events_Run_2:                                            ; Offset_0x0341DE
GS_BS_Events_Run_2:                                            ; Offset_0x0341DE               
SM_BS_Events_Run_2:                                            ; Offset_0x0341DE
LRz_Boss_Events_Run_2:                                         ; Offset_0x0341DE
HPz_Events_Run_2:                                              ; Offset_0x0341DE
DEz_Final_Boss_Events_Run_2:                                   ; Offset_0x0341DE
HPz_Portal_Events_Run_2:                                       ; Offset_0x0341DE 
                jsr     Default_Deform(PC)                     ; Offset_0x0341EA
                jsr     Load_Tiles_As_You_Move_2(PC)           ; Offset_0x02FB32
                jmp     Plain_Deformation(PC)                  ; Offset_0x02FD42
;-------------------------------------------------------------------------------                  
Default_Deform:                                                ; Offset_0x0341EA
                move.w  (Screen_Pos_Buffer_X).w, D0                  ; $FFFFEE80
                asr.w   #$03, D0
                move.w  D0, (Screen_Pos_Buffer_X_2).w                ; $FFFFEE8C
                move.w  (Screen_Pos_Buffer_Y).w, D0                  ; $FFFFEE84
                asr.w   #$03, D0
                move.w  D0, (Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
                rts        
;===============================================================================
; Interrup��o Trap 15
; ->>>
;===============================================================================  
Trap_0x0F:                                                     ; Offset_0x034200
                move.l  Trap_Routines_List(PC, D6), A6         ; Offset_0x034220
                jsr     (A6)
                nop
                nop
                move    SR, D5
                move.w  (A7), D6
                andi.w  #$001F, D5
                andi.w  #$FFE0, D6
                or.w    D5, D6
                move.w  D6, (A7)
                nop
                nop
                rte  
;-------------------------------------------------------------------------------                
Trap_Routines_List:                                            ; Offset_0x034220
                dc.l    Hit_Boss_Flash                         ; Offset_0x04297A
                dc.l    Set_Boss_Flag_Timed                    ; Offset_0x042968
                dc.l    Inc_Level_Gradual_Max_X                ; Offset_0x042564
                dc.l    Add_To_Response_List_And_Display       ; Offset_0x042450
                dc.l    Add_To_Response_List_And_Display       ; Offset_0x042450
                dc.l    Check_Player_Collision                 ; Offset_0x0430D4
                dc.l    Delete_Sprite_Check_X                  ; Offset_0x042A58
                dc.l    Delete_Sprite_Check_X_2                ; Offset_0x042A8A
                dc.l    Delete_Sprite_Check_X_3                ; Offset_0x042ABC
                dc.l    Delete_Sprite_Check_X_Y                ; Offset_0x042AD0
                dc.l    Delete_Sprite_Clear_Respaw_Flag_Check_X  ; Offset_0x042B3C
                dc.l    Delete_Sprite_Clear_Respaw_Flag_Check_X_2 ; Offset_0x042B5C
                dc.l    Delete_Sprite_Clear_Respaw_Flag_Check_X_3 ; Offset_0x042B7C
                dc.l    Delete_Sprite_Clear_Respaw_Flag_Check_X_Y ; Offset_0x042B96
                dc.l    Delete_Sprite_Slotted_Check_X          ; Offset_0x042BCA
                dc.l    Delete_Slotted_Check_X                 ; Offset_0x042C06
                dc.l    Check_Delete_Touch_Slotted             ; Offset_0x042C1E
                dc.l    Check_Delete_Touch_Slotted_2           ; Offset_0x042C4A
                dc.l    Change_Flip_X                          ; Offset_0x042678
                dc.l    Change_Flip_X_With_Velocity            ; Offset_0x04268A
                dc.l    Check_Left_Right_Controller_Shake      ; Offset_0x04309C
                dc.l    Child_Display_Or_Delete                ; Offset_0x04245C
                dc.l    Child_Display_Or_Delete_2              ; Offset_0x0424A8
                dc.l    Child_Display_Touch_Or_Delete          ; Offset_0x042472
                dc.l    Child_Display_Touch_Or_Delete_2        ; Offset_0x0424BE
                dc.l    Child_Display_Or_Delete_Remember       ; Offset_0x04248E
                dc.l    Displace_Player_Offset                 ; Offset_0x04315A
                dc.l    Child_Display_Or_Flicker_Move          ; Offset_0x0424E2
                dc.l    Child_Display_Or_Flicker_Move_2        ; Offset_0x04250E
                dc.l    Child_Display_Touch_Or_Flicker_Move    ; Offset_0x042520
                dc.l    Child_Display_Touch_Or_Flicker_Move_2  ; Offset_0x042538
                dc.l    Find_Player                            ; Offset_0x042634
                dc.l    Find_Other_Object                      ; Offset_0x04269E
                dc.l    Move_Sprite_Circular_Simple            ; Offset_0x0426E2
                dc.l    Move_Sprite_Circular_Simple_Offset     ; Offset_0x04270A
                dc.l    Move_Sprite_At_Angle_Lookup            ; Offset_0x042742
                dc.l    Run_Object_Wait_Timer_A0               ; Offset_0x0423D2
                dc.l    Run_Palette_Rotation_Script            ; Offset_0x043196
                dc.l    Run_Object_Hit_Floor_D3_A0             ; Offset_0x0423F8
                dc.l    Run_Object_Hit_Floor_A0                ; Offset_0x0423E0
                dc.l    Obj_Fade_Selected_From_Black           ; Offset_0x042EE8
                dc.l    Delete_Sprite_Clear_Respaw_Flag        ; Offset_0x042A70
                dc.l    Run_Object_Hit_Wall_Right_A0           ; Offset_0x042424
                dc.l    Run_Object_Hit_Wall_Left_A0            ; Offset_0x04243A
                dc.l    Object_Settings_Slotted                ; Offset_0x04298C
                dc.l    Object_Settings                        ; Offset_0x041D72
                dc.l    Object_Settings_2                      ; Offset_0x041D76
                dc.l    Object_Settings_3                      ; Offset_0x041D7A
                dc.l    Swing_Left_And_Right                   ; Offset_0x042372
                dc.l    Chase_Object                           ; Offset_0x042E6C
                dc.l    Chase_Object_X_Only                    ; Offset_0x042EC4
                dc.l    Refresh_Child_Position                 ; Offset_0x042016
                dc.l    Refresh_Child_Position_Adjusted        ; Offset_0x04203C
                dc.l    Find_Player_Eight_Way                  ; Offset_0x042DC2
                dc.l    Animate_Raw_Get_Faster                 ; Offset_0x042248
                dc.l    Animate_Raw_Get_Faster_A1              ; Offset_0x04224C
                dc.l    Animate_Raw_Get_Slower                 ; Offset_0x0422C8
                dc.l    Animate_Raw_Get_Slower_A1              ; Offset_0x0422CC
                dc.l    Swing_Up_And_Down_Animate_Raw_Wait     ; Offset_0x042F78
                dc.l    Swing_Up_And_Down_Wait                 ; Offset_0x042FD8
                dc.l    Animate_Raw                            ; Offset_0x04208E
                dc.l    Animate_Raw_A1                         ; Offset_0x042092
                dc.l    Animate_Raw_Adjust_Flip_X              ; Offset_0x0420F2
                dc.l    Animate_Raw_Adjust_Flip_X_A1           ; Offset_0x0420F6
                dc.l    Animate_Raw_Adjust_Flip_Y              ; Offset_0x042126
                dc.l    Animate_Raw_Adjust_Flip_Y_A1           ; Offset_0x04212A
                dc.l    Animate_Raw_Wait                       ; Offset_0x042F82
                dc.l    Swing_Up_And_Down                      ; Offset_0x04232E
                dc.l    Swing_Up_And_Down_Count                ; Offset_0x0423B6
                dc.l    Load_Child_Object_A2                   ; Offset_0x041D9A
                dc.l    Load_Child_Object_Complex_A2           ; Offset_0x041DEA
                dc.l    Load_Child_Object_Repeat_A2            ; Offset_0x041E4E
                dc.l    Load_Child_Object_Link_List_Repeat_A2  ; Offset_0x041EA0
                dc.l    Load_Child_Object_Complex_Adjusted_A2  ; Offset_0x041EE0
                dc.l    Load_Child_Object_Simple_A2            ; Offset_0x041F5A
                dc.l    Set_Indexed_Velocity                   ; Offset_0x042D5A
                dc.l    Set_Indexed_Velocity_D0                ; Offset_0x042D64
                dc.l    Pal_Load_Line_1                        ; Offset_0x04314C
                dc.l    Enemy_Defeat_Score                     ; Offset_0x043018
                dc.l    Go_Delete_Object_A0                    ; Offset_0x042D3E
                dc.l    Go_Delete_Object_A0_2                  ; Offset_0x042D4C
                dc.l    Run_Flicker_Move                       ; Offset_0x0424F4
                dc.l    Load_Dynamic_PLC_A2                    ; Offset_0x042A0A
                dc.l    Set_Velocity_X_Track_Player_One        ; Offset_0x042E4C
                dc.l    Move_Sprite_Angle_X_Lookup_Offset      ; Offset_0x04282C
                dc.l    Move_Sprite_Angle_Y_Lookup_Offset      ; Offset_0x0428A6
                dc.l    SpeedToPos_Animate_Raw                 ; Offset_0x042F66
                dc.l    SpeedToPos_Animate_Raw                 ; Offset_0x042F66
                dc.l    Move_Light_Gravity_Animate_Raw         ; Offset_0x042F70
                dc.l    Move_Light_Gravity                     ; Offset_0x0426C2
                dc.l    ObjectFall_Delete_Sprite_Check_X_Y     ; Offset_0x042FB6
                dc.l    SpeedToPos_Animate_Raw_Wait            ; Offset_0x042F7C
                dc.l    SpeedToPos_Wait                        ; Offset_0x042FCE
                dc.l    SpeedToPos_Touch_Wait                  ; Offset_0x042F98
                dc.l    Delete_Sprite_Timed                    ; Offset_0x042920
                dc.l    Delete_Sprite_Timed_Or_Fall            ; Offset_0x04292E
                dc.l    Delete_Sprite_Timed_Or_Speed           ; Offset_0x042942
                dc.l    Animate_Raw_Multi_Delay                ; Offset_0x04215C
                dc.l    Animate_Raw_Multi_Delay_A1             ; Offset_0x042160
                dc.l    Animate_Raw_Multi_Delay_Flip_X         ; Offset_0x0421CE
                dc.l    Animate_Raw_Multi_Delay_Flip_X_A1      ; Offset_0x0421D2
                dc.l    Animate_Raw_Multi_Delay_Flip_Y         ; Offset_0x04220A
                dc.l    Animate_Raw_Multi_Delay_Flip_Y_A1      ; Offset_0x04220E
                dc.l    Display_Sprite_Wait                    ; Offset_0x042F8E
                dc.l    Animate_Raw_Multi_Delay_Touch          ; Offset_0x042FAA
                dc.l    Go_Delete_Slotted_3                    ; Offset_0x042C42
                dc.l    LBz_Robotnik_Ship                      ; Offset_0x036192
                dc.l    DMA_68KtoVRAM                          ; Offset_0x0012FC
                dc.l    AllocateObjectAfterCurrent                    ; Offset_0x011DE0
                dc.l    ObjectFall                             ; Offset_0x0110FE
                dc.l    SpeedToPos                             ; Offset_0x01111E
                dc.l    DisplaySprite                          ; Offset_0x011148
                dc.l    Object_HitCeiling                      ; Offset_0x009FB4
                dc.l    ObjHitFloor                            ; Offset_0x009D84
                dc.l    ObjHitFloor_D3                         ; Offset_0x009D88
                dc.l    Object_HitWall_Right                   ; Offset_0x009EEE
                dc.l    Object_HitWall_Left                    ; Offset_0x00A138
                dc.l    DeleteObject                           ; Offset_0x011138
                dc.l    MarkObjGone                            ; Offset_0x011AF2
                dc.l    Object_Hit                             ; Offset_0x013D7C
                dc.l    CalcSine                               ; Offset_0x001B20
                dc.l    Obj_Explosions                         ; Offset_0x041BCA
                dc.l    Play_Music                             ; Offset_0x001176
                dc.l    Play_Music                             ; Offset_0x001176
                dc.l    Solid_Object                           ; Offset_0x013556
                dc.l    Platform_Object                        ; Offset_0x013AF6
                dc.l    Add_To_Collision_Response_List         ; Offset_0x00A540
                dc.l    PseudoRandomNumber                     ; Offset_0x001AFA
                dc.l    Add_Points                             ; Offset_0x007AEC
                dc.l    LoadPLC                                ; Offset_0x0014D0
                dc.l    Object_Settings_Check_X_Y              ; Offset_0x043B1E
                dc.l    MarkObjGone_2                          ; Offset_0x011B1A
                dc.l    Perform_Scaling                        ; Offset_0x01ABE2
                dc.l    Init_Art_Scaling                       ; Offset_0x01AB3C
                dc.l    Hz_Robotnik_Ship                       ; Offset_0x0362B8
                dc.l    Refresh_Child_Position_Wait            ; Offset_0x042F8A
                dc.l    Refresh_Animate_Raw_Multi_Delay_Touch  ; Offset_0x042FA6
                dc.l    Move_Sprite_Angle_Y_Lookup             ; Offset_0x0427CE
                dc.l    Child_Get_Priority                     ; Offset_0x043230
                dc.l    Move_0x08_Bytes_A2_A1                  ; Offset_0x04325C
                dc.l    Swing_Setup                            ; Offset_0x03669A
                dc.l    AllocateObject                       ; Offset_0x011DD8
                dc.l    Load_Child_Object_A2_2                 ; Offset_0x041F86
                dc.l    Animate_Raw_Touch                      ; Offset_0x042FE6
                dc.l    Move_0x06_Bytes_A2_A1                  ; Offset_0x043260
                dc.l    Animate_Raw_Wait_2                     ; Offset_0x04300C
                dc.l    Object_Check_Range                     ; Offset_0x04326E
                dc.l    Check_Player_In_Range                  ; Offset_0x043104
                dc.l    Hurt_Player                            ; Offset_0x00A3FA
                dc.l    Animate_Raw_Delete_Sprite_Check_X_Y    ; Offset_0x042FB2
                dc.l    Load_Child_Object_Tree_List_Repeated_A2 ; Offset_0x041FD6
                dc.l    Animate_Raw_Display_Sprite             ; Offset_0x042FEE
                dc.l    ObjectFall_Delete_Sprite_Check_X_Y_2   ; Offset_0x042FC4
                dc.l    Animate_Raw_Delete_Sprite_Check_X_Y_2  ; Offset_0x042FC0              
;===============================================================================
; Interrup��o Trap 15
; <<<-
;===============================================================================   
Obj_S2_0xB0_Sonic_Sega_Logo:                                   ; Offset_0x034488
                include 'data\s2_obj\obj_0xB0.asm'
Obj_S2_0xB1_Sonic_Sega_Logo:                                   ; Offset_0x0346BC
                include 'data\s2_obj\obj_0xB1.asm'
;===============================================================================
; Rotina executada durante a VBlank
; ->>>
;===============================================================================                
VInt_SEGA_Screen:                                              ; Offset_0x034926
                move.w  (VBlank_Subroutine).w, D0                    ; $FFFFF662
                beq     Null_Sub_3                             ; Offset_0x034652
                clr.w   (VBlank_Subroutine).w                        ; $FFFFF662
                move.w  Offset_0x03493A-$02(PC, D0), D0
                jmp     Offset_0x03493A(PC, D0)
;-------------------------------------------------------------------------------
Offset_0x03493A:
                dc.w    Offset_0x03493E-Offset_0x03493A
                dc.w    Offset_0x034970-Offset_0x03493A   
;-------------------------------------------------------------------------------
Offset_0x03493E:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94169300, (A5)
                move.l  #$96859580, (A5)
                move.w  #$977F, (A5)
                move.w  #$5100, (A5)
                move.w  #$0080, (DMA_Trigger).w                      ; $FFFFF640
                move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
                lea     Offset_0x0349E8(PC), A1
                move.l  #$49500003, D0
                bra     Offset_0x0349AC
;-------------------------------------------------------------------------------                
Offset_0x034970:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.w  #$8F01, (A5)
                move.l  #$941F93FF, (A5)
                move.w  #$9780, (A5)
                move.l  #$40000083, (A5)
                move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
Offset_0x034992:
                move.w  (A5), D1
                btst    #$01, D1
                bne.s   Offset_0x034992
                move.w  #$8F02, (A5)
                lea     Offset_0x0349F8(PC), A1
                move.l  #$49A00003, D0
                bra     Offset_0x0349AC
Offset_0x0349AC:
                lea     (VDP_Data_Port), A6                          ; $00C00000
                move.l  #$01000000, D6
                moveq   #$07, D1
                moveq   #$09, D2
Offset_0x0349BC:
                move.l  D0, $0004(A6)
                move.w  D1, D3
                move.l  A1, A2
Offset_0x0349C4:
                move.w  (A2)+, D4
                bclr    #$0A, D4
                beq.s   Offset_0x0349D0
                bsr     Offset_0x0349DE
Offset_0x0349D0:
                move.w  D4, (A6)
                dbra    D3, Offset_0x0349C4
                add.l   D6, D0
                dbra    D2, Offset_0x0349BC
                rts
Offset_0x0349DE:
                moveq   #$28, D5
Offset_0x0349E0:
                move.w  D4, (A6)
                dbra    D5, Offset_0x0349E0
                rts    
;-------------------------------------------------------------------------------    
Offset_0x0349E8:
                dc.w    $A080, $A081, $A082, $A083, $A084, $A085, $A086, $A487
;-------------------------------------------------------------------------------                 
Offset_0x0349F8:
                dc.w    $A487, $A086, $A085, $A084, $A083, $A082, $A081, $A080                                     
;===============================================================================
; Rotina executada durante a VBlank
; <<<-
;===============================================================================   
Offset_0x034A08:
                dc.b    $12, $04, $04, $02, $02, $02, $02, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $04
                dc.b    $04, $06, $0A, $08, $06, $04, $04, $04
                dc.b    $04, $06, $06, $08, $08, $0A, $0A, $0C
                dc.b    $0E, $10, $16, $00
;-------------------------------------------------------------------------------  
Sub_Sega_Intro:                                                ; Offset_0x034A2C
                move.w  D1, D2
                andi.w  #$0001, D2
                addq.w  #$01, D2
                lsl.w   #$06, D2
                swap.w  D2
                move.w  D1, D3
                lsr.w   #$01, D3
                addq.w  #$01, D3
                lsl.w   #$06, D3
                swap.w  D3
                bsr     Offset_0x034A58
                btst    #$01, D0
                beq     Null_Sub_3                             ; Offset_0x034652
                btst    #$01, D1
                bne.s   Offset_0x034A56
                move.l  A3, A5
Offset_0x034A56:
                move.l  A5, A2
Offset_0x034A58:
                move.l  A2, A4
                swap.w  D2
                lea     $00(A2, D2), A3
                swap.w  D2
                move.w  D1, D5
                andi.w  #$0001, D5
                bsr     Offset_0x034AD2
                btst    #$01, D1
                beq.s   Offset_0x034A94
                swap.w  D2
                move.w  D2, D4
                swap.w  D2
                add.w   D4, D4
                move.w  D0, D3
                andi.w  #$0001, D3
                lsl.w   D3, D4
                adda.w  D4, A4
                move.w  D1, D5
                lsr.w   #$01, D5
                swap.w  D3
                lea     $00(A4, D3), A5
                swap.w  D3
                bsr     Offset_0x034AEA
Offset_0x034A94:
                btst    #$00, D0
                bne.s   Offset_0x034AA0
                btst    #$01, D0
                beq.s   Offset_0x034AD0
Offset_0x034AA0:
                swap.w  D2
                lea     $00(A2, D2), A2
                lea     $00(A2, D2), A3
                swap.w  D2
                move.w  D1, D5
                andi.w  #$0001, D5
                bsr     Offset_0x034AD2
                btst    #$01, D1
                beq.s   Offset_0x034AD0
                move.w  D1, D5
                lsr.w   #$01, D5
                swap.w  D3
                lea     $00(A4, D3), A4
                lea     $00(A4, D3), A5
                swap.w  D3
                bsr     Offset_0x034AEA
Offset_0x034AD0:
                rts
Offset_0x034AD2:
                moveq   #$07, D6
Offset_0x034AD4:
                bsr     Offset_0x034B02
                addq.w  #$04, A2
                bsr     Offset_0x034B2C
                addq.w  #$04, A3
                dbra    D6, Offset_0x034AD4
                dbra    D5, Offset_0x034AD2
                rts
Offset_0x034AEA:
                moveq   #$07, D6
Offset_0x034AEC:
                bsr     Offset_0x034B56
                addq.w  #$04, A4
                bsr     Offset_0x034B80
                addq.w  #$04, A5
                dbra    D6, Offset_0x034AEC
                dbra    D5, Offset_0x034AEA
                rts
Offset_0x034B02:
                bsr     Offset_0x034B06
Offset_0x034B06:
                move.b  (A1)+, D2
                move.b  D2, D3
                andi.b  #$F0, D2
                move.b  D2, D4
                lsr.b   #$04, D4
                or.b    D2, D4
                move.b  D4, (A2)+
                move.b  D4, $0003(A2)
                andi.b  #$0F, D3
                move.b  D3, D4
                lsl.b   #$04, D4
                or.b    D3, D4
                move.b  D4, (A2)+
                move.b  D4, $0003(A2)
                rts
Offset_0x034B2C:
                bsr     Offset_0x034B30
Offset_0x034B30:
                move.b  (A1)+, D2
                move.b  D2, D3
                andi.b  #$F0, D2
                move.b  D2, D4
                lsr.b   #$04, D4
                or.b    D2, D4
                move.b  D4, (A3)+
                move.b  D4, $0003(A3)
                andi.b  #$0F, D3
                move.b  D3, D4
                lsl.b   #$04, D4
                or.b    D3, D4
                move.b  D4, (A3)+
                move.b  D4, $0003(A3)
                rts
Offset_0x034B56:
                bsr     Offset_0x034B5A
Offset_0x034B5A:
                move.b  (A1)+, D2
                move.b  D2, D3
                andi.b  #$F0, D2
                move.b  D2, D4
                lsr.b   #$04, D4
                or.b    D2, D4
                move.b  D4, (A4)+
                move.b  D4, $0003(A4)
                andi.b  #$0F, D3
                move.b  D3, D4
                lsl.b   #$04, D4
                or.b    D3, D4
                move.b  D4, (A4)+
                move.b  D4, $0003(A4)
                rts
Offset_0x034B80:
                bsr     Offset_0x034B84
Offset_0x034B84:
                move.b  (A1)+, D2
                move.b  D2, D3
                andi.b  #$F0, D2
                move.b  D2, D4
                lsr.b   #$04, D4
                or.b    D2, D4
                move.b  D4, (A5)+
                move.b  D4, $0003(A5)
                andi.b  #$0F, D3
                move.b  D3, D4
                lsl.b   #$04, D4
                or.b    D3, D4
                move.b  D4, (A5)+
                move.b  D4, $0003(A5)
                rts
;-------------------------------------------------------------------------------
Obj_0xC7_Knuckles:                                             ; Offset_0x034BAA    
                include 'data\objects\obj_0xC7.asm'
Obj_0xC9_Knuckles_Switch:                                      ; Offset_0x035484
                include 'data\objects\obj_0xC9.asm'
; Offset_0x035AD2: Obj_0xCA_AIz_Super_Sonic_Intro: ObjCA_AIZPlaneIntro:
		include	"data\objects\obj_0xCA.asm"

;===============================================================================   
Robotnik_Head:                                                 ; Offset_0x03605E  
                jsr     (Refresh_Child_Position_Adjusted)      ; Offset_0x04203C
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0005
                move.w  Offset_0x036078(PC, D0), D1
                jsr     Offset_0x036078(PC, D1)
                jmp     (Child_Display_Or_Delete_2)            ; Offset_0x0424A8  
;-------------------------------------------------------------------------------
Offset_0x036078:
                dc.w    Offset_0x03607E-Offset_0x036078
                dc.w    Offset_0x03609A-Offset_0x036078
                dc.w    Offset_0x0360CE-Offset_0x036078       
;-------------------------------------------------------------------------------
Offset_0x03607E:
                lea     Robotnik_Head_Setup_Data(PC), A1       ; Offset_0x03652C
                jsr     (Object_Settings)                      ; Offset_0x041D72
                jsr     (Boss_Test_And_Set_Layer_Flag)         ; Offset_0x037A98
                move.w  Obj_Child_Ref(A0), A1                            ; $0046
                move.w  Obj_Child_Ref(A1), Obj_Height_3(A0)       ; $0046, $0044
Offset_0x036098:
                rts     
;-------------------------------------------------------------------------------
Offset_0x03609A:
                lea     Offset_0x0365A6(PC), A1
                jsr     (Animate_Raw_A1)                       ; Offset_0x042092
                move.w  Obj_Height_3(A0), A1                             ; $0044
                btst    #$07, Obj_Status(A1)                             ; $002A
                bne.s   Offset_0x0360C0
                btst    #$06, Obj_Status(A1)                             ; $002A
                beq.s   Offset_0x0360BE
                move.b  #$02, Obj_Map_Id(A0)                             ; $0022
Offset_0x0360BE:
                rts
Offset_0x0360C0:
                move.b  #$04, Obj_Routine(A0)                            ; $0005
                move.b  #$03, Obj_Map_Id(A0)                             ; $0022
                rts  
;-------------------------------------------------------------------------------
Offset_0x0360CE:
                jmp     (Refresh_Child_Position_Adjusted)      ; Offset_0x04203C  
;=============================================================================== 
Offset_0x0360D4:
                jsr     (Refresh_Child_Position_Adjusted)      ; Offset_0x04203C
                jsr     (Boss_Test_And_Set_Layer_Flag)         ; Offset_0x037A98
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0005
                move.w  Offset_0x0360FE(PC, D0), D1
                jsr     Offset_0x0360FE(PC, D1)
                btst    #$06, Obj_Control_Var_08(A0)                     ; $0038
                bne     Offset_0x036098
                jmp     (Child_Display_Or_Delete_2)            ; Offset_0x0424A8
;-------------------------------------------------------------------------------
Offset_0x0360FE:
                dc.w    Offset_0x03607E-Offset_0x0360FE
                dc.w    Offset_0x03609A-Offset_0x0360FE
                dc.w    Offset_0x0360CE-Offset_0x0360FE        
;===============================================================================   
FBz_Robotnik_Head:                                             ; Offset_0x036104
                jsr     (Refresh_Child_Position_Adjusted)      ; Offset_0x04203C
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0005
                move.w  Offset_0x036124(PC, D0), D1
                jsr     Offset_0x036124(PC, D1)
                jsr     (Child_Get_Priority)                   ; Offset_0x043230
                jmp     (Child_Display_Or_Delete_2)            ; Offset_0x0424A8     
;-------------------------------------------------------------------------------
Offset_0x036124:
                dc.w    Offset_0x03612A-Offset_0x036124
                dc.w    Offset_0x036140-Offset_0x036124
                dc.w    Offset_0x0360CE-Offset_0x036124       
;-------------------------------------------------------------------------------
Offset_0x03612A:
                lea     FBz_Robotnik_Head_Setup_Data(PC), A1   ; Offset_0x036538
                jsr     (Object_Settings)                      ; Offset_0x041D72
                move.w  Obj_Child_Ref(A0), A1                            ; $0046
                move.w  Obj_Child_Ref(A1), Obj_Height_3(A0)       ; $0046, $0044
                rts      
;-------------------------------------------------------------------------------
Offset_0x036140:
                move.w  Obj_X(A0), D0                                    ; $0010
                bclr    #$00, Obj_Flags(A0)                              ; $0004
                cmp.w   (Obj_Player_One+Obj_X).w, D0                 ; $FFFFB010
                bcc.s   Offset_0x036156
                bset    #$00, Obj_Flags(A0)                              ; $0004
Offset_0x036156:
                clr.b   Obj_Map_Id(A0)                                   ; $0022
                move.w  Obj_Height_3(A0), A1                             ; $0044
                btst    #$02, Obj_Control_Var_08(A0)                     ; $0038
                beq.s   Offset_0x03616C
                move.b  #$01, Obj_Map_Id(A0)                             ; $0022
Offset_0x03616C:
                btst    #$07, Obj_Status(A1)                             ; $002A
                bne.s   Offset_0x036184
                btst    #$06, Obj_Status(A1)                             ; $002A
                beq.s   Offset_0x036182
                move.b  #$02, Obj_Map_Id(A0)                             ; $0022
Offset_0x036182:
                rts
Offset_0x036184:
                move.b  #$04, Obj_Routine(A0)                            ; $0005
                move.b  #$03, Obj_Map_Id(A0)                             ; $0022
                rts   
;===============================================================================  
LBz_Robotnik_Ship:                                             ; Offset_0x036192
                jsr     (Refresh_Child_Position_Adjusted)      ; Offset_0x04203C
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0005
                move.w  Offset_0x0361AC(PC, D0), D1
                jsr     Offset_0x0361AC(PC, D1)
                jmp     (Child_Display_Or_Delete_2)            ; Offset_0x0424A8 
;-------------------------------------------------------------------------------    
Offset_0x0361AC:
                dc.w    Offset_0x0361B2-Offset_0x0361AC
                dc.w    Offset_0x0361BC-Offset_0x0361AC
                dc.w    Offset_0x0360CE-Offset_0x0361AC   
;-------------------------------------------------------------------------------
Offset_0x0361B2:
                lea     Robotnik_Head_Setup_Data(PC), A1       ; Offset_0x03652C
                jmp     (Object_Settings)                      ; Offset_0x041D72   
;-------------------------------------------------------------------------------
Offset_0x0361BC:
                lea     Offset_0x0365A6(PC), A1
                jsr     (Animate_Raw_A1)                       ; Offset_0x042092
                move.w  Obj_Child_Ref(A0), A1                            ; $0046
                btst    #$07, Obj_Status(A1)                             ; $002A
                bne.s   Offset_0x0361E2
                btst    #$06, Obj_Status(A1)                             ; $002A
                beq.s   Offset_0x0361E0
                move.b  #$02, Obj_Map_Id(A0)                             ; $0022
Offset_0x0361E0:
                rts
Offset_0x0361E2:
                move.b  #$04, Obj_Routine(A0)                            ; $0005
                move.b  #$03, Obj_Map_Id(A0)                             ; $0022
                rts  
;===============================================================================  
AIz_Robotnik_Ship:                                             ; Offset_0x0361F0
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0005
                move.w  Offset_0x03620E(PC, D0), D1
                jsr     Offset_0x03620E(PC, D1)
                btst    #$06, Obj_Control_Var_08(A0)                     ; $0038
                bne     Offset_0x036098
                jmp     (DisplaySprite)                        ; Offset_0x011148  
;-------------------------------------------------------------------------------
Offset_0x03620E:
                dc.w    Offset_0x036216-Offset_0x03620E
                dc.w    Offset_0x036232-Offset_0x03620E
                dc.w    Offset_0x036268-Offset_0x03620E
                dc.w    Offset_0x03629A-Offset_0x03620E   
;-------------------------------------------------------------------------------
Offset_0x036216:
                lea     AIz_Flame_Mobile_Setup_Data(PC), A1    ; Offset_0x036544
                jsr     (Object_Settings)                      ; Offset_0x041D72
                move.b  Obj_Subtype(A0), Obj_Map_Id(A0)           ; $002C, $0022
                lea     (Offset_0x03655E), A2
                jmp     (Load_Child_Object_A2)                 ; Offset_0x041D9A 
;-------------------------------------------------------------------------------
Offset_0x036232:
                jsr     (Refresh_Child_Position_Adjusted)      ; Offset_0x04203C
                jsr     (Boss_Test_And_Set_Layer_Flag)         ; Offset_0x037A98
                move.w  Obj_Child_Ref(A0), A1                            ; $0046
                btst    #$07, Obj_Status(A1)                             ; $002A
                bne.s   Offset_0x03624C
                rts
Offset_0x03624C:
                move.b  #$04, Obj_Routine(A0)                            ; $0005
                lea     (Offset_0x041D62), A2
                jsr     (Load_Child_Object_A2)                 ; Offset_0x041D9A
                bne.s   Offset_0x036266
                move.b  #$04, Obj_Subtype(A1)                            ; $002C
Offset_0x036266:
                rts      
;-------------------------------------------------------------------------------
Offset_0x036268:
                move.w  Obj_Child_Ref(A0), A1                            ; $0046
                btst    #$04, Obj_Control_Var_08(A1)                     ; $0038
                bne.s   Offset_0x036280
                jsr     (Boss_Test_And_Set_Layer_Flag)         ; Offset_0x037A98
                jmp     (Refresh_Child_Position_Adjusted)      ; Offset_0x04203C
Offset_0x036280:
                move.b  #$06, Obj_Routine(A0)                            ; $0005
                move.b  #$05, Obj_Map_Id(A0)                             ; $0022
                move.w  #$FE00, Obj_Speed_Y(A0)                          ; $001A
                move.w  #$007F, Obj_Timer(A0)                            ; $002E
                rts     
;-------------------------------------------------------------------------------
Offset_0x03629A:
                jsr     (ObjectFall)                           ; Offset_0x0110FE
                subq.w  #$01, Obj_Timer(A0)                              ; $002E
                bmi.s   Offset_0x0362A8
                rts
Offset_0x0362A8:
                bset    #$05, Obj_Control_Var_08(A0)                     ; $0038
                clr.b   (Boss_Flag).w                                ; $FFFFF7AA
                jmp     (Go_Delete_Object_A0_2)                ; Offset_0x042D4C              
;=============================================================================== 
Hz_Robotnik_Ship:                                              ; Offset_0x0362B8  
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0005
                move.w  Offset_0x0362CC(PC, D0), D1
                jsr     Offset_0x0362CC(PC, D1)
                jmp     (DisplaySprite)                        ; Offset_0x011148  
;-------------------------------------------------------------------------------
Offset_0x0362CC:
                dc.w    Offset_0x036322-Offset_0x0362CC
                dc.w    Offset_0x036344-Offset_0x0362CC
                dc.w    Offset_0x0362D6-Offset_0x0362CC
                dc.w    Offset_0x036394-Offset_0x0362CC
                dc.w    Offset_0x0363CE-Offset_0x0362CC  
;-------------------------------------------------------------------------------
Offset_0x0362D6:
                move.w  Obj_Child_Ref(A0), A1                            ; $0046
                btst    #$04, Obj_Control_Var_08(A1)                     ; $0038
                bne.s   Offset_0x0362E4
                rts
Offset_0x0362E4:
                move.b  #$06, Obj_Routine(A0)                            ; $0005
                move.b  #$05, Obj_Map_Id(A0)                             ; $0022
                rts    
;=============================================================================== 
MGz_Robotnik_Ship:                                             ; Offset_0x0362F2    
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0005
                move.w  Offset_0x036312(PC, D0), D1
                jsr     Offset_0x036312(PC, D1)
                move.w  Obj_Child_Ref(A0), A1                            ; $0046
                btst    #$05, Obj_Control_Var_08(A1)                     ; $0038
                bne.s   Offset_0x03631C
                jmp     (DisplaySprite)                        ; Offset_0x011148   
;-------------------------------------------------------------------------------
Offset_0x036312:
                dc.w    Offset_0x036322-Offset_0x036312
                dc.w    Offset_0x036344-Offset_0x036312
                dc.w    Offset_0x036374-Offset_0x036312
                dc.w    Offset_0x036394-Offset_0x036312
                dc.w    Offset_0x0363CE-Offset_0x036312
;-------------------------------------------------------------------------------
Offset_0x03631C:
                jmp     (Go_Delete_Object_A0_2)                ; Offset_0x042D4C  
;-------------------------------------------------------------------------------
Offset_0x036322:
                lea     Drill_Mobile_Ship_Setup_Data(PC), A1   ; Offset_0x036544
                jsr     (Object_Settings)                      ; Offset_0x041D72
                jsr     (Boss_Test_And_Set_Layer_Flag)         ; Offset_0x037A98
                move.b  Obj_Subtype(A0), Obj_Map_Id(A0)           ; $002C, $0022
                lea     (Offset_0x036556), A2
                jmp     (Load_Child_Object_A2)                 ; Offset_0x041D9A
;-------------------------------------------------------------------------------
Offset_0x036344:
                jsr     (Refresh_Child_Position_Adjusted)      ; Offset_0x04203C
                move.w  Obj_Child_Ref(A0), A1                            ; $0046
                btst    #$07, Obj_Status(A1)                             ; $002A
                bne.s   Offset_0x036358
                rts
Offset_0x036358:
                move.b  #$04, Obj_Routine(A0)                            ; $0005
                lea     (Offset_0x041D62), A2
                jsr     (Load_Child_Object_A2)                 ; Offset_0x041D9A
                bne.s   Offset_0x036372
                move.b  #$04, Obj_Subtype(A1)                            ; $002C
Offset_0x036372:
                rts                                                             
;-------------------------------------------------------------------------------
Offset_0x036374:
                move.w  Obj_Child_Ref(A0), A1                            ; $0046
                btst    #$04, Obj_Control_Var_08(A1)                     ; $0038
                bne.s   Offset_0x036386
                jmp     (Refresh_Child_Position_Adjusted)      ; Offset_0x04203C
Offset_0x036386:
                move.b  #$06, Obj_Routine(A0)                            ; $0005
                move.b  #$0A, Obj_Map_Id(A0)                             ; $0022
                rts                                                             
;-------------------------------------------------------------------------------
Offset_0x036394:
                move.w  (Camera_Y).w, D0                             ; $FFFFEE7C
                addi.w  #$0040, D0
                cmp.w   Obj_Y(A0), D0                                    ; $0014
                bcc.s   Offset_0x0363A8
                subq.w  #$01, Obj_Y(A0)                                  ; $0014
                rts
Offset_0x0363A8:
                move.b  #$08, Obj_Routine(A0)                            ; $0005
Offset_0x0363AE:                
                bset    #$00, Obj_Flags(A0)                              ; $0004
                move.w  #$0300, Obj_Speed_X(A0)                          ; $0018
                clr.w   Obj_Speed_Y(A0)                                  ; $001A
                move.w  #$0100, Obj_Timer(A0)                            ; $002E
                lea     LBz_Robotnik_Ship_Data_2(PC), A2       ; Offset_0x03659E
                jmp     (Load_Child_Object_A2)                 ; Offset_0x041D9A
;-------------------------------------------------------------------------------
Offset_0x0363CE:
                jsr     (SpeedToPos)                           ; Offset_0x01111E
                subq.w  #$01, Obj_Timer(A0)                              ; $002E
                bmi.s   Offset_0x0363DC
                rts
Offset_0x0363DC:
                bset    #$05, Obj_Control_Var_08(A0)                     ; $0038
                clr.b   (Boss_Flag).w                                ; $FFFFF7AA
                jmp     (Go_Delete_Object_A0_2)                ; Offset_0x042D4C 
;===============================================================================    
CNz_Iz_Robotnik_Ship:                                          ; Offset_0x0363EC
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0005
                move.w  Offset_0x036400(PC, D0), D1
                jsr     Offset_0x036400(PC, D1)
                jmp     (DisplaySprite)                        ; Offset_0x011148             
;-------------------------------------------------------------------------------
Offset_0x036400:
                dc.w    Offset_0x036322-Offset_0x036400
                dc.w    Offset_0x036344-Offset_0x036400
                dc.w    Offset_0x036374-Offset_0x036400
                dc.w    Offset_0x036394-Offset_0x036400
                dc.w    Offset_0x0363CE-Offset_0x036400  
;=============================================================================== 
FBz_Robotnik_Ship:                                             ; Offset_0x03640A
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0005
                move.w  Offset_0x03641E(PC, D0), D1
                jsr     Offset_0x03641E(PC, D1)
                jmp     (DisplaySprite)                        ; Offset_0x011148  
;-------------------------------------------------------------------------------
Offset_0x03641E:
                dc.w    Offset_0x03642A-Offset_0x03641E
                dc.w    Offset_0x036446-Offset_0x03641E
                dc.w    Offset_0x03647C-Offset_0x03641E
                dc.w    Offset_0x0364BA-Offset_0x03641E
                dc.w    Offset_0x0364D4-Offset_0x03641E
                dc.w    Offset_0x0363CE-Offset_0x03641E   
;-------------------------------------------------------------------------------
Offset_0x03642A:
                lea     FBz_Hang_Mobile_Ship_Setup_Data_2(PC), A1 ; Offset_0x036544
                jsr     (Object_Settings)                      ; Offset_0x041D72
                move.b  Obj_Subtype(A0), Obj_Map_Id(A0)           ; $002C, $0022
                lea     (FBz_Robotnik_Head_Data), A2           ; Offset_0x036566
                jmp     (Load_Child_Object_A2)                 ; Offset_0x041D9A    
;-------------------------------------------------------------------------------
Offset_0x036446:
                jsr     (Refresh_Child_Position)               ; Offset_0x042016
                jsr     (Child_Get_Priority)                   ; Offset_0x043230
                move.w  Obj_Child_Ref(A0), A1                            ; $0046
                btst    #$07, Obj_Status(A1)                             ; $002A
                bne.s   Offset_0x036460
                rts
Offset_0x036460:
                move.b  #$04, Obj_Routine(A0)                            ; $0005
                lea     (Offset_0x041D62), A2
                jsr     (Load_Child_Object_A2)                 ; Offset_0x041D9A
                bne.s   Offset_0x03647A
                move.b  #$04, Obj_Subtype(A1)                            ; $002C
Offset_0x03647A:
                rts     
;-------------------------------------------------------------------------------
Offset_0x03647C:
                move.w  Obj_Child_Ref(A0), A1                            ; $0046
                btst    #$04, Obj_Control_Var_08(A1)                     ; $0038
                bne.s   Offset_0x036494
                jsr     (Child_Get_Priority)                   ; Offset_0x043230
                jmp     (Refresh_Child_Position)               ; Offset_0x042016
Offset_0x036494:
                move.b  #$06, Obj_Routine(A0)                            ; $0005
                move.b  #$05, Obj_Map_Id(A0)                             ; $0022
                clr.w   Obj_Speed_X(A0)                                  ; $0018
                move.w  #$FE00, Obj_Speed_Y(A0)                          ; $001A
                move.w  #$002F, Obj_Timer(A0)                            ; $002E
                move.l  #Offset_0x0364C6, Obj_Child(A0)                  ; $0034
                rts  
;-------------------------------------------------------------------------------
Offset_0x0364BA:
                jsr     (ObjectFall)                           ; Offset_0x0110FE
                jmp     (Run_Object_Wait_Timer_A0)             ; Offset_0x0423D2   
;-------------------------------------------------------------------------------
Offset_0x0364C6:
                move.b  #$08, Obj_Routine(A0)                            ; $0005
                bset    #$00, Obj_Flags(A0)                              ; $0004
                rts 
;-------------------------------------------------------------------------------
Offset_0x0364D4:
                move.w  (Camera_Y).w, D0                             ; $FFFFEE7C
                addi.w  #$00C0, D0
                cmp.w   Obj_Y(A0), D0                                    ; $0014
                bcc.s   Offset_0x0364E8
                subq.w  #$01, Obj_Y(A0)                                  ; $0014
                rts
Offset_0x0364E8:
                move.b  #$0A, Obj_Routine(A0)                            ; $0005
                bra     Offset_0x0363AE
;-------------------------------------------------------------------------------  
Offset_0x0364F2:
                lea     Offset_0x036550(PC), A1
                jsr     (Object_Settings_3)                    ; Offset_0x041D7A
                move.l  #Offset_0x036504, (A0)
                rts     
;-------------------------------------------------------------------------------
Offset_0x036504:
                move.w  Obj_Child_Ref(A0), A1                            ; $0046
                btst    #$04, Obj_Control_Var_08(A1)                     ; $0038
                bne.s   Offset_0x036526
                jsr     (Refresh_Child_Position_Adjusted)      ; Offset_0x04203C
                btst    #$00, (Vint_runcount+$03).w       ; $FFFFFE0F
                bne     Offset_0x036098
                jmp     (DisplaySprite)                        ; Offset_0x011148
Offset_0x036526:
                jmp     (DeleteObject)                         ; Offset_0x011138 
;-------------------------------------------------------------------------------   
Robotnik_Head_Setup_Data:                                      ; Offset_0x03652C
                dc.l    Robotnik_Ship_Mappings                 ; Offset_0x10D020
                dc.w    $052E, $0280
                dc.b    $10, $08, $00, $00
;-------------------------------------------------------------------------------  
FBz_Robotnik_Head_Setup_Data:                                  ; Offset_0x036538  
                dc.l    FBz_Robotnik_Head_Mappings             ; Offset_0x10D268
                dc.w    $0410, $0280
                dc.b    $10, $08, $00, $00
;-------------------------------------------------------------------------------
AIz_Flame_Mobile_Setup_Data:                                   ; Offset_0x036544 
Drill_Mobile_Ship_Setup_Data:                                  ; Offset_0x036544 
FBz_Hang_Mobile_Ship_Setup_Data_2:                             ; Offset_0x036544 
                dc.l    Robotnik_Ship_Mappings                 ; Offset_0x10D020
                dc.w    $052E, $0280
                dc.b    $1C, $20, $08, $00       
;-------------------------------------------------------------------------------
Offset_0x036550:
                dc.w    $0280
                dc.b    $08, $04, $06, $00   
;-------------------------------------------------------------------------------  
Offset_0x036556:   
                dc.w    $0000
                dc.l    Robotnik_Head                          ; Offset_0x03605E
                dc.b    $00, $E4
;-------------------------------------------------------------------------------
Offset_0x03655E:
                dc.w    $0000
                dc.l    Offset_0x0360D4
                dc.b    $00, $E4     
;------------------------------------------------------------------------------- 
FBz_Robotnik_Head_Data:                                        ; Offset_0x036566  
                dc.w    $0000
                dc.l    FBz_Robotnik_Head                      ; Offset_0x036104
                dc.b    $00, $E4              
;------------------------------------------------------------------------------- 
LBz_Robotnik_Ship_Data:                                        ; Offset_0x03656E
                dc.w    $0000
                dc.l    LBz_Robotnik_Ship                      ; Offset_0x036192
                dc.b    $00, $E4
;-------------------------------------------------------------------------------  
AIz_Robotnik_Ship_Data ; Flame Mobile                          ; Offset_0x036576
                dc.w    $0000
                dc.l    AIz_Robotnik_Ship                      ; Offset_0x0361F0
                dc.b    $00, $EC 
;-------------------------------------------------------------------------------  
; Offset_0x03657E: ; Left over ???
                dc.w    $0000
                dc.l    Hz_Robotnik_Ship                       ; Offset_0x0362B8
                dc.b    $00, $00 
;-------------------------------------------------------------------------------  
MGz_Robotnik_Ship_Data: ; Drill Mobile                         ; Offset_0x036586
                dc.w    $0000 
                dc.l    MGz_Robotnik_Ship                      ; Offset_0x0362F2
                dc.b    $FA, $04    
;------------------------------------------------------------------------------- 
CNz_Iz_Robotnik_Ship_Data: ; Graviton Mobile / Freezer Mobile  ; Offset_0x03658E 
                dc.w    $0000
                dc.l    CNz_Iz_Robotnik_Ship                   ; Offset_0x0363EC
                dc.b    $00, $F8
;------------------------------------------------------------------------------- 
FBz_Robotnik_Ship_Data: ; Hang Mobile                          ; Offset_0x036596
                dc.w    $0000
                dc.l    FBz_Robotnik_Ship                      ; Offset_0x03640A
                dc.b    $00, $04
;-------------------------------------------------------------------------------  
LBz_Robotnik_Ship_Data_2: ; Egg Mobile                         ; Offset_0x03659E
                dc.w    $0000
                dc.l    Offset_0x0364F2
                dc.b    $1E, $00      
;-------------------------------------------------------------------------------
Offset_0x0365A6:
                dc.b    $05, $00, $01, $FC  
;=============================================================================== 
Obj_0x80_AIz_Fire_Breath:                                      ; Offset_0x0365AA
                include 'data\objects\obj_0x80.asm'    
Obj_0xAC_AIz_Fire_Breath:                                      ; Offset_0x036AB4                
                include 'data\objects\obj_0xAC.asm'                  
Obj_0xA9_AIz_Flame_Mobile:                                     ; Offset_0x0371FA   
                include 'data\objects\obj_0xA9.asm' 
Obj_0xAD_Hz_Big_Shaker:                                        ; Offset_0x037E2C
                include 'data\objects\obj_0xAD.asm'
Obj_0xB5_Hz_Screw_Mobile:                                      ; Offset_0x038B14
                include 'data\objects\obj_0xB5.asm'     
Obj_0xAF_MGz_Drill_Mobile:                                     ; Offset_0x039920
                include 'data\objects\obj_0xAF.asm' 
Obj_0xB0_MGz_Drill_Mobile:                                     ; Offset_0x039C7E  
                include 'data\objects\obj_0xB0.asm' 
Obj_0xB1_MGz_Drill_Mobile:                                     ; Offset_0x039F9E
                include 'data\objects\obj_0xB1.asm'   
Obj_0x8E_CNz_Bowling_Spin:                                     ; Offset_0x03B01A
                include 'data\objects\obj_0x8E.asm'  
Obj_0x8D_CNz_Graviton_Mobile:                                  ; Offset_0x03B9A0
                include 'data\objects\obj_0x8D.asm'
Obj_0x8F_FBz_Gapsule:                                          ; Offset_0x03C27C
                include 'data\objects\obj_0x8F.asm'
Obj_0xB6_Barrier_Eggman:                                       ; Offset_0x03CE96
                include 'data\objects\obj_0xB6.asm'
Obj_0xB4_FBz_Hang_Mobile:                                      ; Offset_0x03D4DE
                include 'data\objects\obj_0xB4.asm'
Obj_0xB3_Iz_Big_Icedus:                                        ; Offset_0x03DCB0
                include 'data\objects\obj_0xB3.asm'
Obj_0xB2_Iz_Freezer_Mobile:                                    ; Offset_0x03E48C      
                include 'data\objects\obj_0xB2.asm'
Obj_0x85_LBz_Twin_Hammer:                                      ; Offset_0x03EC12    
                include 'data\objects\obj_0x85.asm'
Obj_0x86_LBz_Beam_Rocket:                                      ; Offset_0x03F11A
                include 'data\objects\obj_0x86.asm'
Obj_0x8C_LBz_Ball_Shooter:                                     ; Offset_0x03FE88
                include 'data\objects\obj_0x8C.asm'
; Offset_0x040704: Obj_0x84_MVz_Hey_Ho: Obj84_HeyHo:
		include	"data\objects\obj_0x84.asm"
Obj_0x98_Sz_Guardian:                                          ; Offset_0x04107E
                include 'data\objects\obj_0x98.asm'
; Offset_0x04178A: Obj_0xC5_Hidden_Monitors: ObjC5_HiddenMonitor:
		include	"data\objects\obj_0xC5.asm"
Obj_End_Panel:                                                 ; Offset_0x041812
                include 'data\objects\endpanel.asm'
;===============================================================================
After_Boss_Clean_Up:                                           ; Offset_0x041ACA
                moveq   #$00, D0
                lea     (Current_ZoneAndAct).w, A1                             ; $FFFFFE10
                move.b  (A1)+, D0
                add.b   D0, D0
                add.b   (A1)+, D0
                add.b   D0, D0
                move.w  Offset_0x041AE0(PC, D0), D0
                jmp     Offset_0x041AE0(PC, D0)
;-------------------------------------------------------------------------------
Offset_0x041AE0:
                dc.w    AIz_After_Boss-Offset_0x041AE0         ; Offset_0x041AFC
                dc.w    AIz_After_Boss-Offset_0x041AE0         ; Offset_0x041AFC
                dc.w    Hz_After_Boss-Offset_0x041AE0          ; Offset_0x041B10
                dc.w    Hz_After_Boss-Offset_0x041AE0          ; Offset_0x041B10
                dc.w    MGz_After_Boss-Offset_0x041AE0         ; Offset_0x041B12
                dc.w    MGz_After_Boss-Offset_0x041AE0         ; Offset_0x041B12
                dc.w    CNz_After_Boss-Offset_0x041AE0         ; Offset_0x041B1C
                dc.w    CNz_After_Boss-Offset_0x041AE0         ; Offset_0x041B1C
                dc.w    FBz_After_Boss-Offset_0x041AE0         ; Offset_0x041B1C
                dc.w    FBz_After_Boss-Offset_0x041AE0         ; Offset_0x041B1C
                dc.w    Iz_1_After_Boss-Offset_0x041AE0        ; Offset_0x041B1C
                dc.w    Iz_2_After_Boss-Offset_0x041AE0        ; Offset_0x041B1E
                dc.w    LBz_After_Boss-Offset_0x041AE0         ; Offset_0x041B28
                dc.w    LBz_After_Boss-Offset_0x041AE0         ; Offset_0x041B28
;------------------------------------------------------------------------------- 
AIz_After_Boss:                                                ; Offset_0x041AFC
                lea     Pal_AIz_After_Boss(PC), A1             ; Offset_0x041B2A
                jsr     (Pal_Load_Line_1)                      ; Offset_0x04314C
                lea     PLC_AIz_After_Boss(PC), A1             ; Offset_0x041B4A
                jmp     (LoadPLC_Direct)                           ; Offset_0x001502  
;------------------------------------------------------------------------------- 
Hz_After_Boss:                                                 ; Offset_0x041B10
                rts    
;------------------------------------------------------------------------------- 
MGz_After_Boss:                                                ; Offset_0x041B12
                lea     PLC_MGz_After_Boss(PC), A1             ; Offset_0x041B90
                jmp     (LoadPLC_Direct)                           ; Offset_0x001502   
;------------------------------------------------------------------------------- 
CNz_After_Boss:                                                ; Offset_0x041B1C
FBz_After_Boss:                                                ; Offset_0x041B1C 
Iz_1_After_Boss:                                               ; Offset_0x041B1C 
                rts    
;------------------------------------------------------------------------------- 
Iz_2_After_Boss:                                               ; Offset_0x041B1E
                lea     Pal_Iz_2_After_Boss(PC), A1            ; Offset_0x041B70
                jmp     (Pal_Load_Line_1)                      ; Offset_0x04314C   
;------------------------------------------------------------------------------- 
LBz_After_Boss:                                                ; Offset_0x041B28
                rts       
;-------------------------------------------------------------------------------
Pal_AIz_After_Boss:                                            ; Offset_0x041B2A
                dc.w    $0000, $0EEE, $0EC0, $0E60, $0C22, $00EE, $0088, $060A
                dc.w    $008E, $002E, $0844, $0020, $0EAA, $0A66, $0ECC, $0044 
;-------------------------------------------------------------------------------
PLC_AIz_After_Boss:                                            ; Offset_0x041B4A
                dc.w    (((PLC_AB_00_End-PLC_AB_00)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_AB_00:
                dc.l    Art_Monitors                           ; Offset_0x1071DA
                dc.w    $9880
                dc.l    Art_AIz_Miscellaneous                  ; Offset_0x12D84E
                dc.w    $5E00
                dc.l    Art_AIz_Swinging_Vine                  ; Offset_0x12C9AA
                dc.w    $8440
                dc.l    Art_AIz_Background_Tree                ; Offset_0x12CC34
                dc.w    $87E0
                dc.l    Art_Oxygen_Bubbles                     ; Offset_0x1080F8
                dc.w    $8B80
                dc.l    Art_Switch                             ; Offset_0x1067F6
                dc.w    $8AC0
PLC_AB_00_End:                    
;-------------------------------------------------------------------------------
Pal_Iz_2_After_Boss:                                           ; Offset_0x041B70
                dc.w    $0000, $0EEE, $0EC0, $0E60, $0C22, $00EE, $0088, $008E
                dc.w    $002C, $0822, $0000, $0020, $0CAA, $0866, $0644, $0044 
;-------------------------------------------------------------------------------
PLC_MGz_After_Boss:                                            ; Offset_0x041B90
                dc.w    (((PLC_AB_01_End-PLC_AB_01)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_AB_01:
                dc.l    Art_Monitors                           ; Offset_0x1071DA
                dc.w    $9880
                dc.l    Art_Spikes_Springs                     ; Offset_0x108E64
                dc.w    $9280
PLC_AB_01_End:                 
;-------------------------------------------------------------------------------
; Offset_0x041B9E: ; Left Over ???
                dc.w    (((PLC_AB_02_End-PLC_AB_02)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_AB_02:
                dc.l    Art_Monitors                           ; Offset_0x1071DA
                dc.w    $9880
PLC_AB_02_End:              
;------------------------------------------------------------------------------- 
PLC_AIz_MGz_Boss_Defeated:                                     ; Offset_0x041BA6 
                dc.w    (((PLC_AB_03_End-PLC_AB_03)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_AB_03:
                dc.l    Art_Explosion                          ; Offset_0x108528
                dc.w    $B400
                dc.l    Art_Squirrel                           ; Offset_0x10B3DC
                dc.w    $B000
                dc.l    Art_Blue_Bird                          ; Offset_0x10B00A
                dc.w    $B240
PLC_AB_03_End:  
;-------------------------------------------------------------------------------    
PLC_After_Knuckles_LBz_1:                                      ; Offset_0x041BBA 
                dc.w    (((PLC_AB_04_End-PLC_AB_04)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_AB_04:
                dc.l    Art_Boss_Explosion                     ; Offset_0x124504
                dc.w    $9520
PLC_AB_04_End:              
;-------------------------------------------------------------------------------  
PLC_Flame_Mobile_Explosion:                                    ; Offset_0x041BC2
                dc.w    (((PLC_AB_05_End-PLC_AB_05)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_AB_05:
                dc.l    Art_Explosion                          ; Offset_0x108528
                dc.w    $B400
PLC_AB_05_End:                
;===============================================================================
Obj_Explosions:                                                ; Offset_0x041BCA
                include 'data\objects\explosns.asm' 
;=============================================================================== 
Object_Settings:                                               ; Offset_0x041D72
                move.l  (A1)+, Obj_Map(A0)                               ; $000C
Object_Settings_2:                                             ; Offset_0x041D76
                move.w  (A1)+, Obj_Art_VRAM(A0)                          ; $000A
Object_Settings_3:                                             ; Offset_0x041D7A                
                move.w  (A1)+, Obj_Priority(A0)                          ; $0008
                move.b  (A1)+, Obj_Width(A0)                             ; $0007
                move.b  (A1)+, Obj_Height(A0)                            ; $0006
                move.b  (A1)+, Obj_Map_Id(A0)                            ; $0022
                move.b  (A1)+, Obj_Col_Flags(A0)                         ; $0028
                bset    #$02, Obj_Flags(A0)                              ; $0004
                addq.b  #$02, Obj_Routine(A0)                            ; $0005
Exit_Object_Settings:                                          ; Offset_0x041D98                
                rts
;===============================================================================     
Load_Child_Object_A2:                                          ; Offset_0x041D9A
                moveq   #$00, D2
                move.w  (A2)+, D6
Offset_0x041D9E:
                jsr     (AllocateObjectAfterCurrent)                  ; Offset_0x011DE0
                bne.s   Offset_0x041DE8
                move.w  A0, Obj_Child_Ref(A1)                            ; $0046
                move.l  Obj_Map(A0), Obj_Map(A1)                  ; $000C, $000C
                move.l  Obj_Art_VRAM(A0), Obj_Art_VRAM(A1)        ; $000A, $000A
                move.l  (A2)+, (A1)
                move.b  D2, Obj_Subtype(A1)                              ; $002C
                move.w  Obj_X(A0), D0                                    ; $0010
                move.b  (A2)+, D1
                move.b  D1, Obj_Control_Var_12(A1)                       ; $0042
                ext.w   D1
                add.w   D1, D0
                move.w  D0, Obj_X(A1)                                    ; $0010
                move.w  Obj_Y(A0), D0                                    ; $0014
                move.b  (A2)+, D1
                move.b  D1, Obj_Control_Var_13(A1)                       ; $0043
                ext.w   D1
                add.w   D1, D0
                move.w  D0, Obj_Y(A1)                                    ; $0014
                addq.w  #$02, D2
                dbra    D6, Offset_0x041D9E
                moveq   #$00, D0
Offset_0x041DE8:
                rts                
;===============================================================================   
Load_Child_Object_Complex_A2:                                  ; Offset_0x041DEA
                moveq   #$00, D2
                move.w  (A2)+, D6
Offset_0x041DEE:
                jsr     (AllocateObjectAfterCurrent)                  ; Offset_0x011DE0
                bne.s   Offset_0x041E4C
                move.w  A0, Obj_Child_Ref(A1)                            ; $0046
                move.l  Obj_Map(A0), Obj_Map(A1)                  ; $000C, $000C
                move.l  Obj_Art_VRAM(A0), Obj_Art_VRAM(A1)        ; $000A, $000A
                move.l  (A2)+, (A1)
                move.l  (A2)+, Obj_Control_Var_0E(A1)                    ; $003E
                move.l  (A2)+, Obj_Control_Var_00(A1)                    ; $0030
                move.l  (A2)+, Obj_Control_Var_04(A1)                    ; $0034
                move.b  D2, Obj_Subtype(A1)                              ; $002C
                move.w  Obj_X(A0), D0                                    ; $0010
                move.b  (A2)+, D1
                move.b  D1, Obj_Control_Var_12(A1)                       ; $0042
                ext.w   D1
                add.w   D1, D0
                move.w  D0, Obj_X(A1)                                    ; $0010
                move.w  Obj_Y(A0), D0                                    ; $0014
                move.b  (A2)+, D1
                move.b  D1, Obj_Control_Var_13(A1)                       ; $0043
                ext.w   D1
                add.w   D1, D0
                move.w  D0, Obj_Y(A1)                                    ; $0014
                move.w  (A2)+, Obj_Speed_X(A1)                           ; $0018
                move.w  (A2)+, Obj_Speed_Y(A1)                           ; $001A
                addq.w  #$02, D2
                dbra    D6, Offset_0x041DEE
                moveq   #$00, D0
Offset_0x041E4C:
                rts
;===============================================================================
Load_Child_Object_Repeat_A2:                                   ; Offset_0x041E4E
                moveq   #$00, D2
                move.w  (A2)+, D6
Offset_0x041E52:
                move.l  A2, A3
                jsr     (AllocateObjectAfterCurrent)                  ; Offset_0x011DE0
                bne.s   Offset_0x041E9E
                move.w  A0, Obj_Child_Ref(A1)                            ; $0046
                move.l  Obj_Map(A0), Obj_Map(A1)                  ; $000C, $000C
                move.l  Obj_Art_VRAM(A0), Obj_Art_VRAM(A1)        ; $000A, $000A
                move.l  (A3)+, (A1)
                move.b  D2, Obj_Subtype(A1)                              ; $002C
                move.w  Obj_X(A0), D0                                    ; $0010
                move.b  (A3)+, D1
                move.b  D1, Obj_Control_Var_12(A1)                       ; $0042
                ext.w   D1
                add.w   D1, D0
                move.w  D0, Obj_X(A1)                                    ; $0010
                move.w  Obj_Y(A0), D0                                    ; $0014
                move.b  (A3)+, D1
                move.b  D1, Obj_Control_Var_13(A1)                       ; $0043
                ext.w   D1
                add.w   D1, D0
                move.w  D0, Obj_Y(A1)                                    ; $0014
                addq.w  #$02, D2
                dbra    D6, Offset_0x041E52
                moveq   #$00, D0
Offset_0x041E9E:
                rts     
;===============================================================================  
Load_Child_Object_Link_List_Repeat_A2:                         ; Offset_0x041EA0
                move.l  A0, A3
                moveq   #$00, D2
                move.w  (A2)+, D6
Offset_0x041EA6:
                jsr     (AllocateObjectAfterCurrent)                  ; Offset_0x011DE0
                bne.s   Offset_0x041EDE
                move.w  A3, Obj_Child_Ref(A1)                            ; $0046
                move.w  A1, Obj_Height_3(A3)                             ; $0044
                move.l  A1, A3
                move.l  Obj_Map(A0), Obj_Map(A1)                  ; $000C, $000C
                move.l  Obj_Art_VRAM(A0), Obj_Art_VRAM(A1)        ; $000A, $000A
                move.l  (A2), (A1)
                move.b  D2, Obj_Subtype(A1)                              ; $002C
                move.w  Obj_X(A0), Obj_X(A1)                      ; $0010, $0010
                move.w  Obj_Y(A0), Obj_Y(A1)                      ; $0014, $0014
                addq.w  #$02, D2
                dbra    D6, Offset_0x041EA6
                moveq   #$00, D0
Offset_0x041EDE:
                rts
;===============================================================================   
Load_Child_Object_Complex_Adjusted_A2:                         ; Offset_0x041EE0
                moveq   #$00, D2
                move.w  (A2)+, D6
Offset_0x041EE4:
                jsr     (AllocateObjectAfterCurrent)                  ; Offset_0x011DE0
                bne.s   Offset_0x041F58
                move.w  A0, Obj_Child_Ref(A1)                            ; $0046
                move.l  Obj_Map(A0), Obj_Map(A1)                  ; $000C, $000C
                move.l  Obj_Art_VRAM(A0), Obj_Art_VRAM(A1)        ; $000A, $000A
                move.l  (A2)+, (A1)
                move.l  (A2)+, Obj_Control_Var_0E(A1)                    ; $003E
                move.l  (A2)+, Obj_Control_Var_00(A1)                    ; $0030
                move.l  (A2)+, Obj_Control_Var_04(A1)                    ; $0034
                move.b  D2, Obj_Subtype(A1)                              ; $002C
                move.w  Obj_X(A0), D0                                    ; $0010
                move.b  (A2)+, D1
                move.b  D1, Obj_Control_Var_12(A1)                       ; $0042
                ext.w   D1
                btst    #$00, Obj_Flags(A0)                              ; $0004
                beq.s   Offset_0x041F24
                neg.w   D1
Offset_0x041F24:
                add.w   D1, D0
                move.w  D0, Obj_X(A1)                                    ; $0010
                move.w  Obj_Y(A0), D0                                    ; $0014
                move.b  (A2)+, D1
                move.b  D1, Obj_Control_Var_13(A1)                       ; $0043
                ext.w   D1
                add.w   D1, D0
                move.w  D0, Obj_Y(A1)                                    ; $0014
                move.w  (A2)+, D1
                btst    #$00, Obj_Flags(A0)                              ; $0004
                beq.s   Offset_0x041F48
                neg.w   D1
Offset_0x041F48:
                move.w  D1, Obj_Speed_X(A1)                              ; $0018
                move.w  (A2)+, Obj_Speed_Y(A1)                           ; $001A
                addq.w  #$02, D2
                dbra    D6, Offset_0x041EE4
                moveq   #$00, D0
Offset_0x041F58:
                rts    
;===============================================================================   
Load_Child_Object_Simple_A2:                                   ; Offset_0x041F5A
                moveq   #$00, D2
                move.w  (A2)+, D6
Offset_0x041F5E:
                jsr     (AllocateObjectAfterCurrent)                  ; Offset_0x011DE0
                bne.s   Offset_0x041F84
                move.w  A0, Obj_Child_Ref(A1)                            ; $0046
                move.l  (A2), (A1)
                move.b  D2, Obj_Subtype(A1)                              ; $002C
                move.w  Obj_X(A0), Obj_X(A1)                      ; $0010, $0010
                move.w  Obj_Y(A0), Obj_Y(A1)                      ; $0014, $0014
                addq.w  #$02, D2
                dbra    D6, Offset_0x041F5E
                moveq   #$00, D0
Offset_0x041F84:
                rts
;===============================================================================  
Load_Child_Object_A2_2:                                        ; Offset_0x041F86
                moveq   #$00, D2
                move.w  (A2)+, D6
Offset_0x041F8A:
                jsr     (AllocateObject)                     ; Offset_0x011DD8
                bne.s   Offset_0x041FD4
                move.w  A0, Obj_Child_Ref(A1)                            ; $0046
                move.l  Obj_Map(A0), Obj_Map(A1)                  ; $000C, $000C
                move.l  Obj_Art_VRAM(A0), Obj_Art_VRAM(A1)        ; $000A, $000A
                move.l  (A2)+, (A1)
                move.b  D2, Obj_Subtype(A1)                              ; $002C
                move.w  Obj_X(A0), D0                                    ; $0010
                move.b  (A2)+, D1
                move.b  D1, Obj_Control_Var_12(A1)                       ; $0042
                ext.w   D1
                add.w   D1, D0
                move.w  D0, Obj_X(A1)                                    ; $0010
                move.w  Obj_Y(A0), D0                                    ; $0014
                move.b  (A2)+, D1
                move.b  D1, Obj_Control_Var_13(A1)                       ; $0043
                ext.w   D1
                add.w   D1, D0
                move.w  D0, Obj_Y(A1)                                    ; $0014
                addq.w  #$02, D2
                dbra    D6, Offset_0x041F8A
                moveq   #$00, D0
Offset_0x041FD4:
                rts
;===============================================================================  
Load_Child_Object_Tree_List_Repeated_A2:                       ; Offset_0x041FD6
                move.l  A0, A3
                moveq   #$00, D2
                move.w  (A2)+, D6
Offset_0x041FDC:
                jsr     (AllocateObjectAfterCurrent)                  ; Offset_0x011DE0
                bne.s   Offset_0x042014
                move.w  A3, Obj_Child_Ref(A1)                            ; $0046
                move.w  A0, Obj_Height_3(A1)                             ; $0044
                move.l  A1, A3
                move.l  Obj_Map(A0), Obj_Map(A1)                  ; $000C, $000C
                move.l  Obj_Art_VRAM(A0), Obj_Art_VRAM(A1)        ; $000A, $000A
                move.l  (A2), (A1)
                move.b  D2, Obj_Subtype(A1)                              ; $002C
                move.w  Obj_X(A0), Obj_X(A1)                      ; $0010, $0010
                move.w  Obj_Y(A0), Obj_Y(A1)                      ; $0014, $0014
                addq.w  #$02, D2
                dbra    D6, Offset_0x041FDC
                moveq   #$00, D0
Offset_0x042014:
                rts         
;===============================================================================
Refresh_Child_Position:                                        ; Offset_0x042016
                move.w  Obj_Child_Ref(A0), A1                            ; $0046
                move.w  Obj_X(A1), D0                                    ; $0010
                move.b  Obj_Control_Var_12(A0), D1                       ; $0042
                ext.w   D1
                add.w   D1, D0
                move.w  D0, Obj_X(A0)                                    ; $0010
                move.w  Obj_Y(A1), D0                                    ; $0014
                move.b  Obj_Control_Var_13(A0), D1                       ; $0043
                ext.w   D1
                add.w   D1, D0
                move.w  D0, Obj_Y(A0)                                    ; $0014
                rts     
;===============================================================================
Refresh_Child_Position_Adjusted:                               ; Offset_0x04203C
                move.w  Obj_Child_Ref(A0), A1                            ; $0046
                move.w  Obj_X(A1), D0                                    ; $0010
                move.b  Obj_Control_Var_12(A0), D1                       ; $0042
                ext.w   D1
                bclr    #$00, Obj_Flags(A0)                              ; $0004
                btst    #$00, Obj_Flags(A1)                              ; $0004
                beq.s   Offset_0x042060
                neg.w   D1
                bset    #$00, Obj_Flags(A0)                              ; $0004
Offset_0x042060:
                add.w   D1, D0
                move.w  D0, Obj_X(A0)                                    ; $0010
                move.w  Obj_Y(A1), D0                                    ; $0014
                move.b  Obj_Control_Var_13(A0), D1                       ; $0043
                ext.w   D1
                bclr    #$01, Obj_Flags(A0)                              ; $0004
                btst    #$01, Obj_Flags(A1)                              ; $0004
                beq.s   Offset_0x042086
                neg.w   D1
                bset    #$01, Obj_Flags(A0)                              ; $0004
Offset_0x042086:
                add.w   D1, D0
                move.w  D0, Obj_Y(A0)                                    ; $0014
                rts 
;===============================================================================    
Animate_Raw:                                                   ; Offset_0x04208E
                move.l  Obj_Control_Var_00(A0), A1                       ; $0030
Animate_Raw_A1:                                                ; Offset_0x042092
                subq.b  #$01, Obj_Ani_Time(A0)                           ; $0024
                bpl.s   Offset_0x0420B4
                moveq   #$00, D0
                move.b  Obj_Ani_Frame(A0), D0                            ; $0023
                addq.w  #$01, D0
                move.b  D0, Obj_Ani_Frame(A0)                            ; $0023
                moveq   #$00, D1
                move.b  $01(A1, D0), D1
                bmi.s   Offset_0x0420B6
                move.b  (A1), Obj_Ani_Time(A0)                           ; $0024
                move.b  D1, Obj_Map_Id(A0)                               ; $0022
Offset_0x0420B4:
                rts
Offset_0x0420B6:
                neg.b   D1
                jsr     Offset_0x0420C2-$04(PC, D1)
                clr.b   Obj_Ani_Frame(A0)                                ; $0023
                rts         
;-------------------------------------------------------------------------------  
Offset_0x0420C2:
                bra     Animate_Raw_Restart                    ; Offset_0x0420DC
                bra     Animate_Raw_Jump                       ; Offset_0x0420CE
                bra     Animate_Raw_Custom_Code                ; Offset_0x0420E8
;===============================================================================
Animate_Raw_Jump:                                              ; Offset_0x0420CE
                move.b  $02(A1, D0), D1
                ext.w   D1
                lea     $00(A1, D1), A1
                move.l  A1, Obj_Control_Var_00(A0)                       ; $0030 
;===============================================================================
Animate_Raw_Restart:                                           ; Offset_0x0420DC
                move.b  $0001(A1), Obj_Map_Id(A0)                        ; $0022
                move.b  (A1), Obj_Ani_Time(A0)                           ; $0024
                rts                                                                
;===============================================================================
Animate_Raw_Custom_Code:                                       ; Offset_0x0420E8
                clr.b   Obj_Ani_Time(A0)                                 ; $0024
                move.l  Obj_Control_Var_04(A0), A1                       ; $0034
                jmp     (A1)    
;===============================================================================
Animate_Raw_Adjust_Flip_X:                                     ; Offset_0x0420F2
                move.l  Obj_Control_Var_00(A0), A1                       ; $0030
Animate_Raw_Adjust_Flip_X_A1:                                  ; Offset_0x0420F6
                subq.b  #$01, Obj_Ani_Time(A0)                           ; $0024
                bpl.s   Offset_0x042124
                moveq   #$00, D0
                move.b  Obj_Ani_Frame(A0), D0                            ; $0023
                addq.w  #$01, D0
                move.b  D0, Obj_Ani_Frame(A0)                            ; $0023
                moveq   #$00, D1
                move.b  $01(A1, D0), D1
                bmi.s   Offset_0x0420B6
                bclr    #$06, D1
                beq.s   Offset_0x04211C
                bchg    #00, Obj_Flags(A0)                               ; $0004
Offset_0x04211C:
                move.b  (A1), Obj_Ani_Time(A0)                           ; $0024
                move.b  D1, Obj_Map_Id(A0)                               ; $0022
Offset_0x042124:
                rts     
;===============================================================================
Animate_Raw_Adjust_Flip_Y:                                     ; Offset_0x042126
                move.l  Obj_Control_Var_00(A0), A1                       ; $0030
Animate_Raw_Adjust_Flip_Y_A1:                                  ; Offset_0x04212A
                subq.b  #$01, Obj_Ani_Time(A0)                           ; $0024
                bpl.s   Offset_0x04215A
                moveq   #$00, D0
                move.b  Obj_Ani_Frame(A0), D0                            ; $0023
                addq.w  #$01, D0
                move.b  D0, Obj_Ani_Frame(A0)                            ; $0023
                moveq   #$00, D1
                move.b  $01(A1, D0), D1
                bmi     Offset_0x0420B6
                bclr    #$06, D1
                beq.s   Offset_0x042152
                bchg    #01, Obj_Flags(A0)                               ; $0004
Offset_0x042152:
                move.b  (A1), Obj_Ani_Time(A0)                           ; $0024
                move.b  D1, Obj_Map_Id(A0)                               ; $0022
Offset_0x04215A:
                rts
;===============================================================================
Animate_Raw_Multi_Delay:                                       ; Offset_0x04215C
                move.l  Obj_Control_Var_00(A0), A1                       ; $0030
Animate_Raw_Multi_Delay_A1:                                    ; Offset_0x042160                 
                subq.b  #$01, Obj_Ani_Time(A0)                           ; $0024
                bpl.s   Offset_0x042188
                moveq   #$00, D0
                move.b  Obj_Ani_Frame(A0), D0                            ; $0023
                addq.w  #$02, D0
                move.b  D0, Obj_Ani_Frame(A0)                            ; $0023
                moveq   #$00, D1
                move.b  $00(A1, D0), D1
                bmi.s   Offset_0x04218C
                move.b  D1, Obj_Map_Id(A0)                               ; $0022
                move.b  $01(A1, D0), Obj_Ani_Time(A0)                    ; $0024
                moveq   #$01, D2
                rts
Offset_0x042188:
                moveq   #$00, D2
                rts
Offset_0x04218C:
                neg.b   D1
                jsr     Offset_0x042198-$04(PC, D1)
                clr.b   Obj_Ani_Frame(A0)                                ; $0023
                rts       
;-------------------------------------------------------------------------------
Offset_0x042198:
                bra     Offset_0x0421B2
                bra     Offset_0x0421A4
                bra     Offset_0x0421C0       
;-------------------------------------------------------------------------------
Offset_0x0421A4:
                move.b  $01(A1, D0), D1
                ext.w   D1
                lea     $00(A1, D1), A1
                move.l  A1, Obj_Control_Var_00(A0)                       ; $0030     
;-------------------------------------------------------------------------------
Offset_0x0421B2:
                move.b  (A1), Obj_Map_Id(A0)                             ; $0022
                move.b  $0001(A1), Obj_Ani_Time(A0)                      ; $0024
                moveq   #$01, D2
                rts       
;-------------------------------------------------------------------------------
Offset_0x0421C0:
                clr.b   Obj_Ani_Time(A0)                                 ; $0024
                move.l  Obj_Control_Var_04(A0), A1                       ; $0034
                jsr     (A1)
                moveq   #-$01, D2
                rts   
;===============================================================================  
Animate_Raw_Multi_Delay_Flip_X:                                ; Offset_0x0421CE
                move.l  Obj_Control_Var_00(A0), A1                       ; $0030
Animate_Raw_Multi_Delay_Flip_X_A1:                             ; Offset_0x0421D2                
                subq.b  #$01, Obj_Ani_Time(A0)                           ; $0024
                bpl.s   Offset_0x042206
                moveq   #$00, D0
                move.b  Obj_Ani_Frame(A0), D0                            ; $0023
                addq.w  #$02, D0
                move.b  D0, Obj_Ani_Frame(A0)                            ; $0023
                moveq   #$00, D1
                move.b  $00(A1, D0), D1
                bmi.s   Offset_0x04218C
                bclr    #$06, D1
                beq.s   Offset_0x0421F8
                bchg    #00, Obj_Flags(A0)                               ; $0004
Offset_0x0421F8:
                move.b  D1, Obj_Map_Id(A0)                               ; $0022
                move.b  $01(A1, D0), Obj_Ani_Time(A0)                    ; $0024
                moveq   #$01, D2
                rts
Offset_0x042206:
                moveq   #$00, D2
                rts      
;===============================================================================  
Animate_Raw_Multi_Delay_Flip_Y:                                ; Offset_0x04220A
                move.l  Obj_Control_Var_00(A0), A1                       ; $0030
Animate_Raw_Multi_Delay_Flip_Y_A1:                             ; Offset_0x04220E                 
                subq.b  #$01, Obj_Ani_Time(A0)                           ; $0024
                bpl.s   Offset_0x042244
                moveq   #$00, D0
                move.b  Obj_Ani_Frame(A0), D0                            ; $0023
                addq.w  #$02, D0
                move.b  D0, Obj_Ani_Frame(A0)                            ; $0023
                moveq   #$00, D1
                move.b  $00(A1, D0), D1
                bmi     Offset_0x04218C
                bclr    #$06, D1
                beq.s   Offset_0x042236
                bchg    #01, Obj_Flags(A0)                               ; $0004
Offset_0x042236:
                move.b  D1, Obj_Map_Id(A0)                               ; $0022
                move.b  $01(A1, D0), Obj_Ani_Time(A0)                    ; $0024
                moveq   #$01, D2
                rts
Offset_0x042244:
                moveq   #$00, D2
                rts     
;===============================================================================  
Animate_Raw_Get_Faster:                                        ; Offset_0x042248
                move.l  Obj_Control_Var_00(A0), A1                       ; $0030
Animate_Raw_Get_Faster_A1:                                     ; Offset_0x04224C                
                bset    #$05, Obj_Control_Var_08(A0)                     ; $0038
                bne.s   Offset_0x04225C
                move.b  (A1), Obj_Timer(A0)                              ; $002E
                clr.b   Obj_Player_Status(A0)                            ; $002F
Offset_0x04225C:
                subq.b  #$01, Obj_Ani_Time(A0)                           ; $0024
                bpl.s   Offset_0x042294
                move.b  Obj_Timer(A0), D2                                ; $002E
                moveq   #$00, D0
                move.b  Obj_Ani_Frame(A0), D0                            ; $0023
                addq.b  #$01, D0
                move.b  $02(A1, D0), D1
                bpl.s   Offset_0x042284
                moveq   #$00, D0
                move.b  $0002(A1), D1
                tst.b   D2
                beq.s   Offset_0x042298
                subq.b  #$01, D2
                move.b  D2, Obj_Timer(A0)                                ; $002E
Offset_0x042284:
                move.b  D0, Obj_Ani_Frame(A0)                            ; $0023
                move.b  D1, Obj_Map_Id(A0)                               ; $0022
                move.b  D2, Obj_Ani_Time(A0)                             ; $0024
                moveq   #$01, D2
                rts
Offset_0x042294:
                moveq   #$00, D2
                rts
Offset_0x042298:
                move.b  D0, Obj_Ani_Frame(A0)                            ; $0023
                move.b  D1, Obj_Map_Id(A0)                               ; $0022
                move.b  D2, Obj_Ani_Time(A0)                             ; $0024
                move.b  Obj_Player_Status(A0), D0                        ; $002F
                addq.b  #$01, D0
                move.b  D0, Obj_Player_Status(A0)                        ; $002F
                cmp.b   $0001(A1), D0
                bcs.s   Offset_0x0422C4
                bclr    #$05, Obj_Control_Var_08(A0)                     ; $0038
                clr.b   Obj_Player_Status(A0)                            ; $002F
                move.l  Obj_Control_Var_04(A0), A2                       ; $0034
                jsr     (A2)
Offset_0x0422C4:
                moveq   #-$01, D2
                rts         
;===============================================================================  
Animate_Raw_Get_Slower:                                        ; Offset_0x0422C8
                move.l  Obj_Control_Var_00(A0), A1                       ; $0030
Animate_Raw_Get_Slower_A1:                                     ; Offset_0x0422CC
                bset    #$05, Obj_Control_Var_08(A0)                     ; $0038
                bne.s   Offset_0x0422D8
                clr.w   Obj_Timer(A0)                                    ; $002E
Offset_0x0422D8:
                subq.b  #$01, Obj_Ani_Time(A0)                           ; $0024
                bpl.s   Offset_0x04230C
                move.b  Obj_Timer(A0), D2                                ; $002E
                moveq   #$00, D0
                move.b  Obj_Ani_Frame(A0), D0                            ; $0023
                addq.b  #$01, D0
                move.b  $01(A1, D0), D1
                bpl.s   Offset_0x0422F8
                moveq   #$00, D0
                move.b  $0001(A1), D1
                addq.b  #$01, D2
Offset_0x0422F8:
                move.b  D0, Obj_Ani_Frame(A0)                            ; $0023
                move.b  D1, Obj_Map_Id(A0)                               ; $0022
                move.b  D2, Obj_Ani_Time(A0)                             ; $0024
                cmp.b   (A1), D2
                bcc.s   Offset_0x04230E
                move.b  D2, Obj_Timer(A0)                                ; $002E
Offset_0x04230C:
                rts
Offset_0x04230E:
                move.b  Obj_Player_Status(A0), D0                        ; $002F
                addq.b  #$01, D0
                move.b  D0, Obj_Player_Status(A0)                        ; $002F
                cmp.b   $0001(A1), D0
                bcs.s   Offset_0x04230C
                bclr    #$05, Obj_Control_Var_08(A0)                     ; $0038
                clr.b   Obj_Player_Status(A0)                            ; $002F
                move.l  Obj_Control_Var_04(A0), A2                       ; $0034
                jmp     (A2)
;===============================================================================  
Swing_Up_And_Down:                                             ; Offset_0x04232E
                move.w  Obj_Control_Var_10(A0), D0                       ; $0040
                move.w  Obj_Speed_Y(A0), D1                              ; $001A
                move.w  Obj_Control_Var_0E(A0), D2                       ; $003E
                moveq   #$00, D3
                btst    #$00, Obj_Control_Var_08(A0)                     ; $0038
                bne.s   Offset_0x04235A
                neg.w   D0
                add.w   D0, D1
                neg.w   D2
                cmp.w   D2, D1
                bgt.s   Offset_0x04236C
                bset    #$00, Obj_Control_Var_08(A0)                     ; $0038
                neg.w   D0
                neg.w   D2
                moveq   #$01, D3
Offset_0x04235A:
                add.w   D0, D1
                cmp.w   D2, D1
                blt.s   Offset_0x04236C
                bclr    #$00, Obj_Control_Var_08(A0)                     ; $0038
                neg.w   D0
                add.w   D0, D1
                moveq   #$01, D3
Offset_0x04236C:
                move.w  D1, Obj_Speed_Y(A0)                              ; $001A
                rts                         
;===============================================================================  
Swing_Left_And_Right:                                          ; Offset_0x042372
                move.w  Obj_Control_Var_0C(A0), D0                       ; $003C
                move.w  Obj_Speed_X(A0), D1                              ; $0018
                move.w  Obj_Control_Var_0A(A0), D2                       ; $003A
                moveq   #$00, D3
                btst    #$03, Obj_Control_Var_08(A0)                     ; $0038
                bne.s   Offset_0x04239E
                neg.w   D0
                add.w   D0, D1
                neg.w   D2
                cmp.w   D2, D1
                bgt.s   Offset_0x0423B0
                bset    #$03, Obj_Control_Var_08(A0)                     ; $0038
                neg.w   D0
                neg.w   D2
                moveq   #$01, D3
Offset_0x04239E:
                add.w   D0, D1
                cmp.w   D2, D1
                blt.s   Offset_0x0423B0
                bclr    #$03, Obj_Control_Var_08(A0)                     ; $0038
                neg.w   D0
                add.w   D0, D1
                moveq   #$01, D3
Offset_0x0423B0:
                move.w  D1, Obj_Speed_X(A0)                              ; $0018
                rts               
;===============================================================================  
Swing_Up_And_Down_Count:                                       ; Offset_0x0423B6
                bsr     Swing_Up_And_Down                      ; Offset_0x04232E
                tst.w   D3
                beq.s   Offset_0x0423D0
                move.b  Obj_Control_Var_09(A0), D2                       ; $0039
                subq.b  #$01, D2
                move.b  D2, Obj_Control_Var_09(A0)                       ; $0039
                bmi.s   Offset_0x0423CE
                moveq   #$00, D0
                rts
Offset_0x0423CE:
                moveq   #$01, D0
Offset_0x0423D0:
                rts 
;===============================================================================             
Run_Object_Wait_Timer_A0:                                      ; Offset_0x0423D2  
                subq.w  #$01, Obj_Timer(A0)                              ; $002E
                bmi.s   Run_Object_Time_Out                    ; Offset_0x0423DA
                rts
Run_Object_Time_Out:                                           ; Offset_0x0423DA
                move.l  Obj_Child(A0), A1                                ; $0034
                jmp     (A1)           
;===============================================================================   
Run_Object_Hit_Floor_A0:                                       ; Offset_0x0423E0
                jsr     (ObjHitFloor)                          ; Offset_0x009D84
                tst.w   D1
                bmi.s   Run_Object_Hit_Floor                   ; Offset_0x0423EE
                beq.s   Run_Object_Hit_Floor                   ; Offset_0x0423EE
                rts
Run_Object_Hit_Floor:                                          ; Offset_0x0423EE
                add.w   D1, Obj_Y(A0)                                    ; $0014
                move.l  Obj_Child(A0), A1                                ; $0034
                jmp     (A1)
;===============================================================================   
Run_Object_Hit_Floor_D3_A0:                                    ; Offset_0x0423F8
                move.w  Obj_Speed_X(A0), D3                              ; $0018
                ext.l   D3
                lsl.l   #$08, D3
                add.l   Obj_X(A0), D3                                    ; $0010
                swap.w  D3
                jsr     (ObjHitFloor_D3)                       ; Offset_0x009D88
                cmpi.w  #$FFFF, D1
                blt.s   Run_Object_Hit_Floor_D3                ; Offset_0x04241E
                cmpi.w  #$000C, D1
                bge.s   Run_Object_Hit_Floor_D3                ; Offset_0x04241E
                add.w   D1, Obj_Y(A0)                                    ; $0014
                rts
Run_Object_Hit_Floor_D3:                                       ; Offset_0x04241E
                move.l  Obj_Child(A0), A1                                ; $0034
                jmp     (A1)          
;===============================================================================
Run_Object_Hit_Wall_Right_A0:                                  ; Offset_0x042424
                jsr     (Object_HitWall_Right)                 ; Offset_0x009EEE
                tst.w   D1
                bmi.s   Run_Object_Hit_Wall_Right              ; Offset_0x042430
                rts
Run_Object_Hit_Wall_Right:                                     ; Offset_0x042430
                add.w   D1, Obj_X(A0)                                    ; $0010
                move.l  Obj_Child(A0), A1                                ; $0034
                jmp     (A1)       
;===============================================================================
Run_Object_Hit_Wall_Left_A0:                                   ; Offset_0x04243A
                jsr     (Object_HitWall_Left)                  ; Offset_0x00A138
                tst.w   D1
                bmi.s   Run_Object_Hit_Wall_Left               ; Offset_0x042446
                rts
Run_Object_Hit_Wall_Left:                                      ; Offset_0x042446
                add.w   D1, Obj_X(A0)                                    ; $0010
                move.l  Obj_Child(A0), A1                                ; $0034
                jmp     (A1)           
;===============================================================================
Add_To_Response_List_And_Display:                              ; Offset_0x042450
                jsr     (Add_To_Collision_Response_List)       ; Offset_0x00A540
                jmp     (DisplaySprite)                        ; Offset_0x011148  
;===============================================================================
Child_Display_Or_Delete:                                       ; Offset_0x04245C
                move.w  Obj_Child_Ref(A0), A1                            ; $0046
                btst    #$07, Obj_Status(A1)                             ; $002A
                bne.s   Child_Delete                           ; Offset_0x04246E
                jmp     (DisplaySprite)                        ; Offset_0x011148
Child_Delete:                                                  ; Offset_0x04246E
                bra     Go_Delete_Object_A0                    ; Offset_0x042D3E         
;===============================================================================
Child_Display_Touch_Or_Delete:                                 ; Offset_0x042472
                move.w  Obj_Child_Ref(A0), A1                            ; $0046
                btst    #$07, Obj_Status(A1)                             ; $002A
                bne.s   Child_Delete_2                         ; Offset_0x04248A
                jsr     (Add_To_Collision_Response_List)       ; Offset_0x00A540
                jmp     (DisplaySprite)                        ; Offset_0x011148
Child_Delete_2:                                                ; Offset_0x04248A
                bra     Go_Delete_Object_A0                    ; Offset_0x042D3E  
;===============================================================================
Child_Display_Or_Delete_Remember:                              ; Offset_0x04248E
                move.w  Obj_Child_Ref(A0), A1                            ; $0046
                btst    #$07, Obj_Status(A1)                             ; $002A
                bne.s   Delete_Remember                        ; Offset_0x0424A0
                jmp     (DisplaySprite)                        ; Offset_0x011148
Delete_Remember                                                ; Offset_0x0424A0
                bsr     Remove_From_Tracking_Slot              ; Offset_0x042BFA
                bra     Go_Delete_Object_A0                    ; Offset_0x042D3E     
;===============================================================================
Child_Display_Or_Delete_2:                                     ; Offset_0x0424A8
                move.w  Obj_Child_Ref(A0), A1                            ; $0046
                btst    #$04, Obj_Control_Var_08(A1)                     ; $0038
                bne.s   Child_Delete_3                         ; Offset_0x0424BA
                jmp     (DisplaySprite)                        ; Offset_0x011148
Child_Delete_3:                                                ; Offset_0x0424BA
                bra     Go_Delete_Object_A0_2                  ; Offset_0x042D4C      
;===============================================================================
Child_Display_Touch_Or_Delete_2:                               ; Offset_0x0424BE
                move.w  Obj_Child_Ref(A0), A1                            ; $0046
                btst    #$04, Obj_Control_Var_08(A1)                     ; $0038
                bne.s   Offset_0x0424DE
                btst    #$07, Obj_Status(A1)                             ; $002A
                bne.s   Offset_0x0424D8
                jsr     (Add_To_Collision_Response_List)       ; Offset_0x00A540
Offset_0x0424D8:
                jmp     (DisplaySprite)                        ; Offset_0x011148
Offset_0x0424DE:
                bra     Go_Delete_Object_A0_2                  ; Offset_0x042D4C    
;===============================================================================
Child_Display_Or_Flicker_Move:                                 ; Offset_0x0424E2
                move.w  Obj_Child_Ref(A0), A1                            ; $0046
                btst    #$07, Obj_Status(A1)                             ; $002A
                bne.s   Run_Flicker_Move                       ; Offset_0x0424F4
                jmp     (DisplaySprite)                        ; Offset_0x011148
;-------------------------------------------------------------------------------                
Run_Flicker_Move:                                              ; Offset_0x0424F4
                bset    #$07, Obj_Status(A0)                             ; $002A
                move.l  #Obj_Flicker_Move, (A0)                ; Offset_0x042AFE
                clr.b   Obj_Col_Flags(A0)                                ; $0028
                bsr     Set_Indexed_Velocity                   ; Offset_0x042D5A
                jmp     (DisplaySprite)                        ; Offset_0x011148  
;===============================================================================
Child_Display_Or_Flicker_Move_2:                               ; Offset_0x04250E
                move.w  Obj_Child_Ref(A0), A1                            ; $0046
                btst    #$04, Obj_Control_Var_08(A1)                     ; $0038
                bne.s   Run_Flicker_Move                       ; Offset_0x0424F4
                jmp     (DisplaySprite)                        ; Offset_0x011148   
;===============================================================================
Child_Display_Touch_Or_Flicker_Move:                           ; Offset_0x042520
                move.w  Obj_Child_Ref(A0), A1                            ; $0046
                btst    #$07, Obj_Status(A1)                             ; $002A
                bne.s   Run_Flicker_Move                       ; Offset_0x0424F4
                jsr     (Add_To_Collision_Response_List)       ; Offset_0x00A540
                jmp     (DisplaySprite)                        ; Offset_0x011148    
;===============================================================================
Child_Display_Touch_Or_Flicker_Move_2:                         ; Offset_0x042538
                move.w  Obj_Child_Ref(A0), A1                            ; $0046
                btst    #$04, Obj_Control_Var_08(A1)                     ; $0038
                bne.s   Run_Flicker_Move                       ; Offset_0x0424F4
                btst    #$07, Obj_Status(A1)                             ; $002A
                beq.s   Offset_0x042558
                bset    #$07, Obj_Status(A0)                             ; $002A
                jmp     (DisplaySprite)                        ; Offset_0x011148
Offset_0x042558:
                jsr     (Add_To_Collision_Response_List)       ; Offset_0x00A540
                jmp     (DisplaySprite)                        ; Offset_0x011148   
;===============================================================================  
Inc_Level_Gradual_Max_X:                                       ; Offset_0x042564
                move.w  (Sonic_Level_Limits_Max_X).w, D0             ; $FFFFEE16
                move.l  Obj_Control_Var_00(A0), D1                       ; $0030
                addi.l  #$00004000, D1
                move.l  D1, Obj_Control_Var_00(A0)                       ; $0030
                swap.w  D1
                add.w   D1, D0
                cmp.w   (Target_Camera_Max_X).w, D0                  ; $FFFFFA92
                bcc.s   Offset_0x042586
                move.w  D0, (Sonic_Level_Limits_Max_X).w             ; $FFFFEE16
                rts
Offset_0x042586:
                move.w  (Target_Camera_Max_X).w, (Sonic_Level_Limits_Max_X).w ; $FFFFFA92, $FFFFEE16
;-------------------------------------------------------------------------------                
J_Delete_Object:                                               ; Offset_0x04258C
                jmp     (DeleteObject)                         ; Offset_0x011138 
;===============================================================================
Inc_Level_Gradual_Min_X:                                       ; Offset_0x042592
                move.w  (Sonic_Level_Limits_Min_X).w, D0             ; $FFFFEE14
                move.l  Obj_Control_Var_00(A0), D1                       ; $0030
                addi.l  #$00004000, D1
                move.l  D1, Obj_Control_Var_00(A0)                       ; $0030
                swap.w  D1
                sub.w   D1, D0
                cmp.w   (Target_Camera_Min_X).w, D0                  ; $FFFFFA94
                ble.s   Offset_0x0425B4
                move.w  D0, (Sonic_Level_Limits_Min_X).w             ; $FFFFEE14
                rts
Offset_0x0425B4:
                move.w  (Target_Camera_Min_X).w, (Sonic_Level_Limits_Min_X).w ; $FFFFFA94, $FFFFEE14
                jmp     (DeleteObject)                         ; Offset_0x011138     
;===============================================================================
Inc_Level_Gradual_Min_Y:                                       ; Offset_0x0425C0
                move.w  (Sonic_Level_Limits_Min_Y).w, D0             ; $FFFFEE18
                move.l  Obj_Control_Var_00(A0), D1                       ; $0030
                addi.l  #$00004000, D1
                move.l  D1, Obj_Control_Var_00(A0)                       ; $0030
                swap.w  D1
                sub.w   D1, D0
                cmp.w   (Target_Camera_Min_Y).w, D0                  ; $FFFFFA96
                ble.s   Offset_0x0425E2
                move.w  D0, (Sonic_Level_Limits_Min_Y).w             ; $FFFFEE18
                rts
Offset_0x0425E2:
                move.w  (Target_Camera_Min_Y).w, (Sonic_Level_Limits_Min_Y).w ; $FFFFFA96, $FFFFEE18
                jmp     (DeleteObject)                         ; Offset_0x011138     
;===============================================================================
Inc_Level_Gradual_Max_Y:                                       ; Offset_0x0425EE
                move.w  (Sonic_Level_Limits_Max_Y).w, D0             ; $FFFFEE1A
                move.l  Obj_Control_Var_00(A0), D1                       ; $0030
                addi.l  #$00004000, D1
                move.l  D1, Obj_Control_Var_00(A0)                       ; $0030
                swap.w  D1
                add.w   D1, D0
                cmp.w   (Target_Camera_Max_Y).w, D0                  ; $FFFFFA98
                bgt.s   Offset_0x042610
                move.w  D0, (Sonic_Level_Limits_Max_Y).w             ; $FFFFEE1A
                rts
Offset_0x042610:
                move.w  (Target_Camera_Max_Y).w, (Sonic_Level_Limits_Max_Y).w ; $FFFFFA98, $FFFFEE1A
                jmp     (DeleteObject)                         ; Offset_0x011138      
;===============================================================================
Level_Resize_Max_X:                                            ; Offset_0x04261C
                dc.w    $0000
                dc.l    Inc_Level_Gradual_Max_X                ; Offset_0x042564
;===============================================================================                
Level_Resize_Min_X:                                            ; Offset_0x042622                
                dc.w    $0000
                dc.l    Inc_Level_Gradual_Min_X                ; Offset_0x042592  
;===============================================================================   
Level_Resize_Min_Y:                                            ; Offset_0x042628                
                dc.w    $0000
                dc.l    Inc_Level_Gradual_Min_Y                ; Offset_0x0425C0
;===============================================================================   
Level_Resize_Max_Y:                                            ; Offset_0x04262E                   
                dc.w    $0000
                dc.l    Inc_Level_Gradual_Max_Y                ; Offset_0x0425EE        
;===============================================================================
Find_Player:                                                   ; Offset_0x042634
                moveq   #$00, D0
                moveq   #$00, D1
                lea     (Obj_Player_One).w, A1                       ; $FFFFB000
                move.w  Obj_X(A0), D2                                    ; $0010
                sub.w   Obj_X(A1), D2                                    ; $0010
                bpl.s   Offset_0x04264A
                neg.w   D2
                addq.w  #$02, D0
Offset_0x04264A:
                lea     (Obj_Player_Two).w, A2                       ; $FFFFB04A
                move.w  Obj_X(A0), D3                                    ; $0010
                sub.w   Obj_X(A2), D3                                    ; $0010
                bpl.s   Offset_0x04265C
                neg.w   D3
                addq.w  #$02, D1
Offset_0x04265C:
                cmp.w   D3, D2
                bls.s   Offset_0x042666
                move.l  A2, A1
                move.w  D1, D0
                move.w  D3, D2
Offset_0x042666:
                moveq   #$00, D1
                move.w  Obj_Y(A0), D3                                    ; $0014
                sub.w   Obj_Y(A1), D3                                    ; $0014
                bpl.s   Offset_0x042676
                neg.w   D3
                addq.w  #$02, D1
Offset_0x042676:
                rts
;===============================================================================  
Change_Flip_X:                                                 ; Offset_0x042678
                bclr    #$00, Obj_Flags(A0)                              ; $0004
                tst.w   D0
                beq.s   Offset_0x042688
                bset    #$00, Obj_Flags(A0)                              ; $0004
Offset_0x042688:
                rts
;===============================================================================  
Change_Flip_X_With_Velocity:                                   ; Offset_0x04268A
                bclr    #$00, Obj_Flags(A0)                              ; $0004
                tst.w   Obj_Speed_X(A0)                                  ; $0018
                bmi.s   Offset_0x04269C
                bset    #$00, Obj_Flags(A0)                              ; $0004
Offset_0x04269C:
                rts       
;===============================================================================  
Find_Other_Object:                                             ; Offset_0x04269E
                moveq   #$00, D0
                moveq   #$00, D1
                move.w  Obj_X(A0), D2                                    ; $0010
                sub.w   Obj_X(A1), D2                                    ; $0010
                bpl.s   Offset_0x0426B0
                neg.w   D2
                addq.w  #$02, D0
Offset_0x0426B0:
                moveq   #$00, D1
                move.w  Obj_Y(A0), D3                                    ; $0014
                sub.w   Obj_Y(A1), D3                                    ; $0014
                bpl.s   Offset_0x0426C0
                neg.w   D3
                addq.w  #$02, D1
Offset_0x0426C0:
                rts   
;===============================================================================  
Move_Light_Gravity:                                            ; Offset_0x0426C2
                moveq   #$20, D1
                move.w  Obj_Speed_X(A0), D0                              ; $0018
                ext.l   D0
                lsl.l   #$08, D0
                add.l   D0, Obj_X(A0)                                    ; $0010
                move.w  Obj_Speed_Y(A0), D0                              ; $001A
                add.w   D1, Obj_Speed_Y(A0)                              ; $001A
                ext.l   D0
                lsl.l   #$08, D0
                add.l   D0, Obj_Y(A0)                                    ; $0014
                rts     
;===============================================================================
Move_Sprite_Circular_Simple:                                   ; Offset_0x0426E2
                move.b  Obj_Control_Var_0C(A0), D0                       ; $003C
                jsr     (CalcSine)                             ; Offset_0x001B20
                asr.w   D2, D0
                asr.w   D2, D1
                move.w  Obj_Child_Ref(A0), A1                            ; $0046
                move.w  Obj_X(A1), D2                                    ; $0010
                move.w  Obj_Y(A1), D3                                    ; $0014
                add.w   D0, D2
                add.w   D1, D3
                move.w  D2, Obj_X(A0)                                    ; $0010
                move.w  D3, Obj_Y(A0)                                    ; $0014
                rts  
;===============================================================================
Move_Sprite_Circular_Simple_Offset:                            ; Offset_0x04270A
                move.b  Obj_Control_Var_0C(A0), D0                       ; $003C
                jsr     (CalcSine)                             ; Offset_0x001B20
                asr.w   D2, D0
                asr.w   D2, D1
                move.w  Obj_Child_Ref(A0), A1                            ; $0046
                move.w  Obj_X(A1), D2                                    ; $0010
                move.w  Obj_Y(A1), D3                                    ; $0014
                move.b  Obj_Control_Var_12(A0), D4                       ; $0042
                ext.w   D4
                add.w   D4, D2
                move.b  Obj_Control_Var_13(A0), D4                       ; $0043
                ext.w   D4
                add.w   D4, D3
                add.w   D0, D2
                add.w   D1, D3
                move.w  D2, Obj_X(A0)                                    ; $0010
                move.w  D3, Obj_Y(A0)                                    ; $0014
                rts   
;===============================================================================
Move_Sprite_At_Angle_Lookup:                                   ; Offset_0x042742
                moveq   #$00, D0
                move.b  Obj_Control_Var_0C(A0), D0                       ; $003C
                move.w  D0, D1
                andi.w  #$003F, D0
                lsr.w   #$05, D1
                andi.w  #$0006, D1
                move.w  Obj_Child_Ref(A0), A1                            ; $0046
                lea     Obj_Control_Var_10(A2), A3                       ; $0040
                move.w  Obj_X(A1), D2                                    ; $0010
                move.w  Obj_Y(A1), D3                                    ; $0014
                move.w  D0, D4
                not.w   D4
                move.w  At_Angle_Lookup_List(PC, D1), D1       ; Offset_0x04277A
                jsr     At_Angle_Lookup_List(PC, D1)           ; Offset_0x04277A
                move.w  D2, Obj_X(A0)                                    ; $0010
                move.w  D3, Obj_Y(A0)                                    ; $0014
                rts     
;-------------------------------------------------------------------------------
At_Angle_Lookup_List:                                          ; Offset_0x04277A
                dc.w    At_Angle_0x00_To_0x3F-At_Angle_Lookup_List ; Offset_0x042782
                dc.w    At_Angle_0x40_To_0x7F-At_Angle_Lookup_List ; Offset_0x042792
                dc.w    At_Angle_0x80_To_0xBF-At_Angle_Lookup_List ; Offset_0x0427A4
                dc.w    At_Angle_0xC0_To_0xFF-At_Angle_Lookup_List ; Offset_0x0427BA 
;-------------------------------------------------------------------------------
At_Angle_0x00_To_0x3F:                                         ; Offset_0x042782
                moveq   #$00, D1
                move.b  $00(A2, D0), D1
                add.w   D1, D2
                move.b  $00(A3, D4), D1
                add.w   D1, D3
                rts    
;-------------------------------------------------------------------------------
At_Angle_0x40_To_0x7F:                                         ; Offset_0x042792
                moveq   #$00, D1
                move.b  $00(A3, D4), D1
                add.w   D1, D2
                move.b  $00(A2, D0), D1
                neg.w   D1
                add.w   D1, D3
                rts 
;-------------------------------------------------------------------------------
At_Angle_0x80_To_0xBF:                                         ; Offset_0x0427A4
                moveq   #$00, D1
                move.b  $00(A2, D0), D1
                neg.w   D1
                add.w   D1, D2
                moveq   #$00, D1
                move.b  $00(A3, D4), D1
                neg.w   D1
                add.w   D1, D3
                rts  
;-------------------------------------------------------------------------------
At_Angle_0xC0_To_0xFF:                                         ; Offset_0x0427BA
                moveq   #$00, D1
                move.b  $00(A3, D4), D1
                neg.w   D1
                add.w   D1, D2
                moveq   #$00, D1
                move.b  $00(A2, D0), D1
                add.w   D1, D3
                rts  
;===============================================================================        
Move_Sprite_Angle_Y_Lookup:                                    ; Offset_0x0427CE
                moveq   #$00, D0
                move.b  Obj_Control_Var_0C(A0), D0                       ; $003C
                move.w  D0, D1
                andi.w  #$003F, D0
                lsr.w   #$05, D1
                andi.w  #$0006, D1
                move.w  Obj_Child_Ref(A0), A1                            ; $0046
                lea     Obj_Control_Var_10(A2), A3                       ; $0040
                move.w  Obj_Y(A1), D3                                    ; $0014
                move.w  D0, D4
                not.w   D4
                move.w  Offset_0x042800(PC, D1), D1
                jsr     Offset_0x042800(PC, D1)
                add.w   D1, D3
                move.w  D3, Obj_Y(A0)                                    ; $0014
                rts   
;-------------------------------------------------------------------------------
Offset_0x042800:
                dc.w    Offset_0x042808-Offset_0x042800
                dc.w    Offset_0x042810-Offset_0x042800
                dc.w    Offset_0x04281A-Offset_0x042800
                dc.w    Offset_0x042824-Offset_0x042800    
;-------------------------------------------------------------------------------
Offset_0x042808:
                moveq   #$00, D1
                move.b  $00(A3, D4), D1
                rts  
;-------------------------------------------------------------------------------
Offset_0x042810:
                moveq   #$00, D1
                move.b  $00(A2, D0), D1
                neg.w   D1
                rts 
;-------------------------------------------------------------------------------
Offset_0x04281A:
                moveq   #$00, D1
                move.b  $00(A3, D4), D1
                neg.w   D1
                rts 
;-------------------------------------------------------------------------------
Offset_0x042824:
                moveq   #$00, D1
                move.b  $00(A2, D0), D1
                rts                                                                                
;===============================================================================
Move_Sprite_Angle_X_Lookup_Offset:                             ; Offset_0x04282C
                moveq   #$00, D0
                move.b  Obj_Control_Var_0C(A0), D0                       ; $003C
                move.b  D0, D1
                rol.b   #$03, D1
                andi.w  #$0006, D1
                move.w  Offset_0x042842(PC, D1), D2
                jmp     Offset_0x042842(PC, D2)                   
;-------------------------------------------------------------------------------
Offset_0x042842:
                dc.w    Offset_0x04284A-Offset_0x042842
                dc.w    Offset_0x042852-Offset_0x042842
                dc.w    Offset_0x04285E-Offset_0x042842
                dc.w    Offset_0x04286E-Offset_0x042842  
;-------------------------------------------------------------------------------
Offset_0x04284A:
                move.b  $00(A1, D0), D1
                bra     Offset_0x04287E 
;-------------------------------------------------------------------------------
Offset_0x042852:
                moveq   #$7F, D1
                sub.w   D0, D1
                move.b  $00(A1, D1), D1
                bra     Offset_0x04287E    
;-------------------------------------------------------------------------------
Offset_0x04285E:
                move.w  D0, D1
                andi.w  #$003F, D1
                move.b  $00(A1, D1), D1
                neg.w   D1
                bra     Offset_0x04287E    
;-------------------------------------------------------------------------------
Offset_0x04286E:
                move.w  #$00FF, D1
                sub.w   D0, D1
                move.b  $00(A1, D1), D1
                neg.w   D1
                bra     Offset_0x04287E
;-------------------------------------------------------------------------------                
Offset_0x04287E:
                move.w  Obj_Child_Ref(A0), A1                            ; $0046
                move.w  Obj_X(A1), D2                                    ; $0010
                move.b  Obj_Control_Var_12(A0), D3                       ; $0042
                ext.w   D3
                add.w   D3, D2
                add.w   D1, D2
                move.w  D2, Obj_X(A0)                                    ; $0010
                move.w  Obj_Y(A1), D2                                    ; $0014
                move.b  Obj_Control_Var_13(A0), D3                       ; $0043
                ext.w   D3
                add.w   D3, D2
                move.w  D2, Obj_Y(A0)                                    ; $0014
                rts
;===============================================================================
Move_Sprite_Angle_Y_Lookup_Offset:                             ; Offset_0x0428A6
                moveq   #$00, D0
                move.b  Obj_Control_Var_0C(A0), D0                       ; $003C
                move.b  D0, D1
                rol.b   #$03, D1
                andi.w  #$0006, D1
                move.w  Offset_0x0428BC(PC, D1), D2
                jmp     Offset_0x0428BC(PC, D2)     
;-------------------------------------------------------------------------------
Offset_0x0428BC:
                dc.w    Offset_0x0428C4-Offset_0x0428BC
                dc.w    Offset_0x0428CC-Offset_0x0428BC
                dc.w    Offset_0x0428D8-Offset_0x0428BC
                dc.w    Offset_0x0428E8-Offset_0x0428BC   
;-------------------------------------------------------------------------------
Offset_0x0428C4:
                move.b  $00(A1, D0), D1
                bra     Offset_0x0428F8 
;-------------------------------------------------------------------------------
Offset_0x0428CC:
                moveq   #$7F, D1
                sub.w   D0, D1
                move.w  $00(A1, D1), D1
                bra     Offset_0x0428F8  
;-------------------------------------------------------------------------------
Offset_0x0428D8:
                move.w  D0, D1
                andi.w  #$003F, D1
                move.w  $00(A1, D1), D1
                neg.w   D1
                bra     Offset_0x0428F8    
;-------------------------------------------------------------------------------
Offset_0x0428E8:
                move.w  #$00FF, D1
                sub.w   D0, D1
                move.w  $00(A1, D1), D1
                neg.w   D1
                bra     Offset_0x0428F8  
;-------------------------------------------------------------------------------
Offset_0x0428F8:
                move.w  Obj_Child_Ref(A0), A1                            ; $0046
                move.w  Obj_X(A1), D2                                    ; $0010
                move.b  Obj_Control_Var_12(A0), D3                       ; $0042
                ext.w   D3
                add.w   D3, D2
                move.w  D2, Obj_X(A0)                                    ; $0010
                move.w  Obj_Y(A1), D2                                    ; $0014
                move.b  Obj_Control_Var_13(A0), D3                       ; $0043
                ext.w   D3
                add.w   D3, D2
                add.w   D1, D2
                move.w  D2, Obj_Y(A0)                                    ; $0014
                rts         
;===============================================================================   
Delete_Sprite_Timed:                                           ; Offset_0x042920
                subq.w  #$01, Obj_Timer(A0)                              ; $002E
                bmi     Go_Delete_Object_A0                    ; Offset_0x042D3E
                jmp     (DisplaySprite)                        ; Offset_0x011148  
;===============================================================================
Delete_Sprite_Timed_Or_Fall:                                   ; Offset_0x04292E
                subq.w  #$01, Obj_Timer(A0)                              ; $002E
                bmi     Go_Delete_Object_A0                    ; Offset_0x042D3E
                jsr     (ObjectFall)                           ; Offset_0x0110FE
                jmp     (DisplaySprite)                        ; Offset_0x011148  
;===============================================================================    
Delete_Sprite_Timed_Or_Speed:                                  ; Offset_0x042942
                subq.w  #$01, Obj_Timer(A0)                              ; $002E
                bmi     Go_Delete_Object_A0                    ; Offset_0x042D3E
                jsr     (SpeedToPos)                           ; Offset_0x01111E
                jmp     (DisplaySprite)                        ; Offset_0x011148 
;===============================================================================    
Delete_Sprite_Timed_Or_Move_Light_Gravity:                     ; Offset_0x042956
                subq.w  #$01, Obj_Timer(A0)                              ; $002E
                bmi     Go_Delete_Object_A0                    ; Offset_0x042D3E
                jsr     (Move_Light_Gravity)                   ; Offset_0x0426C2
                bra     Add_To_Response_List_And_Display       ; Offset_0x042450  
;===============================================================================    
Set_Boss_Flag_Timed:                                           ; Offset_0x042968
                subq.w  #$01, Obj_Timer(A0)                              ; $002E
                bmi.s   Offset_0x042970
                rts
Offset_0x042970:
                move.b  #$01, (Boss_Flag).w                          ; $FFFFF7AA
                bra     Go_Delete_Object_A0_2                  ; Offset_0x042D4C  
;===============================================================================
Hit_Boss_Flash:                                                ; Offset_0x04297A
                lea     (Palette_Row_1_Offset+$02).w, A1             ; $FFFFED22
                moveq   #$00, D0
                tst.w   (A1)
                bne.s   Offset_0x042988
                move.w  #$0EEE, D0
Offset_0x042988:
                move.w  D0, (A1)
                rts    
;===============================================================================
Object_Settings_Slotted:                                       ; Offset_0x04298C
                moveq   #$00, D0
                move.w  (A1)+, D1
                move.w  D1, D2
                move.w  (A1)+, D3
                move.w  (A1)+, D4
                moveq   #$00, D5
                move.w  (A1)+, D5
                lea     (Slotted_Objects_Bits).w, A2                 ; $FFFFFA9A
                adda.w  D5, A2
                move.b  (A2), D5
                beq.s   Offset_0x0429CC
Offset_0x0429A4:
                lsr.b   #$01, D5
                bcc.s   Offset_0x0429CC
                addq.w  #$01, D0
                add.w   D4, D3
                dbra    D1, Offset_0x0429A4
                moveq   #$00, D0
                move.l  D0, (A0)
                move.l  D0, Obj_X(A0)                                    ; $0010
                move.l  D0, Obj_Y(A0)                                    ; $0014
                move.b  D0, Obj_Subtype(A0)                              ; $002C
                move.b  D0, Obj_Flags(A0)                                ; $0004
                move.w  D0, Obj_Status(A0)                               ; $002A
                addq.w  #$08, A7
                rts
Offset_0x0429CC:
                bset    D0, (A2)
                move.b  D0, Obj_Control_Var_0B(A0)                       ; $003B
                move.w  A2, Obj_Control_Var_0C(A0)                       ; $003C
                move.w  D3, Obj_Art_VRAM(A0)                             ; $000A
                move.l  (A1)+, Obj_Map(A0)                               ; $000C
                move.w  (A1)+, Obj_Priority(A0)                          ; $0008
                move.b  (A1)+, Obj_Width(A0)                             ; $0007
                move.b  (A1)+, Obj_Height(A0)                            ; $0006
                move.b  (A1)+, Obj_Map_Id(A0)                            ; $0022
                move.b  (A1)+, Obj_Col_Flags(A0)                         ; $0028
                bset    #$02, Obj_Status(A0)                             ; $002A
                move.b  #$FF, Obj_Control_Var_0A(A0)                     ; $003A
                bset    #$02, Obj_Flags(A0)                              ; $0004
                addq.b  #$02, Obj_Routine(A0)                            ; $0005
                rts
;===============================================================================   
Load_Dynamic_PLC_A2:                                           ; Offset_0x042A0A
                moveq   #$00, D0
                move.b  Obj_Map_Id(A0), D0                               ; $0022
                cmp.b   Obj_Control_Var_0A(A0), D0                       ; $003A
                beq.s   Offset_0x042A56
                move.b  D0, Obj_Control_Var_0A(A0)                       ; $003A
                move.l  (A2)+, A3
                move.w  Obj_Art_VRAM(A0), D4                             ; $000A
                andi.w  #$07FF, D4
                lsl.w   #$05, D4
                move.l  (A2)+, A2
                add.w   D0, D0
                adda.w  $00(A2, D0), A2
                move.w  (A2)+, D5
                moveq   #$00, D3
Loop_Load_Art:                                                 ; Offset_0x042A32
                move.w  (A2)+, D3
                move.l  D3, D1
                andi.w  #$FFF0, D1
                add.w   D1, D1
                add.l   A3, D1
                move.w  D4, D2
                andi.w  #$000F, D3
                addq.w  #$01, D3
                lsl.w   #$04, D3
                add.w   D3, D4
                add.w   D3, D4
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
                dbra    D5, Loop_Load_Art                      ; Offset_0x042A32
Offset_0x042A56:
                rts       
;===============================================================================  
Delete_Sprite_Check_X:                                         ; Offset_0x042A58
                move.w  Obj_X(A0), D0                                    ; $0010
                andi.w  #$FF80, D0
                sub.w   (Camera_X_Left).w, D0                        ; $FFFFF7DA
                cmpi.w  #$0280, D0
                bhi.s   Delete_Sprite_Clear_Respaw_Flag        ; Offset_0x042A70
                jmp     (DisplaySprite)                        ; Offset_0x011148
;-------------------------------------------------------------------------------                
Delete_Sprite_Clear_Respaw_Flag:                               ; Offset_0x042A70
                move.w  Obj_Respaw_Ref(A0), D0                           ; $0048
                beq.s   Offset_0x042A7C
                move.w  D0, A2
                bclr    #$07, (A2)
Offset_0x042A7C:
                bset    #$07, Obj_Status(A0)                             ; $002A
                move.l  #DeleteObject, (A0)                    ; Offset_0x011138
                rts      
;===============================================================================
Delete_Sprite_Check_X_2:                                       ; Offset_0x042A8A
                move.w  Obj_X(A0), D0                                    ; $0010
                andi.w  #$FF80, D0
                sub.w   (Camera_X_Left).w, D0                        ; $FFFFF7DA
                cmpi.w  #$0280, D0
                bhi.s   Delete_Sprite_Clear_Respaw_Flag_2      ; Offset_0x042AA2
                jmp     (DisplaySprite)                        ; Offset_0x011148   
;-------------------------------------------------------------------------------                
Delete_Sprite_Clear_Respaw_Flag_2:                             ; Offset_0x042AA2
                move.w  Obj_Respaw_Ref(A0), D0                           ; $0048
                beq.s   Offset_0x042AAE
                move.w  D0, A2
                bclr    #$07, (A2)
Offset_0x042AAE:
                bset    #$04, Obj_Control_Var_08(A0)                     ; $0038
                move.l  #DeleteObject, (A0)                    ; Offset_0x011138
                rts   
;===============================================================================
Delete_Sprite_Check_X_3:                                       ; Offset_0x042ABC
                move.w  Obj_X(A0), D0                                    ; $0010
                andi.w  #$FF80, D0
                sub.w   (Camera_X_Left).w, D0                        ; $FFFFF7DA
                cmpi.w  #$0280, D0
                bhi.s   Delete_Sprite_Clear_Respaw_Flag        ; Offset_0x042A70
                rts     
;===============================================================================
Delete_Sprite_Check_X_Y:                                       ; Offset_0x042AD0
                move.w  Obj_X(A0), D0                                    ; $0010
                andi.w  #$FF80, D0
                sub.w   (Camera_X_Left).w, D0                        ; $FFFFF7DA
                cmpi.w  #$0280, D0
                bhi     Go_Delete_Object_A0                    ; Offset_0x042D3E
                move.w  Obj_Y(A0), D0                                    ; $0014
                sub.w   (Camera_Y).w, D0                             ; $FFFFEE7C
                addi.w  #$0080, D0
                cmpi.w  #$0200, D0
                bhi     Go_Delete_Object_A0                    ; Offset_0x042D3E
                jmp     (DisplaySprite)                        ; Offset_0x011148 
;===============================================================================
Obj_Flicker_Move:                                              ; Offset_0x042AFE
                jsr     (ObjectFall)                           ; Offset_0x0110FE
                move.w  Obj_X(A0), D0                                    ; $0010
                andi.w  #$FF80, D0
                sub.w   (Camera_X_Left).w, D0                        ; $FFFFF7DA
                cmpi.w  #$0280, D0
                bhi     Go_Delete_Object_A0                    ; Offset_0x042D3E
                move.w  Obj_Y(A0), D0                                    ; $0014
                sub.w   (Camera_Y).w, D0                             ; $FFFFEE7C
                addi.w  #$0080, D0
                cmpi.w  #$0200, D0
                bhi     Go_Delete_Object_A0                    ; Offset_0x042D3E
                btst    #$00, (Vint_runcount+$03).w       ; $FFFFFE0F
                beq     Exit_Object_Settings                   ; Offset_0x041D98
                jmp     (DisplaySprite)                        ; Offset_0x011148
;===============================================================================
Delete_Sprite_Clear_Respaw_Flag_Check_X:                       ; Offset_0x042B3C
                move.w  Obj_X(A0), D0                                    ; $0010
                andi.w  #$FF80, D0
                sub.w   (Camera_X_Left).w, D0                        ; $FFFFF7DA
                cmpi.w  #$0280, D0
                bhi     Delete_Sprite_Clear_Respaw_Flag        ; Offset_0x042A70
                jsr     (Add_To_Collision_Response_List)       ; Offset_0x00A540
                jmp     (DisplaySprite)                        ; Offset_0x011148   
;===============================================================================               
Delete_Sprite_Clear_Respaw_Flag_Check_X_2                      ; Offset_0x042B5C
                move.w  Obj_X(A0), D0                                    ; $0010
                andi.w  #$FF80, D0
                sub.w   (Camera_X_Left).w, D0                        ; $FFFFF7DA
                cmpi.w  #$0280, D0
                bhi     Delete_Sprite_Clear_Respaw_Flag_2      ; Offset_0x042AA2
                jsr     (Add_To_Collision_Response_List)       ; Offset_0x00A540
                jmp     (DisplaySprite)                        ; Offset_0x011148   
;===============================================================================                
Delete_Sprite_Clear_Respaw_Flag_Check_X_3:                     ; Offset_0x042B7C
                move.w  Obj_X(A0), D0                                    ; $0010
                andi.w  #$FF80, D0
                sub.w   (Camera_X_Left).w, D0                        ; $FFFFF7DA
                cmpi.w  #$0280, D0
                bhi     Delete_Sprite_Clear_Respaw_Flag        ; Offset_0x042A70
                jmp     (Add_To_Collision_Response_List)       ; Offset_0x00A540   
;===============================================================================       
Delete_Sprite_Clear_Respaw_Flag_Check_X_Y:                     ; Offset_0x042B96
                move.w  Obj_X(A0), D0                                    ; $0010
                andi.w  #$FF80, D0
                sub.w   (Camera_X_Left).w, D0                        ; $FFFFF7DA
                cmpi.w  #$0280, D0
                bhi     Go_Delete_Object_A0                    ; Offset_0x042D3E
                move.w  Obj_Y(A0), D0                                    ; $0014
                sub.w   (Camera_Y).w, D0                             ; $FFFFEE7C
                addi.w  #$0080, D0
                cmpi.w  #$0200, D0
                bhi     Go_Delete_Object_A0                    ; Offset_0x042D3E
                jsr     (Add_To_Collision_Response_List)       ; Offset_0x00A540
                jmp     (DisplaySprite)                        ; Offset_0x011148   
;===============================================================================  
Delete_Sprite_Slotted_Check_X:                                 ; Offset_0x042BCA
                move.w  Obj_X(A0), D0                                    ; $0010
                andi.w  #$FF80, D0
                sub.w   (Camera_X_Left).w, D0                        ; $FFFFF7DA
                cmpi.w  #$0280, D0
                bhi.s   Go_Delete_Slotted                      ; Offset_0x042BE2
                jmp     (DisplaySprite)                        ; Offset_0x011148             
;===============================================================================                 
Go_Delete_Slotted:                                             ; Offset_0x042BE2
                move.w  Obj_Respaw_Ref(A0), D0                           ; $0048
                beq.s   Go_Delete_Slotted_2                    ; Offset_0x042BEE
                move.w  D0, A2
                bclr    #$07, (A2)
Go_Delete_Slotted_2:                                           ; Offset_0x042BEE
                move.l  #DeleteObject, (A0)                    ; Offset_0x011138
                bset    #$07, Obj_Status(A0)                             ; $002A
;-------------------------------------------------------------------------------
Remove_From_Tracking_Slot:                                     ; Offset_0x042BFA                
                move.b  Obj_Control_Var_0B(A0), D0                       ; $003B
                move.w  Obj_Control_Var_0C(A0), A1                       ; $003C
                bclr    D0, (A1)
                rts                
;===============================================================================  
Delete_Slotted_Check_X:                                        ; Offset_0x042C06
                move.w  Obj_X(A0), D0                                    ; $0010
                andi.w  #$FF80, D0
                sub.w   (Camera_X_Left).w, D0                        ; $FFFFF7DA
                cmpi.w  #$0280, D0
                bhi.s   Go_Delete_Slotted                      ; Offset_0x042BE2
                jmp     (DisplaySprite)                        ; Offset_0x011148  
;===============================================================================
Check_Delete_Touch_Slotted:                                    ; Offset_0x042C1E
                tst.b   Obj_Status(A0)                                   ; $002A
                bmi.s   Go_Delete_Slotted_3                    ; Offset_0x042C42
                move.w  Obj_X(A0), D0                                    ; $0010
                andi.w  #$FF80, D0
                sub.w   (Camera_X_Left).w, D0                        ; $FFFFF7DA
                cmpi.w  #$0280, D0
                bhi.s   Go_Delete_Slotted                      ; Offset_0x042BE2
                jsr     (Add_To_Collision_Response_List)       ; Offset_0x00A540
                jmp     (DisplaySprite)                        ; Offset_0x011148    
;===============================================================================                  
Go_Delete_Slotted_3:                                           ; Offset_0x042C42
                move.l  #DeleteObject, (A0)                    ; Offset_0x011138
                bra.s   Remove_From_Tracking_Slot              ; Offset_0x042BFA   
;===============================================================================
Check_Delete_Touch_Slotted_2:                                  ; Offset_0x042C4A
                tst.b   Obj_Status(A0)                                   ; $002A
                bmi.s   Go_Delete_Slotted_3                    ; Offset_0x042C42
                move.w  Obj_X(A0), D0                                    ; $0010
                andi.w  #$FF80, D0
                sub.w   (Camera_X_Left).w, D0                        ; $FFFFF7DA
                cmpi.w  #$0280, D0
                bhi     Go_Delete_Slotted                      ; Offset_0x042BE2
                jsr     (Add_To_Collision_Response_List)       ; Offset_0x00A540
                jmp     (DisplaySprite)                        ; Offset_0x011148  
;===============================================================================
; Delete_Sprite_Check_X_4:                                     ; Offset_0x042C70
                move.w  Obj_X(A0), D0                                    ; $0010
                andi.w  #$FF80, D0
                sub.w   (Camera_X_Left).w, D0                        ; $FFFFF7DA
                cmpi.w  #$0280, D0
                bhi     Go_Delete_Object_A0                    ; Offset_0x042D3E
                jmp     (DisplaySprite)                        ; Offset_0x011148   
;===============================================================================
; Delete_Sprite_Check_X_5:                                     ; Offset_0x042C8A
                move.w  Obj_X(A0), D0                                    ; $0010
                andi.w  #$FF80, D0
                sub.w   (Camera_X_Left).w, D0                        ; $FFFFF7DA
                cmpi.w  #$0280, D0
                bhi     Go_Delete_Object_A0                    ; Offset_0x042D3E
                jsr     (Add_To_Collision_Response_List)       ; Offset_0x00A540
                jmp     (DisplaySprite)                        ; Offset_0x011148   
;===============================================================================
; Delete_Sprite_Check_X_6:                                     ; Offset_0x042CAA
                move.w  Obj_X(A0), D0                                    ; $0010
                andi.w  #$FF80, D0
                sub.w   (Camera_X_Left).w, D0                        ; $FFFFF7DA
                cmpi.w  #$0280, D0
                bhi     Go_Delete_Object_A0_2                  ; Offset_0x042D4C
                jmp     (DisplaySprite)                        ; Offset_0x011148   
;===============================================================================
; Delete_Sprite_Touch_Check_X:                                 ; Offset_0x042CC4
                move.w  Obj_X(A0), D0                                    ; $0010
                andi.w  #$FF80, D0
                sub.w   (Camera_X_Left).w, D0                        ; $FFFFF7DA
                cmpi.w  #$0280, D0
                bhi     Go_Delete_Object_A0_2                  ; Offset_0x042D4C
                jsr     (Add_To_Collision_Response_List)       ; Offset_0x00A540
                jmp     (DisplaySprite)                        ; Offset_0x011148   
;===============================================================================
; Delete_Sprite_Remove_Tracking_List_Check_X:                  ; Offset_0x042CE4
                move.w  Obj_X(A0), D0                                    ; $0010
                andi.w  #$FF80, D0
                sub.w   (Camera_X_Left).w, D0                        ; $FFFFF7DA
                cmpi.w  #$0280, D0
                bhi.s   Offset_0x042CFC
                jmp     (DisplaySprite)                        ; Offset_0x011148
Offset_0x042CFC:
                move.l  #DeleteObject, (A0)                    ; Offset_0x011138
                bset    #$07, Obj_Status(A0)                             ; $002A
                bra     Remove_From_Tracking_Slot              ; Offset_0x042BFA   
;===============================================================================
Display_Sprite_Check_X:                                        ; Offset_0x042D0C
                move.w  Obj_X(A0), D0                                    ; $0010
                andi.w  #$FF80, D0
                sub.w   (Camera_X_Left).w, D0                        ; $FFFFF7DA
                cmpi.w  #$0280, D0
                bhi.s   Offset_0x042CFC
                jmp     (DisplaySprite)                        ; Offset_0x011148   
;===============================================================================
Display_Sprite_Check_X_2:                                      ; Offset_0x042D24
                move.w  Obj_X(A0), D0                                    ; $0010
                andi.w  #$FF80, D0
                sub.w   (Camera_X_Left).w, D0                        ; $FFFFF7DA
                cmpi.w  #$0280, D0
                bhi     Go_Delete_Object_A0_2                  ; Offset_0x042D4C
                jmp     (DisplaySprite)   
;===============================================================================  
Go_Delete_Object_A0:                                           ; Offset_0x042D3E
                move.l  #DeleteObject, (A0)                    ; Offset_0x011138          
                bset    #$07, Obj_Status(A0)                             ; $002A
                rts                
;===============================================================================
Go_Delete_Object_A0_2:                                         ; Offset_0x042D4C
                move.l  #DeleteObject, (A0)                    ; Offset_0x011138
                bset    #$04, Obj_Control_Var_08(A0)                     ; $0038
                rts                  
;===============================================================================
Set_Indexed_Velocity:                                          ; Offset_0x042D5A
                moveq   #$00, D1
                move.b  Obj_Subtype(A0), D1                              ; $002C
                add.w   D1, D1
                add.w   D1, D0
Set_Indexed_Velocity_D0:                                       ; Offset_0x042D64
                lea     Offset_0x042D7E(PC, D0), A1
                move.w  (A1)+, Obj_Speed_X(A0)                           ; $0018
                move.w  (A1)+, Obj_Speed_Y(A0)                           ; $001A
                btst    #$00, Obj_Flags(A0)                              ; $0004
                beq.s   Offset_0x042D7C
                neg.w   Obj_Speed_X(A0)                                  ; $0018
Offset_0x042D7C:
                rts                    
;-------------------------------------------------------------------------------
Offset_0x042D7E:
                dc.w    $FF00, $FF00, $0100, $FF00, $FE00, $FE00, $0200, $FE00
                dc.w    $FD00, $FE00, $0300, $FE00, $FE00, $FE00, $0000, $FE00
                dc.w    $FC00, $FD00, $0400, $FD00, $0300, $FD00, $FC00, $FD00
                dc.w    $0400, $FD00, $FE00, $FE00, $0200, $FE00, $0000, $FF00
                dc.w    $FF00, $FF00      
;===============================================================================    
Find_Player_Eight_Way:                                         ; Offset_0x042DC2
                bsr     Find_Player                            ; Offset_0x042634
                cmp.w   D2, D3
                beq.s   Offset_0x042E18
                bhi.s   Offset_0x042DF2
                swap.w  D3
                clr.w   D3
                divu.w  D2, D3
                tst.w   D0
                beq.s   Offset_0x042DE4
                cmpi.w  #$8000, D2
                bcs.s   Offset_0x042E34
                tst.w   D0
                beq.s   Offset_0x042E30
                bra     Offset_0x042E38
Offset_0x042DE4:
                cmpi.w  #$8000, D2
                bcs.s   Offset_0x042E44
                tst.w   D1
                bne.s   Offset_0x042E40
                bra     Offset_0x042E48
Offset_0x042DF2:
                swap.w  D2
                clr.w   D2
                divu.w  D3, D2
                tst.w   D1
                bne.s   Offset_0x042E0A
                cmpi.w  #$8000, D2
                bcs.s   Offset_0x042E2C
                tst.w   D0
                bne.s   Offset_0x042E30
                bra     Offset_0x042E48
Offset_0x042E0A:
                cmpi.w  #$8000, D2
                bcs.s   Offset_0x042E3C
                tst.w   D0
                bne.s   Offset_0x042E38
                bra     Offset_0x042E40
Offset_0x042E18:
                tst.w   D0
                beq.s   Offset_0x042E24
                tst.w   D1
                beq.s   Offset_0x042E30
                bra     Offset_0x042E38
Offset_0x042E24:
                tst.w   D1
                bne.s   Offset_0x042E40
                bra     Offset_0x042E48
Offset_0x042E2C:
                moveq   #$00, D4
                rts
Offset_0x042E30:
                moveq   #$01, D4
                rts
Offset_0x042E34:
                moveq   #$02, D4
                rts
Offset_0x042E38:
                moveq   #$03, D4
                rts
Offset_0x042E3C:
                moveq   #$04, D4
                rts
Offset_0x042E40:
                moveq   #$05, D4
                rts
Offset_0x042E44:
                moveq   #$06, D4
                rts
Offset_0x042E48:
                moveq   #$07, D4
                rts
;===============================================================================        
Set_Velocity_X_Track_Player_One:                               ; Offset_0x042E4C
                lea     (Obj_Player_One).w, A1                       ; $FFFFB000
                bsr     Find_Other_Object                      ; Offset_0x04269E
                bclr    #$00, Obj_Flags(A0)                              ; $0004
                tst.w   D0
                beq.s   Offset_0x042E66
                neg.w   D4
                bset    #$00, Obj_Flags(A0)                              ; $0004
Offset_0x042E66:
                move.w  D4, Obj_Speed_X(A0)                              ; $0018
                rts   
;===============================================================================  
Chase_Object:                                                  ; Offset_0x042E6C
                move.w  D0, D2
                neg.w   D2
                move.w  D1, D3
                move.w  Obj_X(A0), D4                                    ; $0010
                cmp.w   Obj_X(A1), D4                                    ; $0010
                seq     D5
                beq.s   Offset_0x042E94
                bcs.s   Offset_0x042E82
                neg.w   D1
Offset_0x042E82:
                move.w  Obj_Speed_X(A0), D4                              ; $0018
                add.w   D1, D4
                cmp.w   D2, D4
                blt.s   Offset_0x042E94
                cmp.w   D0, D4
                bgt.s   Offset_0x042E94
                move.w  D4, Obj_Speed_X(A0)                              ; $0018
Offset_0x042E94:
                move.w  Obj_Y(A0), D4                                    ; $0014
                cmp.w   Obj_Y(A1), D4                                    ; $0014
                beq.s   Offset_0x042EB6
                bcs.s   Offset_0x042EA2
                neg.w   D3
Offset_0x042EA2:
                move.w  Obj_Speed_Y(A0), D4                              ; $001A
                add.w   D3, D4
                cmp.w   D2, D4
                blt.s   Offset_0x042EB4
                cmp.w   D0, D4
                bgt.s   Offset_0x042EB4
                move.w  D4, Obj_Speed_Y(A0)                              ; $001A
Offset_0x042EB4:
                rts
Offset_0x042EB6:
                tst.b   D5
                beq.s   Offset_0x042EB4
                clr.w   Obj_Speed_X(A0)                                  ; $0018
                clr.w   Obj_Speed_Y(A0)                                  ; $001A
                rts
;===============================================================================    
Chase_Object_X_Only:                                           ; Offset_0x042EC4
                move.w  D0, D2
                neg.w   D2
                move.w  Obj_X(A0), D3                                    ; $0010
                cmp.w   Obj_X(A1), D3                                    ; $0010
                bcs.s   Offset_0x042ED4
                neg.w   D1
Offset_0x042ED4:
                move.w  Obj_Speed_X(A0), D3                              ; $0018
                add.w   D1, D3
                cmp.w   D2, D3
                blt.s   Offset_0x042EE6
                cmp.w   D0, D3
                bgt.s   Offset_0x042EE6
                move.w  D3, Obj_Speed_X(A0)                              ; $0018
Offset_0x042EE6:
                rts
;===============================================================================
Obj_Fade_Selected_From_Black:                                  ; Offset_0x042EE8
                move.l  #Offset_0x042EFA, (A0)
                move.b  #$07, Obj_Control_Var_09(A0)                     ; $0039
                move.b  #$03, Obj_Player_Status(A0)                      ; $002F
Offset_0x042EFA:                
                subq.b  #$01, Obj_Timer(A0)                              ; $002E
                bmi.s   Offset_0x042F02
                rts
Offset_0x042F02:
                subq.b  #$01, Obj_Control_Var_09(A0)                     ; $0039
                bmi     J_Delete_Object                        ; Offset_0x04258C
                move.b  Obj_Player_Status(A0), Obj_Timer(A0)      ; $002F, $002E
                lea     (Palette_Row_1_Offset).w, A1                 ; $FFFFED20
                lea     (Palette_Row_1_Data_Target).w, A2            ; $FFFFEDA0
                moveq   #$0E, D4
                moveq   #-$20, D5
                moveq   #$1F, D6
Offset_0x042F1E:
                bsr     Inc_Color_Obj                          ; Offset_0x042F28
                dbra    D6, Offset_0x042F1E
                rts
Inc_Color_Obj:                                                 ; Offset_0x042F28
                move.b  (A1), D0
                and.b   D4, D0
                move.b  (A2)+, D1
                and.b   D4, D1
                cmp.b   D1, D0
                bcc.s   Offset_0x042F36
                addq.b  #$02, D0
Offset_0x042F36:
                move.b  D0, (A1)+
                move.b  (A1), D0
                move.b  D0, D1
                and.b   D5, D0
                move.b  (A2)+, D2
                move.b  D2, D3
                and.b   D5, D2
                cmp.b   D2, D0
                bcc.s   Offset_0x042F4C
                addi.b  #$20, D0
Offset_0x042F4C:
                and.b   D4, D1
                and.b   D4, D3
                cmp.b   D3, D1
                bcc.s   Offset_0x042F56
                addq.b  #$02, D1
Offset_0x042F56:
                or.b    D0, D1
                move.b  D1, (A1)+
                rts              
;===============================================================================
ObjectFall_Animate_Raw:                                        ; Offset_0x042F5C
                jsr     (ObjectFall)                           ; Offset_0x0110FE
                jmp     Animate_Raw(PC)                        ; Offset_0x04208E  
;===============================================================================
SpeedToPos_Animate_Raw:                                        ; Offset_0x042F66
                jsr     (SpeedToPos)                           ; Offset_0x01111E
                jmp     Animate_Raw(PC)                        ; Offset_0x04208E   
;===============================================================================
Move_Light_Gravity_Animate_Raw:                                ; Offset_0x042F70
                jsr     Move_Light_Gravity(PC)                 ; Offset_0x0426C2
                jmp     Animate_Raw(PC)                        ; Offset_0x04208E 
;===============================================================================
Swing_Up_And_Down_Animate_Raw_Wait:                            ; Offset_0x042F78
                jsr     Swing_Up_And_Down(PC)                  ; Offset_0x04232E
;-------------------------------------------------------------------------------                
SpeedToPos_Animate_Raw_Wait:                                   ; Offset_0x042F7C                
                jsr     (SpeedToPos)                           ; Offset_0x01111E  
;------------------------------------------------------------------------------- 
Animate_Raw_Wait:                                              ; Offset_0x042F82                  
                jsr     Animate_Raw(PC)                        ; Offset_0x04208E
                jmp     Run_Object_Wait_Timer_A0(PC)           ; Offset_0x0423D2  
;===============================================================================
Refresh_Child_Position_Wait:                                   ; Offset_0x042F8A
                jsr     Refresh_Child_Position(PC)             ; Offset_0x042016
;-------------------------------------------------------------------------------                
Display_Sprite_Wait:                                           ; Offset_0x042F8E                
                jsr     Run_Object_Wait_Timer_A0(PC)           ; Offset_0x0423D2
                jmp     (DisplaySprite)                        ; Offset_0x011148  
;===============================================================================
SpeedToPos_Touch_Wait:                                         ; Offset_0x042F98
                jsr     (SpeedToPos)                           ; Offset_0x01111E
                jsr     Run_Object_Wait_Timer_A0(PC)           ; Offset_0x0423D2
                jmp     Add_To_Response_List_And_Display(PC)   ; Offset_0x042450 
;===============================================================================    
Refresh_Animate_Raw_Multi_Delay_Touch:                         ; Offset_0x042FA6
                jsr     Refresh_Child_Position(PC)             ; Offset_0x042016
;-------------------------------------------------------------------------------                
Animate_Raw_Multi_Delay_Touch:                                 ; Offset_0x042FAA                
                jsr     Animate_Raw_Multi_Delay(PC)            ; Offset_0x04215C
                jmp     Add_To_Response_List_And_Display(PC)   ; Offset_0x042450
;===============================================================================   
Animate_Raw_Delete_Sprite_Check_X_Y:                           ; Offset_0x042FB2
                jsr     Animate_Raw(PC)                        ; Offset_0x04208E  
;-------------------------------------------------------------------------------    
ObjectFall_Delete_Sprite_Check_X_Y:                            ; Offset_0x042FB6                
                jsr     (ObjectFall)                           ; Offset_0x0110FE
                jmp     Delete_Sprite_Check_X_Y(PC)            ; Offset_0x042AD0 
;===============================================================================
Animate_Raw_Delete_Sprite_Check_X_Y_2:                         ; Offset_0x042FC0
                jsr     Animate_Raw(PC)                        ; Offset_0x04208E 
;-------------------------------------------------------------------------------   
ObjectFall_Delete_Sprite_Check_X_Y_2:                          ; Offset_0x042FC4        
                jsr     (ObjectFall)                           ; Offset_0x0110FE
                jmp     Delete_Sprite_Clear_Respaw_Flag_Check_X_Y(PC) ; Offset_0x042B96   
;===============================================================================
SpeedToPos_Wait:                                               ; Offset_0x042FCE
                jsr     (SpeedToPos)                           ; Offset_0x01111E
                jmp     Run_Object_Wait_Timer_A0(PC)           ; Offset_0x0423D2   
;===============================================================================   
Swing_Up_And_Down_Wait:                                        ; Offset_0x042FD8
                jsr     Swing_Up_And_Down(PC)                  ; Offset_0x04232E
                jsr     (SpeedToPos)                           ; Offset_0x01111E
                jmp     Run_Object_Wait_Timer_A0(PC)           ; Offset_0x0423D2  
;===============================================================================   
Animate_Raw_Touch:                                             ; Offset_0x042FE6
                jsr     Animate_Raw(PC)                        ; Offset_0x04208E
                jmp     Add_To_Response_List_And_Display(PC)   ; Offset_0x042450 
;===============================================================================
Animate_Raw_Display_Sprite:                                    ; Offset_0x042FEE
                jsr     Animate_Raw(PC)                        ; Offset_0x04208E
                jmp     (DisplaySprite)                        ; Offset_0x011148 
;===============================================================================
SpeedToPos_Animate_Raw_Wait_2:                                 ; Offset_0x042FF8
                jsr     (SpeedToPos)                           ; Offset_0x01111E
                jsr     Animate_Raw(PC)                        ; Offset_0x04208E
                jmp     Run_Object_Wait_Timer_A0(PC)           ; Offset_0x0423D2  
;===============================================================================
J_DisplaySprite:                                               ; Offset_0x043006
                jmp     (DisplaySprite)                        ; Offset_0x011148  
;===============================================================================   
Animate_Raw_Wait_2:                                            ; Offset_0x04300C
                jsr     Animate_Raw(PC)                        ; Offset_0x04208E
                jmp     Run_Object_Wait_Timer_A0(PC)           ; Offset_0x0423D2 
;===============================================================================    
J_Add_To_Response_List_And_Display:                            ; Offset_0x043014
                jmp     Add_To_Response_List_And_Display(PC)   ; Offset_0x042450 
;===============================================================================
Enemy_Defeat_Score:                                            ; Offset_0x043018
                bset    #$07, Obj_Status(A0)                             ; $002A
                move.w  Obj_Height_3(A0), A1                             ; $0044
                moveq   #$00, D0
                move.w  (Enemy_Hit_Chain_Count).w, D0                ; $FFFFF7D0
                addq.w  #$02, (Enemy_Hit_Chain_Count).w              ; $FFFFF7D0
                cmpi.w  #$0006, D0
                bcs.s   Offset_0x043034
                moveq   #$06, D0
Offset_0x043034:
                move.w  D0, Obj_Control_Var_0E(A0)                       ; $003E
                move.w  Enemy_Defeat_Score_Points(PC, D0), D0  ; Offset_0x043094
                cmpi.w  #$0020, (Enemy_Hit_Chain_Count).w            ; $FFFFF7D0
                bcs.s   Offset_0x04304E
                move.w  #$03E8, D0
                move.w  #$000A, Obj_Control_Var_0E(A0)                   ; $003E
Offset_0x04304E:
                move.w  A1, A3
                jsr     (Add_Points)                           ; Offset_0x007AEC
                move.l  #Object_Hit, (A0)                      ; Offset_0x013D7C
                move.b  #$00, Obj_Routine(A0)                            ; $0005
                tst.w   Obj_Speed_Y(A1)                                  ; $001A
                bmi.s   Offset_0x04307C
                move.w  Obj_Y(A1), D0                                    ; $0014
                cmp.w   Obj_Y(A0), D0                                    ; $0014
                bcc.s   Offset_0x043088
                neg.w   Obj_Speed_Y(A1)                                  ; $001A
                jmp     (DisplaySprite)                        ; Offset_0x011148
Offset_0x04307C:
                addi.w  #$0100, Obj_Speed_Y(A0)                          ; $001A
                jmp     (DisplaySprite)                        ; Offset_0x011148
Offset_0x043088:
                subi.w  #$0100, Obj_Speed_Y(A0)                          ; $001A
                jmp     (DisplaySprite)                        ; Offset_0x011148  
;-------------------------------------------------------------------------------
Enemy_Defeat_Score_Points:                                     ; Offset_0x043094
                dc.w    $000A  ;  100
                dc.w    $0014  ;  200
                dc.w    $0032  ;  500
                dc.w    $0064  ; 1000         
;===============================================================================    
Check_Left_Right_Controller_Shake:                             ; Offset_0x04309C
                subq.b  #$01, Obj_Control_Var_0D(A0)                     ; $003D
                bpl.s   Offset_0x0430AE
                move.b  #$05, Obj_Control_Var_0C(A0)                     ; $003C
                move.b  #$3C, Obj_Control_Var_0D(A0)                     ; $003D
Offset_0x0430AE:
                move.w  Obj_Control_Var_0E(A0), A2                       ; $003E
                move.w  (A2), D0
                andi.w  #$000C, D0
                beq.s   Offset_0x0430D2
                move.w  Obj_Control_Var_0A(A0), D1                       ; $003A
                move.w  D0, Obj_Control_Var_0A(A0)                       ; $003A
                andi.w  #$000C, D1
                eor.w   D1, D0
                beq.s   Offset_0x0430D2
                subq.b  #$01, Obj_Control_Var_0C(A0)                     ; $003C
                bmi.s   Offset_0x0430D2
                moveq   #$00, D0
Offset_0x0430D2:
                rts    
;===============================================================================
Check_Player_Collision:                                        ; Offset_0x0430D4
                move.b  Obj_Col_Prop(A0), D0                             ; $0029
                beq.s   Offset_0x0430FC
                clr.b   Obj_Col_Prop(A0)                                 ; $0029
                move.w  Obj_Child_Ref(A0), D1                            ; $0046
                beq.s   Offset_0x0430EC
                move.w  D1, A1
                bset    #$00, Obj_Control_Var_08(A1)                     ; $0038
Offset_0x0430EC:
                andi.w  #$0003, D0
                add.w   D0, D0
                move.w  (Offset_0x0430FE-$02)(PC, D0), A1
                move.w  A1, Obj_Height_3(A0)                             ; $0044
                moveq   #$01, D1
Offset_0x0430FC:
                rts  
;-------------------------------------------------------------------------------
Offset_0x0430FE:
                dc.w    Obj_Player_One                                   ; $B000
                dc.w    Obj_Player_Two                                   ; $B04A
                dc.w    Obj_Player_One                                   ; $B000   
;===============================================================================  
Check_Player_In_Range:                                         ; Offset_0x043104
                moveq   #$00, D0
                lea     (Obj_Player_Two).w, A2                       ; $FFFFB04A
                move.w  Obj_X(A2), D1                                    ; $0010
                move.w  Obj_Y(A2), D2                                    ; $0014
                move.w  Obj_X(A0), D3                                    ; $0010
                move.w  Obj_Y(A0), D4                                    ; $0014
                add.w   (A1)+, D3
                move.w  D3, D5
                add.w   (A1)+, D5
                add.w   (A1)+, D4
                move.w  D4, D6
                add.w   (A1)+, D6
                bsr     Offset_0x043138
                swap.w  D0
                lea     (Obj_Player_One).w, A2                       ; $FFFFB000
                move.w  Obj_X(A2), D1                                    ; $0010
                move.w  Obj_Y(A2), D2                                    ; $0014
Offset_0x043138:
                cmp.w   D3, D1
                bcs.s   Offset_0x04314A
                cmp.w   D5, D1
                bcc.s   Offset_0x04314A
                cmp.w   D4, D2
                bcs.s   Offset_0x04314A
                cmp.w   D6, D2
                bcc.s   Offset_0x04314A
                move.w  A2, D0
Offset_0x04314A:
                rts     
;===============================================================================
Pal_Load_Line_1:                                               ; Offset_0x04314C
                lea     (Palette_Row_1_Offset).w, A2                 ; $FFFFED20
                moveq   #$07, D0
Offset_0x043152:
                move.l  (A1)+, (A2)+
                dbra    D0, Offset_0x043152
                rts      
;===============================================================================
Displace_Player_Offset:                                        ; Offset_0x04315A
                move.b  Obj_Status(A0), D0                               ; $002A
                andi.b  #$18, D0
                beq.s   Offset_0x043194
                bclr    #$03, Obj_Status(A0)                             ; $002A
                beq.s   Offset_0x04317C
                lea     (Obj_Player_One).w, A1                       ; $FFFFB000
                bclr    #$03, Obj_Status(A1)                             ; $002A
                bset    #$01, Obj_Status(A1)                             ; $002A
Offset_0x04317C:
                bclr    #$04, Obj_Status(A0)                             ; $002A
                beq.s   Offset_0x043194
                lea     (Obj_Player_Two).w, A1                       ; $FFFFB04A
                bclr    #$04, Obj_Status(A1)                             ; $002A
                bset    #$01, Obj_Status(A1)                             ; $002A
Offset_0x043194:
                rts     
;===============================================================================
Run_Palette_Rotation_Script:                                   ; Offset_0x043196
                lea     (Palette_Rotation_Data).w, A1                ; $FFFFFADE
Offset_0x04319A:
                move.w  (A1), D0
                beq.s   Offset_0x0431DE
                subq.b  #$01, $0002(A1)
                bpl.s   Offset_0x0431CE
                move.l  $0004(A1), A2
                move.w  (A2), A3
                lea     $00(A2, D0), A4
                move.w  (A4), D1
                bpl.s   Offset_0x0431B6
                bsr     Offset_0x0431D2
Offset_0x0431B6:
                moveq   #$00, D2
                move.b  $0002(A2), D2
Offset_0x0431BC:
                move.w  (A4)+, (A3)+
                dbra    D2, Offset_0x0431BC
                move.w  (A4)+, D0
                move.b  D0, $0002(A1)
                move.l  A4, D0
                sub.l   A2, D0
                move.w  D0, (A1)
Offset_0x0431CE:
                addq.w  #$08, A1
                bra.s   Offset_0x04319A
Offset_0x0431D2:
                move.b  $0003(A2), D2
                bne.s   Offset_0x0431E0
                moveq   #$04, D0
                lea     $00(A2, D0), A4
Offset_0x0431DE:
                rts
Offset_0x0431E0:
                neg.w   D1
                jmp     (Offset_0x0431E6-$08)(PC, D1)   
;-------------------------------------------------------------------------------                
Offset_0x0431E6:
                bra     Offset_0x0431EE
                bra     Offset_0x043210   
;------------------------------------------------------------------------------- 
Offset_0x0431EE:
                addq.b  #$01, $0003(A1)
                cmp.b   $0003(A1), D2
                bhi.s   Offset_0x043208
                move.w  $0002(A4), D2
                adda.w  D2, A2
                move.l  A2, $0004(A1)
                move.w  (A2), A3
                clr.w   $0002(A1)
Offset_0x043208:
                moveq   #$04, D0
                lea     $00(A2, D0), A4
                rts    
;-------------------------------------------------------------------------------
Offset_0x043210:
                addq.b  #$01, $0003(A1)
                cmp.b   $0003(A1), D2
                bls.s   Offset_0x043222
                moveq   #$04, D0
                lea     $00(A2, D0), A4
                rts
Offset_0x043222:
                move.l  (Palette_Rotation_Custom).w, A2              ; $FFFFFADA
                move.l  A1, -(A7)
                jsr     (A2)
                move.l  (A7)+, A1
                addq.w  #$04, A7
                bra.s   Offset_0x0431CE  
;===============================================================================
Child_Get_Priority:                                            ; Offset_0x043230
                move.w  Obj_Child_Ref(A0), A1                            ; $0046
                bclr    #$07, Obj_Art_VRAM(A0)                           ; $000A
                btst    #$07, Obj_Art_VRAM(A1)                           ; $000A
                beq.s   Offset_0x043248
                bset    #$07, Obj_Art_VRAM(A0)                           ; $000A
Offset_0x043248:
                move.w  Obj_Priority(A1), Obj_Priority(A0)        ; $0008, $0008
                rts                        
;===============================================================================
Move_0x0E_Bytes_A2_A1:                                         ; Offset_0x043250
                move.w  (A1)+, A3
                move.w  (A2)+, (A3)+
                move.w  (A1)+, A3
                move.w  (A2)+, (A3)+
                move.w  (A1)+, A3
                move.w  (A2)+, (A3)+  
Move_0x08_Bytes_A2_A1:                                         ; Offset_0x04325C
                move.w  (A1)+, A3
                move.w  (A2)+, (A3)+
Move_0x06_Bytes_A2_A1:                                         ; Offset_0x043260                
                move.w  (A1)+, A3
                move.w  (A2)+, (A3)+
Move_0x04_Bytes_A2_A1:                                         ; Offset_0x043264                
                move.w  (A1)+, A3
                move.w  (A2)+, (A3)+
                move.w  (A1)+, A3
                move.w  (A2)+, (A3)+
                rts                                                                      
;===============================================================================   
Object_Check_Range:                                            ; Offset_0x04326E
                move.l  #Null_Mappings, Obj_Map(A0)     ; Offset_0x0432C8, $000C
                bset    #$02, Obj_Flags(A0)                              ; $0004
                move.b  #$20, Obj_Width(A0)                              ; $0007
                move.b  #$20, Obj_Height(A0)                             ; $0006
                move.l  (A7)+, Obj_Control_Var_04(A0)                    ; $0034
                move.l  #Offset_0x043292, (A0)
Offset_0x043292:                
                tst.b   Obj_Flags(A0)                                    ; $0004
                bmi.s   Offset_0x0432C2
                move.w  Obj_X(A0), D0                                    ; $0010
                andi.w  #$FF80, D0
                sub.w   (Camera_X_Left).w, D0                        ; $FFFFF7DA
                cmpi.w  #$0280, D0
                bhi.s   Offset_0x0432B0
                jmp     (DisplaySprite)                        ; Offset_0x011148
Offset_0x0432B0:
                move.w  Obj_Respaw_Ref(A0), D0                           ; $0048
                beq.s   Offset_0x0432BC
                move.w  D0, A2
                bclr    #$07, (A2)
Offset_0x0432BC:
                jmp     (DeleteObject)                         ; Offset_0x011138
Offset_0x0432C2:
                move.l  Obj_Control_Var_04(A0), (A0)                     ; $0034
                rts
;-------------------------------------------------------------------------------  
Null_Mappings:                                                 ; Offset_0x0432C8
                dc.w    Null_Mappings-Null_Mappings
;===============================================================================
Level_Load_Music:                                              ; Offset_0x0432CA    
                moveq   #$00, D0
                lea     (Current_ZoneAndAct).w, A1                             ; $FFFFFE10
                move.b  (A1)+, D0
                add.b   D0, D0
                add.b   (A1), D0
                move.b  Level_PlayList(PC, D0), D0             ; Offset_0x0432E0
                jmp     (Play_Music)                           ; Offset_0x001176
;------------------------------------------------------------------------------- 
Level_PlayList:                                                ; Offset_0x0432E0
                dc.b    Angel_Island_1_Snd                                 ; $01
                dc.b    Angel_Island_2_Snd                                 ; $02
                dc.b    Hydrocity_1_Snd                                    ; $03
                dc.b    Hydrocity_2_Snd                                    ; $04
                dc.b    Marble_Garden_1_Snd                                ; $05
                dc.b    Marble_Garden_2_Snd                                ; $06
                dc.b    Carnival_Night_1_Snd                               ; $07
                dc.b    Carnival_Night_2_Snd                               ; $08
                dc.b    Flying_Battery_1_Snd                               ; $09
                dc.b    Flying_Battery_2_Snd                               ; $0A
                dc.b    Icecap_1_Snd                                       ; $0B
                dc.b    Icecap_2_Snd                                       ; $0C
                dc.b    Launch_Base_1_Snd                                  ; $0D
                dc.b    Launch_Base_2_Snd                                  ; $0E 
;===============================================================================
Restore_Player_Control:                                        ; Offset_0x0432EE
                lea     (Obj_Player_One).w, A1                       ; $FFFFB000
Restore_Player_Control_A1:                                     ; Offset_0x0432F2                
                clr.b   Obj_Player_Control(A1)                           ; $002E
                bset    #$01, Obj_Status(A1)                             ; $002A
                clr.b   Obj_Player_Control(A1)                           ; $002E
                rts                           
;===============================================================================  
Obj_Load_End_Level_Art:                                        ; Offset_0x043302
                move.l  #J_Run_Object_Wait_Timer_A0, (A0)      ; Offset_0x043340
                st      (Player_Control_Lock_Flag).w                 ; $FFFFFAA8
                bset    #$04, Obj_Control_Var_08(A0)                     ; $0038
                move.w  #$007F, Obj_Timer(A0)                            ; $002E
                move.l  #Offset_0x043344, Obj_Child(A0)                  ; $0034
                moveq   #Volume_Down, D0                                  ; -$20
                jsr     (Play_Music)                           ; Offset_0x001176
                lea     PLC_End_Level_Art(PC), A1              ; Offset_0x043332
                jmp     (LoadPLC_Direct)                           ; Offset_0x001502                      ; Offset_0x001502
;-------------------------------------------------------------------------------
PLC_End_Level_Art:                                             ; Offset_0x043332
                dc.w    (((PLC_EL_00_End-PLC_EL_00)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_EL_00:
                dc.l    Art_End_Panel_Post                     ; Offset_0x126E6A
                dc.w    $D3C0
                dc.l    Art_Monitors                           ; Offset_0x1071DA
                dc.w    $9880
PLC_EL_00_End:                                                 ; Offset_0x04333E
;-------------------------------------------------------------------------------                
J_Run_Object_Wait_Timer_A0                                     ; Offset_0x043340
                jmp     Run_Object_Wait_Timer_A0(PC)           ; Offset_0x0423D2 
;-------------------------------------------------------------------------------
Offset_0x043344:
                move.l  #Offset_0x043364, (A0)
                clr.b   (Boss_Flag).w                                ; $FFFFF7AA
                jsr     Level_Load_Music(PC)                   ; Offset_0x0432CA
                lea     Offset_0x04335E(PC), A2
                jsr     Load_Child_Object_Simple_A2(PC)        ; Offset_0x041F5A
                jmp     After_Boss_Clean_Up(PC)                ; Offset_0x041ACA
;-------------------------------------------------------------------------------
Offset_0x04335E:
                dc.w    $0000
                dc.l    Obj_End_Panel                          ; Offset_0x041812 
;------------------------------------------------------------------------------- 
Offset_0x043364:
                tst.b   (Player_Control_Lock_Flag).w                 ; $FFFFFAA8
                bne     Exit_Object_Settings                   ; Offset_0x041D98
                move.l  #Offset_0x043376, (A0)
                jmp     Restore_Player_Control(PC)             ; Offset_0x0432EE  
;------------------------------------------------------------------------------- 
Offset_0x043376:
                tst.b   (End_Level_Flag).w                           ; $FFFFFAAA
                beq     Exit_Object_Settings                   ; Offset_0x041D98
                jsr     Level_Transition_Size_Load(PC)         ; Offset_0x043458
                jmp     (DeleteObject)                         ; Offset_0x011138  
;===============================================================================   
Displace_Player_Offset_Delete_Object                           ; Offset_0x043388
                jsr     Displace_Player_Offset(PC)             ; Offset_0x04315A
                jmp     (DeleteObject)  
;===============================================================================
Check_Camera_In_Range:                                         ; Offset_0x043392
                move.w  (Camera_Y).w, D0                             ; $FFFFEE7C
                cmp.w   (A1)+, D0
                bcs.s   Offset_0x0433AE
                cmp.w   (A1)+, D0
                bhi.s   Offset_0x0433AE
                move.w  (Camera_X).w, D1                             ; $FFFFEE78
                cmp.w   (A1)+, D1
                bcs.s   Offset_0x0433AE
                cmp.w   (A1)+, D1
                bhi.s   Offset_0x0433AE
                move.l  (A7), (A0)
                rts
Offset_0x0433AE:
                jsr     (MarkObjGone_3)                        ; Offset_0x011B3E
                addq.w  #$04, A7
                rts  
;===============================================================================
Update_Sonic_Level_Limits_X_Y:                                 ; Offset_0x0433B8
                move.w  (Camera_X).w, (Sonic_Level_Limits_Min_X).w ; $FFFFEE78, $FFFFEE14
                move.w  (Level_Limits_Max_Y).w, D0                   ; $FFFFEE12
                cmp.w   (Sonic_Level_Limits_Max_Y).w, D0             ; $FFFFEE1A
                bcs.s   Offset_0x0433DC
                move.w  D0, (Sonic_Level_Limits_Min_Y).w             ; $FFFFEE18
                move.w  Obj_Control_Var_0A(A0), D0                       ; $003A
                cmp.w   (Camera_X).w, D0                             ; $FFFFEE78
                bhi.s   Offset_0x0433DC
                move.l  Obj_Control_Var_04(A0), A1                       ; $0034
                jsr     (A1)
Offset_0x0433DC:
                rts   
;===============================================================================
Update_Sonic_Level_Limits_X_Y_Play_Music:                      ; Offset_0x0433DE
                btst    #$00, Obj_Control_Var_08(A0)                     ; $0038
                bne.s   Offset_0x0433FC
                subq.w  #$01, Obj_Timer(A0)                              ; $002E
                bpl.s   Offset_0x0433FC
                move.b  Obj_Angle(A0), D0                                ; $0026
                jsr     (Play_Music)                           ; Offset_0x001176
                bset    #$00, Obj_Control_Var_08(A0)                     ; $0038
Offset_0x0433FC:
                btst    #$01, Obj_Control_Var_08(A0)                     ; $0038
                bne.s   Offset_0x043418
                move.w  (Level_Limits_Max_Y).w, D0                   ; $FFFFEE12
                cmp.w   (Sonic_Level_Limits_Max_Y).w, D0             ; $FFFFEE1A
                bhi.s   Offset_0x043418
                move.w  D0, (Sonic_Level_Limits_Min_Y).w             ; $FFFFEE18
                bset    #$01, Obj_Control_Var_08(A0)                     ; $0038
Offset_0x043418:
                btst    #$02, Obj_Control_Var_08(A0)                     ; $0038
                bne.s   Offset_0x043436
                move.w  (Camera_X).w, (Sonic_Level_Limits_Min_X).w ; $FFFFEE78, $FFFFEE14
                move.w  Obj_Inertia(A0), D0                              ; $001C
                cmp.w   (Camera_X).w, D0                             ; $FFFFEE78
                bhi.s   Offset_0x043436
                bset    #$02, Obj_Control_Var_08(A0)                     ; $0038
Offset_0x043436:
                move.b  Obj_Control_Var_08(A0), D0                       ; $0038
                andi.b  #$07, D0
                cmpi.b  #$07, D0
                bne     Exit_Object_Settings                   ; Offset_0x041D98
                clr.b   Obj_Control_Var_08(A0)                           ; $0038
                clr.w   Obj_Inertia(A0)                                  ; $001C
                clr.b   Obj_Angle(A0)                                    ; $0026
                move.l  Obj_Control_Var_04(A0), A1                       ; $0034
                jmp     (A1)    
;===============================================================================       
Level_Transition_Size_Load:                                    ; Offset_0x043458
                moveq   #$00, D0
                move.b  (Current_Zone).w, D0                             ; $FFFFFE10
                lsl.w   #$04, D0
                lea     (Level_Size_Array), A1                 ; Offset_0x011ECA
                lea     $08(A1, D0), A1
                move.w  (A1)+, (Target_Camera_Min_X).w               ; $FFFFFA94
                move.w  (A1)+, (Target_Camera_Max_X).w               ; $FFFFFA92
                move.w  (A1)+, (Target_Camera_Min_Y).w               ; $FFFFFA96
                move.w  (A1)+, (Level_Limits_Max_Y).w                ; $FFFFEE12
                lea     Offset_0x043482(PC), A2
                jmp     Load_Child_Object_A2(PC)               ; Offset_0x041D9A                 
;-------------------------------------------------------------------------------
Offset_0x043482:
                dc.w    $0001
                dc.l    Inc_Level_Gradual_Max_X                ; Offset_0x042564
                dc.w    $0000
                dc.l    Inc_Level_Gradual_Min_Y                ; Offset_0x0425C0
                dc.w    $0000        
;===============================================================================
Obj_0xC6_Egg_Prison:                                           ; Offset_0x043490
                include 'data\objects\obj_0xC6.asm'                
;===============================================================================              
Object_Settings_Check_X_Y:                                     ; Offset_0x043B1E
                move.l  Obj_Control_Var_0E(A0), A1                       ; $003E             
                jsr     Object_Settings(PC)                    ; Offset_0x041D72
                move.l  #Offset_0x043B32, (A0)
                jmp     (Delete_Sprite_Clear_Respaw_Flag_Check_X_Y) ; Offset_0x042B96
;-------------------------------------------------------------------------------                
Offset_0x043B32:   
                move.l  Obj_Child(A0), A1                                ; $0034
                jsr     (A1)
                jmp     (Delete_Sprite_Clear_Respaw_Flag_Check_X_Y) ; Offset_0x042B96                   
;===============================================================================  
Obj_0x81_AIz_Bloominator:                                      ; Offset_0x043B3E
                include 'data\objects\obj_0x81.asm'
Obj_0x82_AIz_Rhinobot:                                         ; Offset_0x043C2A
                include 'data\objects\obj_0x82.asm'                    
Obj_0x83_AIz_Monkey_Dude:                                      ; Offset_0x043F1C                                
                include 'data\objects\obj_0x83.asm'                        
Obj_0x9F_AIz_Catakiller_Jr:                                    ; Offset_0x044490
                include 'data\objects\obj_0x9F.asm'
Obj_0x99_Hz_Jawz:                                              ; Offset_0x04465C
                include 'data\objects\obj_0x99.asm'
Obj_0x9A_Hz_Blastoid:                                          ; Offset_0x0446D0
                include 'data\objects\obj_0x9A.asm'
Obj_0x9B_Hz_Buggernaut:                                        ; Offset_0x0447A6
                include 'data\objects\obj_0x9B.asm'
Obj_0x9C_Hz_Turbo_Spiker:                                      ; Offset_0x044946
                include 'data\objects\obj_0x9C.asm'      
Obj_0x9D_Hz_Mega_Chopper:                                      ; Offset_0x044CC8
                include 'data\objects\obj_0x9D.asm'
Obj_0x9E_Hz_Pointdexter:                                       ; Offset_0x044F90                
                include 'data\objects\obj_0x9E.asm'
Obj_0xA3_MGz_Bubbles:                                          ; Offset_0x04504A
                include 'data\objects\obj_0xA3.asm'
Obj_0xA4_MGz_Tunnelbot:                                        ; Offset_0x04515C
                include 'data\objects\obj_0xA4.asm'
Obj_0xC4_MGz_Tunnelbot:                                        ; Offset_0x045262     
                include 'data\objects\obj_0xC4.asm'
Obj_0xA5_MGz_Spiker:                                           ; Offset_0x045864
                include 'data\objects\obj_0xA5.asm'
Obj_0xA6_MGz_Mantis:                                           ; Offset_0x045B26
                include 'data\objects\obj_0xA6.asm'
Obj_0xA0_CNz_Clamer:                                           ; Offset_0x045C7A
                include 'data\objects\obj_0xA0.asm'
Obj_0xA1_CNz_Sparkle:                                          ; Offset_0x045E4A
                include 'data\objects\obj_0xA1.asm'
Obj_0xA2_CNz_Batbot:                                           ; Offset_0x046004
                include 'data\objects\obj_0xA2.asm'
Obj_0xA7_FBz_Blaster:                                          ; Offset_0x04611C
                include 'data\objects\obj_0xA7.asm'
Obj_0xA8_FBz_Techno_Squeek:                                    ; Offset_0x046392
                include 'data\objects\obj_0xA8.asm' 
Obj_0xB9_Iz_Platform:                                          ; Offset_0x04663E
                include 'data\objects\obj_0xB9.asm'
; Obj_0xBA_Iz_Breakable_Wall:                                  ; Offset_0x04694C
                include 'data\objects\obj_0xBA.asm'
;-------------------------------------------------------------------------------   
; Rotinas usada pelo objeto 0xB9
; ->>> 
;-------------------------------------------------------------------------------
Obj_0xB9_Sub_0x0469D4:                                         ; Offset_0x0469D4
                lea     Platform_Setup_Data_2(PC), A1          ; Offset_0x046ABE
                jsr     Object_Settings(PC)                    ; Offset_0x041D72
                move.l  #Offset_0x0469E8, (A0)
                jmp     (MarkObjGone)                          ; Offset_0x011AF2    
;-------------------------------------------------------------------------------
Offset_0x0469E8:
                move.w  Obj_Child_Ref(A0), A1                            ; $0046
                btst    #$03, Obj_Status(A1)                             ; $002A
                beq.s   Offset_0x0469FA
                move.l  #ObjectFall_Delete_Sprite_Check_X_Y, (A0) ; Offset_0x042FB6
Offset_0x0469FA:
                jmp     (MarkObjGone)                          ; Offset_0x011AF2
;-------------------------------------------------------------------------------       
; Rotinas usada pelo objeto 0xB9
; <<<-
;-------------------------------------------------------------------------------                     
Obj_0xC8_Iz_Trampoline_Support:                                ; Offset_0x046A00
                include 'data\objects\obj_0xC8.asm' 
;------------------------------------------------------------------------------- 
; Rotinas usada pelo objeto 0xB9
; ->>>
;-------------------------------------------------------------------------------    
Obj_0xB9_Sub_0x046A2A:                                         ; Offset_0x046A2A
                cmpi.w  #$F400, D0
                blt.s   Offset_0x046A3A
                cmpi.w  #$0C00, D0
                bgt.s   Offset_0x046A3A
                move.w  D0, Obj_Speed_X(A0)                              ; $0018
Offset_0x046A3A:
                rts
Offset_0x046A3C:
                move.w  Obj_Speed_Y(A0), D0                              ; $001A
                addi.w  #$0038, D0
                cmpi.w  #$F400, D0
                blt.s   Offset_0x046A54
                cmpi.w  #$0C00, D0
                bgt.s   Offset_0x046A54
                move.w  D0, Obj_Speed_Y(A0)                              ; $001A
Offset_0x046A54:
                rts
Offset_0x046A56:
                move.b  Obj_Angle(A0), D3                                ; $0026
                lsr.b   #$03, D3
                andi.w  #$000E, D3
                move.w  Obj_Speed_X(A0), D1                              ; $0018
                bpl.s   Offset_0x046A68
                neg.w   D1
Offset_0x046A68:
                move.w  Offset_0x046A70(PC, D3), D0
                jmp     Offset_0x046A70(PC, D0)
;-------------------------------------------------------------------------------
Offset_0x046A70:
                dc.w    Offset_0x046A80-Offset_0x046A70
                dc.w    Offset_0x046A86-Offset_0x046A70
                dc.w    Offset_0x046A8E-Offset_0x046A70
                dc.w    Offset_0x046A86-Offset_0x046A70
                dc.w    Offset_0x046A80-Offset_0x046A70
                dc.w    Offset_0x046A86-Offset_0x046A70
                dc.w    Offset_0x046A8E-Offset_0x046A70
                dc.w    Offset_0x046A86-Offset_0x046A70 
;-------------------------------------------------------------------------------
Offset_0x046A80:
                clr.w   Obj_Speed_Y(A0)                                  ; $001A
                rts   
;-------------------------------------------------------------------------------
Offset_0x046A86:
                lsr.w   #$01, D1
                move.w  D1, Obj_Speed_Y(A0)                              ; $001A
                rts  
;-------------------------------------------------------------------------------
Offset_0x046A8E:
                move.w  D1, Obj_Speed_Y(A0)                              ; $001A
                rts   
;-------------------------------------------------------------------------------
Obj_0xB9_Sub_0x046A94:                                         ; Offset_0x046A94
                clr.b   (Fast_Vertical_Scroll_Flag).w                ; $FFFFEE39
                btst    #$03, Obj_Status(A0)                             ; $002A
                beq.s   Offset_0x046AA4
                st      (Fast_Vertical_Scroll_Flag).w                ; $FFFFEE39
Offset_0x046AA4:
                rts                  
;------------------------------------------------------------------------------- 
; Rotinas usada pelo objeto 0xB9
; <<<-
;-------------------------------------------------------------------------------   

;------------------------------------------------------------------------------- 
; Dados usados pelos objetos 0xB9, 0xBA e 0xC8
; ->>>
;-------------------------------------------------------------------------------  
Platform_Setup_Data: ; Usado pelo objeto 0xB9                  ; Offset_0x046AA6
                dc.l    Iz_Platform_Mappings                   ; Offset_0x110BBC
                dc.w    $43B6, $0280
                dc.b    $20, $14, $00, $00 
;-------------------------------------------------------------------------------   
Trampoline_Support_Setup_Data: ; Usado pelo objeto 0xC8        ; Offset_0x046AB2  
                dc.l    Iz_Platform_Mappings                   ; Offset_0x110BBC
                dc.w    $437D, $0280
                dc.b    $10, $10, $1E, $00                    
;-------------------------------------------------------------------------------    
Platform_Setup_Data_2: ; Usado pelo objeto 0xB9                ; Offset_0x046ABE 
                dc.l    Crushing_Column_Mappings               ; Offset_0x110938
                dc.w    $4001, $0280
                dc.b    $10, $0C, $08, $00
;-------------------------------------------------------------------------------
Breakable_Wall_Setup_Data: ; Usado pelo objeto 0xBA            ; Offset_0x046ACA 
                dc.l    Crushing_Column_Mappings               ; Offset_0x110938
                dc.w    $4001, $0280
                dc.b    $20, $40, $06, $00                    
;-------------------------------------------------------------------------------  
Platform_Setup_Data_3: ; Usado pelo objeto 0xB9                ; Offset_0x046AD6  
                dc.l    Iz_Platform_Mappings                   ; Offset_0x110BBC
                dc.w    $C3B6, $0080
                dc.b    $08, $08, $23, $00
;-------------------------------------------------------------------------------  
Breakable_Wall_Setup_Data_2: ; Usado pelo objeto 0xBA          ; Offset_0x046AE2  
                dc.l    Iz_Platform_Mappings                   ; Offset_0x110BBC
                dc.w    $C347, $0080
                dc.b    $0C, $0C, $1C, $00                     
;------------------------------------------------------------------------------- 
Offset_0x046AEE:  ; Usado pelo objeto 0xB9 
                dc.w    $0005
                dc.l    Offset_0x0468B4
;-------------------------------------------------------------------------------
Offset_0x046AF4: ; Usado pelo objeto 0xBA                                                                 
                dc.w    $0008
                dc.l    Offset_0x0468EC                   
;-------------------------------------------------------------------------------  
Offset_0x046AFA: ; Usado pelo objeto 0xB9   
                dc.w    $0000
                dc.l    Obj_0xB9_Sub_0x0469D4                  ; Offset_0x0469D4
                dc.b    $F0, $10   
;-------------------------------------------------------------------------------
Offset_0x046B02: ; Usado pelo objeto 0xB9    
                dc.b    $02, $23, $13, $24, $14, $FC
;-------------------------------------------------------------------------------
Offset_0x046B08: ; Usado pelo objeto 0xBA  
                dc.b    $02, $1C, $1D, $25, $26, $FC                
;------------------------------------------------------------------------------- 
; Dados usados pelos objetos 0xB9, 0xBA e 0xC8
; <<<-
;-------------------------------------------------------------------------------                                  
Obj_0xB8_Iz_Crushing_Column:                                   ; Offset_0x046B0E
                include 'data\objects\obj_0xB8.asm' 
Obj_0xBB_Iz_Freezer:                                           ; Offset_0x046CF2
                include 'data\objects\obj_0xBB.asm' 
Obj_0xBC_Iz_Segmented_Column:                                  ; Offset_0x04719E
                include 'data\objects\obj_0xBC.asm'           
Obj_0xBD_Iz_Swinging_Platform:                                 ; Offset_0x047336
                include 'data\objects\obj_0xBD.asm'  
Obj_0xBE_Iz_Stalactite:                                        ; Offset_0x0477C6
                include 'data\objects\obj_0xBE.asm'        
Obj_0xC0_Iz_Ice_Spikes:                                        ; Offset_0x0478D2
                include 'data\objects\obj_0xC0.asm'
Obj_0xBF_Iz_Ice_Cube:                                          ; Offset_0x04798A    
                include 'data\objects\obj_0xBF.asm'                            
Obj_0xC1_Iz_Ice_Spiked_Ball:                                   ; Offset_0x047AD0
                include 'data\objects\obj_0xC1.asm'
Obj_0xC2_Iz_Snow_Pile:                                         ; Offset_0x047B4E
                include 'data\objects\obj_0xC2.asm'  
Obj_0xC3_Iz_Trampoline:                                        ; Offset_0x047D46
                include 'data\objects\obj_0xC3.asm'                    
Obj_0xAA_Iz_Penguinator:                                       ; Offset_0x047F8A
                include 'data\objects\obj_0xAA.asm'
Obj_0xAB_Iz_Star_Pointer:                                      ; Offset_0x0482D2
                include 'data\objects\obj_0xAB.asm'
Obj_0x87_LBz_Snale_Blaster:                                    ; Offset_0x048436
                include 'data\objects\obj_0x87.asm'
Obj_0x88_LBz_Ribot:                                            ; Offset_0x048756       
                include 'data\objects\obj_0x88.asm'
Obj_0x89_LBz_Orbinaut:                                         ; Offset_0x048A94
                include 'data\objects\obj_0x89.asm'
Obj_0x8A_LBz_Corkey:                                           ; Offset_0x048BCE
                include 'data\objects\obj_0x8A.asm'
Obj_0x8B_LBz_Flybot_767:                                       ; Offset_0x048DF8
                include 'data\objects\obj_0x8B.asm'
Obj_0xAE_LBz_Robotnik:                                         ; Offset_0x048FAC  
                include 'data\objects\obj_0xAE.asm'
Obj_0xB7_LBz_Egg_Mobile:                                       ; Offset_0x0493CC
                include 'data\objects\obj_0xB7.asm'
Obj_0x93_MVz_Madmole:                                          ; Offset_0x0495CC
                include 'data\objects\obj_0x93.asm'
Obj_0x94_MVz_Mushmeanie:                                       ; Offset_0x0499BC
                include 'data\objects\obj_0x94.asm'
Obj_0x95_MVz_Dragonfly:                                        ; Offset_0x049B24
                include 'data\objects\obj_0x95.asm'
Obj_0x96_MVz_Butterdroid:                                      ; Offset_0x049DCA  
                include 'data\objects\obj_0x96.asm'
Obj_0x97_MVz_Cluckoid:                                         ; Offset_0x049E50 
                include 'data\objects\obj_0x97.asm'
Obj_0x90_LRz_Fireworm:                                         ; Offset_0x049FB6
                include 'data\objects\obj_0x90.asm'
Obj_0x91_LRz_Iwamodock:                                        ; Offset_0x04A29C    
                include 'data\objects\obj_0x91.asm'
Obj_0x92_LRz_Toxomister:                                       ; Offset_0x04A400  
                include 'data\objects\obj_0x92.asm'
;------------------------------------------------------------------------------- 
;-------------------------------------------------------------------------------
              
;===============================================================================
; Carga dos gr�ficos das fases
; Cada fase usa seis grupos de LongWord sendo que o primeiro byte dos dois
; primeiros grupos representam um ponteiro para a lista de carga dos gr�ficos 
; das fases e o primeiro byte do �ltimo grupo representa um ponteiro para a 
; lista de carga das paletas das fases.        
; ->>>          
;===============================================================================  
TilesMainTable:                                                ; Offset_0x04A77E
                dc.l    ($0A<<$18)|Angel_Island_1_Tiles        ; Offset_0x13D750
                dc.l    ($0A<<$18)|Angel_Island_1_Tiles_2      ; Offset_0x13E552
                dc.l    ($0A<<$18)|Angel_Island_1_Blocks       ; Offset_0x13B830
                dc.l    ($0A<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
                dc.l    ($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
                dc.l    ($00<<$18)|Angel_Island_1_Chunks_2     ; Offset_0x143D96
                
                dc.l    ($0C<<$18)|Angel_Island_2_Tiles        ; Offset_0x1496B8
                dc.l    ($0C<<$18)|Angel_Island_2_Tiles_2      ; Offset_0x14A1BA
                dc.l    ($0B<<$18)|Angel_Island_2_Blocks       ; Offset_0x148128
                dc.l    ($0B<<$18)|Angel_Island_2_Blocks_2     ; Offset_0x1489A8
                dc.l    ($00<<$18)|Angel_Island_2_Chunks       ; Offset_0x14EA6E
                dc.l    ($00<<$18)|Angel_Island_2_Chunks_2     ; Offset_0x14EA6E
                
                dc.l    ($0E<<$18)|Hydrocity_1_Tiles           ; Offset_0x152F7E
                dc.l    ($0F<<$18)|Hydrocity_1_Tiles_2         ; Offset_0x1546F0
                dc.l    ($0C<<$18)|Hydrocity_1_Blocks          ; Offset_0x152B8E
                dc.l    ($0C<<$18)|Hydrocity_1_Blocks_2        ; Offset_0x153E60
                dc.l    ($00<<$18)|Hydrocity_1_Chunks          ; Offset_0x153B70
                dc.l    ($00<<$18)|Hydrocity_1_Chunks_2        ; Offset_0x156742
                
                dc.l    ($10<<$18)|Hydrocity_2_Tiles           ; Offset_0x152F7E
                dc.l    ($11<<$18)|Hydrocity_2_Tiles_2         ; Offset_0x158DF2
                dc.l    ($0D<<$18)|Hydrocity_2_Blocks          ; Offset_0x152B8E
                dc.l    ($0D<<$18)|Hydrocity_2_Blocks_2        ; Offset_0x158562
                dc.l    ($00<<$18)|Hydrocity_2_Chunks          ; Offset_0x153B70
                dc.l    ($00<<$18)|Hydrocity_2_Chunks_2        ; Offset_0x15AC74
                
                dc.l    ($12<<$18)|Marble_Garden_1_Tiles       ; Offset_0x15D0A4
                dc.l    ($12<<$18)|Marble_Garden_1_Tiles_2     ; Offset_0x161F56
                dc.l    ($0E<<$18)|Marble_Garden_1_Blocks      ; Offset_0x15C744
                dc.l    ($0E<<$18)|Marble_Garden_1_Blocks_2    ; Offset_0x161C56
                dc.l    ($00<<$18)|Marble_Garden_1_Chunks      ; Offset_0x15F926
                dc.l    ($00<<$18)|Marble_Garden_1_Chunks_2    ; Offset_0x162628
                
                dc.l    ($14<<$18)|Marble_Garden_2_Tiles       ; Offset_0x15D0A4
                dc.l    ($14<<$18)|Marble_Garden_2_Tiles_2     ; Offset_0x1632A8
                dc.l    ($0F<<$18)|Marble_Garden_2_Blocks      ; Offset_0x15C744
                dc.l    ($0F<<$18)|Marble_Garden_2_Blocks_2    ; Offset_0x162E58
                dc.l    ($00<<$18)|Marble_Garden_2_Chunks      ; Offset_0x15F926
                dc.l    ($00<<$18)|Marble_Garden_2_Chunks_2    ; Offset_0x16403A
                
                dc.l    ($16<<$18)|Carnival_Night_1_Tiles      ; Offset_0x166A9A
                dc.l    ($17<<$18)|Carnival_Night_1_Tiles_2    ; Offset_0x166A9A
                dc.l    ($10<<$18)|Carnival_Night_1_Blocks     ; Offset_0x165A5A
                dc.l    ($10<<$18)|Carnival_Night_1_Blocks_2   ; Offset_0x165A5A
                dc.l    ($00<<$18)|Carnival_Night_1_Chunks     ; Offset_0x169CBC
                dc.l    ($00<<$18)|Carnival_Night_1_Chunks_2   ; Offset_0x169CBC
                
                dc.l    ($18<<$18)|Carnival_Night_2_Tiles      ; Offset_0x166A9A
                dc.l    ($19<<$18)|Carnival_Night_2_Tiles_2    ; Offset_0x166A9A
                dc.l    ($11<<$18)|Carnival_Night_2_Blocks     ; Offset_0x165A5A
                dc.l    ($11<<$18)|Carnival_Night_2_Blocks_2   ; Offset_0x165A5A
                dc.l    ($00<<$18)|Carnival_Night_2_Chunks     ; Offset_0x169CBC
                dc.l    ($00<<$18)|Carnival_Night_2_Chunks_2   ; Offset_0x169CBC 
                
                dc.l    ($1A<<$18)|Flying_Battery_1_Tiles      ; Offset_0x16DB1C
                dc.l    ($1A<<$18)|Flying_Battery_1_Tiles_2    ; Offset_0x16DB1C
                dc.l    ($12<<$18)|Flying_Battery_1_Blocks     ; Offset_0x16CDCC                   
                dc.l    ($12<<$18)|Flying_Battery_1_Blocks_2   ; Offset_0x16CDCC
                dc.l    ($00<<$18)|Flying_Battery_1_Chunks     ; Offset_0x1705EE
                dc.l    ($00<<$18)|Flying_Battery_1_Chunks_2   ; Offset_0x1705EE
                
                dc.l    ($1C<<$18)|Flying_Battery_2_Tiles      ; Offset_0x173E9E
                dc.l    ($1C<<$18)|Flying_Battery_2_Tiles_2    ; Offset_0x173E9E
                dc.l    ($13<<$18)|Flying_Battery_2_Blocks     ; Offset_0x17315E
                dc.l    ($13<<$18)|Flying_Battery_2_Blocks_2   ; Offset_0x17315E
                dc.l    ($00<<$18)|Flying_Battery_2_Chunks     ; Offset_0x176ED0
                dc.l    ($00<<$18)|Flying_Battery_2_Chunks_2   ; Offset_0x176ED0
                
                dc.l    ($1E<<$18)|Icecap_1_Tiles              ; Offset_0x179CF0
                dc.l    ($1E<<$18)|Icecap_1_Tiles_2            ; Offset_0x17BF62
                dc.l    ($14<<$18)|Icecap_1_Blocks             ; Offset_0x179A00
                dc.l    ($14<<$18)|Icecap_1_Blocks_2           ; Offset_0x17B412
                dc.l    ($00<<$18)|Icecap_1_Chunks             ; Offset_0x17B102
                dc.l    ($00<<$18)|Icecap_1_Chunks_2           ; Offset_0x17DEF4
                
                dc.l    ($20<<$18)|Icecap_2_Tiles              ; Offset_0x179CF0
                dc.l    ($20<<$18)|Icecap_2_Tiles_2            ; Offset_0x180734
                dc.l    ($15<<$18)|Icecap_2_Blocks             ; Offset_0x179A00
                dc.l    ($15<<$18)|Icecap_2_Blocks_2           ; Offset_0x17FB24
                dc.l    ($00<<$18)|Icecap_2_Chunks             ; Offset_0x17B102
                dc.l    ($00<<$18)|Icecap_2_Chunks_2           ; Offset_0x182746
                
                dc.l    ($22<<$18)|Launch_Base_1_Tiles         ; Offset_0x185206
                dc.l    ($22<<$18)|Launch_Base_1_Tiles_2       ; Offset_0x186688                 
                dc.l    ($16<<$18)|Launch_Base_1_Blocks        ; Offset_0x184196
                dc.l    ($16<<$18)|Launch_Base_1_Blocks_2      ; Offset_0x184646
                dc.l    ($00<<$18)|Launch_Base_1_Chunks        ; Offset_0x18872A
                dc.l    ($00<<$18)|Launch_Base_1_Chunks_2      ; Offset_0x18872A
                
                dc.l    ($24<<$18)|Launch_Base_2_Tiles         ; Offset_0x185206
                dc.l    ($25<<$18)|Launch_Base_2_Tiles_2       ; Offset_0x18D03A
                dc.l    ($17<<$18)|Launch_Base_2_Blocks        ; Offset_0x184196
                dc.l    ($17<<$18)|Launch_Base_2_Blocks_2      ; Offset_0x18B6DA
                dc.l    ($00<<$18)|Launch_Base_2_Chunks        ; Offset_0x190A3E
                dc.l    ($00<<$18)|Launch_Base_2_Chunks_2      ; Offset_0x190A3E
                
                dc.l    ($26<<$18)|Mushroom_Valley_1_Tiles     ; Offset_0x193C2E
                dc.l    ($26<<$18)|Mushroom_Valley_1_Tiles_2   ; Offset_0x193C2E
                dc.l    ($18<<$18)|Mushroom_Valley_1_Blocks    ; Offset_0x193C2E
                dc.l    ($18<<$18)|Mushroom_Valley_1_Blocks_2  ; Offset_0x193C2E
                dc.l    ($00<<$18)|Mushroom_Valley_1_Chunks    ; Offset_0x193C2E
                dc.l    ($00<<$18)|Mushroom_Valley_1_Chunks_2  ; Offset_0x193C2E
                                    
                dc.l    ($28<<$18)|Mushroom_Valley_2_Tiles     ; Offset_0x193C2E
                dc.l    ($28<<$18)|Mushroom_Valley_2_Tiles_2   ; Offset_0x193C2E
                dc.l    ($19<<$18)|Mushroom_Valley_2_Blocks    ; Offset_0x193C2E
                dc.l    ($19<<$18)|Mushroom_Valley_2_Blocks_2  ; Offset_0x193C2E
                dc.l    ($00<<$18)|Mushroom_Valley_2_Chunks    ; Offset_0x193C2E
                dc.l    ($00<<$18)|Mushroom_Valley_2_Chunks_2  ; Offset_0x193C2E
                                                         
                dc.l    ($0A<<$18)|Angel_Island_1_Tiles        ; Offset_0x13D750
                dc.l    ($0A<<$18)|Angel_Island_1_Tiles_2      ; Offset_0x13E552
                dc.l    ($0A<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
                dc.l    ($0A<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
                dc.l    ($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
                dc.l    ($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
                
                dc.l    ($0C<<$18)|Angel_Island_1_Tiles        ; Offset_0x13D750
                dc.l    ($0C<<$18)|Angel_Island_1_Tiles_2      ; Offset_0x13E552
                dc.l    ($0B<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
                dc.l    ($0B<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
                dc.l    ($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
                dc.l    ($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
                
                dc.l    ($2E<<$18)|Lava_Reef_1_Tiles           ; Offset_0x193C2E
                dc.l    ($2E<<$18)|Lava_Reef_1_Tiles_2         ; Offset_0x193C2E
                dc.l    ($1C<<$18)|Lava_Reef_1_Blocks          ; Offset_0x193C2E
                dc.l    ($1C<<$18)|Lava_Reef_1_Blocks_2        ; Offset_0x193C2E
                dc.l    ($00<<$18)|Lava_Reef_1_Chunks          ; Offset_0x193C2E
                dc.l    ($00<<$18)|Lava_Reef_1_Chunks_2        ; Offset_0x193C2E
                
                dc.l    ($30<<$18)|Lava_Reef_2_Tiles           ; Offset_0x193C2E
                dc.l    ($30<<$18)|Lava_Reef_2_Tiles_2         ; Offset_0x193C2E
                dc.l    ($1D<<$18)|Lava_Reef_2_Blocks          ; Offset_0x193C2E
                dc.l    ($1D<<$18)|Lava_Reef_2_Blocks_2        ; Offset_0x193C2E
                dc.l    ($00<<$18)|Lava_Reef_2_Chunks          ; Offset_0x193C2E
                dc.l    ($00<<$18)|Lava_Reef_2_Chunks_2        ; Offset_0x193C2E
                
                dc.l    ($0A<<$18)|Angel_Island_1_Tiles        ; Offset_0x13D750
                dc.l    ($0A<<$18)|Angel_Island_1_Tiles_2      ; Offset_0x13E552
                dc.l    ($0A<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
                dc.l    ($0A<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
                dc.l    ($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
                dc.l    ($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
                
                dc.l    ($0C<<$18)|Angel_Island_1_Tiles        ; Offset_0x13D750
                dc.l    ($0C<<$18)|Angel_Island_1_Tiles_2      ; Offset_0x13E552
                dc.l    ($0B<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
                dc.l    ($0B<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
                dc.l    ($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
                dc.l    ($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
                
                dc.l    ($0A<<$18)|Angel_Island_1_Tiles        ; Offset_0x13D750
                dc.l    ($0A<<$18)|Angel_Island_1_Tiles_2      ; Offset_0x13E552
                dc.l    ($0A<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
                dc.l    ($0A<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
                dc.l    ($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
                dc.l    ($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
                
                dc.l    ($0C<<$18)|Angel_Island_1_Tiles        ; Offset_0x13D750
                dc.l    ($0C<<$18)|Angel_Island_1_Tiles_2      ; Offset_0x13E552
                dc.l    ($0B<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
                dc.l    ($0B<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
                dc.l    ($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
                dc.l    ($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
                
                dc.l    ($0A<<$18)|Angel_Island_1_Tiles        ; Offset_0x13D750
                dc.l    ($0A<<$18)|Angel_Island_1_Tiles_2      ; Offset_0x13E552
                dc.l    ($0A<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
                dc.l    ($0A<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
                dc.l    ($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
                dc.l    ($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
                
                dc.l    ($0C<<$18)|Angel_Island_1_Tiles        ; Offset_0x13D750
                dc.l    ($0C<<$18)|Angel_Island_1_Tiles_2      ; Offset_0x13E552
                dc.l    ($0B<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
                dc.l    ($0B<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
                dc.l    ($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
                dc.l    ($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
                
                dc.l    ($0A<<$18)|Angel_Island_1_Tiles        ; Offset_0x13D750
                dc.l    ($0A<<$18)|Angel_Island_1_Tiles_2      ; Offset_0x13E552
                dc.l    ($0A<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
                dc.l    ($0A<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
                dc.l    ($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
                dc.l    ($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
                
                dc.l    ($0C<<$18)|Angel_Island_1_Tiles        ; Offset_0x13D750
                dc.l    ($0C<<$18)|Angel_Island_1_Tiles_2      ; Offset_0x13E552
                dc.l    ($0B<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
                dc.l    ($0B<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
                dc.l    ($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
                dc.l    ($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
                
                dc.l    ($42<<$18)|Azure_Lake_Tiles            ; Offset_0x1946EE
                dc.l    ($42<<$18)|Azure_Lake_Tiles            ; Offset_0x1946EE
                dc.l    ($26<<$18)|Azure_Lake_Blocks           ; Offset_0x193C2E
                dc.l    ($26<<$18)|Azure_Lake_Blocks           ; Offset_0x193C2E
                dc.l    ($00<<$18)|Azure_Lake_Chunks           ; Offset_0x1974A0
                dc.l    ($00<<$18)|Azure_Lake_Chunks           ; Offset_0x1974A0
                
                dc.l    ($42<<$18)|Azure_Lake_Tiles            ; Offset_0x1946EE
                dc.l    ($42<<$18)|Azure_Lake_Tiles            ; Offset_0x1946EE
                dc.l    ($27<<$18)|Azure_Lake_Blocks           ; Offset_0x193C2E
                dc.l    ($27<<$18)|Azure_Lake_Blocks           ; Offset_0x193C2E
                dc.l    ($00<<$18)|Azure_Lake_Chunks           ; Offset_0x1974A0
                dc.l    ($00<<$18)|Azure_Lake_Chunks           ; Offset_0x1974A0
                
                dc.l    ($43<<$18)|Balloon_Park_Tiles          ; Offset_0x198400
                dc.l    ($43<<$18)|Balloon_Park_Tiles          ; Offset_0x198400
                dc.l    ($28<<$18)|Balloon_Park_Blocks         ; Offset_0x197B30
                dc.l    ($28<<$18)|Balloon_Park_Blocks         ; Offset_0x197B30
                dc.l    ($00<<$18)|Balloon_Park_Chunks         ; Offset_0x19A3E2
                dc.l    ($00<<$18)|Balloon_Park_Chunks         ; Offset_0x19A3E2
                
                dc.l    ($43<<$18)|Balloon_Park_Tiles          ; Offset_0x198400
                dc.l    ($43<<$18)|Balloon_Park_Tiles          ; Offset_0x198400
                dc.l    ($29<<$18)|Balloon_Park_Blocks         ; Offset_0x197B30
                dc.l    ($29<<$18)|Balloon_Park_Blocks         ; Offset_0x197B30
                dc.l    ($00<<$18)|Balloon_Park_Chunks         ; Offset_0x19A3E2
                dc.l    ($00<<$18)|Balloon_Park_Chunks         ; Offset_0x19A3E2
                
                dc.l    ($44<<$18)|Desert_Palace_Tiles         ; Offset_0x19B4B2
                dc.l    ($44<<$18)|Desert_Palace_Tiles         ; Offset_0x19B4B2
                dc.l    ($34<<$18)|Desert_Palace_Blocks        ; Offset_0x19AAD2
                dc.l    ($34<<$18)|Desert_Palace_Blocks        ; Offset_0x19AAD2
                dc.l    ($00<<$18)|Desert_Palace_Chunks        ; Offset_0x19CFA4
                dc.l    ($00<<$18)|Desert_Palace_Chunks        ; Offset_0x19CFA4
                
                dc.l    ($44<<$18)|Desert_Palace_Tiles         ; Offset_0x19B4B2
                dc.l    ($44<<$18)|Desert_Palace_Tiles         ; Offset_0x19B4B2
                dc.l    ($34<<$18)|Desert_Palace_Blocks        ; Offset_0x19AAD2
                dc.l    ($34<<$18)|Desert_Palace_Blocks        ; Offset_0x19AAD2
                dc.l    ($00<<$18)|Desert_Palace_Chunks        ; Offset_0x19CFA4
                dc.l    ($00<<$18)|Desert_Palace_Chunks        ; Offset_0x19CFA4
                
                dc.l    ($45<<$18)|Chrome_Gadget_Tiles         ; Offset_0x19DD24
                dc.l    ($45<<$18)|Chrome_Gadget_Tiles         ; Offset_0x19DD24
                dc.l    ($35<<$18)|Chrome_Gadget_Blocks        ; Offset_0x19D5D4
                dc.l    ($35<<$18)|Chrome_Gadget_Blocks        ; Offset_0x19D5D4
                dc.l    ($00<<$18)|Chrome_Gadget_Chunks        ; Offset_0x1A02C6
                dc.l    ($00<<$18)|Chrome_Gadget_Chunks        ; Offset_0x1A02C6
                
                dc.l    ($45<<$18)|Chrome_Gadget_Tiles         ; Offset_0x19DD24
                dc.l    ($45<<$18)|Chrome_Gadget_Tiles         ; Offset_0x19DD24
                dc.l    ($35<<$18)|Chrome_Gadget_Blocks        ; Offset_0x19D5D4
                dc.l    ($35<<$18)|Chrome_Gadget_Blocks        ; Offset_0x19D5D4
                dc.l    ($00<<$18)|Chrome_Gadget_Chunks        ; Offset_0x1A02C6
                dc.l    ($00<<$18)|Chrome_Gadget_Chunks        ; Offset_0x1A02C6
                
                dc.l    ($46<<$18)|Endless_Mine_Tiles          ; Offset_0x1A1236
                dc.l    ($46<<$18)|Endless_Mine_Tiles          ; Offset_0x1A1236
                dc.l    ($36<<$18)|Endless_Mine_Blocks         ; Offset_0x1A0786
                dc.l    ($36<<$18)|Endless_Mine_Blocks         ; Offset_0x1A0786
                dc.l    ($00<<$18)|Endless_Mine_Chunks         ; Offset_0x1A3E68
                dc.l    ($00<<$18)|Endless_Mine_Chunks         ; Offset_0x1A3E68
                
                dc.l    ($46<<$18)|Endless_Mine_Tiles          ; Offset_0x1A1236
                dc.l    ($46<<$18)|Endless_Mine_Tiles          ; Offset_0x1A1236
                dc.l    ($36<<$18)|Endless_Mine_Blocks         ; Offset_0x1A0786
                dc.l    ($36<<$18)|Endless_Mine_Blocks         ; Offset_0x1A0786
                dc.l    ($00<<$18)|Endless_Mine_Chunks         ; Offset_0x1A3E68
                dc.l    ($00<<$18)|Endless_Mine_Chunks         ; Offset_0x1A3E68
                
                dc.l    ($47<<$18)|BS_Gumball_Machine_Tiles    ; Offset_0x1A4938
                dc.l    ($47<<$18)|BS_Gumball_Machine_Tiles    ; Offset_0x1A4938
                dc.l    ($33<<$18)|BS_Gumball_Machine_Blocks   ; Offset_0x1A4578
                dc.l    ($33<<$18)|BS_Gumball_Machine_Blocks   ; Offset_0x1A4578
                dc.l    ($00<<$18)|BS_Gumball_Machine_Chunks   ; Offset_0x1A52AA
                dc.l    ($00<<$18)|BS_Gumball_Machine_Chunks   ; Offset_0x1A52AA
                
                dc.l    ($47<<$18)|BS_Gumball_Machine_Tiles    ; Offset_0x1A4938
                dc.l    ($47<<$18)|BS_Gumball_Machine_Tiles    ; Offset_0x1A4938
                dc.l    ($33<<$18)|BS_Gumball_Machine_Blocks   ; Offset_0x1A4578
                dc.l    ($33<<$18)|BS_Gumball_Machine_Blocks   ; Offset_0x1A4578
                dc.l    ($00<<$18)|BS_Gumball_Machine_Chunks   ; Offset_0x1A52AA
                dc.l    ($00<<$18)|BS_Gumball_Machine_Chunks   ; Offset_0x1A52AA
                
                dc.l    ($47<<$18)|BS_Glowing_Spheres_Tiles    ; Offset_0x1A589A
                dc.l    ($47<<$18)|BS_Glowing_Spheres_Tiles    ; Offset_0x1A589A
                dc.l    ($37<<$18)|BS_Glowing_Spheres_Blocks   ; Offset_0x1A55FA
                dc.l    ($37<<$18)|BS_Glowing_Spheres_Blocks   ; Offset_0x1A55FA
                dc.l    ($00<<$18)|BS_Glowing_Spheres_Chunks   ; Offset_0x1A680C
                dc.l    ($00<<$18)|BS_Glowing_Spheres_Chunks   ; Offset_0x1A680C
                
                dc.l    ($47<<$18)|BS_Glowing_Spheres_Tiles    ; Offset_0x1A589A
                dc.l    ($47<<$18)|BS_Glowing_Spheres_Tiles    ; Offset_0x1A589A
                dc.l    ($37<<$18)|BS_Glowing_Spheres_Blocks   ; Offset_0x1A55FA
                dc.l    ($37<<$18)|BS_Glowing_Spheres_Blocks   ; Offset_0x1A55FA
                dc.l    ($00<<$18)|BS_Glowing_Spheres_Chunks   ; Offset_0x1A680C
                dc.l    ($00<<$18)|BS_Glowing_Spheres_Chunks   ; Offset_0x1A680C
                
                dc.l    ($47<<$18)|BS_Slot_Machine_Tiles       ; Offset_0x1A77CC
                dc.l    ($47<<$18)|BS_Slot_Machine_Tiles       ; Offset_0x1A77CC
                dc.l    ($38<<$18)|BS_Slot_Machine_Blocks      ; Offset_0x1A6B0C
                dc.l    ($38<<$18)|BS_Slot_Machine_Blocks      ; Offset_0x1A6B0C
                dc.l    ($00<<$18)|BS_Slot_Machine_Chunks      ; Offset_0x1AA46E
                dc.l    ($00<<$18)|BS_Slot_Machine_Chunks      ; Offset_0x1AA46E
                
                dc.l    ($47<<$18)|BS_Slot_Machine_Tiles       ; Offset_0x1A77CC
                dc.l    ($47<<$18)|BS_Slot_Machine_Tiles       ; Offset_0x1A77CC
                dc.l    ($38<<$18)|BS_Slot_Machine_Blocks      ; Offset_0x1A6B0C
                dc.l    ($38<<$18)|BS_Slot_Machine_Blocks      ; Offset_0x1A6B0C
                dc.l    ($00<<$18)|BS_Slot_Machine_Chunks      ; Offset_0x1AA46E
                dc.l    ($00<<$18)|BS_Slot_Machine_Chunks      ; Offset_0x1AA46E
                
                dc.l    ($0A<<$18)|Angel_Island_1_Tiles        ; Offset_0x13D750
                dc.l    ($0A<<$18)|Angel_Island_1_Tiles_2      ; Offset_0x13E552
                dc.l    ($0A<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
                dc.l    ($0A<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
                dc.l    ($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
                dc.l    ($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
                
                dc.l    ($0C<<$18)|Angel_Island_1_Tiles        ; Offset_0x13D750
                dc.l    ($0C<<$18)|Angel_Island_1_Tiles_2      ; Offset_0x13E552
                dc.l    ($0B<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
                dc.l    ($0B<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
                dc.l    ($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
                dc.l    ($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
                
                dc.l    ($0A<<$18)|Angel_Island_1_Tiles        ; Offset_0x13D750
                dc.l    ($0A<<$18)|Angel_Island_1_Tiles_2      ; Offset_0x13E552
                dc.l    ($0A<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
                dc.l    ($0A<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
                dc.l    ($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
                dc.l    ($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
                
                dc.l    ($0C<<$18)|Angel_Island_1_Tiles        ; Offset_0x13D750
                dc.l    ($0C<<$18)|Angel_Island_1_Tiles_2      ; Offset_0x13E552
                dc.l    ($0B<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
                dc.l    ($0B<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
                dc.l    ($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
                dc.l    ($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
;-------------------------------------------------------------------------------               
ArtLoadCues:                                                   ; Offset_0x04ABFE
                dc.w    PLC_Default-ArtLoadCues                ; Offset_0x04ACF6 ; $00
                dc.w    PLC_Default_Sonic-ArtLoadCues          ; Offset_0x04AD10 ; $01
                dc.w    PLC_Default_Flickies-ArtLoadCues       ; Offset_0x04AD2A ; $02
                dc.w    PLC_Game_Over_Time_Over-ArtLoadCues    ; Offset_0x04AD3E ; $03
                dc.w    PLC_Act_1_Clear-ArtLoadCues            ; Offset_0x04AD46 ; $04
                dc.w    PLC_Default_2P-ArtLoadCues             ; Offset_0x04AD4E ; $05
                dc.w    PLC_Default_2P-ArtLoadCues             ; Offset_0x04AD4E ; $06
                dc.w    PLC_Art_Scaled_Test-ArtLoadCues        ; Offset_0x04AD62 ; $07
                dc.w    PLC_Art_Scaled_Test-ArtLoadCues        ; Offset_0x04AD62 ; $08
                dc.w    PLC_Art_Scaled_Test-ArtLoadCues        ; Offset_0x04AD62 ; $09
                dc.w    PLC_AIz_1-ArtLoadCues                  ; Offset_0x04AD6A ; $0A
                dc.w    PLC_AIz_2-ArtLoadCues                  ; Offset_0x04AD7E ; $0B
                dc.w    PLC_AIz_3-ArtLoadCues                  ; Offset_0x04AD9E ; $0C
                dc.w    PLC_AIz_3-ArtLoadCues                  ; Offset_0x04AD9E ; $0D
                dc.w    PLC_Hz_1-ArtLoadCues                   ; Offset_0x04ADBE ; $0E
                dc.w    PLC_Hz_2-ArtLoadCues                   ; Offset_0x04ADEA ; $0F
                dc.w    PLC_Hz_3-ArtLoadCues                   ; Offset_0x04ADF2 ; $10
                dc.w    PLC_Hz_4-ArtLoadCues                   ; Offset_0x04AE1E ; $11
                dc.w    PLC_MGz_1-ArtLoadCues                  ; Offset_0x04AE32 ; $12
                dc.w    PLC_MGz_1-ArtLoadCues                  ; Offset_0x04AE32 ; $13
                dc.w    PLC_MGz_2-ArtLoadCues                  ; Offset_0x04AE4C ; $14
                dc.w    PLC_MGz_2-ArtLoadCues                  ; Offset_0x04AE4C ; $15
                dc.w    PLC_CNz-ArtLoadCues                    ; Offset_0x04AE66 ; $16
                dc.w    PLC_CNz-ArtLoadCues                    ; Offset_0x04AE66 ; $17
                dc.w    PLC_CNz-ArtLoadCues                    ; Offset_0x04AE66 ; $18
                dc.w    PLC_CNz-ArtLoadCues                    ; Offset_0x04AE66 ; $19
                dc.w    PLC_FBz-ArtLoadCues                    ; Offset_0x04AE7A ; $1A
                dc.w    PLC_FBz-ArtLoadCues                    ; Offset_0x04AE7A ; $1B
                dc.w    PLC_FBz-ArtLoadCues                    ; Offset_0x04AE7A ; $1C
                dc.w    PLC_FBz-ArtLoadCues                    ; Offset_0x04AE7A ; $1D
                dc.w    PLC_Iz_1-ArtLoadCues                   ; Offset_0x04AE82 ; $1E
                dc.w    PLC_Iz_1-ArtLoadCues                   ; Offset_0x04AE82 ; $1F
                dc.w    PLC_Iz_2-ArtLoadCues                   ; Offset_0x04AE9C ; $20
                dc.w    PLC_Iz_2-ArtLoadCues                   ; Offset_0x04AE9C ; $21
                dc.w    PLC_LBz_1-ArtLoadCues                  ; Offset_0x04AEB6 ; $22
                dc.w    PLC_LBz_1-ArtLoadCues                  ; Offset_0x04AEB6 ; $23
                dc.w    PLC_LBz_2-ArtLoadCues                  ; Offset_0x04AEC4 ; $24
                dc.w    PLC_LBz_3-ArtLoadCues                  ; Offset_0x04AED2 ; $25
                dc.w    PLC_MVz-ArtLoadCues                    ; Offset_0x04AEDA ; $26
                dc.w    PLC_MVz-ArtLoadCues                    ; Offset_0x04AEDA ; $27
                dc.w    PLC_MVz-ArtLoadCues                    ; Offset_0x04AEDA ; $28
                dc.w    PLC_MVz-ArtLoadCues                    ; Offset_0x04AEDA ; $29
                dc.w    PLC_2A_To_2D-ArtLoadCues               ; Offset_0x04AEDA ; $2A
                dc.w    PLC_2A_To_2D-ArtLoadCues               ; Offset_0x04AEDA ; $2B
                dc.w    PLC_2A_To_2D-ArtLoadCues               ; Offset_0x04AEDA ; $2C
                dc.w    PLC_2A_To_2D-ArtLoadCues               ; Offset_0x04AEDA ; $2D
                dc.w    PLC_LRz_1-ArtLoadCues                  ; Offset_0x04AEE8 ; $2E
                dc.w    PLC_LRz_1-ArtLoadCues                  ; Offset_0x04AEE8 ; $2F
                dc.w    PLC_LRz_2-ArtLoadCues                  ; Offset_0x04AEFC ; $30
                dc.w    PLC_LRz_2-ArtLoadCues                  ; Offset_0x04AEFC ; $31
                dc.w    PLC_32_To_41-ArtLoadCues               ; Offset_0x04AEFC ; $32
                dc.w    PLC_32_To_41-ArtLoadCues               ; Offset_0x04AEFC ; $33
                dc.w    PLC_32_To_41-ArtLoadCues               ; Offset_0x04AEFC ; $34
                dc.w    PLC_32_To_41-ArtLoadCues               ; Offset_0x04AEFC ; $35
                dc.w    PLC_32_To_41-ArtLoadCues               ; Offset_0x04AEFC ; $36
                dc.w    PLC_32_To_41-ArtLoadCues               ; Offset_0x04AEFC ; $37
                dc.w    PLC_32_To_41-ArtLoadCues               ; Offset_0x04AEFC ; $38
                dc.w    PLC_32_To_41-ArtLoadCues               ; Offset_0x04AEFC ; $39
                dc.w    PLC_32_To_41-ArtLoadCues               ; Offset_0x04AEFC ; $3A
                dc.w    PLC_32_To_41-ArtLoadCues               ; Offset_0x04AEFC ; $3B
                dc.w    PLC_32_To_41-ArtLoadCues               ; Offset_0x04AEFC ; $3C
                dc.w    PLC_32_To_41-ArtLoadCues               ; Offset_0x04AEFC ; $3D
                dc.w    PLC_32_To_41-ArtLoadCues               ; Offset_0x04AEFC ; $3E
                dc.w    PLC_32_To_41-ArtLoadCues               ; Offset_0x04AEFC ; $3F
                dc.w    PLC_32_To_41-ArtLoadCues               ; Offset_0x04AEFC ; $40
                dc.w    PLC_32_To_41-ArtLoadCues               ; Offset_0x04AEFC ; $41
                dc.w    PLC_ALz-ArtLoadCues                    ; Offset_0x04AF0A ; $42
                dc.w    PLC_BPz-ArtLoadCues                    ; Offset_0x04AF3C ; $43
                dc.w    PLC_DPz-ArtLoadCues                    ; Offset_0x04AF74 ; $44
                dc.w    PLC_CGz-ArtLoadCues                    ; Offset_0x04AFAC ; $45
                dc.w    PLC_EMz-ArtLoadCues                    ; Offset_0x04AFE4 ; $46
                dc.w    PLC_Bonus_Stage-ArtLoadCues            ; Offset_0x04B01C ; $47
                dc.w    PLC_48_To_59-ArtLoadCues               ; Offset_0x04B030 ; $48
                dc.w    PLC_48_To_59-ArtLoadCues               ; Offset_0x04B030 ; $49
                dc.w    PLC_48_To_59-ArtLoadCues               ; Offset_0x04B030 ; $4A
                dc.w    PLC_48_To_59-ArtLoadCues               ; Offset_0x04B030 ; $4B
                dc.w    PLC_48_To_59-ArtLoadCues               ; Offset_0x04B030 ; $4C
                dc.w    PLC_48_To_59-ArtLoadCues               ; Offset_0x04B030 ; $4D 
                dc.w    PLC_48_To_59-ArtLoadCues               ; Offset_0x04B030 ; $4E 
                dc.w    PLC_48_To_59-ArtLoadCues               ; Offset_0x04B030 ; $4F
                dc.w    PLC_48_To_59-ArtLoadCues               ; Offset_0x04B030 ; $50
                dc.w    PLC_48_To_59-ArtLoadCues               ; Offset_0x04B030 ; $51
                dc.w    PLC_48_To_59-ArtLoadCues               ; Offset_0x04B030 ; $52 
                dc.w    PLC_48_To_59-ArtLoadCues               ; Offset_0x04B030 ; $53 
                dc.w    PLC_48_To_59-ArtLoadCues               ; Offset_0x04B030 ; $54
                dc.w    PLC_48_To_59-ArtLoadCues               ; Offset_0x04B030 ; $55
                dc.w    PLC_48_To_59-ArtLoadCues               ; Offset_0x04B030 ; $56
                dc.w    PLC_48_To_59-ArtLoadCues               ; Offset_0x04B030 ; $57 
                dc.w    PLC_48_To_59-ArtLoadCues               ; Offset_0x04B030 ; $58
                dc.w    PLC_48_To_59-ArtLoadCues               ; Offset_0x04B030 ; $59
                dc.w    PLC_AIz_Mini_Boss-ArtLoadCues          ; Offset_0x04B030 ; $5A
                dc.w    PLC_Hz_Mini_Boss-ArtLoadCues           ; Offset_0x04B04A ; $5B
                dc.w    PLC_5C-ArtLoadCues                     ; Offset_0x04B058 ; $5C
                dc.w    PLC_CNz_Mini_Boss-ArtLoadCues          ; Offset_0x04B058 ; $5D
                dc.w    PLC_FBz_Mini_Boss-ArtLoadCues          ; Offset_0x04B066 ; $5E
                dc.w    PLC_Iz_Mini_Boss-ArtLoadCues           ; Offset_0x04B086 ; $5F
                dc.w    PLC_LBz_Mini_Boss-ArtLoadCues          ; Offset_0x04B094 ; $60
                dc.w    PLC_61_To_69-ArtLoadCues               ; Offset_0x04B0AE ; $61
                dc.w    PLC_61_To_69-ArtLoadCues               ; Offset_0x04B0AE ; $62
                dc.w    PLC_61_To_69-ArtLoadCues               ; Offset_0x04B0AE ; $63
                dc.w    PLC_61_To_69-ArtLoadCues               ; Offset_0x04B0AE ; $64
                dc.w    PLC_61_To_69-ArtLoadCues               ; Offset_0x04B0AE ; $65
                dc.w    PLC_61_To_69-ArtLoadCues               ; Offset_0x04B0AE ; $66
                dc.w    PLC_61_To_69-ArtLoadCues               ; Offset_0x04B0AE ; $67
                dc.w    PLC_61_To_69-ArtLoadCues               ; Offset_0x04B0AE ; $68
                dc.w    PLC_61_To_69-ArtLoadCues               ; Offset_0x04B0AE ; $69
                dc.w    PLC_FBz_Barrier_Eggman-ArtLoadCues     ; Offset_0x04B0AE ; $6A
                dc.w    PLC_AIz_Final_Boss-ArtLoadCues         ; Offset_0x04B0C8 ; $6B    
                dc.w    PLC_Hz_Final_Boss-ArtLoadCues          ; Offset_0x04B0DC ; $6C
                dc.w    PLC_MGz_Final_Boss-ArtLoadCues         ; Offset_0x04B102 ; $6D
                dc.w    PLC_CNz_Final_Boss-ArtLoadCues         ; Offset_0x04B11C ; $6E
                dc.w    PLC_FBz_Final_Boss-ArtLoadCues         ; Offset_0x04B136 ; $6F
                dc.w    PLC_Iz_Final_Boss-ArtLoadCues          ; Offset_0x04B15C ; $70
                dc.w    PLC_LBz_Final_Boss-ArtLoadCues         ; Offset_0x04B176 ; $71
                dc.w    Offset_0x04B18A-ArtLoadCues
                dc.w    Offset_0x04B18A-ArtLoadCues
                dc.w    Offset_0x04B18A-ArtLoadCues
                dc.w    Offset_0x04B18A-ArtLoadCues
                dc.w    Offset_0x04B18A-ArtLoadCues
                dc.w    Offset_0x04B18A-ArtLoadCues
                dc.w    Offset_0x04B19E-ArtLoadCues
                dc.w    Offset_0x04B19E-ArtLoadCues
                dc.w    Offset_0x04B19E-ArtLoadCues
                dc.w    Offset_0x04B19E-ArtLoadCues     
;===============================================================================
; Sprites padr�es carregados durante a tela t�tulo
; ->>>
;===============================================================================                
PLC_Default:                                                   ; Offset_0x04ACF6
                dc.w    (((PLC_00_End-PLC_00)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_00:                
                dc.l    Art_Head_Up_Display_Sonic              ; Offset_0x106DDC
                dc.w    $FA80
                dc.l    Art_Main_Head_Up_Display_Rings         ; Offset_0x109154
                dc.w    $D780
                dc.l    Art_Enemy_Points_Star_Post             ; Offset_0x109392
                dc.w    $BC80
                dc.l    Art_Monitors                           ; Offset_0x1071DA
                dc.w    $9880
PLC_00_End:
;===============================================================================
; Sprites padr�es carregados durante a tela t�tulo
; <<<-
;===============================================================================  

;===============================================================================
; Sprites padr�es carregados para o Sonic nas fases
; ->>>
;===============================================================================
PLC_Default_Sonic:                                             ; Offset_0x04AD10                                                       
                dc.w    (((PLC_01_End-PLC_01)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_01:                 
                dc.l    Art_Monitors                           ; Offset_0x1071DA
                dc.w    $9880
                dc.l    Art_Main_Head_Up_Display_Rings         ; Offset_0x109154
                dc.w    $D780
                dc.l    Art_Enemy_Points_Star_Post             ; Offset_0x109392
                dc.w    $BC80
                dc.l    Art_Head_Up_Display_Sonic              ; Offset_0x106DDC
                dc.w    $FA80
PLC_01_End:  
;===============================================================================
; Sprites padr�es carregados para o Sonic nas fases
; <<<-
;=============================================================================== 

;-------------------------------------------------------------------------------
PLC_Default_Flickies:                                          ; Offset_0x04AD2A
                dc.w    (((PLC_02_End-PLC_02)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_02:
                dc.l    Art_Explosion                          ; Offset_0x108528
                dc.w    $B400
                dc.l    Art_Squirrel                           ; Offset_0x10B3DC
                dc.w    $B000
                dc.l    Art_Blue_Bird                          ; Offset_0x10B00A
                dc.w    $B240
PLC_02_End:
;-------------------------------------------------------------------------------
PLC_Game_Over_Time_Over:                                       ; Offset_0x04AD3E
                dc.w    (((PLC_03_End-PLC_03)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_03:
                dc.l    Art_Game_Over_Time_Over                ; Offset_0x108396
                dc.w    $F380
PLC_03_End: 
;-------------------------------------------------------------------------------
PLC_Act_1_Clear:                                               ; Offset_0x04AD46
                dc.w    (((PLC_04_End-PLC_04)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_04:
                dc.l    Art_End_Panel                          ; Offset_0x107956
                dc.w    $A000
PLC_04_End:
;-------------------------------------------------------------------------------
PLC_Default_2P:                                                ; Offset_0x04AD4E
                dc.w    (((PLC_05_End-PLC_05)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_05:
                dc.l    Art_V_Springs_Spikes_2P                ; Offset_0x136848
                dc.w    $7220
                dc.l    Art_H_Springs_Switch_2P                ; Offset_0x1366D4
                dc.w    $75A0
                dc.l    Art_Items_2P                           ; Offset_0x136A3A
                dc.w    $78C0
PLC_05_End:
;-------------------------------------------------------------------------------
PLC_Art_Scaled_Test:                                           ; Offset_0x04AD62
                dc.w    (((PLC_07_End-PLC_07)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_07:
                dc.l    Art_Scaled_Spheres                     ; Offset_0x10B68E
                dc.w    $9C00
PLC_07_End:
;-------------------------------------------------------------------------------
PLC_AIz_1:                                                     ; Offset_0x04AD6A
                dc.w    (((PLC_0A_End-PLC_0A)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_0A:
                dc.l    Art_Intro_Water_Waves                  ; Offset_0x1035F8
                dc.w    $7A20
                dc.l    Art_Intro_Small_Water_Waves            ; Offset_0x103B38
                dc.w    $A520
                dc.l    Art_Surfboard                          ; Offset_0x103DD0
                dc.w    $B0A0
PLC_0A_End:
;-------------------------------------------------------------------------------
PLC_AIz_2:                                                     ; Offset_0x04AD7E
                dc.w    (((PLC_0B_End-PLC_0B)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_0B:
                dc.l    Art_AIz_Swinging_Vine                  ; Offset_0x12C9AA
                dc.w    $8440
                dc.l    Art_AIz_Slide_Rope                     ; Offset_0x12CB10
                dc.w    $6480
                dc.l    Art_AIz_Rocks_And_Tree                 ; Offset_0x12CD7E
                dc.w    $6660
                dc.l    Art_AIz_Cork_Floor                     ; Offset_0x12D5C6
                dc.w    $79E0
                dc.l    Art_Oxygen_Bubbles                     ; Offset_0x1080F8
                dc.w    $8B80
PLC_0B_End:
;-------------------------------------------------------------------------------
PLC_AIz_3:                                                     ; Offset_0x04AD9E
                dc.w    (((PLC_0C_End-PLC_0C)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_0C:
                dc.l    Art_AIz_Miscellaneous                  ; Offset_0x12D84E
                dc.w    $5E00
                dc.l    Art_AIz_Swinging_Vine                  ; Offset_0x12C9AA
                dc.w    $8440
                dc.l    Art_AIz_Background_Tree                ; Offset_0x12CC34
                dc.w    $87E0
                dc.l    Art_Oxygen_Bubbles                     ; Offset_0x1080F8
                dc.w    $8B80
                dc.l    Art_Switch                             ; Offset_0x1067F6
                dc.w    $8AC0
PLC_0C_End:
;-------------------------------------------------------------------------------
PLC_Hz_1:                                                      ; Offset_0x04ADBE
                dc.w    (((PLC_0E_End-PLC_0E)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_0E:
                dc.l    Art_Diagonal_Spring                    ; Offset_0x106AC8
                dc.w    $8740
                dc.l    Art_Oxygen_Bubbles                     ; Offset_0x1080F8
                dc.w    $8B80
                dc.l    Art_Hz_Miscellaneous                   ; Offset_0x12EE76
                dc.w    $7940
                dc.l    Art_Hz_Switch                          ; Offset_0x12EDC2
                dc.w    $84C0
                dc.l    Art_Hz_Water_Rush                      ; Offset_0x12F436
                dc.w    $6F40
                dc.l    Art_Hz_Water_Surface                   ; Offset_0x12ECA2
                dc.w    $85C0
                dc.l    Art_Hz_Spiked_Ball                     ; Offset_0x12EBDA
                dc.w    $87C0
PLC_0E_End:
;-------------------------------------------------------------------------------
PLC_Hz_2:                                                      ; Offset_0x04ADEA
                dc.w    (((PLC_0F_End-PLC_0F)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_0F:
                dc.l    Art_Buggernaut                         ; Offset_0x11667C
                dc.w    $8A60
PLC_0F_End:
;-------------------------------------------------------------------------------
PLC_Hz_3:                                                      ; Offset_0x04ADF2
                dc.w    (((PLC_10_End-PLC_10)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_10:
                dc.l    Art_Diagonal_Spring                    ; Offset_0x106AC8
                dc.w    $8740
                dc.l    Art_Oxygen_Bubbles                     ; Offset_0x1080F8
                dc.w    $8B80
                dc.l    Art_Hz_Miscellaneous                   ; Offset_0x12EE76
                dc.w    $7940
                dc.l    Art_Hz_Switch                          ; Offset_0x12EDC2
                dc.w    $84C0
                dc.l    Art_Hz_Water_Surface                   ; Offset_0x12ECA2
                dc.w    $85C0
                dc.l    Art_Hz_Spiked_Ball                     ; Offset_0x12EBDA
                dc.w    $87C0
                dc.l    Art_Hz_Sliding_Tube                    ; Offset_0x130C24
                dc.w    $6B80
PLC_10_End:
;-------------------------------------------------------------------------------
PLC_Hz_4:                                                      ; Offset_0x04AE1E
                dc.w    (((PLC_11_End-PLC_11)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_11:
                dc.l    Art_Hz_Block_Wall                      ; Offset_0x1330E4
                dc.w    $6A00
                dc.l    Art_Hz_Bridge_And_Blocks               ; Offset_0x13113A
                dc.w    $0500
                dc.l    Art_Buggernaut                         ; Offset_0x11667C
                dc.w    $8A60
PLC_11_End:
;-------------------------------------------------------------------------------
PLC_MGz_1:                                                     ; Offset_0x04AE32
                dc.w    (((PLC_12_End-PLC_12)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_12:
                dc.l    Art_MGz_Wheel_And_Miscellaneous        ; Offset_0x1331FE
                dc.w    $6BE0
                dc.l    Art_MGz_Spiked_Platform_And_Miscellaneous ; Offset_0x133C3C
                dc.w    $7FE0
                dc.l    Art_MGz_Direction_Indicators           ; Offset_0x13424C
                dc.w    $8A20
                dc.l    Art_Diagonal_Spring                    ; Offset_0x106AC8
                dc.w    $8F00
PLC_12_End:
;-------------------------------------------------------------------------------
PLC_MGz_2:                                                     ; Offset_0x04AE4C
                dc.w    (((PLC_14_End-PLC_14)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_14:
                dc.l    Art_MGz_Wheel_And_Miscellaneous        ; Offset_0x1331FE
                dc.w    $6BE0
                dc.l    Art_MGz_Spiked_Platform_And_Miscellaneous ; Offset_0x133C3C
                dc.w    $7FE0
                dc.l    Art_MGz_Direction_Indicators           ; Offset_0x13424C
                dc.w    $8A20
                dc.l    Art_Diagonal_Spring                    ; Offset_0x106AC8
                dc.w    $8F00
PLC_14_End:
;-------------------------------------------------------------------------------
PLC_CNz:                                                       ; Offset_0x04AE66
                dc.w    (((PLC_16_End-PLC_16)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_16:
                dc.l    Art_CNz_Balloons_Bumpers_And_Miscellaneous ; Offset_0x134486
                dc.w    $6A20
                dc.l    Art_Oxygen_Bubbles                     ; Offset_0x1080F8
                dc.w    $8B80
                dc.l    Art_CNz_Platform                       ; Offset_0x135244
                dc.w    $8600
PLC_16_End:
;-------------------------------------------------------------------------------
PLC_FBz:                                                       ; Offset_0x04AE7A
                dc.w    (((PLC_1A_End-PLC_1A)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_1A:
                dc.l    Art_Diagonal_Spring                    ; Offset_0x106AC8
                dc.w    $8740
PLC_1A_End:
;-------------------------------------------------------------------------------
PLC_Iz_1:                                                      ; Offset_0x04AE82
                dc.w    (((PLC_1E_End-PLC_1E)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_1E:
                dc.l    Art_Diagonal_Spring                    ; Offset_0x106AC8
                dc.w    $8740
                dc.l    Art_Switch                             ; Offset_0x1067F6
                dc.w    $8AC0
                dc.l    Art_Iz_Ice_Platform_And_Miscellaneous  ; Offset_0x11DD52
                dc.w    $76C0
                dc.l    Art_Iz_Ice_Rock_And_Miscellaneous      ; Offset_0x11E976
                dc.w    $68E0
PLC_1E_End:
;-------------------------------------------------------------------------------
PLC_Iz_2:                                                      ; Offset_0x04AE9C
                dc.w    (((PLC_20_End-PLC_20)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_20:
                dc.l    Art_Diagonal_Spring                    ; Offset_0x106AC8
                dc.w    $8740
                dc.l    Art_Switch                             ; Offset_0x1067F6
                dc.w    $8AC0
                dc.l    Art_Iz_Ice_Platform_And_Miscellaneous  ; Offset_0x11DD52
                dc.w    $76C0
                dc.l    Art_Iz_SnowSlip_And_Miscellaneous      ; Offset_0x11EDF8
                dc.w    $6FA0
PLC_20_End:
;-------------------------------------------------------------------------------
PLC_LBz_1:                                                     ; Offset_0x04AEB6
                dc.w    (((PLC_22_End-PLC_22)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_22:
                dc.l    Art_LBz_Miscellaneous                  ; Offset_0x1353AE
                dc.w    $7860
                dc.l    Art_LBz_Tube_Elevator                  ; Offset_0x135ECC
                dc.w    $8AA0
PLC_22_End:
;-------------------------------------------------------------------------------
PLC_LBz_2:                                                     ; Offset_0x04AEC4
                dc.w    (((PLC_24_End-PLC_24)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_24:
                dc.l    Art_LBz_Miscellaneous                  ; Offset_0x1353AE
                dc.w    $7860
                dc.l    Art_Oxygen_Bubbles                     ; Offset_0x1080F8
                dc.w    $8B80
PLC_24_End:
;-------------------------------------------------------------------------------
PLC_LBz_3:                                                     ; Offset_0x04AED2
                dc.w    (((PLC_25_End-PLC_25)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_25:
                dc.l    Art_LBz_Spin_Launcher_And_Miscellaneous ; Offset_0x136150
                dc.w    $5D40
PLC_25_End:
;-------------------------------------------------------------------------------
PLC_2A_To_2D:                                                  ; Offset_0x04AEDA
;-------------------------------------------------------------------------------
PLC_MVz:                                                       ; Offset_0x04AEDA
                dc.w    (((PLC_26_End-PLC_26)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_26:
                dc.l    Art_Diagonal_Spring                    ; Offset_0x106AC8
                dc.w    $8740
                dc.l    Art_Spikes_Springs                     ; Offset_0x108E64
                dc.w    $9280
PLC_26_End:
;-------------------------------------------------------------------------------
PLC_LRz_1:                                                     ; Offset_0x04AEE8
                dc.w    (((PLC_2E_End-PLC_2E)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_2E:
                dc.l    Art_LRz_Rocks                          ; Offset_0x13658C
                dc.w    $8000
                dc.l    Art_Diagonal_Spring                    ; Offset_0x106AC8
                dc.w    $8740
                dc.l    Art_Spikes_Springs                     ; Offset_0x108E64
                dc.w    $9280
PLC_2E_End:
;-------------------------------------------------------------------------------
PLC_32_To_41:
;-------------------------------------------------------------------------------
PLC_LRz_2:                                                     ; Offset_0x04AEFC
                dc.w    (((PLC_30_End-PLC_30)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_30:
                dc.l    Art_Diagonal_Spring                    ; Offset_0x106AC8
                dc.w    $8740
                dc.l    Art_Spikes_Springs                     ; Offset_0x108E64
                dc.w    $9280
PLC_30_End:
;-------------------------------------------------------------------------------
PLC_ALz:                                                       ; Offset_0x04AF0A
                dc.w    (((PLC_42_End-PLC_42)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_42:
                dc.l    Art_Dust_2P                            ; Offset_0x0858E0
                dc.w    $FC00
                dc.l    Art_Goal_Marker_2P                     ; Offset_0x136F1E
                dc.w    $D780
                dc.l    Art_Head_up_display_Sprites_2P         ; Offset_0x137096
                dc.w    $C000
                dc.l    Art_Lap_Numbers_2P                     ; Offset_0x1376F0
                dc.w    $E000
                dc.l    Art_Point_And_Arrows_2P                ; Offset_0x137BB0
                dc.w    $EBC0
                dc.l    Art_V_Springs_Spikes_2P                ; Offset_0x136848
                dc.w    $7220
                dc.l    Art_H_Springs_Switch_2P                ; Offset_0x1366D4
                dc.w    $75A0
                dc.l    Art_Items_2P                           ; Offset_0x136A3A
                dc.w    $78C0
PLC_42_End:
;-------------------------------------------------------------------------------
PLC_BPz:                                                       ; Offset_0x04AF3C
                dc.w    (((PLC_43_End-PLC_43)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_43:
                dc.l    Art_BPz_Ballons_And_Miscellaneous      ; Offset_0x137C4A
                dc.w    $6000
                dc.l    Art_Dust_2P                            ; Offset_0x0858E0
                dc.w    $FC00
                dc.l    Art_Goal_Marker_2P                     ; Offset_0x136F1E
                dc.w    $D780
                dc.l    Art_Head_up_display_Sprites_2P         ; Offset_0x137096
                dc.w    $C000
                dc.l    Art_Lap_Numbers_2P                     ; Offset_0x1376F0
                dc.w    $E000
                dc.l    Art_Point_And_Arrows_2P                ; Offset_0x137BB0
                dc.w    $EBC0
                dc.l    Art_V_Springs_Spikes_2P                ; Offset_0x136848
                dc.w    $7220
                dc.l    Art_H_Springs_Switch_2P                ; Offset_0x1366D4
                dc.w    $75A0
                dc.l    Art_Items_2P                           ; Offset_0x136A3A
                dc.w    $78C0
PLC_43_End:
;-------------------------------------------------------------------------------
PLC_DPz:                                                       ; Offset_0x04AF74
                dc.w    (((PLC_44_End-PLC_44)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_44:
                dc.l    Art_DPz_Sand_And_Miscellaneous         ; Offset_0x138494
                dc.w    $5000
                dc.l    Art_Dust_2P                            ; Offset_0x0858E0
                dc.w    $FC00
                dc.l    Art_Goal_Marker_2P                     ; Offset_0x136F1E
                dc.w    $D780
                dc.l    Art_Head_up_display_Sprites_2P         ; Offset_0x137096
                dc.w    $C000
                dc.l    Art_Lap_Numbers_2P                     ; Offset_0x1376F0
                dc.w    $E000
                dc.l    Art_Point_And_Arrows_2P                ; Offset_0x137BB0
                dc.w    $EBC0
                dc.l    Art_V_Springs_Spikes_2P                ; Offset_0x136848
                dc.w    $7220
                dc.l    Art_H_Springs_Switch_2P                ; Offset_0x1366D4
                dc.w    $75A0
                dc.l    Art_Items_2P                           ; Offset_0x136A3A
                dc.w    $78C0
PLC_44_End:
;-------------------------------------------------------------------------------
PLC_CGz:                                                       ; Offset_0x04AFAC
                dc.w    (((PLC_45_End-PLC_45)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_45:
                dc.l    Art_CGz_Platform_And_Miscellaneous     ; Offset_0x1391AA
                dc.w    $6000
                dc.l    Art_Dust_2P                            ; Offset_0x0858E0
                dc.w    $FC00
                dc.l    Art_Goal_Marker_2P                     ; Offset_0x136F1E
                dc.w    $D780
                dc.l    Art_Head_up_display_Sprites_2P         ; Offset_0x137096
                dc.w    $C000
                dc.l    Art_Lap_Numbers_2P                     ; Offset_0x1376F0
                dc.w    $E000
                dc.l    Art_Point_And_Arrows_2P                ; Offset_0x137BB0
                dc.w    $EBC0
                dc.l    Art_V_Springs_Spikes_2P                ; Offset_0x136848
                dc.w    $7220
                dc.l    Art_H_Springs_Switch_2P                ; Offset_0x1366D4
                dc.w    $75A0
                dc.l    Art_Items_2P                           ; Offset_0x136A3A
                dc.w    $78C0
PLC_45_End:
;-------------------------------------------------------------------------------
PLC_EMz:                                                       ; Offset_0x04AFE4
                dc.w    (((PLC_46_End-PLC_46)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_46:
                dc.l    Art_EMz_Rock_And_Miscellaneous         ; Offset_0x13951E
                dc.w    $6000
                dc.l    Art_Dust_2P                            ; Offset_0x0858E0
                dc.w    $FC00
                dc.l    Art_Goal_Marker_2P                     ; Offset_0x136F1E
                dc.w    $D780
                dc.l    Art_Head_up_display_Sprites_2P         ; Offset_0x137096
                dc.w    $C000
                dc.l    Art_Lap_Numbers_2P                     ; Offset_0x1376F0
                dc.w    $E000
                dc.l    Art_Point_And_Arrows_2P                ; Offset_0x137BB0
                dc.w    $EBC0
                dc.l    Art_V_Springs_Spikes_2P                ; Offset_0x136848
                dc.w    $7220
                dc.l    Art_H_Springs_Switch_2P                ; Offset_0x1366D4
                dc.w    $75A0
                dc.l    Art_Items_2P                           ; Offset_0x136A3A
                dc.w    $78C0
PLC_46_End:
;-------------------------------------------------------------------------------
PLC_Bonus_Stage:                                               ; Offset_0x04B01C
                dc.w    (((PLC_47_End-PLC_47)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_47:
                dc.l    Art_V_Springs_Spikes_2P                ; Offset_0x136848
                dc.w    $7220
                dc.l    Art_H_Springs_Switch_2P                ; Offset_0x1366D4
                dc.w    $75A0
                dc.l    Art_Items_2P                           ; Offset_0x136A3A
                dc.w    $78C0
PLC_47_End:
;-------------------------------------------------------------------------------
PLC_48_To_59:                                                  ; Offset_0x04B030
;-------------------------------------------------------------------------------
PLC_AIz_Mini_Boss:                                             ; Offset_0x04B030  
                dc.w    (((PLC_5A_End-PLC_5A)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_5A:
                dc.l    Art_Fire_Breath                        ; Offset_0x110E8E
                dc.w    $7E20
                dc.l    Art_Fire_Breath_Small                  ; Offset_0x11343E
                dc.w    $8960
                dc.l    Art_Fire_Breath_Flames                 ; Offset_0x124854
                dc.w    $8B20
                dc.l    Art_Boss_Explosion                     ; Offset_0x124504
                dc.w    $9520
PLC_5A_End:
;-------------------------------------------------------------------------------  
PLC_Hz_Mini_Boss:                                              ; Offset_0x04B04A
                dc.w    (((PLC_5B_End-PLC_5B)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_5B:
                dc.l    Art_Big_Shaker                         ; Offset_0x11469C
                dc.w    $6080
                dc.l    Art_Boss_Explosion                     ; Offset_0x124504
                dc.w    $9520
PLC_5B_End:
;-------------------------------------------------------------------------------
PLC_5C:                                                        ; Offset_0x04B058  
;-------------------------------------------------------------------------------
PLC_CNz_Mini_Boss:
                dc.w    (((PLC_5D_End-PLC_5D)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_5D:
                dc.l    Art_Bowling_Spin                       ; Offset_0x11A78C
                dc.w    $A0E0
                dc.l    Art_Boss_Explosion                     ; Offset_0x124504
                dc.w    $9520
PLC_5D_End:
;-------------------------------------------------------------------------------
PLC_FBz_Mini_Boss:                                             ; Offset_0x04B066
                dc.w    (((PLC_5E_End-PLC_5E)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_5E:
                dc.l    Art_Gapsule                            ; Offset_0x11C8F4
                dc.w    $A5C0
                dc.l    Art_Egg_Prison                         ; Offset_0x126E84
                dc.w    $89C0
                dc.l    Art_Boss_Explosion                     ; Offset_0x124504
                dc.w    $9520
                dc.l    Art_Squirrel                           ; Offset_0x10B3DC
                dc.w    $85C0
                dc.l    Art_Blue_Bird                          ; Offset_0x10B00A
                dc.w    $8800
PLC_5E_End:
;-------------------------------------------------------------------------------
PLC_Iz_Mini_Boss:                                              ; Offset_0x04B086
                dc.w    (((PLC_5F_End-PLC_5F)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_5F:
                dc.l    Art_Big_Icedus                         ; Offset_0x11FF66
                dc.w    $9AE0
                dc.l    Art_Boss_Explosion                     ; Offset_0x124504
                dc.w    $9520
PLC_5F_End:
;-------------------------------------------------------------------------------
PLC_LBz_Mini_Boss:                                             ; Offset_0x04B094
                dc.w    (((PLC_60_End-PLC_60)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_60:
                dc.l    Art_Robotnik_In_Egg_Mobile             ; Offset_0x125122
                dc.w    $A5C0
                dc.l    Art_Twin_Hammer_Box                    ; Offset_0x124066
                dc.w    $88C0
                dc.l    Art_Twin_Hammer                        ; Offset_0x1215F2
                dc.w    $8380
                dc.l    Art_LBz_Knuckles_Bomb                  ; Offset_0x1244C6
                dc.w    $94A0
PLC_60_End:
;-------------------------------------------------------------------------------
PLC_61_To_69:                                                  ; Offset_0x04B0AE
;-------------------------------------------------------------------------------
PLC_FBz_Barrier_Eggman:                                        ; Offset_0x04B0AE
                dc.w    (((PLC_6A_End-PLC_6A)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_6A:
                dc.l    Art_Laser_Beam                         ; Offset_0x11CEBA
                dc.w    $A5C0
                dc.l    Art_FBz_Robotnik_Stand                 ; Offset_0x1258F0
                dc.w    $8CC0
                dc.l    Art_FBz_Robotnik                       ; Offset_0x125D06
                dc.w    $9AE0
                dc.l    Art_Boss_Explosion                     ; Offset_0x124504
                dc.w    $9520
PLC_6A_End:
;-------------------------------------------------------------------------------
PLC_AIz_Final_Boss:                                            ; Offset_0x04B0C8
                dc.w    (((PLC_6B_End-PLC_6B)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_6B:
                dc.l    Art_Robotnik_In_Egg_Mobile             ; Offset_0x125122
                dc.w    $A5C0
                dc.l    Art_Boss_Explosion                     ; Offset_0x124504
                dc.w    $9520
                dc.l    Art_Egg_Prison                         ; Offset_0x126E84
                dc.w    $9AE0
PLC_6B_End:
;-------------------------------------------------------------------------------
PLC_Hz_Final_Boss:                                             ; Offset_0x04B0DC
                dc.w    (((PLC_6C_End-PLC_6C)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_6C:
                dc.l    Art_Screw_Mobile                       ; Offset_0x11553A
                dc.w    $6D60
                dc.l    Art_Robotnik_In_Egg_Mobile             ; Offset_0x125122
                dc.w    $A5C0
                dc.l    Art_Boss_Explosion                     ; Offset_0x124504
                dc.w    $9520
                dc.l    Art_Explosion                          ; Offset_0x108528
                dc.w    $B400
                dc.l    Art_Oxygen_Bubbles                     ; Offset_0x1080F8
                dc.w    $8B80
                dc.l    Art_Egg_Prison                         ; Offset_0x126E84
                dc.w    $9AE0
PLC_6C_End:
;-------------------------------------------------------------------------------
PLC_MGz_Final_Boss:                                            ; Offset_0x04B102
                dc.w    (((PLC_6D_End-PLC_6D)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_6D:
                dc.l    Art_Drill_Mobile                       ; Offset_0x11753E
                dc.w    $5A00
                dc.l    Art_Robotnik_In_Egg_Mobile             ; Offset_0x125122
                dc.w    $A5C0
                dc.l    Art_Boss_Explosion                     ; Offset_0x124504
                dc.w    $9520
                dc.l    Art_Egg_Prison                         ; Offset_0x126E84
                dc.w    $9AE0
PLC_6D_End:
;-------------------------------------------------------------------------------
PLC_CNz_Final_Boss:                                            ; Offset_0x04B11C
                dc.w    (((PLC_6E_End-PLC_6E)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_6E:
                dc.l    Art_Graviton_Mobile                    ; Offset_0x11AC48
                dc.w    $8600
                dc.l    Art_Robotnik_In_Egg_Mobile             ; Offset_0x125122
                dc.w    $A5C0
                dc.l    Art_Boss_Explosion                     ; Offset_0x124504
                dc.w    $9520
                dc.l    Art_Egg_Prison                         ; Offset_0x126E84
                dc.w    $9AE0
PLC_6E_End:
;-------------------------------------------------------------------------------
PLC_FBz_Final_Boss:                                            ; Offset_0x04B136
                dc.w    (((PLC_6F_End-PLC_6F)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_6F:
                dc.l    Art_Hang_Mobile                        ; Offset_0x11D3BC
                dc.w    $7C00
                dc.l    Art_FBz_Robotnik_Faces                 ; Offset_0x12567E
                dc.w    $8200
                dc.l    Art_FBz_Boss_Flames                    ; Offset_0x124DA6
                dc.w    $8A80
                dc.l    Art_Robotnik_In_Egg_Mobile             ; Offset_0x125122
                dc.w    $A5C0
                dc.l    Art_Boss_Explosion                     ; Offset_0x124504
                dc.w    $9520
                dc.l    Art_Egg_Prison                         ; Offset_0x126E84
                dc.w    $9AE0
PLC_6F_End:
;-------------------------------------------------------------------------------
PLC_Iz_Final_Boss:                                             ; Offset_0x04B15C
                dc.w    (((PLC_70_End-PLC_70)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_70:
                dc.l    Art_Freezer_Mobile                     ; Offset_0x11F1B8
                dc.w    $54C0
                dc.l    Art_Robotnik_In_Egg_Mobile             ; Offset_0x125122
                dc.w    $A5C0
                dc.l    Art_Boss_Explosion                     ; Offset_0x124504
                dc.w    $9520
                dc.l    Art_Egg_Prison                         ; Offset_0x126E84
                dc.w    $9AE0
PLC_70_End:
;-------------------------------------------------------------------------------  
PLC_LBz_Final_Boss:                                            ; Offset_0x04B176
                dc.w    (((PLC_71_End-PLC_71)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_71:
                dc.l    Art_Beam_Rocket                        ; Offset_0x121946
                dc.w    $7540
                dc.l    Art_Robotnik_In_Egg_Mobile             ; Offset_0x125122
                dc.w    $A5C0
                dc.l    Art_Boss_Explosion                     ; Offset_0x124504
                dc.w    $9520
PLC_71_End:
;-------------------------------------------------------------------------------
Offset_0x04B18A:
                dc.w    (((PLC_72_End-PLC_72)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_72:
                dc.l    Art_Robotnik_In_Egg_Mobile             ; Offset_0x125122
                dc.w    $A5C0
                dc.l    Art_FBz_Robotnik                       ; Offset_0x125D06
                dc.w    $9AE0
                dc.l    Art_Boss_Explosion                     ; Offset_0x124504
                dc.w    $9520
PLC_72_End:
;-------------------------------------------------------------------------------
Offset_0x04B19E:
                dc.w    (((PLC_78_End-PLC_78)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_78:
                dc.l    Art_Twin_Hammer_Box                    ; Offset_0x124066
                dc.w    $88C0
                dc.l    Art_Robotnik_In_Egg_Mobile             ; Offset_0x125122
                dc.w    $A5C0
PLC_78_End: 
                dc.l    Art_Boss_Explosion                     ; Offset_0x124504
                dc.w    $9520
                
;===============================================================================
; Carga dos gr�ficos das fases       
; <<<-
;=============================================================================== 
                
;===============================================================================
; Rotina usada para depurar o jogo       
; ->>>
;===============================================================================                 
Debug_Mode:                                                    ; Offset_0x04B1B2
                moveq   #$00, D0
                move.b  (Debug_Mode_Flag_Index).w, D0                ; $FFFFFE08
                move.w  Offset_0x04B1C0(PC, D0), D1
                jmp     Offset_0x04B1C0(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x04B1C0:
                dc.w    Offset_0x04B1C4-Offset_0x04B1C0
                dc.w    Offset_0x04B24C-Offset_0x04B1C0    
;-------------------------------------------------------------------------------   
Offset_0x04B1C4:
                addq.b  #$02, (Debug_Mode_Flag_Index).w              ; $FFFFFE08
                move.l  Obj_Map(A0), (Debug_Player_Obj_Map).w ; $000C, $FFFFFFCA
                move.w  Obj_Art_VRAM(A0), (Debug_Player_Obj_Art_VRAM).w ; $000A, $FFFFFFCE
                move.w  (Screen_Wrap_Y).w, D0                        ; $FFFFEEAA
                and.w   D0, (Obj_Player_One+Obj_Y).w                 ; $FFFFB014
                and.w   D0, (Camera_Y).w                             ; $FFFFEE7C
                clr.b   (Sonic_Scroll_Lock_Flag).w                   ; $FFFFEE0A
                clr.w   (Sonic_Wind_Flag).w                          ; $FFFFF7C8
                bclr    #$06, Obj_Status(A0)                             ; $002A
                beq.s   Offset_0x04B20A
                move.l  A0, A1
                jsr     (Resume_Music)                         ; Offset_0x00F89E
                move.w  #$0600, (Sonic_Max_Speed).w                  ; $FFFFF760
                move.w  #$000C, (Sonic_Acceleration).w               ; $FFFFF762
                move.w  #$0080, (Sonic_Deceleration).w               ; $FFFFF764
Offset_0x04B20A:
                move.b  #$00, Obj_Map_Id(A0)                             ; $0022
                move.b  #$00, Obj_Ani_Number(A0)                         ; $0020
                moveq   #$00, D0
                move.w  (Current_ZoneAndAct).w, D0                             ; $FFFFFE10
                ror.b   #$01, D0
                lsr.w   #$06, D0
                andi.w  #$007E, D0
                lea     (Debug_Index), A2                      ; Offset_0x04B418
                adda.w  $00(A2, D0), A2
                move.w  (A2)+, D6
                cmp.b   (Debug_Mode_Object_Index).w, D6              ; $FFFFFE06
                bhi.s   Offset_0x04B23C
                move.b  #$00, (Debug_Mode_Object_Index).w            ; $FFFFFE06
Offset_0x04B23C:
                bsr     Offset_0x04B3F6
                move.b  #$0C, (Debug_Mode_Camera_Delay).w            ; $FFFFFE0A
                move.b  #$01, (Debug_Mode_Camera_Speed).w            ; $FFFFFE0B
;-------------------------------------------------------------------------------                
Offset_0x04B24C:                
                moveq   #$00, D0
                move.w  (Current_ZoneAndAct).w, D0                             ; $FFFFFE10
                ror.b   #$01, D0
                lsr.w   #$06, D0
                andi.w  #$007E, D0
                lea     (Debug_Index), A2                      ; Offset_0x04B418
                adda.w  $00(A2, D0), A2
                move.w  (A2)+, D6
                bsr     Offset_0x04B270
                jmp     (DisplaySprite)                        ; Offset_0x011148
Offset_0x04B270:
                moveq   #$00, D4
                move.w  #$0001, D1
                move.b  (Control_Ports_Buffer_Data+$01).w, D4        ; $FFFFF605
                andi.w  #$000F, D4
                bne.s   Offset_0x04B2B2
                move.b  (Control_Ports_Buffer_Data).w, D0            ; $FFFFF604
                andi.w  #$000F, D0
                bne.s   Offset_0x04B29A
                move.b  #$0C, (Debug_Mode_Camera_Delay).w            ; $FFFFFE0A
                move.b  #$0F, (Debug_Mode_Camera_Speed).w            ; $FFFFFE0B
                bra     Offset_0x04B316
Offset_0x04B29A:
                subq.b  #$01, (Debug_Mode_Camera_Delay).w            ; $FFFFFE0A
                bne.s   Offset_0x04B2B6
                move.b  #$01, (Debug_Mode_Camera_Delay).w            ; $FFFFFE0A
                addq.b  #$01, (Debug_Mode_Camera_Speed).w            ; $FFFFFE0B
                bne.s   Offset_0x04B2B2
                move.b  #$FF, (Debug_Mode_Camera_Speed).w            ; $FFFFFE0B
Offset_0x04B2B2:
                move.b  (Control_Ports_Buffer_Data).w, D4            ; $FFFFF604
Offset_0x04B2B6:
                moveq   #$00, D1
                move.b  (Debug_Mode_Camera_Speed).w, D1              ; $FFFFFE0B
                addq.w  #$01, D1
                swap.w  D1
                asr.l   #$04, D1
                move.l  Obj_Y(A0), D2                                    ; $0014
                move.l  Obj_X(A0), D3                                    ; $0010
                btst    #$00, D4
                beq.s   Offset_0x04B2E0
                sub.l   D1, D2
                moveq   #$00, D0
                move.w  (Sonic_Level_Limits_Min_Y).w, D0             ; $FFFFEE18
                swap.w  D0
                cmp.l   D0, D2
                bge.s   Offset_0x04B2E0
                move.l  D0, D2
Offset_0x04B2E0:
                btst    #$01, D4
                beq.s   Offset_0x04B2FA
                add.l   D1, D2
                moveq   #$00, D0
                move.w  (Level_Limits_Max_Y).w, D0                   ; $FFFFEE12
                addi.w  #$00DF, D0
                swap.w  D0
                cmp.l   D0, D2
                blt.s   Offset_0x04B2FA
                move.l  D0, D2
Offset_0x04B2FA:
                btst    #$02, D4
                beq.s   Offset_0x04B306
                sub.l   D1, D3
                bcc.s   Offset_0x04B306
                moveq   #$00, D3
Offset_0x04B306:
                btst    #$03, D4
                beq.s   Offset_0x04B30E
                add.l   D1, D3
Offset_0x04B30E:
                move.l  D2, Obj_Y(A0)                                    ; $0014
                move.l  D3, Obj_X(A0)                                    ; $0010
Offset_0x04B316:
                btst    #$06, (Control_Ports_Buffer_Data).w          ; $FFFFF604
                beq.s   Offset_0x04B34E
                btst    #$05, (Control_Ports_Buffer_Data+$01).w      ; $FFFFF605
                beq.s   Offset_0x04B332
                subq.b  #$01, (Debug_Mode_Object_Index).w            ; $FFFFFE06
                bcc.s   Offset_0x04B34A
                add.b   D6, (Debug_Mode_Object_Index).w              ; $FFFFFE06
                bra.s   Offset_0x04B34A
Offset_0x04B332:
                btst    #$06, (Control_Ports_Buffer_Data+$01).w      ; $FFFFF605
                beq.s   Offset_0x04B34E
                addq.b  #$01, (Debug_Mode_Object_Index).w            ; $FFFFFE06
                cmp.b   (Debug_Mode_Object_Index).w, D6              ; $FFFFFE06
                bhi.s   Offset_0x04B34A
                move.b  #$00, (Debug_Mode_Object_Index).w            ; $FFFFFE06
Offset_0x04B34A:
                bra     Offset_0x04B3F6
Offset_0x04B34E:
                btst    #$05, (Control_Ports_Buffer_Data+$01).w      ; $FFFFF605
                beq.s   Offset_0x04B39A
                jsr     (AllocateObject)                     ; Offset_0x011DD8
                bne.s   Offset_0x04B39A
                move.w  Obj_X(A0), Obj_X(A1)                      ; $0010, $0010
                move.w  Obj_Y(A0), Obj_Y(A1)                      ; $0014, $0014
                move.b  Obj_Flags(A0), Obj_Flags(A1)              ; $0004, $0004
                move.b  Obj_Flags(A0), Obj_Status(A1)             ; $0004, $002A
                andi.b  #$7F, Obj_Status(A1)                             ; $002A
                moveq   #$00, D0
                move.b  (Debug_Mode_Object_Index).w, D0              ; $FFFFFE06
                add.w   D0, D0
                move.w  D0, D1
                lsl.w   #$02, D0
                add.w   D1, D0
                move.b  $04(A2, D0), Obj_Subtype(A1)                     ; $002C
                move.l  $00(A2, D0), (A1)
                move.b  #$00, (A1)
                rts
Offset_0x04B39A:
                btst    #$04, (Control_Ports_Buffer_Data+$01).w      ; $FFFFF605
                beq.s   Offset_0x04B3C6
                moveq   #$00, D0
                move.w  D0, (Debug_Mode_Flag_Index).w                ; $FFFFFE08
                lea     (Obj_Memory_Address).w, A1                   ; $FFFFB000
                move.l  (Debug_Player_Obj_Map).w, Obj_Map(A1) ; $FFFFFFCA, $000C
                move.w  (Debug_Player_Obj_Art_VRAM).w, Obj_Art_VRAM(A1) ; $FFFFFFCE, $000A
                bsr.s   Offset_0x04B3C8
                move.b  #$13, Obj_Height_2(A1)                           ; $001E
                move.b  #$09, Obj_Width_2(A1)                            ; $001F
Offset_0x04B3C6:
                rts
Offset_0x04B3C8:
                move.b  D0, Obj_Ani_Number(A1)                           ; $0020
                move.w  D0, Obj_Sub_X(A1)                                ; $0012
                move.w  D0, Obj_Sub_Y(A1)                                ; $0016
                move.b  D0, Obj_Player_Control(A1)                       ; $002E
                move.b  D0, Obj_Player_Spdsh_Flag(A1)                    ; $003D
                move.w  D0, Obj_Speed_X(A1)                              ; $0018
                move.w  D0, Obj_Speed_Y(A1)                              ; $001A
                move.w  D0, Obj_Inertia(A1)                              ; $001C
                move.b  #$02, Obj_Status(A1)                             ; $002A
                move.b  #$02, Obj_Routine(A1)                            ; $0005
                rts
Offset_0x04B3F6:
                moveq   #$00, D0
                move.b  (Debug_Mode_Object_Index).w, D0              ; $FFFFFE06
                add.w   D0, D0
                move.w  D0, D1
                lsl.w   #$02, D0
                add.w   D1, D0
                move.l  $04(A2, D0), Obj_Map(A0)                         ; $000C
                move.w  $08(A2, D0), Obj_Art_VRAM(A0)                    ; $000A
                move.b  $00(A2, D0), Obj_Map_Id(A0)                      ; $0022
                rts   
;-------------------------------------------------------------------------------                
Debug_Index:                                                   ; Offset_0x04B418   
                dc.w    Debug_AIz_1-Debug_Index                ; Offset_0x04B478
                dc.w    Debug_AIz_2-Debug_Index                ; Offset_0x04B5B0
                dc.w    Debug_Hz-Debug_Index                   ; Offset_0x04B724
                dc.w    Debug_Hz-Debug_Index                   ; Offset_0x04B724
                dc.w    Debug_MGz-Debug_Index                  ; Offset_0x04B942
                dc.w    Debug_MGz-Debug_Index                  ; Offset_0x04B942
                dc.w    Debug_CNz-Debug_Index                  ; Offset_0x04BAA2
                dc.w    Debug_CNz-Debug_Index                  ; Offset_0x04BAA2
                dc.w    Debug_FBz-Debug_Index                  ; Offset_0x04BC0C
                dc.w    Debug_FBz-Debug_Index                  ; Offset_0x04BC0C
                dc.w    Debug_Iz_1-Debug_Index                 ; Offset_0x04BC86
                dc.w    Debug_Iz_2-Debug_Index                 ; Offset_0x04BDDC
                dc.w    Debug_LBz_1-Debug_Index                ; Offset_0x04BF32
                dc.w    Debug_LBz_2-Debug_Index                ; Offset_0x04C09C
                dc.w    Debug_MVz-Debug_Index                  ; Offset_0x04C22E
                dc.w    Debug_MVz-Debug_Index                  ; Offset_0x04C22E
                dc.w    Debug_Sz-Debug_Index                   ; Offset_0x04C302
                dc.w    Debug_Sz-Debug_Index                   ; Offset_0x04C302
                dc.w    Debug_LRz-Debug_Index                  ; Offset_0x04C354
                dc.w    Debug_LRz-Debug_Index                  ; Offset_0x04C354
                dc.w    Debug_SSz-Debug_Index                  ; Offset_0x04C3C4
                dc.w    Debug_SSz-Debug_Index                  ; Offset_0x04C3C4
                dc.w    Debug_DEz-Debug_Index                  ; Offset_0x04C416
                dc.w    Debug_DEz-Debug_Index                  ; Offset_0x04C416
                dc.w    Debug_TDz-Debug_Index                  ; Offset_0x04C468
                dc.w    Debug_TDz-Debug_Index                  ; Offset_0x04C468
                dc.w    Debug_HPz-Debug_Index                  ; Offset_0x04C4BA
                dc.w    Debug_HPz-Debug_Index                  ; Offset_0x04C4BA
                dc.w    Debug_ALz-Debug_Index                  ; Offset_0x04C50C
                dc.w    Debug_ALz-Debug_Index                  ; Offset_0x04C50C
                dc.w    Debug_BPz-Debug_Index                  ; Offset_0x04C5C2
                dc.w    Debug_BPz-Debug_Index                  ; Offset_0x04C5C2
                dc.w    Debug_DPz-Debug_Index                  ; Offset_0x04C696
                dc.w    Debug_DPz-Debug_Index                  ; Offset_0x04C696
                dc.w    Debug_CGz-Debug_Index                  ; Offset_0x04C76A
                dc.w    Debug_CGz-Debug_Index                  ; Offset_0x04C76A
                dc.w    Debug_EMz-Debug_Index                  ; Offset_0x04C834
                dc.w    Debug_EMz-Debug_Index                  ; Offset_0x04C834
                dc.w    Debug_Default-Debug_Index              ; Offset_0x04C912
                dc.w    Debug_Default-Debug_Index              ; Offset_0x04C912
                dc.w    Debug_Default-Debug_Index              ; Offset_0x04C912
                dc.w    Debug_Default-Debug_Index              ; Offset_0x04C912
                dc.w    Debug_Default-Debug_Index              ; Offset_0x04C912
                dc.w    Debug_Default-Debug_Index              ; Offset_0x04C912
                dc.w    Debug_Default-Debug_Index              ; Offset_0x04C912
                dc.w    Debug_Default-Debug_Index              ; Offset_0x04C912
                dc.w    Debug_Default-Debug_Index              ; Offset_0x04C912
                dc.w    Debug_Default-Debug_Index              ; Offset_0x04C912
;-------------------------------------------------------------------------------
Debug_AIz_1:                                                   ; Offset_0x04B478
                dc.w    ((DOL_00_End-DOL_00)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_00: ; DOL - Debug Object List
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Rings_Mappings                         ; Offset_0x010DE2
                dc.w    $A6BC
                dc.l    Obj01_Monitors                      ; Offset_0x012F44
                dc.l    ($08<<$18)|Monitors_Mappings           ; Offset_0x0134A2
                dc.w    $04C4
                dc.l    ($01<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $26BC
                dc.l    ($05<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $26BC
                dc.l    Obj_0x07_Springs                       ; Offset_0x01921A
                dc.l    ($81<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04A4
                dc.l    ($03<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($90<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04B4
                dc.l    ($06<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($A0<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04A4
                dc.l    Obj_0x08_Spikes                        ; Offset_0x01A442
                dc.l    Spikes_Mappings                        ; Offset_0x01A88C
                dc.w    $049C
                dc.l    Obj_0x05_Rock                          ; Offset_0x0150FC
                dc.l    ($04<<$18)|Rock_Mappings               ; Offset_0x0156EE
                dc.w    $2333
                dc.l    ($01<<$18)|Obj_0x05_Rock               ; Offset_0x0150FC
                dc.l    ($13<<$18)|Rock_Mappings               ; Offset_0x0156EE
                dc.w    $2333
                dc.l    ($02<<$18)|Obj_0x05_Rock               ; Offset_0x0150FC
                dc.l    ($23<<$18)|Rock_Mappings               ; Offset_0x0156EE
                dc.w    $2333
                dc.l    Obj_0x04_Collapsing_Platform           ; Offset_0x01582E
                dc.l    Collapsing_Platform_Mappings           ; Offset_0x016014
                dc.w    $4001
                dc.l    ($21<<$18)|Obj_0x06_Ride_Vine          ; Offset_0x017A8E
                dc.l    ($08<<$18)|Ride_Vine_Mappings          ; Offset_0x018482
                dc.w    $0422
                dc.l    ($21<<$18)|Obj_0x0C_Swing_Ride_Vine    ; Offset_0x0180FE
                dc.l    ($0F<<$18)|Ride_Vine_Mappings          ; Offset_0x018482
                dc.w    $0422
                dc.l    Obj_0x2D_AIz_Falling_Log               ; Offset_0x0227AC
                dc.l    ($07<<$18)|AIz_Falling_Log_Mappings    ; Offset_0x02298E
                dc.w    $43CF
                dc.l    Obj_0x82_AIz_Rhinobot                  ; Offset_0x043C2A
                dc.l    Rhinobot_Mappings                      ; Offset_0x10E548
                dc.w    $2500
                dc.l    Obj_0x81_AIz_Bloominator               ; Offset_0x043B3E
                dc.l    Bloominator_Mappings                   ; Offset_0x10E660
                dc.w    $252A
                dc.l    Obj_0x83_AIz_Monkey_Dude               ; Offset_0x043F1C
                dc.l    ($10<<$18)|Monkey_Dude_Mappings        ; Offset_0x10E716
                dc.w    $2548
                dc.l    ($01<<$18)|Obj_AIz_Intro_Surfboard     ; Offset_0x0185D6
                dc.l    ($01<<$18)|Intro_Surfboard_Mappings    ; Offset_0x0188FC
                dc.w    $0680
                dc.l    Obj_Art_Scaling                        ; Offset_0x01AA34
                dc.l    Scaling_Mappings                       ; Offset_0x01B1B8
                dc.w    $6500
                dc.l    Obj_0x0B_Sphere_Test                   ; Offset_0x01B338
                dc.l    Sphere_Test_Mappings                   ; Offset_0x01BB9A
                dc.w    $24E0
                dc.l    Obj_0x34_Star_Post                     ; Offset_0x023F76
                dc.l    ($01<<$18)|Star_Post_Mappings          ; Offset_0x024282
                dc.w    $05EC
                dc.l    ($13<<$18)|Obj_0x54_Oxygen_Bubbles     ; Offset_0x025500
                dc.l    ($81<<$18)|Sonic_Underwater_Mappings   ; Offset_0x025872
                dc.w    $845C
                dc.l    Obj_0x2A_Breakable_Floor               ; Offset_0x0211D6
                dc.l    Breakable_Floor_Mappings               ; Offset_0x0216FC
                dc.w    $4001
                dc.l    Obj_0x35_AIz_Plants                    ; Offset_0x023284
                dc.l    Plants_Mappings                        ; Offset_0x023442
                dc.w    $C333
                dc.l    ($01<<$18)|Obj_0x35_AIz_Plants         ; Offset_0x023284
                dc.l    ($11<<$18)|Plants_Mappings             ; Offset_0x023442
                dc.w    $C333
                dc.l    Obj_0x35_AIz_Plants                    ; Offset_0x023284
                dc.l    ($20<<$18)|Plants_Mappings             ; Offset_0x023442
                dc.w    $C333
                dc.l    ($01<<$18)|Obj_0x35_AIz_Plants         ; Offset_0x023284
                dc.l    ($31<<$18)|Plants_Mappings             ; Offset_0x023442
                dc.w    $C333
                dc.l    Obj_0x35_AIz_Plants                    ; Offset_0x023284
                dc.l    ($40<<$18)|Plants_Mappings             ; Offset_0x023442
                dc.w    $C333
                dc.l    ($01<<$18)|Obj_0x35_AIz_Plants         ; Offset_0x023284
                dc.l    ($51<<$18)|Plants_Mappings             ; Offset_0x023442
                dc.w    $C333
                dc.l    Obj_0x35_AIz_Plants                    ; Offset_0x023284
                dc.l    ($60<<$18)|Plants_Mappings             ; Offset_0x023442
                dc.w    $C333
DOL_00_End:
;-------------------------------------------------------------------------------
Debug_AIz_2:                                                   ; Offset_0x04B5B0
                dc.w    ((DOL_01_End-DOL_01)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_01: ; DOL - Debug Object List
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Rings_Mappings                         ; Offset_0x010DE2
                dc.w    $A6BC
                dc.l    Obj01_Monitors                      ; Offset_0x012F44
                dc.l    ($08<<$18)|Monitors_Mappings           ; Offset_0x0134A2
                dc.w    $04C4
                dc.l    ($01<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $26BC
                dc.l    ($05<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $26BC
                dc.l    Obj_0x07_Springs                       ; Offset_0x01921A
                dc.l    ($81<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04A4
                dc.l    ($03<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($90<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04B4
                dc.l    ($06<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($A0<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04A4
                dc.l    Obj_0x08_Spikes                        ; Offset_0x01A442
                dc.l    Spikes_Mappings                        ; Offset_0x01A88C
                dc.w    $049C
                dc.l    Obj_0x05_Rock                          ; Offset_0x0150FC
                dc.l    ($04<<$18)|AIz_2_Rock_Mappings         ; Offset_0x015776
                dc.w    $42F0
                dc.l    ($01<<$18)|Obj_0x05_Rock               ; Offset_0x0150FC
                dc.l    ($13<<$18)|AIz_2_Rock_Mappings         ; Offset_0x015776
                dc.w    $42F0
                dc.l    ($02<<$18)|Obj_0x05_Rock               ; Offset_0x0150FC
                dc.l    ($23<<$18)|AIz_2_Rock_Mappings         ; Offset_0x015776
                dc.w    $42F0
                dc.l    Obj_0x04_Collapsing_Platform           ; Offset_0x01582E
                dc.l    AIz_2_Collapsing_Platform_Mappings     ; Offset_0x0160F8
                dc.w    $4001
                dc.l    Obj_0x0D_Breakable_Wall                ; Offset_0x0170CA
                dc.l    Breakable_Wall_Mappings                ; Offset_0x017732
                dc.w    $4001
                dc.l    ($05<<$18)|Obj_0x29_AIz_Disappearing_Platform ; Offset_0x020EE0
                dc.l    ($07<<$18)|AIz_Disappearing_Platform_Mappings ; Offset_0x021050
                dc.w    $4001
                dc.l    Obj_0x2A_Breakable_Floor               ; Offset_0x0211D6
                dc.l    AIz_2_Breakable_Floor_Mappings         ; Offset_0x021770
                dc.w    $4001
                dc.l    ($05<<$18)|Obj_0x2B_AIz_Flipping_Bridge ; Offset_0x021B1C
                dc.l    ($50<<$18)|Flipping_Bridge_Mappings    ; Offset_0x021E78
                dc.w    $42F0
                dc.l    Obj_0x2C_AIz_Collapsing_Bridge         ; Offset_0x021F0C
                dc.l    ($08<<$18)|Collapsing_Bridge_Mappings  ; Offset_0x0222A2
                dc.w    $42F0
                dc.l    Obj_0x2D_AIz_Falling_Log               ; Offset_0x0227AC
                dc.l    ($07<<$18)|AIz_2_Falling_Log_Mappings  ; Offset_0x02297E
                dc.w    $42F0
                dc.l    ($08<<$18)|Obj_0x2E_AIz_Spiked_Rotating_Log ; Offset_0x022A7E
                dc.l    Spiked_Rotating_Log_Mappings           ; Offset_0x022C4E
                dc.w    $42F0
                dc.l    Obj_0x2F_Still_Sprite                  ; Offset_0x022E38
                dc.l    Still_Sprite_Mappings                  ; Offset_0x022F02
                dc.w    $42F0
                dc.l    ($01<<$18)|Obj_0x2F_Still_Sprite       ; Offset_0x022E38
                dc.l    ($01<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
                dc.w    $42F0
                dc.l    ($02<<$18)|Obj_0x2F_Still_Sprite       ; Offset_0x022E38
                dc.l    ($02<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
                dc.w    $42F0
                dc.l    ($03<<$18)|Obj_0x2F_Still_Sprite       ; Offset_0x022E38
                dc.l    ($03<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
                dc.w    $4001
                dc.l    ($04<<$18)|Obj_0x2F_Still_Sprite       ; Offset_0x022E38
                dc.l    ($04<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
                dc.w    $6001
                dc.l    Obj_0x30_Animated_Still_Sprite         ; Offset_0x0231C0
                dc.l    Animated_Still_Sprite_Mappings         ; Offset_0x02322A
                dc.w    $62F0
                dc.l    ($05<<$18)|Obj_0x30_Animated_Still_Sprite ; Offset_0x0231C0
                dc.l    ($01<<$18)|Animated_Still_Sprite_Mappings ; Offset_0x02322A
                dc.w    $62F0
                dc.l    ($21<<$18)|Obj_0x06_Ride_Vine          ; Offset_0x017A8E
                dc.l    ($88<<$18)|Ride_Vine_Mappings          ; Offset_0x018482
                dc.w    $0422
                dc.l    ($21<<$18)|Obj_0x0C_Swing_Ride_Vine    ; Offset_0x0180FE
                dc.l    ($0F<<$18)|Ride_Vine_Mappings          ; Offset_0x018482
                dc.w    $0422
                dc.l    ($01<<$18)|Obj_0x32_AIz_Draw_Bridge    ; Offset_0x02235C
                dc.l    Draw_Bridge_Mappings                   ; Offset_0x02277E
                dc.w    $42F0
                dc.l    ($02<<$18)|Obj_0x33_Switch             ; Offset_0x023662
                dc.l    ($10<<$18)|Switch_Mappings             ; Offset_0x023832
                dc.w    $0456
                dc.l    Obj_0x82_AIz_Rhinobot                  ; Offset_0x043C2A
                dc.l    Rhinobot_Mappings                      ; Offset_0x10E548
                dc.w    $2500
                dc.l    Obj_0x81_AIz_Bloominator               ; Offset_0x043B3E
                dc.l    Bloominator_Mappings                   ; Offset_0x10E660
                dc.w    $252A
                dc.l    Obj_0x83_AIz_Monkey_Dude               ; Offset_0x043F1C
                dc.l    Monkey_Dude_Mappings                   ; Offset_0x10E716
                dc.w    $2548
                dc.l    Obj_0x9F_AIz_Catakiller_Jr             ; Offset_0x044490
                dc.l    Catakiller_Jr_Mappings                 ; Offset_0x10E9BE
                dc.w    $255F
                dc.l    Obj_0x34_Star_Post                     ; Offset_0x023F76
                dc.l    ($01<<$18)|Star_Post_Mappings          ; Offset_0x024282
                dc.w    $05EC
                dc.l    ($13<<$18)|Obj_0x54_Oxygen_Bubbles     ; Offset_0x025500
                dc.l    ($81<<$18)|Sonic_Underwater_Mappings   ; Offset_0x025872
                dc.w    $845C
                dc.l    Obj_AIz_Tree                           ; Offset_0x0234AA
                dc.l    Tree_Mappings                          ; Offset_0x0234F0
                dc.w    $443F
DOL_01_End:
;-------------------------------------------------------------------------------
Debug_Hz:                                                      ; Offset_0x04B724
                dc.w    ((DOL_02_End-DOL_02)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_02: ; DOL - Debug Object List
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Rings_Mappings                         ; Offset_0x010DE2
                dc.w    $A6BC
                dc.l    Obj01_Monitors                      ; Offset_0x012F44
                dc.l    ($09<<$18)|Monitors_Mappings           ; Offset_0x0134A2
                dc.w    $04C4
                dc.l    ($01<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $26BC
                dc.l    ($05<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $26BC
                dc.l    Obj_0x07_Springs                       ; Offset_0x01921A
                dc.l    ($81<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04A4
                dc.l    ($03<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($90<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04B4
                dc.l    ($06<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($A0<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04A4
                dc.l    Obj_0x08_Spikes                        ; Offset_0x01A442
                dc.l    Spikes_Mappings                        ; Offset_0x01A88C
                dc.w    $049C
                dc.l    Obj_0x9A_Hz_Blastoid                   ; Offset_0x0446D0
                dc.l    Blastoid_Mappings                      ; Offset_0x10DD6A
                dc.w    $2539
                dc.l    Obj_0x9E_Hz_Pointdexter                ; Offset_0x044F90
                dc.l    ($20<<$18)|Pointdexter_Mappings        ; Offset_0x10DE0C
                dc.w    $2559
                dc.l    Obj_0x9B_Hz_Buggernaut                 ; Offset_0x0447A6
                dc.l    Buggernaut_Mappings                    ; Offset_0x10DE4E
                dc.w    $2453
                dc.l    Obj_0x9D_Hz_Mega_Chopper               ; Offset_0x044CC8
                dc.l    Mega_Chopper_Mappings                  ; Offset_0x10DEBA
                dc.w    $254D
                dc.l    Obj_0x9C_Hz_Turbo_Spiker               ; Offset_0x044946
                dc.l    Turbo_Spiker_Mappings                  ; Offset_0x10E1AC
                dc.w    $2500
                dc.l    Obj_0x99_Hz_Jawz                       ; Offset_0x04465C
                dc.l    Jawz_Mappings                          ; Offset_0x10E304
                dc.w    $2539
                dc.l    ($02<<$18)|Obj_0x33_Switch             ; Offset_0x023662
                dc.l    ($20<<$18)|Hz_Switch_Mappings          ; Offset_0x02385C
                dc.w    $2426
                dc.l    Obj_0x36_Hz_Breakable_Bar              ; Offset_0x0143B2
                dc.l    Hz_Breakable_Bar_Mappings              ; Offset_0x01488E
                dc.w    $43CA
                dc.l    ($04<<$18)|Obj_0x36_Hz_Breakable_Bar   ; Offset_0x0143B2
                dc.l    ($80<<$18)|Hz_Breakable_Bar_Mappings   ; Offset_0x01488E
                dc.w    $43CA
                dc.l    Obj_0x38_Hz_Fan                        ; Offset_0x026408
                dc.l    ($16<<$18)|Fan_Mappings                ; Offset_0x0267EE
                dc.w    $240B
                dc.l    ($01<<$18)|Obj_0x38_Hz_Fan             ; Offset_0x026408
                dc.l    ($4C<<$18)|Fan_Mappings                ; Offset_0x0267EE
                dc.w    $240B
                dc.l    Obj_0x39_Hz_Large_Fan                  ; Offset_0x026736
                dc.l    Large_Fan_Mappings                     ; Offset_0x02685C
                dc.w    $2500
                dc.l    Obj_0x3A_Hz_Hand_Launcher              ; Offset_0x026A80
                dc.l    Hand_Launcher_Mappings                 ; Offset_0x026DB8
                dc.w    $23E4
                dc.l    Obj_0x3B_Hz_Water_Wall                 ; Offset_0x025C30
                dc.l    Water_Wall_Mappings                    ; Offset_0x0262BA
                dc.w    $4500
                dc.l    ($01<<$18)|Obj_0x3B_Hz_Water_Wall      ; Offset_0x025C30
                dc.l    ($01<<$18)|Water_Wall_Mappings         ; Offset_0x0262BA
                dc.w    $4500
                dc.l    ($01<<$18)|Obj_0x38_Hz_Fan             ; Offset_0x026408
                dc.l    ($FC<<$18)|Fan_Mappings                ; Offset_0x0267EE
                dc.w    $240B
                dc.l    Obj_0x3C_Automatic_Door                ; Offset_0x026ED0
                dc.l    Automatic_Door_Mappings                ; Offset_0x027002
                dc.w    $43D4
                dc.l    Obj_0x3F_Hz_Spikes_On_Conveyor_Belt    ; Offset_0x027346
                dc.l    Spikes_On_Conveyor_Belt_Mappings       ; Offset_0x027548
                dc.w    $243E
                dc.l    Obj_0x40_Hz_Block                      ; Offset_0x014AB6
                dc.l    Hz_Block_Mappings                      ; Offset_0x014B0E
                dc.w    $43D4
                dc.l    Obj_0x0F_Collapsing_Platform           ; Offset_0x01595E
                dc.l    ($08<<$18)|Hz_Collapsing_Platform_Mappings ; Offset_0x016366
                dc.w    $C001
                dc.l    ($03<<$18)|Obj_0x0F_Collapsing_Platform ; Offset_0x01595E
                dc.l    ($18<<$18)|Hz_Collapsing_Platform_Mappings ; Offset_0x016366
                dc.w    $C001
                dc.l    ($06<<$18)|Obj_0x0F_Collapsing_Platform ; Offset_0x01595E
                dc.l    ($28<<$18)|Hz_Collapsing_Platform_Mappings ; Offset_0x016366
                dc.w    $C001
                dc.l    ($09<<$18)|Obj_0x0F_Collapsing_Platform ; Offset_0x01595E
                dc.l    ($38<<$18)|Hz_Collapsing_Platform_Mappings ; Offset_0x016366
                dc.w    $C001
                dc.l    ($06<<$18)|Obj_0x2F_Still_Sprite       ; Offset_0x022E38
                dc.l    ($06<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
                dc.w    $C001
                dc.l    ($07<<$18)|Obj_0x2F_Still_Sprite       ; Offset_0x022E38
                dc.l    ($07<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
                dc.w    $C001
                dc.l    ($08<<$18)|Obj_0x2F_Still_Sprite       ; Offset_0x022E38
                dc.l    ($08<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
                dc.w    $4001
                dc.l    ($09<<$18)|Obj_0x2F_Still_Sprite       ; Offset_0x022E38
                dc.l    ($09<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
                dc.w    $C001
                dc.l    ($0A<<$18)|Obj_0x2F_Still_Sprite       ; Offset_0x022E38
                dc.l    ($0A<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
                dc.w    $C001
                dc.l    ($13<<$18)|Obj_0x54_Oxygen_Bubbles     ; Offset_0x025500
                dc.l    ($81<<$18)|Sonic_Underwater_Mappings   ; Offset_0x025872
                dc.w    $845C
                dc.l    Obj_0x51_Floating_Platform             ; Offset_0x01C3C2
                dc.l    ($14<<$18)|Hz_Floating_Platform_Mappings ; Offset_0x01C518
                dc.w    $441D
                dc.l    ($01<<$18)|Obj_0x67_Hz_Snake_Platform  ; Offset_0x01C532
                dc.l    Hz_Floating_Platform_Mappings          ; Offset_0x01C518
                dc.w    $0028
                dc.l    Obj_0x51_Floating_Platform             ; Offset_0x01C3C2
                dc.l    ($17<<$18)|Hz_Floating_Platform_Mappings ; Offset_0x01C518
                dc.w    $441D
                dc.l    Obj_0x68_Hz_Spinning_Column            ; Offset_0x0289B8
                dc.l    ($01<<$18)|Spinning_Column_Mappings    ; Offset_0x028BFC
                dc.w    $4040
                dc.l    Obj_0x68_Hz_Spinning_Column            ; Offset_0x0289B8
                dc.l    ($02<<$18)|Spinning_Column_Mappings    ; Offset_0x028BFC
                dc.w    $4040
                dc.l    ($0F<<$18)|Obj_0x2F_Still_Sprite       ; Offset_0x022E38
                dc.l    ($0F<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
                dc.w    $C368
                dc.l    ($10<<$18)|Obj_0x2F_Still_Sprite       ; Offset_0x022E38
                dc.l    ($10<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
                dc.w    $C379
                dc.l    ($11<<$18)|Obj_0x2F_Still_Sprite       ; Offset_0x022E38
                dc.l    ($11<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
                dc.w    $C399
                dc.l    ($12<<$18)|Obj_0x2F_Still_Sprite       ; Offset_0x022E38
                dc.l    ($12<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
                dc.w    $C3A4
                dc.l    Obj_0x6E_Hz_Waterfall                  ; Offset_0x02E0A8
                dc.l    ($40<<$18)|Waterfall_Mappings          ; Offset_0x02E1E8
                dc.w    $235C
                dc.l    Obj_0x6D_Hz_Water_Splash               ; Offset_0x02E22E
                dc.l    Water_Splash_Mappings                  ; Offset_0x02E4D0
                dc.w    $43B2
                dc.l    ($13<<$18)|Obj_0x2F_Still_Sprite       ; Offset_0x022E38
                dc.l    ($13<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
                dc.w    $4038
                dc.l    Obj_0x6C_Bridge                        ; Offset_0x02E504
                dc.l    ($90<<$18)|Bridge_Mappings             ; Offset_0x02EE60
                dc.w    $4038
                dc.l    Obj_0x6A_Hz_Horizontal_Spikes          ; Offset_0x014B5A
                dc.l    Invisible_Block_Mappings               ; Offset_0x014352
                dc.w    $86BC
                dc.l    Obj_0x6B_Hz_Vertical_Spikes            ; Offset_0x014CE8
                dc.l    Invisible_Block_Mappings               ; Offset_0x014352
                dc.w    $86BC
                dc.l    Obj_0x0D_Breakable_Wall                ; Offset_0x0170CA
                dc.l    Hz_Breakable_Wall_Mappings             ; Offset_0x0179B8
                dc.w    $6001
                dc.l    ($02<<$18)|Obj_0x0D_Breakable_Wall     ; Offset_0x0170CA
                dc.l    ($02<<$18)|Hz_Breakable_Wall_Mappings  ; Offset_0x0179B8
                dc.w    $4350
DOL_02_End:
;-------------------------------------------------------------------------------
Debug_MGz:                                                     ; Offset_0x04B942
                dc.w    ((DOL_03_End-DOL_03)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_03: ; DOL - Debug Object List
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Rings_Mappings                         ; Offset_0x010DE2
                dc.w    $A6BC
                dc.l    Obj01_Monitors                      ; Offset_0x012F44
                dc.l    ($08<<$18)|Monitors_Mappings           ; Offset_0x0134A2
                dc.w    $04C4
                dc.l    ($01<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $26BC
                dc.l    ($05<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $26BC
                dc.l    Obj_0x07_Springs                       ; Offset_0x01921A
                dc.l    ($80<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04A4
                dc.l    ($03<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($90<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04B4
                dc.l    ($06<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($A0<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04A4
                dc.l    ($07<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($30<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $0478
                dc.l    ($0A<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($40<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $0478
                dc.l    Obj_0x08_Spikes                        ; Offset_0x01A442
                dc.l    Spikes_Mappings                        ; Offset_0x01A88C
                dc.w    $049C
                dc.l    ($04<<$18)|Obj_0x08_Spikes             ; Offset_0x01A442
                dc.l    ($40<<$18)|Spikes_Mappings             ; Offset_0x01A88C
                dc.w    $0494
                dc.l    Obj_0xA4_MGz_Tunnelbot                 ; Offset_0x04515C
                dc.l    Tunnelbot_Mappings                     ; Offset_0x10E918
                dc.w    $254F
                dc.l    Obj_0xA3_MGz_Bubbles                   ; Offset_0x04504A
                dc.l    Bubbles_Mappings                       ; Offset_0x10EC1A
                dc.w    $2500
                dc.l    Obj_0xA5_MGz_Spiker                    ; Offset_0x045864
                dc.l    Spiker_Mappings                        ; Offset_0x10EC6A
                dc.w    $2530
                dc.l    Obj_0xA6_MGz_Mantis                    ; Offset_0x045B26
                dc.l    Mantis_Mappings                        ; Offset_0x10ECDE
                dc.w    $254F
                dc.l    ($0B<<$18)|Obj_0x2F_Still_Sprite       ; Offset_0x022E38
                dc.l    ($0B<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
                dc.w    $4451
                dc.l    ($0C<<$18)|Obj_0x2F_Still_Sprite       ; Offset_0x022E38
                dc.l    ($0C<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
                dc.w    $4451
                dc.l    ($0D<<$18)|Obj_0x2F_Still_Sprite       ; Offset_0x022E38
                dc.l    ($0D<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
                dc.w    $4451
                dc.l    ($0E<<$18)|Obj_0x2F_Still_Sprite       ; Offset_0x022E38
                dc.l    ($0E<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
                dc.w    $4451
                dc.l    Obj_0x0F_Collapsing_Platform           ; Offset_0x01595E
                dc.l    ($08<<$18)|MGz_Collapsing_Platform_Mappings ; Offset_0x0167B4
                dc.w    $4001
                dc.l    ($03<<$18)|Obj_0x0F_Collapsing_Platform ; Offset_0x01595E
                dc.l    ($18<<$18)|MGz_Collapsing_Platform_Mappings ; Offset_0x0167B4
                dc.w    $4001
                dc.l    ($06<<$18)|Obj_0x0F_Collapsing_Platform ; Offset_0x01595E
                dc.l    ($28<<$18)|MGz_Collapsing_Platform_Mappings ; Offset_0x0167B4
                dc.w    $4001
                dc.l    Obj_0x0D_Breakable_Wall                ; Offset_0x0170CA
                dc.l    MGz_Breakable_Wall_Mappings            ; Offset_0x0178F8
                dc.w    $4001
                dc.l    Obj_0x51_Floating_Platform             ; Offset_0x01C3C2
                dc.l    ($04<<$18)|MGz_Floating_Platform_Mappings ; Offset_0x01C4E4
                dc.w    $4001
                dc.l    Obj_0x20_Smashing_Pillar_Spikes        ; Offset_0x01FDB6
                dc.l    ($0A<<$18)|Smashing_Pillar_Mappings    ; Offset_0x01FEE8
                dc.w    $4001
                dc.l    ($01<<$18)|Obj_0x53_MGz_Swinging_Platform ; Offset_0x02A224
                dc.l    Swinging_Platform_Mappings             ; Offset_0x02A36C
                dc.w    $435F
                dc.l    ($01<<$18)|Obj_0x58_MGz_Swinging_Spiked_Ball ; Offset_0x02A390
                dc.l    Swinging_Spiked_Ball_Mappings          ; Offset_0x02A582
                dc.w    $235F
                dc.l    ($02<<$18)|Obj_0x58_MGz_Swinging_Spiked_Ball ; Offset_0x02A390
                dc.l    ($01<<$18)|Swinging_Spiked_Ball_Mappings ; Offset_0x02A582
                dc.w    $235F
                dc.l    ($06<<$18)|Obj_0x55_MGz_Head_Trigger   ; Offset_0x02A5BC
                dc.l    Head_Trigger_Mappings                  ; Offset_0x02A822
                dc.w    $A3FF
                dc.l    Obj_0x56_MGz_Moving_Spike_Platform     ; Offset_0x02AA8A
                dc.l    Moving_Spike_Platform_Mappings         ; Offset_0x02ABA8
                dc.w    $4001
                dc.l    ($01<<$18)|Obj_0x57_MGz_Trigger_Platform ; Offset_0x02A884
                dc.l    ($11<<$18)|Trigger_Platform_Mappings   ; Offset_0x02A9C2
                dc.w    $4001
                dc.l    Obj_0x59_MGz_Dash_Trigger              ; Offset_0x01C930
                dc.l    ($01<<$18)|Dash_Trigger_Mappings       ; Offset_0x01CB06
                dc.w    $235F
                dc.l    Obj_0x5A_MGz_Pulley                    ; Offset_0x02ACD8
                dc.l    ($20<<$18)|Pulley_Mappings             ; Offset_0x02B0CA
                dc.w    $235F
                dc.l    Obj_0x5B_MGz_Blue_Spinning_Platform    ; Offset_0x02B19A
                dc.l    Blue_Spinning_Platform_Mappings        ; Offset_0x02BEA8
                dc.w    $235F
                dc.l    ($02<<$18)|Obj_0x5C_MGz_Blue_Platform_Launcher ; Offset_0x02BED2
                dc.l    Blue_Spinning_Platform_Mappings        ; Offset_0x02BEA8
                dc.w    $43FF
DOL_03_End:
;-------------------------------------------------------------------------------
Debug_CNz:                                                     ; Offset_0x04BAA2
                dc.w    ((DOL_04_End-DOL_04)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_04: ; DOL - Debug Object List
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Rings_Mappings                         ; Offset_0x010DE2
                dc.w    $A6BC
                dc.l    Obj01_Monitors                      ; Offset_0x012F44
                dc.l    ($08<<$18)|Monitors_Mappings           ; Offset_0x0134A2
                dc.w    $04C4
                dc.l    ($01<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $26BC
                dc.l    ($05<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $26BC
                dc.l    Obj_0x07_Springs                       ; Offset_0x01921A
                dc.l    ($81<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04A4
                dc.l    ($03<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($90<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04B4
                dc.l    ($06<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($A0<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04A4
                dc.l    Obj_0x08_Spikes                        ; Offset_0x01A442
                dc.l    Spikes_Mappings                        ; Offset_0x01A88C
                dc.w    $049C
                dc.l    ($04<<$18)|Obj_0x08_Spikes             ; Offset_0x01A442
                dc.l    ($40<<$18)|Spikes_Mappings             ; Offset_0x01A88C
                dc.w    $0494
                dc.l    Obj_0xA0_CNz_Clamer                    ; Offset_0x045C7A
                dc.l    Clamer_Mappings                        ; Offset_0x10EA62
                dc.w    $2500
                dc.l    Obj_0xA1_CNz_Sparkle                   ; Offset_0x045E4A
                dc.l    Sparkle_Mappings                       ; Offset_0x10EAE0
                dc.w    $2524
                dc.l    Obj_0xA2_CNz_Batbot                    ; Offset_0x046004
                dc.l    Batbot_Mappings                        ; Offset_0x10EB82
                dc.w    $2552
                dc.l    ($01<<$18)|Obj_0x3C_Automatic_Door     ; Offset_0x026ED0
                dc.l    ($01<<$18)|Automatic_Door_Mappings     ; Offset_0x027002
                dc.w    $4416
                dc.l    Obj_0x4A_Bumper                        ; Offset_0x029188
                dc.l    Bumper_Mappings                        ; Offset_0x0293D4
                dc.w    $4364
                dc.l    ($09<<$18)|Obj_0x42_CNz_Cannon         ; Offset_0x02794E
                dc.l    Cannon_Mappings                        ; Offset_0x027C10
                dc.w    $4374
                dc.l    Obj_0x43_CNz_Platform                  ; Offset_0x027DBA
                dc.l    CNz_Platform_Mappings                  ; Offset_0x027EBA
                dc.w    $43BE
                dc.l    Obj_0x44_CNz_Trapdoor                  ; Offset_0x027F0E
                dc.l    Trapdoor_Mappings                      ; Offset_0x027FAA
                dc.w    $43F0
                dc.l    Obj_0x45_CNz_Light_Bulb                ; Offset_0x027FDA
                dc.l    Light_Bulb_Mappings                    ; Offset_0x028030
                dc.w    $4404
                dc.l    Obj_0x46_CNz_Fan                       ; Offset_0x02805C
                dc.l    ($80<<$18)|CNz_Fan_Mappings            ; Offset_0x0281E8
                dc.w    $43E8
                dc.l    Obj_0x47_CNz_Barrel                    ; Offset_0x028430
                dc.l    Barrel_Mappings                        ; Offset_0x0288E8
                dc.w    $438E
                dc.l    Obj_0x3C_Automatic_Door                ; Offset_0x026ED0
                dc.l    ($80<<$18)|Automatic_Door_Horizontal_Mappings ; Offset_0x027168
                dc.w    $4416
                dc.l    Obj_0x4A_Bumper                        ; Offset_0x029188
                dc.l    ($80<<$18)|Bumper_Mappings             ; Offset_0x0293D4
                dc.w    $4364
                dc.l    Obj_0x4A_Bumper                        ; Offset_0x029188
                dc.l    ($2B<<$18)|Bumper_Mappings             ; Offset_0x0293D4
                dc.w    $4364
                dc.l    Obj_0x4A_Bumper                        ; Offset_0x029188
                dc.l    ($D5<<$18)|Bumper_Mappings             ; Offset_0x0293D4
                dc.w    $4364
                dc.l    Obj_0x41_CNz_Balloon                   ; Offset_0x027552
                dc.l    Balloon_Mappings                       ; Offset_0x0276EC
                dc.w    $0351
                dc.l    ($05<<$18)|Obj_0x41_CNz_Balloon        ; Offset_0x027552
                dc.l    ($01<<$18)|Balloon_Mappings            ; Offset_0x0276EC
                dc.w    $0351
                dc.l    ($0A<<$18)|Obj_0x41_CNz_Balloon        ; Offset_0x027552
                dc.l    ($02<<$18)|Balloon_Mappings            ; Offset_0x0276EC
                dc.w    $0351
                dc.l    ($0F<<$18)|Obj_0x41_CNz_Balloon        ; Offset_0x027552
                dc.l    ($03<<$18)|Balloon_Mappings            ; Offset_0x0276EC
                dc.w    $0351
                dc.l    ($14<<$18)|Obj_0x41_CNz_Balloon        ; Offset_0x027552
                dc.l    ($04<<$18)|Balloon_Mappings            ; Offset_0x0276EC
                dc.w    $0351
                dc.l    ($02<<$18)|Obj_0x33_Switch             ; Offset_0x023662
                dc.l    CNz_Switch_Mappings                    ; Offset_0x02388C
                dc.w    $441A
                dc.l    Obj_0x0D_Breakable_Wall                ; Offset_0x0170CA
                dc.l    CNz_Breakable_Wall_Mappings            ; Offset_0x017858
                dc.w    $4420
                dc.l    ($02<<$18)|Obj_0x0D_Breakable_Wall     ; Offset_0x0170CA
                dc.l    ($02<<$18)|CNz_Breakable_Wall_Mappings ; Offset_0x017858
                dc.w    $4420
                dc.l    Obj_0x4D_CNz_Barber_Pole               ; Offset_0x0296A0
                dc.l    Rings_Mappings                         ; Offset_0x010DE2
                dc.w    $86BC
                dc.l    ($13<<$18)|Obj_0x54_Oxygen_Bubbles     ; Offset_0x025500
                dc.l    ($81<<$18)|Sonic_Underwater_Mappings   ; Offset_0x025872
                dc.w    $845C
                dc.l    Obj_0x2A_Breakable_Floor               ; Offset_0x0211D6
                dc.l    ($01<<$18)|CNz_Breakable_Floor_Mappings ; Offset_0x0217E4
                dc.w    $4430
                dc.l    Obj_0x47_CNz_Barrel                    ; Offset_0x028430
                dc.l    ($49<<$18)|Barrel_Mappings             ; Offset_0x0288E8
                dc.w    $438E
DOL_04_End:
;-------------------------------------------------------------------------------
Debug_FBz:                                                     ; Offset_0x04BC0C
                dc.w    ((DOL_05_End-DOL_05)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_05: ; DOL - Debug Object List
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Rings_Mappings                         ; Offset_0x010DE2
                dc.w    $A6BC
                dc.l    Obj01_Monitors                      ; Offset_0x012F44
                dc.l    ($08<<$18)|Monitors_Mappings           ; Offset_0x0134A2
                dc.w    $04C4
                dc.l    ($01<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $26BC
                dc.l    ($05<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $26BC
                dc.l    Obj_0x07_Springs                       ; Offset_0x01921A
                dc.l    ($81<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04A4
                dc.l    ($03<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($90<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04B4
                dc.l    ($06<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($A0<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04A4
                dc.l    Obj_0x08_Spikes                        ; Offset_0x01A442
                dc.l    Spikes_Mappings                        ; Offset_0x01A88C
                dc.w    $049C
                dc.l    Obj_0xA7_FBz_Blaster                   ; Offset_0x04611C
                dc.l    ($80<<$18)|Blaster_Mappings            ; Offset_0x10ED62
                dc.w    $2500
                dc.l    Obj_0xA8_FBz_Techno_Squeek             ; Offset_0x046392
                dc.l    Techno_Squeek_Mappings                 ; Offset_0x10EF02
                dc.w    $2528
                dc.l    Obj_0xA8_FBz_Techno_Squeek             ; Offset_0x046392
                dc.l    ($02<<$18)|Techno_Squeek_Mappings      ; Offset_0x10EF02
                dc.w    $2528
                dc.l    Obj_0xA8_FBz_Techno_Squeek             ; Offset_0x046392
                dc.l    ($04<<$18)|Techno_Squeek_Mappings      ; Offset_0x10EF02
                dc.w    $2528
DOL_05_End:
;-------------------------------------------------------------------------------
Debug_Iz_1:                                                    ; Offset_0x04BC86
                dc.w    ((DOL_06_End-DOL_06)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_06: ; DOL - Debug Object List
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Rings_Mappings                         ; Offset_0x010DE2
                dc.w    $A6BC
                dc.l    Obj01_Monitors                      ; Offset_0x012F44
                dc.l    ($05<<$18)|Monitors_Mappings           ; Offset_0x0134A2
                dc.w    $04C4
                dc.l    ($01<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $26BC
                dc.l    ($05<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $26BC
                dc.l    Obj_0x07_Springs                       ; Offset_0x01921A
                dc.l    ($81<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04A4
                dc.l    ($03<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($90<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04B4
                dc.l    ($06<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($A0<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04A4
                dc.l    Obj_0x08_Spikes                        ; Offset_0x01A442
                dc.l    Spikes_Mappings                        ; Offset_0x01A88C
                dc.w    $049C
                dc.l    Obj_0xAA_Iz_Penguinator                ; Offset_0x047F8A
                dc.l    ($20<<$18)|Penguinator_Mappings        ; Offset_0x10EE48
                dc.w    $2500
                dc.l    Obj_0xAB_Iz_Star_Pointer               ; Offset_0x0482D2
                dc.l    Star_Pointer_Mappings                  ; Offset_0x10EF66
                dc.w    $2548
                dc.l    Obj_0xB9_Iz_Platform                   ; Offset_0x04663E
                dc.l    Iz_Platform_Mappings                   ; Offset_0x110BBC
                dc.w    $43B6
                dc.l    Obj_0xB9_Iz_Platform                   ; Offset_0x04663E
                dc.l    ($02<<$18)|Iz_Platform_Mappings        ; Offset_0x110BBC
                dc.w    $43B6
                dc.l    ($06<<$18)|Obj_0xBA_Iz_Breakable_Wall  ; Offset_0x04694C
                dc.l    Crushing_Column_Mappings               ; Offset_0x110938
                dc.w    $4001
                dc.l    ($02<<$18)|Obj_0xB8_Iz_Crushing_Column ; Offset_0x046B0E
                dc.l    ($01<<$18)|Crushing_Column_Mappings    ; Offset_0x110938
                dc.w    $4001
                dc.l    ($02<<$18)|Obj_0xB8_Iz_Crushing_Column ; Offset_0x046B0E
                dc.l    ($02<<$18)|Crushing_Column_Mappings    ; Offset_0x110938
                dc.w    $4001
                dc.l    ($02<<$18)|Obj_0xB8_Iz_Crushing_Column ; Offset_0x046B0E
                dc.l    ($03<<$18)|Crushing_Column_Mappings    ; Offset_0x110938
                dc.w    $4001
                dc.l    ($02<<$18)|Obj_0xB8_Iz_Crushing_Column ; Offset_0x046B0E
                dc.l    ($04<<$18)|Crushing_Column_Mappings    ; Offset_0x110938
                dc.w    $4001
                dc.l    ($06<<$18)|Obj_0xBB_Iz_Freezer         ; Offset_0x046CF2
                dc.l    Iz_Platform_Mappings                   ; Offset_0x110BBC
                dc.w    $23B6
                dc.l    ($0A<<$18)|Obj_0xBC_Iz_Segmented_Column ; Offset_0x04719E
                dc.l    Crushing_Column_Mappings               ; Offset_0x110938
                dc.w    $4001
                dc.l    ($0A<<$18)|Obj_0xBC_Iz_Segmented_Column ; Offset_0x04719E
                dc.l    ($02<<$18)|Crushing_Column_Mappings    ; Offset_0x110938
                dc.w    $4001
                dc.l    ($07<<$18)|Obj_0xBD_Iz_Swinging_Platform ; Offset_0x047336
                dc.l    Iz_Platform_Mappings                   ; Offset_0x110BBC
                dc.w    $23B6
                dc.l    ($07<<$18)|Obj_0xBD_Iz_Swinging_Platform ; Offset_0x047336
                dc.l    ($02<<$18)|Iz_Platform_Mappings        ; Offset_0x110BBC
                dc.w    $23B6
                dc.l    ($07<<$18)|Obj_0xBE_Iz_Stalactite      ; Offset_0x0477C6
                dc.l    Crushing_Column_Mappings               ; Offset_0x110938
                dc.w    $4001
                dc.l    ($05<<$18)|Obj_0xC0_Iz_Ice_Spikes      ; Offset_0x0478D2
                dc.l    Crushing_Column_Mappings               ; Offset_0x110938
                dc.w    $4001
                dc.l    ($05<<$18)|Obj_0xC0_Iz_Ice_Spikes      ; Offset_0x0478D2
                dc.l    ($02<<$18)|Crushing_Column_Mappings    ; Offset_0x110938
                dc.w    $4001
                dc.l    ($03<<$18)|Obj_0xBF_Iz_Ice_Cube        ; Offset_0x04798A
                dc.l    Iz_Platform_Mappings                   ; Offset_0x110BBC
                dc.w    $43B6
                dc.l    ($05<<$18)|Obj_0xC1_Iz_Ice_Spiked_Ball ; Offset_0x047AD0
                dc.l    Iz_Platform_Mappings                   ; Offset_0x110BBC
                dc.w    $43B6
                dc.l    ($04<<$18)|Obj_0xC1_Iz_Ice_Spiked_Ball ; Offset_0x047AD0
                dc.l    ($02<<$18)|Iz_Platform_Mappings        ; Offset_0x110BBC
                dc.w    $43B6
                dc.l    Obj_0x04_Collapsing_Platform           ; Offset_0x01582E
                dc.l    Iz_Collapsing_Platform_Mappings        ; Offset_0x016D00
                dc.w    $4001
                dc.l    ($03<<$18)|Obj_0x0F_Collapsing_Platform ; Offset_0x01595E
                dc.l    ($80<<$18)|Iz_Collapsing_Platform_Mappings ; Offset_0x016D00
                dc.w    $4001
                dc.l    Obj_0x2A_Breakable_Floor               ; Offset_0x0211D6
                dc.l    Iz_Breakable_Floor_Mappings            ; Offset_0x02187C
                dc.w    $4001
                dc.l    ($0A<<$18)|Obj_0x2A_Breakable_Floor    ; Offset_0x0211D6
                dc.l    ($1A<<$18)|Iz_Breakable_Floor_Mappings ; Offset_0x02187C
                dc.w    $43B6
                dc.l    Obj_0x6C_Bridge                        ; Offset_0x02E504
                dc.l    ($10<<$18)|Iz_Bridge_Mappings          ; Offset_0x02EE28
                dc.w    $43B6
                dc.l    ($02<<$18)|Obj_0x33_Switch             ; Offset_0x023662
                dc.l    ($10<<$18)|Switch_Mappings             ; Offset_0x023832
                dc.w    $0456
DOL_06_End:
;-------------------------------------------------------------------------------
Debug_Iz_2:                                                    ; Offset_0x04BDDC
                dc.w    ((DOL_07_End-DOL_07)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_07: ; DOL - Debug Object List
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Rings_Mappings                         ; Offset_0x010DE2
                dc.w    $A6BC
                dc.l    Obj01_Monitors                      ; Offset_0x012F44
                dc.l    ($05<<$18)|Monitors_Mappings           ; Offset_0x0134A2
                dc.w    $04C4
                dc.l    ($01<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $26BC
                dc.l    ($05<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $26BC
                dc.l    Obj_0x07_Springs                       ; Offset_0x01921A
                dc.l    ($81<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04A4
                dc.l    ($03<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($90<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04B4
                dc.l    ($06<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($A0<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04A4
                dc.l    Obj_0x08_Spikes                        ; Offset_0x01A442
                dc.l    Spikes_Mappings                        ; Offset_0x01A88C
                dc.w    $049C
                dc.l    Obj_0xAA_Iz_Penguinator                ; Offset_0x047F8A
                dc.l    ($20<<$18)|Penguinator_Mappings        ; Offset_0x10EE48
                dc.w    $2500
                dc.l    Obj_0xAB_Iz_Star_Pointer               ; Offset_0x0482D2
                dc.l    Star_Pointer_Mappings                  ; Offset_0x10EF66
                dc.w    $2548
                dc.l    Obj_0xB9_Iz_Platform                   ; Offset_0x04663E
                dc.l    ($04<<$18)|Iz_Platform_Mappings        ; Offset_0x110BBC
                dc.w    $43B6
                dc.l    Obj_0xB9_Iz_Platform                   ; Offset_0x04663E
                dc.l    ($06<<$18)|Iz_Platform_Mappings        ; Offset_0x110BBC
                dc.w    $43B6
                dc.l    ($02<<$18)|Obj_0xB8_Iz_Crushing_Column ; Offset_0x046B0E
                dc.l    ($01<<$18)|Crushing_Column_Mappings    ; Offset_0x110938
                dc.w    $4001
                dc.l    ($02<<$18)|Obj_0xB8_Iz_Crushing_Column ; Offset_0x046B0E
                dc.l    ($02<<$18)|Crushing_Column_Mappings    ; Offset_0x110938
                dc.w    $4001
                dc.l    ($02<<$18)|Obj_0xB8_Iz_Crushing_Column ; Offset_0x046B0E
                dc.l    ($03<<$18)|Crushing_Column_Mappings    ; Offset_0x110938
                dc.w    $4001
                dc.l    ($02<<$18)|Obj_0xB8_Iz_Crushing_Column ; Offset_0x046B0E
                dc.l    ($04<<$18)|Crushing_Column_Mappings    ; Offset_0x110938
                dc.w    $4001
                dc.l    ($06<<$18)|Obj_0xBB_Iz_Freezer         ; Offset_0x046CF2
                dc.l    Iz_Platform_Mappings                   ; Offset_0x110BBC
                dc.w    $23B6
                dc.l    ($0A<<$18)|Obj_0xBC_Iz_Segmented_Column ; Offset_0x04719E
                dc.l    Crushing_Column_Mappings               ; Offset_0x110938
                dc.w    $4001
                dc.l    ($0A<<$18)|Obj_0xBC_Iz_Segmented_Column ; Offset_0x04719E
                dc.l    ($02<<$18)|Crushing_Column_Mappings    ; Offset_0x110938
                dc.w    $4001
                dc.l    ($07<<$18)|Obj_0xBD_Iz_Swinging_Platform ; Offset_0x047336
                dc.l    Iz_Platform_Mappings                   ; Offset_0x110BBC
                dc.w    $23B6
                dc.l    ($07<<$18)|Obj_0xBD_Iz_Swinging_Platform ; Offset_0x047336
                dc.l    ($02<<$18)|Iz_Platform_Mappings        ; Offset_0x110BBC
                dc.w    $23B6
                dc.l    ($05<<$18)|Obj_0xC0_Iz_Ice_Spikes      ; Offset_0x0478D2
                dc.l    Crushing_Column_Mappings               ; Offset_0x110938
                dc.w    $4001
                dc.l    ($05<<$18)|Obj_0xC0_Iz_Ice_Spikes      ; Offset_0x0478D2
                dc.l    ($02<<$18)|Crushing_Column_Mappings    ; Offset_0x110938
                dc.w    $4001
                dc.l    ($03<<$18)|Obj_0xBF_Iz_Ice_Cube        ; Offset_0x04798A
                dc.l    Iz_Platform_Mappings                   ; Offset_0x110BBC
                dc.w    $43B6
                dc.l    ($05<<$18)|Obj_0xC1_Iz_Ice_Spiked_Ball ; Offset_0x047AD0
                dc.l    ($02<<$18)|Iz_Platform_Mappings        ; Offset_0x110BBC
                dc.w    $43B6
                dc.l    ($04<<$18)|Obj_0xC1_Iz_Ice_Spiked_Ball ; Offset_0x047AD0
                dc.l    Iz_Platform_Mappings                   ; Offset_0x110BBC
                dc.w    $43B6
                dc.l    ($20<<$18)|Obj_0xC2_Iz_Snow_Pile       ; Offset_0x047B4E
                dc.l    Iz_Platform_Mappings                   ; Offset_0x110BBC
                dc.w    $437D
                dc.l    ($1F<<$18)|Obj_0xC3_Iz_Trampoline      ; Offset_0x047D46
                dc.l    Iz_Platform_Mappings                   ; Offset_0x110BBC
                dc.w    $437D
                dc.l    Obj_0x04_Collapsing_Platform           ; Offset_0x01582E
                dc.l    Iz_Collapsing_Platform_Mappings        ; Offset_0x016D00
                dc.w    $4001
                dc.l    ($03<<$18)|Obj_0x0F_Collapsing_Platform ; Offset_0x01595E
                dc.l    ($80<<$18)|Iz_Collapsing_Platform_Mappings ; Offset_0x016D00
                dc.w    $4001
                dc.l    Obj_0x2A_Breakable_Floor               ; Offset_0x0211D6
                dc.l    Iz_Breakable_Floor_Mappings            ; Offset_0x02187C
                dc.w    $4001
                dc.l    ($0A<<$18)|Obj_0x2A_Breakable_Floor    ; Offset_0x0211D6
                dc.l    ($1A<<$18)|Iz_Breakable_Floor_Mappings ; Offset_0x02187C
                dc.w    $43B6
                dc.l    Obj_0x6C_Bridge                        ; Offset_0x02E504
                dc.l    ($8C<<$18)|Iz_Bridge_Mappings          ; Offset_0x02EE28
                dc.w    $43B6
                dc.l    ($02<<$18)|Obj_0x33_Switch             ; Offset_0x023662
                dc.l    ($10<<$18)|Switch_Mappings             ; Offset_0x023832
                dc.w    $0456
DOL_07_End:
;-------------------------------------------------------------------------------
Debug_LBz_1:                                                   ; Offset_0x04BF32
                dc.w    ((DOL_08_End-DOL_08)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_08: ; DOL - Debug Object List
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Rings_Mappings                         ; Offset_0x010DE2
                dc.w    $A6BC
                dc.l    Obj01_Monitors                      ; Offset_0x012F44
                dc.l    ($08<<$18)|Monitors_Mappings           ; Offset_0x0134A2
                dc.w    $04C4
                dc.l    ($01<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $26BC
                dc.l    ($05<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $26BC
                dc.l    Obj_0x07_Springs                       ; Offset_0x01921A
                dc.l    ($81<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04A4
                dc.l    ($03<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($90<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04B4
                dc.l    ($06<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($A0<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04A4
                dc.l    Obj_0x08_Spikes                        ; Offset_0x01A442
                dc.l    Spikes_Mappings                        ; Offset_0x01A88C
                dc.w    $049C
                dc.l    Obj_0x0F_Collapsing_Platform           ; Offset_0x01595E
                dc.l    ($80<<$18)|LBz_Collapsing_Platforms_Mappings ; Offset_0x0161E2
                dc.w    $4001
                dc.l    Obj_0x0F_Collapsing_Platform           ; Offset_0x01595E
                dc.l    ($40<<$18)|LBz_Collapsing_Platforms_Mappings_2 ; Offset_0x0162DE
                dc.w    $4001
                dc.l    Obj_0x2A_Breakable_Floor               ; Offset_0x0211D6
                dc.l    LBz_Breakable_Floor_Mappings           ; Offset_0x021A84
                dc.w    $4001
                dc.l    Obj_0x11_LBz_Platform                  ; Offset_0x01BCFC
                dc.l    ($05<<$18)|LBz_Platform_Mappings       ; Offset_0x01C1F8
                dc.w    $43C3
                dc.l    ($01<<$18)|Obj_0x11_LBz_Platform       ; Offset_0x01BCFC
                dc.l    ($11<<$18)|LBz_Platform_Mappings       ; Offset_0x01C1F8
                dc.w    $43C3
                dc.l    Obj_0x13_LBz_Exploding_Trigger         ; Offset_0x01C890
                dc.l    LBz_Exploding_Trigger_Mappings         ; Offset_0x01C926
                dc.w    $4433
                dc.l    Obj_0x14_LBz_Trigger_Bridge            ; Offset_0x01CBA2
                dc.l    Trigger_Bridge_Mappings                ; Offset_0x01CD64
                dc.w    $43C3
                dc.l    Obj_0x15_LBz_Player_Launcher           ; Offset_0x01D050
                dc.l    Player_Launcher_Mappings               ; Offset_0x01D2CA
                dc.w    $43C3
                dc.l    Obj_0x16_LBz_Flame_Thrower             ; Offset_0x01D312
                dc.l    Flame_Thrower_Mappings                 ; Offset_0x01D3C6
                dc.w    $43AC
                dc.l    Obj_0x17_LBz_Hooked_Ride               ; Offset_0x01D4FC
                dc.l    Hooked_Ride_Mappings                   ; Offset_0x01D8F8
                dc.w    $2433
                dc.l    Obj_0x18_LBz_Cup_Elevator              ; Offset_0x01D916
                dc.l    Cup_Elevator_Mappings                  ; Offset_0x01DF66
                dc.w    $440D
                dc.l    ($03<<$18)|Obj_0x19_LBz_Cup_Elevator_Pole ; Offset_0x01DF10
                dc.l    ($06<<$18)|Cup_Elevator_Mappings       ; Offset_0x01DF66
                dc.w    $440D
                dc.l    Obj_0x20_Smashing_Pillar_Spikes        ; Offset_0x01FDB6
                dc.l    ($10<<$18)|Smashing_Spike_Mappins      ; Offset_0x01FED8
                dc.w    $4455
                dc.l    Obj_0x87_LBz_Snale_Blaster             ; Offset_0x048436
                dc.l    Snale_Blaster_Mappings                 ; Offset_0x10D3C8
                dc.w    $2524
                dc.l    Obj_0x89_LBz_Orbinaut                  ; Offset_0x048A94
                dc.l    Orbinaut_Mappings                      ; Offset_0x10D472
                dc.w    $256E
                dc.l    Obj_0x89_LBz_Orbinaut                  ; Offset_0x048A94
                dc.l    ($02<<$18)|Orbinaut_Mappings           ; Offset_0x10D472
                dc.w    $256E
                dc.l    Obj_0x89_LBz_Orbinaut                  ; Offset_0x048A94
                dc.l    ($04<<$18)|Orbinaut_Mappings           ; Offset_0x10D472
                dc.w    $256E
                dc.l    Obj_0x88_LBz_Ribot                     ; Offset_0x048756
                dc.l    Ribot_Mappings                         ; Offset_0x10D486
                dc.w    $2547
                dc.l    Obj_0x88_LBz_Ribot                     ; Offset_0x048756
                dc.l    ($02<<$18)|Ribot_Mappings              ; Offset_0x10D486
                dc.w    $2547
                dc.l    Obj_0x88_LBz_Ribot                     ; Offset_0x048756
                dc.l    ($04<<$18)|Ribot_Mappings              ; Offset_0x10D486
                dc.w    $2547
                dc.l    Obj_0x8A_LBz_Corkey                    ; Offset_0x048BCE
                dc.l    ($20<<$18)|Corkey_Mappings             ; Offset_0x10D590
                dc.w    $2558
                dc.l    Obj_0x8B_LBz_Flybot_767                ; Offset_0x048DF8
                dc.l    Flybot_767_Mappings                    ; Offset_0x10D62E
                dc.w    $2500
                dc.l    Obj_0x34_Star_Post                     ; Offset_0x023F76
                dc.l    ($01<<$18)|Star_Post_Mappings          ; Offset_0x024282
                dc.w    $05EC
                dc.l    Obj_0x11_LBz_Platform                  ; Offset_0x01BCFC
                dc.l    ($0D<<$18)|LBz_Platform_Mappings       ; Offset_0x01C1F8
                dc.w    $43C3
                dc.l    ($02<<$18)|Obj_0x10_LBz_Tube_Elevator  ; Offset_0x020856
                dc.l    Tube_Elevator_Mappings                 ; Offset_0x020D4E
                dc.w    $2455
                dc.l    ($14<<$18)|Obj_0x2F_Still_Sprite       ; Offset_0x022E38
                dc.l    ($14<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
                dc.w    $440D
                dc.l    ($15<<$18)|Obj_0x2F_Still_Sprite       ; Offset_0x022E38
                dc.l    ($15<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
                dc.w    $2433
                dc.l    ($16<<$18)|Obj_0x2F_Still_Sprite       ; Offset_0x022E38
                dc.l    ($16<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
                dc.w    $2433
DOL_08_End:
;-------------------------------------------------------------------------------
Debug_LBz_2:                                                   ; Offset_0x04C09C
                dc.w    ((DOL_09_End-DOL_09)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_09: ; DOL - Debug Object List
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Rings_Mappings                         ; Offset_0x010DE2
                dc.w    $A6BC
                dc.l    Obj01_Monitors                      ; Offset_0x012F44
                dc.l    ($08<<$18)|Monitors_Mappings           ; Offset_0x0134A2
                dc.w    $04C4
                dc.l    ($01<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $26BC
                dc.l    ($05<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $26BC
                dc.l    Obj_0x07_Springs                       ; Offset_0x01921A
                dc.l    ($81<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04A4
                dc.l    ($03<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($90<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04B4
                dc.l    ($06<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($A0<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04A4
                dc.l    Obj_0x08_Spikes                        ; Offset_0x01A442
                dc.l    Spikes_Mappings                        ; Offset_0x01A88C
                dc.w    $049C
                dc.l    Obj_0x0F_Collapsing_Platform           ; Offset_0x01595E
                dc.l    ($80<<$18)|LBz_Collapsing_Platforms_Mappings ; Offset_0x0161E2
                dc.w    $4001
                dc.l    Obj_0x0F_Collapsing_Platform           ; Offset_0x01595E
                dc.l    ($40<<$18)|LBz_Collapsing_Platforms_Mappings_2 ; Offset_0x0162DE
                dc.w    $4001
                dc.l    Obj_0x2A_Breakable_Floor               ; Offset_0x0211D6
                dc.l    LBz_Breakable_Floor_Mappings           ; Offset_0x021A84
                dc.w    $4001
                dc.l    Obj_0x11_LBz_Platform                  ; Offset_0x01BCFC
                dc.l    ($05<<$18)|LBz_Platform_Mappings       ; Offset_0x01C1F8
                dc.w    $43C3
                dc.l    ($01<<$18)|Obj_0x11_LBz_Platform       ; Offset_0x01BCFC
                dc.l    ($11<<$18)|LBz_Platform_Mappings       ; Offset_0x01C1F8
                dc.w    $43C3
                dc.l    Obj_0x13_LBz_Exploding_Trigger         ; Offset_0x01C890
                dc.l    LBz_Exploding_Trigger_Mappings         ; Offset_0x01C926
                dc.w    $4433
                dc.l    Obj_0x14_LBz_Trigger_Bridge            ; Offset_0x01CBA2
                dc.l    Trigger_Bridge_Mappings                ; Offset_0x01CD64
                dc.w    $43C3
                dc.l    Obj_0x15_LBz_Player_Launcher           ; Offset_0x01D050
                dc.l    Player_Launcher_Mappings               ; Offset_0x01D2CA
                dc.w    $43C3
                dc.l    Obj_0x16_LBz_Flame_Thrower             ; Offset_0x01D312
                dc.l    Flame_Thrower_Mappings                 ; Offset_0x01D3C6
                dc.w    $43AC
                dc.l    Obj_0x17_LBz_Hooked_Ride               ; Offset_0x01D4FC
                dc.l    Hooked_Ride_Mappings                   ; Offset_0x01D8F8
                dc.w    $2433
                dc.l    ($07<<$18)|Obj_0x1B_LBz_Pipe_Plug      ; Offset_0x01E2C6
                dc.l    LBz_Pipe_Plug_Mappings                 ; Offset_0x01E61C
                dc.w    $42E6
                dc.l    Obj_0x1E_LBz_Spin_Launcher             ; Offset_0x01F5FC
                dc.l    Spin_Launcher_Mappings                 ; Offset_0x01F864
                dc.w    $42EA
                dc.l    Obj_0x1F_LBz_Hook                      ; Offset_0x01F892
                dc.l    ($1A<<$18)|Hook_Mappings               ; Offset_0x01FA5E
                dc.w    $42EA
                dc.l    Obj_0x21_LBz_Gate_Laser                ; Offset_0x01FF28
                dc.l    ($0F<<$18)|Gate_Laser_Mappings         ; Offset_0x020036
                dc.w    $42EA
                dc.l    Obj_0x87_LBz_Snale_Blaster             ; Offset_0x048436
                dc.l    Snale_Blaster_Mappings                 ; Offset_0x10D3C8
                dc.w    $2524
                dc.l    Obj_0x89_LBz_Orbinaut                  ; Offset_0x048A94
                dc.l    Orbinaut_Mappings                      ; Offset_0x10D472
                dc.w    $256E
                dc.l    Obj_0x89_LBz_Orbinaut                  ; Offset_0x048A94
                dc.l    ($02<<$18)|Orbinaut_Mappings           ; Offset_0x10D472
                dc.w    $256E
                dc.l    Obj_0x89_LBz_Orbinaut                  ; Offset_0x048A94
                dc.l    ($04<<$18)|Orbinaut_Mappings           ; Offset_0x10D472
                dc.w    $256E
                dc.l    Obj_0x88_LBz_Ribot                     ; Offset_0x048756
                dc.l    Ribot_Mappings                         ; Offset_0x10D486
                dc.w    $2547
                dc.l    Obj_0x88_LBz_Ribot                     ; Offset_0x048756
                dc.l    ($02<<$18)|Ribot_Mappings              ; Offset_0x10D486
                dc.w    $2547
                dc.l    Obj_0x88_LBz_Ribot                     ; Offset_0x048756
                dc.l    ($04<<$18)|Ribot_Mappings              ; Offset_0x10D486
                dc.w    $2547
                dc.l    Obj_0x8A_LBz_Corkey                    ; Offset_0x048BCE
                dc.l    ($20<<$18)|Corkey_Mappings             ; Offset_0x10D590
                dc.w    $2558
                dc.l    Obj_0x8B_LBz_Flybot_767                ; Offset_0x048DF8
                dc.l    Flybot_767_Mappings                    ; Offset_0x10D62E
                dc.w    $2500
                dc.l    Obj_0x34_Star_Post                     ; Offset_0x023F76
                dc.l    ($01<<$18)|Star_Post_Mappings          ; Offset_0x024282
                dc.w    $05EC
                dc.l    ($13<<$18)|Obj_0x54_Oxygen_Bubbles     ; Offset_0x025500
                dc.l    ($81<<$18)|Sonic_Underwater_Mappings   ; Offset_0x025872
                dc.w    $845C
                dc.l    Obj_0x11_LBz_Platform                  ; Offset_0x01BCFC
                dc.l    ($0D<<$18)|LBz_Platform_Mappings       ; Offset_0x01C1F8
                dc.w    $43C3
                dc.l    Obj_0x18_LBz_Cup_Elevator              ; Offset_0x01D916
                dc.l    Cup_Elevator_Mappings                  ; Offset_0x01DF66
                dc.w    $440D
                dc.l    ($03<<$18)|Obj_0x19_LBz_Cup_Elevator_Pole ; Offset_0x01DF10
                dc.l    ($06<<$18)|Cup_Elevator_Mappings       ; Offset_0x01DF66
                dc.w    $440D
                dc.l    Obj_0x0D_Breakable_Wall                ; Offset_0x0170CA
                dc.l    LBz_Breakable_Wall_Mappings            ; Offset_0x017A3E
                dc.w    $22EA
                dc.l    ($14<<$18)|Obj_0x2F_Still_Sprite       ; Offset_0x022E38
                dc.l    ($14<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
                dc.w    $440D
                dc.l    ($15<<$18)|Obj_0x2F_Still_Sprite       ; Offset_0x022E38
                dc.l    ($15<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
                dc.w    $2433
                dc.l    ($16<<$18)|Obj_0x2F_Still_Sprite       ; Offset_0x022E38
                dc.l    ($16<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
                dc.w    $2433
DOL_09_End:
;-------------------------------------------------------------------------------
Debug_MVz:                                                     ; Offset_0x04C22E
                dc.w    ((DOL_0A_End-DOL_0A)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_0A: ; DOL - Debug Object List
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Rings_Mappings                         ; Offset_0x010DE2
                dc.w    $A6BC
                dc.l    Obj01_Monitors                      ; Offset_0x012F44
                dc.l    ($08<<$18)|Monitors_Mappings           ; Offset_0x0134A2
                dc.w    $04C4
                dc.l    ($01<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $26BC
                dc.l    ($05<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $26BC
                dc.l    Obj_0x07_Springs                       ; Offset_0x01921A
                dc.l    ($81<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04A4
                dc.l    ($03<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($90<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04B4
                dc.l    ($06<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($A0<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04A4
                dc.l    ($07<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($30<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $043A
                dc.l    ($0A<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($40<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $043A
                dc.l    Obj_0x08_Spikes                        ; Offset_0x01A442
                dc.l    Spikes_Mappings                        ; Offset_0x01A88C
                dc.w    $049C
                dc.l    ($04<<$18)|Obj_0x08_Spikes             ; Offset_0x01A442
                dc.l    ($40<<$18)|Spikes_Mappings             ; Offset_0x01A88C
                dc.w    $0494
                dc.l    Obj_0x95_MVz_Dragonfly                 ; Offset_0x049B24
                dc.l    Dragonfly_Mappings                     ; Offset_0x10DEFA
                dc.w    $056D
                dc.l    Obj_0x97_MVz_Cluckoid                  ; Offset_0x049E50
                dc.l    Cluckoid_Mappings                      ; Offset_0x10E052
                dc.w    $0580
                dc.l    Obj_0x96_MVz_Butterdroid               ; Offset_0x049DCA
                dc.l    Butterdroid_Mappings                   ; Offset_0x10E15C
                dc.w    $0512
                dc.l    Obj_0x94_MVz_Mushmeanie                ; Offset_0x0499BC
                dc.l    Mushmeanie_Mappings                    ; Offset_0x10E330
                dc.w    $055E
                dc.l    Obj_0x93_MVz_Madmole                   ; Offset_0x0495CC
                dc.l    Madmole_Mappings                       ; Offset_0x10E36A
                dc.w    $0536
                dc.l    Obj_0x3D_Retracting_Spring             ; Offset_0x019EA2
                dc.l    ($81<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04A4
                dc.l    ($03<<$18)|Obj_0x3D_Retracting_Spring  ; Offset_0x019EA2
                dc.l    ($90<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04B4
                dc.l    ($06<<$18)|Obj_0x3D_Retracting_Spring  ; Offset_0x019EA2
                dc.l    ($A0<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04A4
                dc.l    ($07<<$18)|Obj_0x3D_Retracting_Spring  ; Offset_0x019EA2
                dc.l    ($30<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $043A
                dc.l    ($0A<<$18)|Obj_0x3D_Retracting_Spring  ; Offset_0x019EA2
                dc.l    ($40<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $043A
DOL_0A_End:
;-------------------------------------------------------------------------------
Debug_Sz:                                                      ; Offset_0x04C302
                dc.w    ((DOL_0B_End-DOL_0B)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_0B: ; DOL - Debug Object List
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Rings_Mappings                         ; Offset_0x010DE2
                dc.w    $A6BC
                dc.l    Obj01_Monitors                      ; Offset_0x012F44
                dc.l    ($08<<$18)|Monitors_Mappings           ; Offset_0x0134A2
                dc.w    $04C4
                dc.l    ($01<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $26BC
                dc.l    ($05<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $26BC
                dc.l    Obj_0x07_Springs                       ; Offset_0x01921A
                dc.l    ($81<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04A4
                dc.l    ($03<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($90<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04B4
                dc.l    ($06<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($A0<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04A4
                dc.l    Obj_0x08_Spikes                        ; Offset_0x01A442
                dc.l    Spikes_Mappings                        ; Offset_0x01A88C
                dc.w    $049C
DOL_0B_End:
;-------------------------------------------------------------------------------
Debug_LRz:                                                     ; Offset_0x04C354
                dc.w    ((DOL_0C_End-DOL_0C)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_0C: ; DOL - Debug Object List
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Rings_Mappings                         ; Offset_0x010DE2
                dc.w    $A6BC
                dc.l    Obj01_Monitors                      ; Offset_0x012F44
                dc.l    ($08<<$18)|Monitors_Mappings           ; Offset_0x0134A2
                dc.w    $04C4
                dc.l    ($01<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $26BC
                dc.l    ($05<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $26BC
                dc.l    Obj_0x07_Springs                       ; Offset_0x01921A
                dc.l    ($81<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04A4
                dc.l    ($03<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($90<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04B4
                dc.l    ($06<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($A0<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04A4
                dc.l    Obj_0x08_Spikes                        ; Offset_0x01A442
                dc.l    Spikes_Mappings                        ; Offset_0x01A88C
                dc.w    $049C
DOL_0C_End:
;------------------------------------------------------------------------------- 
; Offset_0x04C3A6: ; Dados n�o linkados na lista de depura��o ; Left over ???
                dc.l    Obj_0x92_LRz_Toxomister                ; Offset_0x04A400
                dc.l    Toxomister_Mappings                    ; Offset_0x10DDAA
                dc.w    $0568
                dc.l    Obj_0x90_LRz_Fireworm                  ; Offset_0x049FB6
                dc.l    Fireworm_Mappings                      ; Offset_0x10E2DC
                dc.w    $0580
                dc.l    Obj_0x91_LRz_Iwamodock                 ; Offset_0x04A29C
                dc.l    Iwamodock_Mappings                     ; Offset_0x10E46E
                dc.w    $0536
;-------------------------------------------------------------------------------
Debug_SSz:                                                     ; Offset_0x04C3C4
                dc.w    ((DOL_0D_End-DOL_0D)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_0D: ; DOL - Debug Object List
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Rings_Mappings                         ; Offset_0x010DE2
                dc.w    $A6BC
                dc.l    Obj01_Monitors                      ; Offset_0x012F44
                dc.l    ($08<<$18)|Monitors_Mappings           ; Offset_0x0134A2
                dc.w    $04C4
                dc.l    ($01<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $26BC
                dc.l    ($05<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $26BC
                dc.l    Obj_0x07_Springs                       ; Offset_0x01921A
                dc.l    ($81<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04A4
                dc.l    ($03<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($90<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04B4
                dc.l    ($06<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($A0<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04A4
                dc.l    Obj_0x08_Spikes                        ; Offset_0x01A442
                dc.l    Spikes_Mappings                        ; Offset_0x01A88C
                dc.w    $049C
DOL_0D_End:
;-------------------------------------------------------------------------------
Debug_DEz:                                                     ; Offset_0x04C416
                dc.w    ((DOL_0E_End-DOL_0E)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_0E: ; DOL - Debug Object List
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Rings_Mappings                         ; Offset_0x010DE2
                dc.w    $A6BC
                dc.l    Obj01_Monitors                      ; Offset_0x012F44
                dc.l    ($08<<$18)|Monitors_Mappings           ; Offset_0x0134A2
                dc.w    $04C4
                dc.l    ($01<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $26BC
                dc.l    ($05<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $26BC
                dc.l    Obj_0x07_Springs                       ; Offset_0x01921A
                dc.l    ($81<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04A4
                dc.l    ($03<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($90<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04B4
                dc.l    ($06<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($A0<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04A4
                dc.l    Obj_0x08_Spikes                        ; Offset_0x01A442
                dc.l    Spikes_Mappings                        ; Offset_0x01A88C
                dc.w    $049C
DOL_0E_End:
;-------------------------------------------------------------------------------
Debug_TDz:                                                     ; Offset_0x04C468
                dc.w    ((DOL_0F_End-DOL_0F)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_0F: ; DOL - Debug Object List
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Rings_Mappings                         ; Offset_0x010DE2
                dc.w    $A6BC
                dc.l    Obj01_Monitors                      ; Offset_0x012F44
                dc.l    ($08<<$18)|Monitors_Mappings           ; Offset_0x0134A2
                dc.w    $04C4
                dc.l    ($01<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $26BC
                dc.l    ($05<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $26BC
                dc.l    Obj_0x07_Springs                       ; Offset_0x01921A
                dc.l    ($81<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04A4
                dc.l    ($03<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($90<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04B4
                dc.l    ($06<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($A0<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04A4
                dc.l    Obj_0x08_Spikes                        ; Offset_0x01A442
                dc.l    Spikes_Mappings                        ; Offset_0x01A88C
                dc.w    $049C
DOL_0F_End:
;-------------------------------------------------------------------------------
Debug_HPz:                                                     ; Offset_0x04C4BA
                dc.w    ((DOL_10_End-DOL_10)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_10: ; DOL - Debug Object List
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Rings_Mappings                         ; Offset_0x010DE2
                dc.w    $A6BC
                dc.l    Obj01_Monitors                      ; Offset_0x012F44
                dc.l    ($08<<$18)|Monitors_Mappings           ; Offset_0x0134A2
                dc.w    $04C4
                dc.l    ($01<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $26BC
                dc.l    ($05<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $26BC
                dc.l    Obj_0x07_Springs                       ; Offset_0x01921A
                dc.l    ($81<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04A4
                dc.l    ($03<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($90<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04B4
                dc.l    ($06<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($A0<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04A4
                dc.l    Obj_0x08_Spikes                        ; Offset_0x01A442
                dc.l    Spikes_Mappings                        ; Offset_0x01A88C
                dc.w    $049C
DOL_10_End:
;-------------------------------------------------------------------------------
Debug_ALz:                                                     ; Offset_0x04C50C
                dc.w    ((DOL_11_End-DOL_11)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_11: ; DOL - Debug Object List
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Rings_Mappings                         ; Offset_0x010DE2
                dc.w    $E3D2
                dc.l    Obj_0x64_Bubble_Container              ; Offset_0x02C8A8
                dc.l    Bubble_Container_Mappings              ; Offset_0x02CFEA
                dc.w    $03C6
                dc.l    ($01<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $63D2
                dc.l    ($05<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $63D2
                dc.l    Obj_0x07_Springs                       ; Offset_0x01921A
                dc.l    ($81<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $0391
                dc.l    ($03<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($90<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $03AD
                dc.l    ($06<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($A0<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $0391
                dc.l    Obj_0x08_Spikes                        ; Offset_0x01A442
                dc.l    Spikes_Mappings_2P                     ; Offset_0x01A99C
                dc.w    $0391
                dc.l    Obj_0x5F_Retracting_Spring             ; Offset_0x019FF6
                dc.l    Springs_Mappings_2P                    ; Offset_0x019DC2
                dc.w    $0391
                dc.l    ($03<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
                dc.l    ($10<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $03AD
                dc.l    ($06<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
                dc.l    ($20<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $0391
                dc.l    ($03<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
                dc.l    ($30<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $03AD
                dc.l    Obj_0x5F_Retracting_Spring             ; Offset_0x019FF6
                dc.l    ($40<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $0391
                dc.l    ($06<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
                dc.l    ($50<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $0391
                dc.l    Obj_0x5F_Retracting_Spring             ; Offset_0x019FF6
                dc.l    ($E0<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $0391
                dc.l    ($06<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
                dc.l    ($F0<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $0391
                dc.l    ($02<<$18)|Obj_0x33_Switch             ; Offset_0x023662
                dc.l    Switch_Mappings_2P                     ; Offset_0x0238BC
                dc.w    $03AD
                dc.l    Obj_0x65_Goal_Marker                   ; Offset_0x02D124
                dc.l    Goal_Marker_Mappings                   ; Offset_0x02D468
                dc.w    $06BC
DOL_11_End:
;-------------------------------------------------------------------------------
Debug_BPz:                                                     ; Offset_0x04C5C2
                dc.w    ((DOL_12_End-DOL_12)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_12: ; DOL - Debug Object List
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Rings_Mappings                         ; Offset_0x010DE2
                dc.w    $E3D2
                dc.l    Obj_0x64_Bubble_Container              ; Offset_0x02C8A8
                dc.l    Bubble_Container_Mappings              ; Offset_0x02CFEA
                dc.w    $03C6
                dc.l    ($01<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $63D2
                dc.l    ($05<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $63D2
                dc.l    Obj_0x07_Springs                       ; Offset_0x01921A
                dc.l    ($81<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $0391
                dc.l    ($03<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($90<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $03AD
                dc.l    ($06<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($A0<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $0391
                dc.l    Obj_0x08_Spikes                        ; Offset_0x01A442
                dc.l    Spikes_Mappings_2P                     ; Offset_0x01A99C
                dc.w    $0391
                dc.l    Obj_0x5F_Retracting_Spring             ; Offset_0x019FF6
                dc.l    Springs_Mappings_2P                    ; Offset_0x019DC2
                dc.w    $0391
                dc.l    ($03<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
                dc.l    ($10<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $03AD
                dc.l    ($06<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
                dc.l    ($20<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $0391
                dc.l    ($03<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
                dc.l    ($30<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $03AD
                dc.l    Obj_0x5F_Retracting_Spring             ; Offset_0x019FF6
                dc.l    ($40<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $0391
                dc.l    ($06<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
                dc.l    ($50<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $0391
                dc.l    Obj_0x5F_Retracting_Spring             ; Offset_0x019FF6
                dc.l    ($E0<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $0391
                dc.l    ($06<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
                dc.l    ($F0<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $0391
                dc.l    ($02<<$18)|Obj_0x33_Switch             ; Offset_0x023662
                dc.l    Switch_Mappings_2P                     ; Offset_0x0238BC
                dc.w    $03AD
                dc.l    Obj_0x4A_Bumper                        ; Offset_0x029188
                dc.l    Bumper_Mappings_2P                     ; Offset_0x0293F4
                dc.w    $2300
                dc.l    Obj_0x60_BPz_Elephant_Block            ; Offset_0x02C13C
                dc.l    Elephant_Block_Mappings                ; Offset_0x02C29E
                dc.w    $0300
                dc.l    Obj_0x61_BPz_Balloon                   ; Offset_0x02C2C4
                dc.l    BPz_Balloon_Mappings                   ; Offset_0x02C3DE
                dc.w    $6300
                dc.l    Obj_0x65_Goal_Marker                   ; Offset_0x02D124
                dc.l    Goal_Marker_Mappings                   ; Offset_0x02D468
                dc.w    $06BC
DOL_12_End:
;-------------------------------------------------------------------------------
Debug_DPz:                                                     ; Offset_0x04C696
                dc.w    ((DOL_13_End-DOL_13)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_13: ; DOL - Debug Object List
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Rings_Mappings                         ; Offset_0x010DE2
                dc.w    $E3D2
                dc.l    Obj_0x64_Bubble_Container              ; Offset_0x02C8A8
                dc.l    Bubble_Container_Mappings              ; Offset_0x02CFEA
                dc.w    $03C6
                dc.l    ($01<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $63D2
                dc.l    ($05<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $63D2
                dc.l    Obj_0x07_Springs                       ; Offset_0x01921A
                dc.l    ($81<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $0391
                dc.l    ($03<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($90<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $03AD
                dc.l    ($06<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($A0<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $0391
                dc.l    Obj_0x08_Spikes                        ; Offset_0x01A442
                dc.l    Spikes_Mappings_2P                     ; Offset_0x01A99C
                dc.w    $0391
                dc.l    Obj_0x5F_Retracting_Spring             ; Offset_0x019FF6
                dc.l    Springs_Mappings_2P                    ; Offset_0x019DC2
                dc.w    $0391
                dc.l    ($03<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
                dc.l    ($10<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $03AD
                dc.l    ($06<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
                dc.l    ($20<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $0391
                dc.l    ($03<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
                dc.l    ($30<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $03AD
                dc.l    Obj_0x5F_Retracting_Spring             ; Offset_0x019FF6
                dc.l    ($40<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $0391
                dc.l    ($06<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
                dc.l    ($50<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $0391
                dc.l    Obj_0x5F_Retracting_Spring             ; Offset_0x019FF6
                dc.l    ($E0<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $0391
                dc.l    ($06<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
                dc.l    ($F0<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $0391
                dc.l    ($02<<$18)|Obj_0x33_Switch             ; Offset_0x023662
                dc.l    Switch_Mappings_2P                     ; Offset_0x0238BC
                dc.w    $03AD
                dc.l    Obj_0x62_DPz_Dissolving_Sand_Bar       ; Offset_0x02C47E
                dc.l    Dissolving_Sand_Bar_Mappings           ; Offset_0x02C5DE
                dc.w    $4280
                dc.l    ($1D<<$18)|Obj_0x62_DPz_Dissolving_Sand_Bar ; Offset_0x02C47E
                dc.l    ($01<<$18)|Dissolving_Sand_Bar_Mappings ; Offset_0x02C5DE
                dc.w    $4280
                dc.l    Obj_0x63_DPz_Button                    ; Offset_0x02C7E6
                dc.l    DPz_Button_Mappings                    ; Offset_0x02C894
                dc.w    $4280
                dc.l    Obj_0x65_Goal_Marker                   ; Offset_0x02D124
                dc.l    Goal_Marker_Mappings                   ; Offset_0x02D468
                dc.w    $06BC
DOL_13_End:
;-------------------------------------------------------------------------------
Debug_CGz:                                                     ; Offset_0x04C76A
                dc.w    ((DOL_14_End-DOL_14)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_14: ; DOL - Debug Object List
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Rings_Mappings                         ; Offset_0x010DE2
                dc.w    $E3D2
                dc.l    Obj_0x64_Bubble_Container              ; Offset_0x02C8A8
                dc.l    Bubble_Container_Mappings              ; Offset_0x02CFEA
                dc.w    $03C6
                dc.l    ($01<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $63D2
                dc.l    ($05<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $63D2
                dc.l    Obj_0x07_Springs                       ; Offset_0x01921A
                dc.l    ($81<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $0391
                dc.l    ($03<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($90<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $03AD
                dc.l    ($06<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($A0<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $0391
                dc.l    Obj_0x08_Spikes                        ; Offset_0x01A442
                dc.l    Spikes_Mappings_2P                     ; Offset_0x01A99C
                dc.w    $0391
                dc.l    Obj_0x5F_Retracting_Spring             ; Offset_0x019FF6
                dc.l    Springs_Mappings_2P                    ; Offset_0x019DC2
                dc.w    $0391
                dc.l    ($03<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
                dc.l    ($10<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $03AD
                dc.l    ($06<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
                dc.l    ($20<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $0391
                dc.l    ($03<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
                dc.l    ($30<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $03AD
                dc.l    Obj_0x5F_Retracting_Spring             ; Offset_0x019FF6
                dc.l    ($40<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $0391
                dc.l    ($06<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
                dc.l    ($50<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $0391
                dc.l    Obj_0x5F_Retracting_Spring             ; Offset_0x019FF6
                dc.l    ($E0<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $0391
                dc.l    ($06<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
                dc.l    ($F0<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $0391
                dc.l    ($02<<$18)|Obj_0x33_Switch             ; Offset_0x023662
                dc.l    Switch_Mappings_2P                     ; Offset_0x0238BC
                dc.w    $03AD
                dc.l    Obj_0x38_Hz_Fan                        ; Offset_0x026408
                dc.l    Fan_Mappings_2P                        ; Offset_0x026A50
                dc.w    $6300
                dc.l    Obj_0x5E_CGz_Blade_Platform            ; Offset_0x02BFBE
                dc.l    Blade_Platform_Mappings                ; Offset_0x02C100
                dc.w    $6300
                dc.l    Obj_0x65_Goal_Marker                   ; Offset_0x02D124
                dc.l    Goal_Marker_Mappings                   ; Offset_0x02D468
                dc.w    $06BC
DOL_14_End:
;-------------------------------------------------------------------------------
Debug_EMz:                                                     ; Offset_0x04C834
                dc.w    ((DOL_15_End-DOL_15)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_15: ; DOL - Debug Object List
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Rings_Mappings                         ; Offset_0x010DE2
                dc.w    $E3D2
                dc.l    Obj_0x64_Bubble_Container              ; Offset_0x02C8A8
                dc.l    Bubble_Container_Mappings              ; Offset_0x02CFEA
                dc.w    $03C6
                dc.l    ($01<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $63D2
                dc.l    ($05<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $63D2
                dc.l    Obj_0x07_Springs                       ; Offset_0x01921A
                dc.l    ($81<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $0391
                dc.l    ($03<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($90<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $03AD
                dc.l    ($06<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($A0<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $0391
                dc.l    Obj_0x08_Spikes                        ; Offset_0x01A442
                dc.l    Spikes_Mappings_2P                     ; Offset_0x01A99C
                dc.w    $0391
                dc.l    Obj_0x5F_Retracting_Spring             ; Offset_0x019FF6
                dc.l    Springs_Mappings_2P                    ; Offset_0x019DC2
                dc.w    $0391
                dc.l    ($03<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
                dc.l    ($10<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $03AD
                dc.l    ($06<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
                dc.l    ($20<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $0391
                dc.l    ($03<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
                dc.l    ($30<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $03AD
                dc.l    Obj_0x5F_Retracting_Spring             ; Offset_0x019FF6
                dc.l    ($40<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $0391
                dc.l    ($06<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
                dc.l    ($50<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $0391
                dc.l    Obj_0x5F_Retracting_Spring             ; Offset_0x019FF6
                dc.l    ($E0<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $0391
                dc.l    ($06<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
                dc.l    ($F0<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
                dc.w    $0391
                dc.l    ($02<<$18)|Obj_0x33_Switch             ; Offset_0x023662
                dc.l    Switch_Mappings_2P                     ; Offset_0x0238BC
                dc.w    $03AD
                dc.l    Obj_0x65_Goal_Marker                   ; Offset_0x02D124
                dc.l    Goal_Marker_Mappings                   ; Offset_0x02D468
                dc.w    $06BC
                dc.l    Obj_0x66_EMz_Dripper                   ; Offset_0x02DF26
                dc.l    Dripper_Mappings                       ; Offset_0x02E080
                dc.w    $6300
                dc.l    ($03<<$18)|Obj_0x66_EMz_Dripper        ; Offset_0x02DF26
                dc.l    Dripper_Mappings                       ; Offset_0x02E080
                dc.w    $C300
                dc.l    Obj_0x05_Rock                          ; Offset_0x0150FC
                dc.l    ($34<<$18)|EMz_Rock_Mappings           ; Offset_0x0157FE
                dc.w    $6300
                dc.l    Obj_0x05_Rock                          ; Offset_0x0150FC
                dc.l    ($33<<$18)|EMz_Rock_Mappings           ; Offset_0x0157FE
                dc.w    $6300
DOL_15_End:
;-------------------------------------------------------------------------------
Debug_Default:                                                 ; Offset_0x04C912
                dc.w    ((DOL_16_End-DOL_16)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_16: ; DOL - Debug Object List
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Rings_Mappings                         ; Offset_0x010DE2
                dc.w    $A6BC
                dc.l    Obj01_Monitors                      ; Offset_0x012F44
                dc.l    ($08<<$18)|Monitors_Mappings           ; Offset_0x0134A2
                dc.w    $04C4
                dc.l    ($01<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $26BC
                dc.l    ($05<<$18)|Obj_0x02_Layer_Switch       ; Offset_0x012AE8
                dc.l    ($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
                dc.w    $26BC
                dc.l    Obj_0x07_Springs                       ; Offset_0x01921A
                dc.l    ($81<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04A4
                dc.l    ($03<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($90<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04B4
                dc.l    ($06<<$18)|Obj_0x07_Springs            ; Offset_0x01921A
                dc.l    ($A0<<$18)|Springs_Mappings            ; Offset_0x019C1A
                dc.w    $04A4
                dc.l    Obj_0x08_Spikes                        ; Offset_0x01A442
                dc.l    Spikes_Mappings                        ; Offset_0x01A88C
                dc.w    $049C
DOL_16_End:
;===============================================================================
; Rotina usada para depurar o jogo       
; <<<-
;===============================================================================   

;===============================================================================
; Lista de objetos das fases       
; ->>>
;=============================================================================== 
Object_List:                                                   ; Offset_0x04C964
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Obj01_Monitors                      ; Offset_0x012F44
                dc.l    Obj_0x02_Layer_Switch                  ; Offset_0x012AE8
                dc.l    Obj_0x03_AIz_Hollow_Tree               ; Offset_0x014E88
                dc.l    Obj_0x04_Collapsing_Platform           ; Offset_0x01582E
                dc.l    Obj_0x05_Rock                          ; Offset_0x0150FC
                dc.l    Obj_0x06_Ride_Vine                     ; Offset_0x017A8E
                dc.l    Obj_0x07_Springs                       ; Offset_0x01921A
                dc.l    Obj_0x08_Spikes                        ; Offset_0x01A442
                dc.l    Obj_0x09_AIz_Tree                      ; Offset_0x013F24
                dc.l    Obj_0x0A_AIz_Zipline_Peg               ; Offset_0x013F66
                dc.l    Obj_0x0B_Sphere_Test                   ; Offset_0x01B338
                dc.l    Obj_0x0C_Swing_Ride_Vine               ; Offset_0x0180FE
                dc.l    Obj_0x0D_Breakable_Wall                ; Offset_0x0170CA
                dc.l    Obj_0x0E_Spiral_Ramp_Attributes        ; Offset_0x01BC3A
                dc.l    Obj_0x0F_Collapsing_Platform           ; Offset_0x01595E
                dc.l    Obj_0x10_LBz_Tube_Elevator             ; Offset_0x020856 ; $10
                dc.l    Obj_0x11_LBz_Platform                  ; Offset_0x01BCFC
                dc.l    Obj_0x12_LBz_Elevator                  ; Offset_0x01C6A0
                dc.l    Obj_0x13_LBz_Exploding_Trigger         ; Offset_0x01C890
                dc.l    Obj_0x14_LBz_Trigger_Bridge            ; Offset_0x01CBA2
                dc.l    Obj_0x15_LBz_Player_Launcher           ; Offset_0x01D050
                dc.l    Obj_0x16_LBz_Flame_Thrower             ; Offset_0x01D312
                dc.l    Obj_0x17_LBz_Hooked_Ride               ; Offset_0x01D4FC
                dc.l    Obj_0x18_LBz_Cup_Elevator              ; Offset_0x01D916 ; $18
                dc.l    Obj_0x19_LBz_Cup_Elevator_Pole         ; Offset_0x01DF10
                dc.l    Obj_0x1A_Unknow_Controled_By_P2        ; Offset_0x01DFCE
                dc.l    Obj_0x1B_LBz_Pipe_Plug                 ; Offset_0x01E2C6
                dc.l    Obj_0x1C_LBz_Unknow                    ; Offset_0x01E6C6
                dc.l    Obj_0x1D_LBz_Platform                  ; Offset_0x01C228
                dc.l    Obj_0x1E_LBz_Spin_Launcher             ; Offset_0x01F5FC
                dc.l    Obj_0x1F_LBz_Hook                      ; Offset_0x01F892 
                dc.l    Obj_0x20_Smashing_Pillar_Spikes        ; Offset_0x01FDB6 ; $20
                dc.l    Obj_0x21_LBz_Gate_Laser                ; Offset_0x01FF28
                dc.l    Obj_0x22_LBz_Buzzer                    ; Offset_0x02005A
                dc.l    Obj_0x23                               ; Offset_0x02010E
                dc.l    Obj_0x24_Automatic_Tunnel              ; Offset_0x0201C6
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Obj_0x26_Auto_Spin                     ; Offset_0x013FA8
                dc.l    Obj_0x27_Lava_Attributes               ; Offset_0x0141F2
                dc.l    Obj_0x28_Invisible_Block               ; Offset_0x0142D4 ; $28
                dc.l    Obj_0x29_AIz_Disappearing_Platform     ; Offset_0x020EE0
                dc.l    Obj_0x2A_Breakable_Floor               ; Offset_0x0211D6
                dc.l    Obj_0x2B_AIz_Flipping_Bridge           ; Offset_0x021B1C
                dc.l    Obj_0x2C_AIz_Collapsing_Bridge         ; Offset_0x021F0C
                dc.l    Obj_0x2D_AIz_Falling_Log               ; Offset_0x0227AC
                dc.l    Obj_0x2E_AIz_Spiked_Rotating_Log       ; Offset_0x022A7E
                dc.l    Obj_0x2F_Still_Sprite                  ; Offset_0x022E38
                dc.l    Obj_0x30_Animated_Still_Sprite         ; Offset_0x0231C0 ; $30
                dc.l    Obj_0x31_LBz_Rotating_Cylinders        ; Offset_0x02350C
                dc.l    Obj_0x32_AIz_Draw_Bridge               ; Offset_0x02235C
                dc.l    Obj_0x33_Switch                        ; Offset_0x023662
                dc.l    Obj_0x34_Star_Post                     ; Offset_0x023F76
                dc.l    Obj_0x35_AIz_Plants                    ; Offset_0x023284
                dc.l    Obj_0x36_Hz_Breakable_Bar              ; Offset_0x0143B2
                dc.l    Obj_0x37_Hz_Vertical_Water_Stream      ; Offset_0x025964
                dc.l    Obj_0x38_Hz_Fan                        ; Offset_0x026408 ; $38
                dc.l    Obj_0x39_Hz_Large_Fan                  ; Offset_0x026736
                dc.l    Obj_0x3A_Hz_Hand_Launcher              ; Offset_0x026A80
                dc.l    Obj_0x3B_Hz_Water_Wall                 ; Offset_0x025C30
                dc.l    Obj_0x3C_Automatic_Door                ; Offset_0x026ED0
                dc.l    Obj_0x3D_Retracting_Spring             ; Offset_0x019EA2
                dc.l    Obj_0x3E_Conveyor_Belt_Attributes      ; Offset_0x0271C4
                dc.l    Obj_0x3F_Hz_Spikes_On_Conveyor_Belt    ; Offset_0x027346 
                dc.l    Obj_0x40_Hz_Block                      ; Offset_0x014AB6 ; $40
                dc.l    Obj_0x41_CNz_Balloon                   ; Offset_0x027552
                dc.l    Obj_0x42_CNz_Cannon                    ; Offset_0x02794E
                dc.l    Obj_0x43_CNz_Platform                  ; Offset_0x027DBA
                dc.l    Obj_0x44_CNz_Trapdoor                  ; Offset_0x027F0E
                dc.l    Obj_0x45_CNz_Light_Bulb                ; Offset_0x027FDA
                dc.l    Obj_0x46_CNz_Fan                       ; Offset_0x02805C
                dc.l    Obj_0x47_CNz_Barrel                    ; Offset_0x028430 
                dc.l    Obj_0x48_CNz_Vacuum_Tubes              ; Offset_0x028278 ; $48
                dc.l    Obj_0x49_CNz_Wheel                     ; Offset_0x028C62
                dc.l    Obj_0x4A_Bumper                        ; Offset_0x029188
                dc.l    Obj_0x4B_Triangular_Springs            ; Offset_0x028D2E
                dc.l    Obj_0x4C_Corkscrew                     ; Offset_0x029408
                dc.l    Obj_0x4D_CNz_Barber_Pole               ; Offset_0x0296A0
                dc.l    Obj_0x4E_CNz_Rotating_Mesh             ; Offset_0x029B5E
                dc.l    Obj_0x4F_Mud_Quicksand_Attributes      ; Offset_0x028E12 
                dc.l    Obj_0x50_MGz_Vertical_Pole             ; Offset_0x029F86 ; $50
                dc.l    Obj_0x51_Floating_Platform             ; Offset_0x01C3C2
                dc.l    Obj_0x20_Smashing_Pillar_Spikes        ; Offset_0x01FDB6
                dc.l    Obj_0x53_MGz_Swinging_Platform         ; Offset_0x02A224
                dc.l    Obj_0x54_Oxygen_Bubbles                ; Offset_0x025500
                dc.l    Obj_0x55_MGz_Head_Trigger              ; Offset_0x02A5BC
                dc.l    Obj_0x56_MGz_Moving_Spike_Platform     ; Offset_0x02AA8A
                dc.l    Obj_0x57_MGz_Trigger_Platform          ; Offset_0x02A884 
                dc.l    Obj_0x58_MGz_Swinging_Spiked_Ball      ; Offset_0x02A390 ; $58
                dc.l    Obj_0x59_MGz_Dash_Trigger              ; Offset_0x01C930
                dc.l    Obj_0x5A_MGz_Pulley                    ; Offset_0x02ACD8
                dc.l    Obj_0x5B_MGz_Blue_Spinning_Platform    ; Offset_0x02B19A
                dc.l    Obj_0x5C_MGz_Blue_Platform_Launcher    ; Offset_0x02BED2
                dc.l    Obj_0x5D_CGz_Triangular_Springs        ; Offset_0x029004
                dc.l    Obj_0x5E_CGz_Blade_Platform            ; Offset_0x02BFBE
                dc.l    Obj_0x5F_Retracting_Spring             ; Offset_0x019FF6 
                dc.l    Obj_0x60_BPz_Elephant_Block            ; Offset_0x02C13C ; $60 
                dc.l    Obj_0x61_BPz_Balloon                   ; Offset_0x02C2C4
                dc.l    Obj_0x62_DPz_Dissolving_Sand_Bar       ; Offset_0x02C47E
                dc.l    Obj_0x63_DPz_Button                    ; Offset_0x02C7E6
                dc.l    Obj_0x64_Bubble_Container              ; Offset_0x02C8A8
                dc.l    Obj_0x65_Goal_Marker                   ; Offset_0x02D124
                dc.l    Obj_0x66_EMz_Dripper                   ; Offset_0x02DF26
                dc.l    Obj_0x67_Hz_Snake_Platform             ; Offset_0x01C532 
                dc.l    Obj_0x68_Hz_Spinning_Column            ; Offset_0x0289B8 ; $68
                dc.l    Obj_0x69_Hz_Curved_Twisting_Pipe       ; Offset_0x02EEEA
                dc.l    Obj_0x6A_Hz_Horizontal_Spikes          ; Offset_0x014B5A
                dc.l    Obj_0x6B_Hz_Vertical_Spikes            ; Offset_0x014CE8
                dc.l    Obj_0x6C_Bridge                        ; Offset_0x02E504
                dc.l    Obj_0x6D_Hz_Water_Splash               ; Offset_0x02E22E
                dc.l    Obj_0x6E_Hz_Waterfall                  ; Offset_0x02E0A8
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Obj_0x00_Rings                         ; Offset_0x0109A4
                dc.l    Obj_0x80_AIz_Fire_Breath               ; Offset_0x0365AA
                dc.l    Obj_0x81_AIz_Bloominator               ; Offset_0x043B3E
                dc.l    Obj_0x82_AIz_Rhinobot                  ; Offset_0x043C2A
                dc.l    Obj_0x83_AIz_Monkey_Dude               ; Offset_0x043F1C
                dc.l	Obj84_HeyHo
                dc.l    Obj_0x85_LBz_Twin_Hammer               ; Offset_0x03EC12
                dc.l    Obj_0x86_LBz_Beam_Rocket               ; Offset_0x03F11A
                dc.l    Obj_0x87_LBz_Snale_Blaster             ; Offset_0x048436 
                dc.l    Obj_0x88_LBz_Ribot                     ; Offset_0x048756 ; $88 
                dc.l    Obj_0x89_LBz_Orbinaut                  ; Offset_0x048A94
                dc.l    Obj_0x8A_LBz_Corkey                    ; Offset_0x048BCE
                dc.l    Obj_0x8B_LBz_Flybot_767                ; Offset_0x048DF8
                dc.l    Obj_0x8C_LBz_Ball_Shooter              ; Offset_0x03FE88
                dc.l    Obj_0x8D_CNz_Graviton_Mobile           ; Offset_0x03B9A0
                dc.l    Obj_0x8E_CNz_Bowling_Spin              ; Offset_0x03B01A
                dc.l    Obj_0x8F_FBz_Gapsule                   ; Offset_0x03C27C 
                dc.l    Obj_0x90_LRz_Fireworm                  ; Offset_0x049FB6 ; $90
                dc.l    Obj_0x91_LRz_Iwamodock                 ; Offset_0x04A29C
                dc.l    Obj_0x92_LRz_Toxomister                ; Offset_0x04A400
                dc.l    Obj_0x93_MVz_Madmole                   ; Offset_0x0495CC
                dc.l    Obj_0x94_MVz_Mushmeanie                ; Offset_0x0499BC
                dc.l    Obj_0x95_MVz_Dragonfly                 ; Offset_0x049B24
                dc.l    Obj_0x96_MVz_Butterdroid               ; Offset_0x049DCA
                dc.l    Obj_0x97_MVz_Cluckoid                  ; Offset_0x049E50
                dc.l    Obj_0x98_Sz_Guardian                   ; Offset_0x04107E ; $98
                dc.l    Obj_0x99_Hz_Jawz                       ; Offset_0x04465C
                dc.l    Obj_0x9A_Hz_Blastoid                   ; Offset_0x0446D0
                dc.l    Obj_0x9B_Hz_Buggernaut                 ; Offset_0x0447A6
                dc.l    Obj_0x9C_Hz_Turbo_Spiker               ; Offset_0x044946
                dc.l    Obj_0x9D_Hz_Mega_Chopper               ; Offset_0x044CC8
                dc.l    Obj_0x9E_Hz_Pointdexter                ; Offset_0x044F90
                dc.l    Obj_0x9F_AIz_Catakiller_Jr             ; Offset_0x044490 ; $9F
                dc.l    Obj_0xA0_CNz_Clamer                    ; Offset_0x045C7A
                dc.l    Obj_0xA1_CNz_Sparkle                   ; Offset_0x045E4A
                dc.l    Obj_0xA2_CNz_Batbot                    ; Offset_0x046004
                dc.l    Obj_0xA3_MGz_Bubbles                   ; Offset_0x04504A
                dc.l    Obj_0xA4_MGz_Tunnelbot                 ; Offset_0x04515C
                dc.l    Obj_0xA5_MGz_Spiker                    ; Offset_0x045864
                dc.l    Obj_0xA6_MGz_Mantis                    ; Offset_0x045B26
                dc.l    Obj_0xA7_FBz_Blaster                   ; Offset_0x04611C
                dc.l    Obj_0xA8_FBz_Techno_Squeek             ; Offset_0x046392 ; $A8
                dc.l    Obj_0xA9_AIz_Flame_Mobile              ; Offset_0x0371FA
                dc.l    Obj_0xAA_Iz_Penguinator                ; Offset_0x047F8A
                dc.l    Obj_0xAB_Iz_Star_Pointer               ; Offset_0x0482D2
                dc.l    Obj_0xAC_AIz_Fire_Breath               ; Offset_0x036AB4
                dc.l    Obj_0xAD_Hz_Big_Shaker                 ; Offset_0x037E2C
                dc.l    Obj_0xAE_LBz_Robotnik                  ; Offset_0x048FAC
                dc.l    Obj_0xAF_MGz_Drill_Mobile              ; Offset_0x039920
                dc.l    Obj_0xB0_MGz_Drill_Mobile              ; Offset_0x039C7E ; $B0
                dc.l    Obj_0xB1_MGz_Drill_Mobile              ; Offset_0x039F9E
                dc.l    Obj_0xB2_Iz_Freezer_Mobile             ; Offset_0x03E48C
                dc.l    Obj_0xB3_Iz_Big_Icedus                 ; Offset_0x03DCB0
                dc.l    Obj_0xB4_FBz_Hang_Mobile               ; Offset_0x03D4DE
                dc.l    Obj_0xB5_Hz_Screw_Mobile               ; Offset_0x038B14
                dc.l    Obj_0xB6_Barrier_Eggman                ; Offset_0x03CE96
                dc.l    Obj_0xB7_LBz_Egg_Mobile                ; Offset_0x0493CC
                dc.l    Obj_0xB8_Iz_Crushing_Column            ; Offset_0x046B0E ; $B8
                dc.l    Obj_0xB9_Iz_Platform                   ; Offset_0x04663E
                dc.l    Obj_0xBA_Iz_Breakable_Wall             ; Offset_0x04694C
                dc.l    Obj_0xBB_Iz_Freezer                    ; Offset_0x046CF2
                dc.l    Obj_0xBC_Iz_Segmented_Column           ; Offset_0x04719E
                dc.l    Obj_0xBD_Iz_Swinging_Platform          ; Offset_0x047336
                dc.l    Obj_0xBE_Iz_Stalactite                 ; Offset_0x0477C6
                dc.l    Obj_0xBF_Iz_Ice_Cube                   ; Offset_0x04798A
                dc.l    Obj_0xC0_Iz_Ice_Spikes                 ; Offset_0x0478D2 ; $C0
                dc.l    Obj_0xC1_Iz_Ice_Spiked_Ball            ; Offset_0x047AD0
                dc.l    Obj_0xC2_Iz_Snow_Pile                  ; Offset_0x047B4E
                dc.l    Obj_0xC3_Iz_Trampoline                 ; Offset_0x047D46
                dc.l    Obj_0xC4_MGz_Tunnelbot                 ; Offset_0x045262
                dc.l	ObjC5_HiddenMonitor
                dc.l    Obj_0xC6_Egg_Prison                    ; Offset_0x043490
                dc.l    Obj_0xC7_Knuckles                      ; Offset_0x034BAA
                dc.l    Obj_0xC8_Iz_Trampoline_Support         ; Offset_0x046A00 ; $C8
                dc.l    Obj_0xC9_Knuckles_Switch               ; Offset_0x035484
                dc.l	ObjCA_AIZPlaneIntro
                
                
;-------------------------------------------------------------------------------
; Left over - Parte de ponteiros de objetos de uma compila��o anterior
; ->>>
;-------------------------------------------------------------------------------
Offset_0x04CC90:
                dc.w    ((Obj_0xAB_Iz_Star_Pointer+$7E)&$FFFF) ; Offset_0x048350
                dc.l    (Obj_0xAC_AIz_Fire_Breath+$7E)         ; Offset_0x036B32
                dc.l    (Obj_0xAD_Hz_Big_Shaker+$7E)           ; Offset_0x037EAA
                dc.l    (Obj_0xAE_LBz_Robotnik+$7E)            ; Offset_0x04902A
                dc.l    (Obj_0xAF_MGz_Drill_Mobile+$7E)        ; Offset_0x03999E
                dc.l    (Obj_0xB0_MGz_Drill_Mobile+$7E)        ; Offset_0x039CFC
                dc.l    (Obj_0xB1_MGz_Drill_Mobile+$7E)        ; Offset_0x03A01C
                dc.l    (Obj_0xB2_Iz_Freezer_Mobile+$7E)       ; Offset_0x03E50A
                dc.l    (Obj_0xB3_Iz_Big_Icedus+$7E)           ; Offset_0x03DD2E
                dc.l    (Obj_0xB4_FBz_Hang_Mobile+$7E)         ; Offset_0x03D55C
                dc.l    (Obj_0xB5_Hz_Screw_Mobile+$7E)         ; Offset_0x038B92
                dc.l    (Obj_0xB6_Barrier_Eggman+$7E)          ; Offset_0x03CF14
                dc.l    (Obj_0xB7_LBz_Egg_Mobile+$7E)          ; Offset_0x04944A
                dc.l    (Obj_0xB8_Iz_Crushing_Column+$7E)      ; Offset_0x046B8C
                dc.l    (Obj_0xB9_Iz_Platform+$7E)             ; Offset_0x0466BC
                dc.l    (Obj_0xBA_Iz_Breakable_Wall+$7E)       ; Offset_0x0469CA
                dc.l    (Obj_0xBB_Iz_Freezer+$7E)              ; Offset_0x046D70
                dc.l    (Obj_0xBC_Iz_Segmented_Column+$7E)     ; Offset_0x04721C
                dc.l    (Obj_0xBD_Iz_Swinging_Platform+$7E)    ; Offset_0x0473B4
                dc.l    (Obj_0xBE_Iz_Stalactite+$7E)           ; Offset_0x047844
                dc.l    (Obj_0xBF_Iz_Ice_Cube+$7E)             ; Offset_0x047A08
                dc.l    (Obj_0xC0_Iz_Ice_Spikes+$7E)           ; Offset_0x047950
                dc.l    (Obj_0xC1_Iz_Ice_Spiked_Ball+$7E)      ; Offset_0x047B4E
                dc.l    (Obj_0xC2_Iz_Snow_Pile+$7E)            ; Offset_0x047BCC
                dc.l    (Obj_0xC3_Iz_Trampoline+$7E)           ; Offset_0x047DC4
                dc.l    (Obj_0xC4_MGz_Tunnelbot+$7E)           ; Offset_0x0452E0
                dc.l	ObjC5_HiddenMonitor+$7E
                dc.l    (Obj_0xC6_Egg_Prison+$7E)              ; Offset_0x04350E
                dc.l    (Obj_0xC7_Knuckles+$7E)                ; Offset_0x034C28
                dc.l    (Obj_0xC8_Iz_Trampoline_Support+$7E)   ; Offset_0x046A7E
                dc.l    (Obj_0xC9_Knuckles_Switch+$7E)         ; Offset_0x035502
                dc.l	ObjCA_AIZPlaneIntro+$7E
;-------------------------------------------------------------------------------                
Offset_0x04CD0E:
                dc.w    ((Obj_0xC8_Iz_Trampoline_Support+$88)&$FFFF) ; Offset_0x046A88
                dc.l    (Obj_0xC9_Knuckles_Switch+$88)         ; Offset_0x03550C
                dc.l    (ObjCA_AIZPlaneIntro+$88)   ; Offset_0x035B5A                
;-------------------------------------------------------------------------------
; Left over - Parte de ponteiros de objetos de uma compila��o anterior
; <<<-
;-------------------------------------------------------------------------------
Offset_0x04CD18:  
                incbin  'data\unknown\dummy.dat'
;===============================================================================
; Lista de objetos das fases       
; <<<-
;===============================================================================                
Art_Sonic:                                                     ; Offset_0x050000
                incbin  'data\art\sonic.dat'
Art_Miles:                                                     ; Offset_0x0676A0
                incbin  'data\art\miles.dat'
Art_Knuckles:                                                  ; Offset_0x072F60
                incbin  'data\art\knuckles.dat'
Art_Sonic_Surfboard:                                           ; Offset_0x075200    
                incbin  'data\art\sonicsrf.dat'
Art_Sonic_2P:                                                  ; Offset_0x077560                 
                incbin  'data\art\sonic_2p.dat'
Art_Miles_2P:                                                  ; Offset_0x07A620   
                incbin  'data\art\miles_2p.dat'
Art_Miles_Tails_2P:                                            ; Offset_0x07D3C0                
                incbin  'data\art\milest_2p.dat'
Art_Knuckles_2P:                                               ; Offset_0x07D960                
                incbin  'data\art\kte_2p.dat'
Art_Invincibility: ; N�o usado - Left Over ???                 ; Offset_0x080DE0
                incbin  'data\art\invcblty.dat'
Art_Dust_Water_Splash:                                         ; Offset_0x081220
                incbin  'data\art\dustwtrs.dat'
Art_Fire_Shield:                                               ; Offset_0x082B80
                incbin  'data\art\f_shield.dat'
Art_Lightning_Shield:                                          ; Offset_0x083E40
                incbin  'data\art\l_shield.dat'        
Art_Water_Shield:                                              ; Offset_0x084E80
                incbin  'data\art\w_shield.dat'
Art_Dust_2P:                                                   ; Offset_0x0858E0
                incbin  'data\art\dust_2p.nem'
                dc.w    $0000 
Art_CNz_Cannon:                                                ; Offset_0x0859A0
                incbin  'data\cnz\cannon.dat'
Art_Angel_Island_Stalk:                                        ; Offset_0x0864C0   
                incbin  'data\aiz\stalk.dat'                                    
Art_Angel_Island_Stalk_with_Fruits:                            ; Offset_0x086DC0
                incbin  'data\aiz\stkfruit.dat' 
Art_Angel_Island_Stalk_2:                                      ; Offset_0x087180
                incbin  'data\aiz\stalk_2.dat'  
Art_Angel_Island_Leaves_Burning:                               ; Offset_0x087A80
                incbin  'data\aiz\leavesbn.dat' 
Art_Angel_Island_Burning_Background:                           ; Offset_0x088600
                incbin  'data\aiz\brngbg.dat'
Art_Angel_Island_Leaves_Burning_Background:                    ; Offset_0x089200  
                incbin  'data\aiz\leavesb2.dat'
Art_Angel_Island_Leaves:                                       ; Offset_0x089400
                incbin  'data\aiz\leaves.dat'   
Art_Hydrocity_Conveyor_Belt:                                   ; Offset_0x089860
                incbin  'data\hz\convbelt.dat'               
Art_Hydrocity_Water_Surface:                                   ; Offset_0x08A5E0   
                incbin  'data\hz\wtrsurfc.dat'   
Art_Hydrocity_Background:                                      ; Offset_0x08A9E0
                incbin  'data\hz\backgnd.dat' 
Art_Hydrocity_Water_Surface_2:                                 ; Offset_0x08ADE0   
                incbin  'data\hz\wtrsurf2.dat'   
Art_Hydrocity_Background_2:                                    ; Offset_0x08B1E0
                incbin  'data\hz\backgnd2.dat' 
Art_Hydrocity_Waterfall:                                       ; Offset_0x08B5E0
                incbin  'data\hz\waterfll.dat'                       
Art_Hydrocity_Background_3:                                    ; Offset_0x08C060
                incbin  'data\hz\backgnd3.dat'  
Art_Hydrocity_Background_4:                                    ; Offset_0x08C460
                incbin  'data\hz\backgnd4.dat' 
Art_Hydrocity_Background_5:                                    ; Offset_0x08CC60 
                incbin  'data\hz\backgnd5.dat' 
Art_Hydrocity_Background_6:                                    ; Offset_0x08DC60
                incbin  'data\hz\backgnd6.dat'                 
Art_Marble_Garden_Mud:                                         ; Offset_0x090C60
                incbin  'data\mgz\mud.dat'
Art_Marble_Garden_Fruits:                                      ; Offset_0x093060
                incbin  'data\mgz\fruits.dat'
Art_Carnival_Night_Diagonal_Barber_Pole:                       ; Offset_0x0930C0
                incbin  'data\cnz\barbpole.dat'
Art_Carnival_Night_Diagonal_Barber_Pole_2:                     ; Offset_0x0942C0
                incbin  'data\cnz\barbpol2.dat'  
Art_Carnival_Night_Vacuum_Tubes:                               ; Offset_0x0962C0
                incbin  'data\cnz\v_tubes.dat' 
Art_Carnival_Night_Rotating_Mesh:                              ; Offset_0x0982C0
                incbin  'data\cnz\rot_mesh.dat' 
Art_Carnival_Night_Fan_Lights:                                 ; Offset_0x0992C0
                incbin  'data\cnz\fanlight.dat' 
Art_Carnival_Night_Background:                                 ; Offset_0x099440
                incbin  'data\cnz\backgnd.dat'  
Art_Carnival_Night_Wheel:                                      ; Offset_0x09B440
                incbin  'data\cnz\wheel.dat'  
Art_Iz_Background:                                             ; Offset_0x09BE40
                incbin  'data\iz\backgnd.dat' 
Art_Iz_Background_2:                                           ; Offset_0x09CE40
                incbin  'data\iz\backgnd2.dat' 
Art_Iz_Background_3:                                           ; Offset_0x09D040
                incbin  'data\iz\backgnd3.dat' 
Art_Iz_Background_4:                                           ; Offset_0x09D140
                incbin  'data\iz\backgnd4.dat'
Art_Iz_Background_5:                                           ; Offset_0x09D1C0
                incbin  'data\iz\backgnd5.dat'
Art_Iz_Crystal:                                                ; Offset_0x09D200 
                incbin  'data\iz\crystal.dat' 
Art_LBz_Foreground_Buzzer:                                     ; Offset_0x09D600
                incbin  'data\lbz\buzzer.dat'
Art_LBz_Background_Mountains:                                  ; Offset_0x09DB00
                incbin  'data\lbz\mountain.dat'   
Art_LBz_Ocean:                                                 ; Offset_0x09EF00 
                incbin  'data\lbz\ocean.dat'     
Art_LBz_Background_Bricks:                                     ; Offset_0x09F000
                incbin  'data\lbz\bgbricks.dat'                                          
Art_LBz_Water_Surface:                                         ; Offset_0x09F400
                incbin  'data\lbz\watersrf.dat'
Art_LBz_Background_Above_Water:                                ; Offset_0x09F600  
                incbin  'data\lbz\backgnd.dat' 
Art_LBz_Water_Surface_Above:                                   ; Offset_0x09F800
                incbin  'data\lbz\watersf2.dat'    
Art_LBz_Background_Under_Water:                                ; Offset_0x09FA00
                incbin  'data\lbz\backgnd2.dat'          
Art_LBz_Foreground_Cylinder:                                   ; Offset_0x09FC00
                incbin  'data\lbz\cylinder.dat'    
Art_LBz_Foreground_Lights:                                     ; Offset_0x0A1C00
                incbin  'data\lbz\lights.dat' 
Art_LBz_Foreground_Pistons:                                    ; Offset_0x0A1E80
                incbin  'data\lbz\pistons.dat' 
Art_LRz_Background:                                            ; Offset_0x0A2180
                incbin  'data\lrz\backgnd.dat' 
Art_LRz_Background_Lava:                                       ; Offset_0x0A4580
                incbin  'data\lrz\backgnd2.dat' 
Art_ALz_Quicksand:                                             ; Offset_0x0A4D80
                incbin  'data\alz\quicksnd.dat'                      
Art_BPz_Foreground_Flags:                                      ; Offset_0x0A5380
                incbin  'data\bpz\fg_flags.dat'
Art_BPz_Cylinder:                                              ; Offset_0x0A58C0
                incbin  'data\bpz\cylinder.dat'
Art_BPz_Background_People:                                     ; Offset_0x0A5DC0
                incbin  'data\bpz\people.dat'
Art_BPz_Background_Flags:                                      ; Offset_0x0A5E80
                incbin  'data\bpz\bg_flags.dat'
Art_DPz_Quicksand:                                             ; Offset_0x0A5EC0
                incbin  'data\dpz\quicksnd.dat'
Art_DPz_Background_Sand_Dunes:                                 ; Offset_0x0A6640           
                incbin  'data\dpz\sanddune.dat'                                         
Art_Oxygen_Numbers:                                            ; Offset_0x0A8640
                incbin  'data\art\oxygnumb.dat' 
Art_Menu_Sonic_Miles:                                          ; Offset_0x0A8DC0
                incbin  'data\menus\soncmils.dat'
Offset_0x0A92C0:                
                incbin  'data\unknown\dummy2.dat'
;-------------------------------------------------------------------------------                
Asm_Code_1:                                                    ; Offset_0x0AFF0F                
                dc.b    'WhichMessage', $0D, $0A
                dc.b    '                Bra     @DoneInput', $0D, $0A, $0D, $0A
                dc.b    '@InComingHail:', $0D, $0A
                dc.b    '                Move.w  #3,WhichMessage', $0D, $0A
                dc.b    '                Bra     @DoneInput', $0D, $0A, $0D, $0A
                dc.b    '@ImpulseDamaged:', $0D, $0A
                dc.b    '                Move.w  #4,WhichMessage', $0D, $0A
                dc.b    '                Bra     @DoneInput', $0D
;-------------------------------------------------------------------------------                 
Music_01_Ptr equ (Angel_Island_1_Snd_Data&$FFFF)|$8000  
Music_02_Ptr equ (Angel_Island_2_Snd_Data&$FFFF)|$8000  
Music_03_Ptr equ (Hydrocity_1_Snd_Data&$FFFF)|$8000 
Music_04_Ptr equ (Hydrocity_2_Snd_Data&$FFFF)|$8000 
Music_05_Ptr equ (Marble_Garden_1_Snd_Data&$FFFF)|$8000 
Music_06_Ptr equ (Marble_Garden_2_Snd_Data&$FFFF)|$8000
Music_07_Ptr equ (Carnival_Night_1_Snd_Data&$FFFF)|$8000
Music_08_Ptr equ (Carnival_Night_2_Snd_Data&$FFFF)|$8000
Music_09_Ptr equ (Flying_Battery_1_Snd_Data&$FFFF)|$8000
Music_0A_Ptr equ (Flying_Battery_2_Snd_Data&$FFFF)|$8000
Music_0B_Ptr equ (Icecap_1_Snd_Data&$FFFF)|$8000
Music_0C_Ptr equ (Icecap_2_Snd_Data&$FFFF)|$8000
Music_0D_Ptr equ (Launch_Base_1_Snd_Data&$FFFF)|$8000
Music_0E_Ptr equ (Launch_Base_2_Snd_Data&$FFFF)|$8000
Music_0F_Ptr equ (Mushroom_Valley_1_Snd_Data&$FFFF)|$8000
Music_10_Ptr equ (Mushroom_Valley_2_Snd_Data&$FFFF)|$8000
Music_11_Ptr equ (Sandopolis_1_Snd_Data&$FFFF)|$8000
Music_12_Ptr equ (Sandopolis_2_Snd_Data&$FFFF)|$8000
Music_13_Ptr equ (Lava_Reef_1_Snd_Data&$FFFF)|$8000
Music_14_Ptr equ (Lava_Reef_2_Snd_Data&$FFFF)|$8000
Music_15_Ptr equ (Sky_Sanctuary_Snd_Data&$FFFF)|$8000
Music_16_Ptr equ (Death_Egg_1_Snd_Data&$FFFF)|$8000
Music_17_Ptr equ (Death_Egg_2_Snd_Data&$FFFF)|$8000
Music_18_Ptr equ (Mini_Boss_Snd_Data&$FFFF)|$8000
Music_19_Ptr equ (Boss_Snd_Data&$FFFF)|$8000
Music_1A_Ptr equ (The_Doomsday_Snd_Data&$FFFF)|$8000
Music_1B_Ptr equ (Glowing_Spheres_Bonus_Stage_Snd_Data&$FFFF)|$8000
Music_1C_Ptr equ (Special_Stage_Snd_Data&$FFFF)|$8000
Music_1D_Ptr equ (Slot_Machine_Bonus_Stage_Snd_Data&$FFFF)|$8000
Music_1E_Ptr equ (Gumball_Machine_Bonus_Stage_Snd_Data&$FFFF)|$8000
Music_1F_Ptr equ (Knuckles_Theme_Snd_Data&$FFFF)|$8000
Music_20_Ptr equ (Azure_Lake_Snd_Data&$FFFF)|$8000
Music_21_Ptr equ (Balloon_Park_Snd_Data&$FFFF)|$8000
Music_22_Ptr equ (Desert_Palace_Snd_Data&$FFFF)|$8000
Music_23_Ptr equ (Chrome_Gadget_Snd_Data&$FFFF)|$8000
Music_24_Ptr equ (Endless_Mine_Snd_Data&$FFFF)|$8000
Music_25_Ptr equ (Title_Screen_Snd_Data&$FFFF)|$8000
Music_26_Ptr equ (Credits_Snd_Data&$FFFF)|$8000
Music_27_Ptr equ (Time_Game_Over_Snd_Data&$FFFF)|$8000
Music_28_Ptr equ (Continue_Snd_Data&$FFFF)|$8000
Music_29_Ptr equ (Level_Results_Snd_Data&$FFFF)|$8000
Music_2A_Ptr equ (Extra_Life_Snd_Data&$FFFF)|$8000
Music_2B_Ptr equ (Got_Emerald_Snd_Data&$FFFF)|$8000
Music_2C_Ptr equ (Invincibility_Snd_Data&$FFFF)|$8000
Music_2D_Ptr equ (Competition_Menu_Snd_Data&$FFFF)|$8000
Music_2E_Ptr equ (Super_Sonic_Theme_Snd_Data&$FFFF)|$8000
Music_2F_Ptr equ (Data_Select_Menu_Snd_Data&$FFFF)|$8000
Music_30_Ptr equ (Final_Boss_Snd_Data&$FFFF)|$8000
Music_31_Ptr equ (Panic_Snd_Data&$FFFF)|$8000
                
; Z80 Bank $16
                align   $8000
Angel_Island_1_Snd_Data:                                       ; Offset_0x0B0000
                incbin  'data\sounds\aiz_1.snd'
Angel_Island_2_Snd_Data:                                       ; Offset_0x0B2210
                incbin  'data\sounds\aiz_2.snd'
Hydrocity_1_Snd_Data:                                          ; Offset_0x0B3F24
                incbin  'data\sounds\hz_1.snd'                
Hydrocity_2_Snd_Data:                                          ; Offset_0x0B5492
                incbin  'data\sounds\hz_2.snd'
Marble_Garden_1_Snd_Data:                                      ; Offset_0x0B6E51
                incbin  'data\sounds\mgz_1.snd'  
Marble_Garden_2_Snd_Data:                                      ; Offset_0x0B7468
                incbin  'data\sounds\mgz_2.snd'
; Z80 Bank $17    
                align   $8000
Carnival_Night_1_Snd_Data:                                     ; Offset_0x0B8000
                incbin  'data\sounds\cnz_1.snd'
Carnival_Night_2_Snd_Data:                                     ; Offset_0x0B9BBB
                incbin  'data\sounds\cnz_2.snd'                                                             
Flying_Battery_1_Snd_Data:                                     ; Offset_0x0BB99E
                incbin  'data\sounds\fbz_1.snd' 
Flying_Battery_2_Snd_Data:                                     ; Offset_0x0BBF36
                incbin  'data\sounds\fbz_2.snd'                                               
Icecap_1_Snd_Data:                                             ; Offset_0x0BC499
                incbin  'data\sounds\iz_1.snd'
Icecap_2_Snd_Data:                                             ; Offset_0x0BCA37
                incbin  'data\sounds\iz_2.snd'   
Launch_Base_1_Snd_Data:                                        ; Offset_0x0BD04B
                incbin  'data\sounds\lbz_1.snd'   
;-------------------------------------------------------------------------------
Asm_Code_2:                                                    ; Offset_0x0BFBA4
                dc.b    ' the screen.', $0D, $0A, $0D, $0A   
                dc.b    'DMAScrollArrows:', $0D, $0A  
                dc.b    '                Subq.w  #1,ArrowDelay                           ; Determine if arrow buffers or blanks should', $0D, $0A  
                dc.b    "                Bne.s   @NoTogg                                 ;  be DMA'ed this makes the arrows flash.", $0D, $0A, $0D, $0A                                                                                                                                          
                dc.b    '                Move.w  #15,ArrowDelay                          ; Reset delay between flashes.', $0D, $0A  
                dc.b    '                Eor.w   #1,ArrowToggle                          ; Toggle between blanks and arrows.', $0D, $0A, $0D, $0A
                dc.b    '@NoTogg:', $0D, $0A  
                dc.b    '                Tst.w   ArrowToggle                             ; Branch to relevent bit.', $0D, $0A  
                dc.b    '                Beq.s   @ArrowsOff', $0D, $0A, $0D, $0A 
                dc.b    '; ====== Arrows on, DMA the buffers. ======', $0D, $0A, $0D, $0A   
                dc.b    '                Lea     UpArrowBuffer,A0                        ; Source.', $0D, $0A  
                dc.b    '                Lea     ScrollBBase+(27*2)+(21*64),A1           ; Destination.', $0D, $0A  
                dc.b    '                Move.w  #1,D0                                   ; Number of words.', $0D, $0A  
                dc.b    '                Move.l  #VDP_VRAMWrite,D1                       ; Set to write to VRAM.   ', $0D, $0A     
                dc.b    '                Moveq   #2,D2                                   ; Auto increment.        ', $0D, $0A          
                dc.b    '                Jsr     PushDMA                                 ; Move characters to VRAM.', $0D, $0A, $0D, $0A
                dc.b    '                Lea     DownArrowBuffer,A0                      ; Source.', $0D, $0A  
                dc.b    '                Lea     ScrollBBase+(27*2)+(26*64),A1           ; Destination.', $0D, $0A  
                dc.b    '                Move.w  #1,D0                 '  
;-------------------------------------------------------------------------------                
; Z80 Bank $18
                align   $8000
Launch_Base_2_Snd_Data:                                        ; Offset_0x0C0000
                incbin  'data\sounds\lbz_2.snd'                                              
Mushroom_Valley_1_Snd_Data:                                    ; Offset_0x0C252A
                incbin  'data\sounds\mvz_1.snd' 
Mushroom_Valley_2_Snd_Data:                                    ; Offset_0x0C2A9C
                incbin  'data\sounds\mvz_2.snd' 
Sandopolis_1_Snd_Data:                                         ; Offset_0x0C3005
                incbin  'data\sounds\sz_1.snd' 
Sandopolis_2_Snd_Data:                                         ; Offset_0x0C366F
                incbin  'data\sounds\sz_2.snd' 
Lava_Reef_1_Snd_Data:                                          ; Offset_0x0C3C62
                incbin  'data\sounds\lrz_1.snd' 
Lava_Reef_2_Snd_Data:                                          ; Offset_0x0C504F
                incbin  'data\sounds\lrz_2.snd' 
Sky_Sanctuary_Snd_Data:                                        ; Offset_0x0C6642
                incbin  'data\sounds\ssz.snd' 
Death_Egg_1_Snd_Data:                                          ; Offset_0x0C7954
                incbin  'data\sounds\dez_1.snd' 
; Z80 Bank $19  
                align   $8000
Death_Egg_2_Snd_Data:                                          ; Offset_0x0C8000
                incbin  'data\sounds\dez_2.snd'
Mini_Boss_Snd_Data:                                            ; Offset_0x0C8412
                incbin  'data\sounds\miniboss.snd'
Boss_Snd_Data:                                                 ; Offset_0x0C8742
                incbin  'data\sounds\boss.snd'
The_Doomsday_Snd_Data:                                         ; Offset_0x0C8C3E
                incbin  'data\sounds\tdz.snd'
Glowing_Spheres_Bonus_Stage_Snd_Data:                          ; Offset_0x0C9521
                incbin  'data\sounds\gs_bs.snd'
Special_Stage_Snd_Data:                                        ; Offset_0x0C9A84
                incbin  'data\sounds\ss.snd'
Slot_Machine_Bonus_Stage_Snd_Data:                             ; Offset_0x0CA31C
                incbin  'data\sounds\sm_bs.snd'
Gumball_Machine_Bonus_Stage_Snd_Data:                          ; Offset_0x0CAE04
                incbin  'data\sounds\gm_bs.snd'
Knuckles_Theme_Snd_Data:                                       ; Offset_0x0CBB19
                incbin  'data\sounds\knuckles.snd'
Azure_Lake_Snd_Data:                                           ; Offset_0x0CBE82
                incbin  'data\sounds\alz.snd'
Balloon_Park_Snd_Data:                                         ; Offset_0x0CC988
                incbin  'data\sounds\bpz.snd'
Desert_Palace_Snd_Data:                                        ; Offset_0x0CD620
                incbin  'data\sounds\dpz.snd'
;-------------------------------------------------------------------------------                
Asm_Code_3:                                                    ; Offset_0x0CF962
                dc.b    $0A
                dc.b    '                Lea     ScrollBBase+($b*64)+(27*2),A1', $0D, $0A
                dc.b    '                Jsr     Word_2GVRAM    ', $0D, $0A    
                dc.b    '                Move.w  #AsciiOffset+CHR_Palette0+CHR_HighPri,D5 ; Color is different if in impulse.', $0D, $0A, $0D, $0A
                dc.b    '                Bra     @DoneSeperators', $0D, $0A, $0D, $0A
                dc.b    '@NotImpulse:', $0D, $0A
                dc.b    "                Move.w  #AsciiOffset+CHR_Palette3+CHR_HighPri+'.',D0        ; Place decimal points and '/' seperators.", $0D, $0A
                dc.b    '                Lea     ScrollBBase+($5*64)+(28*2),A1           ', $0D, $0A           
                dc.b    '                Jsr     Word_2GVRAM     ', $0D, $0A     
                dc.b    '                Lea     ScrollBBase+($7*64)+(27*2),A1', $0D, $0A
                dc.b    '                Jsr     Word_2GVRAM     ', $0D, $0A     
                dc.b    '                Lea     ScrollBBase+($d*64)+(28*2),A1', $0D, $0A
                dc.b    '                Jsr     Word_2GVRAM     ', $0D, $0A     
                dc.b    "                Move.w  #AsciiOffset+CHR_Palette3+CHR_HighPri+'/',D0  ", $0D, $0A  
                dc.b    '                Lea     ScrollBBase+($9*64)+(27*2),A1', $0D, $0A
                dc.b    '                Jsr     Word_2GVRAM    ', $0D, $0A    
                dc.b    '                Lea     ScrollBBase+($b*64)+(27*2),A1', $0D, $0A
                dc.b    '                Jsr     Word_2GVRAM    ', $0D, $0A    
                dc.b    '                Move.w  #AsciiOffset+CHR_Palette3+CHR_HighPri,D5 ; Set up character color.', $0D, $0A, $0D, $0A
                dc.b    '@DoneSeperators:', $0D, $0A
                dc.b    '                Move.w  CurrentDistance,D7                      ; Get whole part of DISTANCE.', $0D, $0A
                dc.b    '                Moveq   #3,D6                                   ; Three characters.', $0D, $0A
                dc.b    "                Moveq   #'$',D2                                 ; Lead with a spaces.", $0D, $0A
                dc.b    '                Lea     ScrollBBase+($5*64)+(25*2),A1           ; Screen destination.', $0D, $0A
                dc.b    '                Jsr     PrintVal                                ; Print it.', $0D, $0A
                dc.b    '                Move.w  CurrentDistance+2,D7                    ; Get fractional part of DISTANCE.', $0D, $0A
                dc.b    '                Moveq   #2,D6                                   ; Two digits.', $0D, $0A
                dc.b    "                Move.w  #'0'"
;-------------------------------------------------------------------------------                                
; Z80 Bank $1A
                align   $8000
Chrome_Gadget_Snd_Data:                                        ; Offset_0x0D0000
                incbin  'data\sounds\cgz.snd'
Endless_Mine_Snd_Data:                                         ; Offset_0x0D224B
                incbin  'data\sounds\emz.snd'
Title_Screen_Snd_Data:                                         ; Offset_0x0D2993
                incbin  'data\sounds\ts.snd'
Credits_Snd_Data:                                              ; Offset_0x0D2DCC
                incbin  'data\sounds\credits.snd'
Time_Game_Over_Snd_Data:                                       ; Offset_0x0D383C
                incbin  'data\sounds\tgovr.snd'
Continue_Snd_Data:                                             ; Offset_0x0D3A99
                incbin  'data\sounds\continue.snd'
Level_Results_Snd_Data:                                        ; Offset_0x0D427A
                incbin  'data\sounds\results.snd'
Extra_Life_Snd_Data:                                           ; Offset_0x0D476A
                incbin  'data\sounds\1up.snd'
Got_Emerald_Snd_Data:                                          ; Offset_0x0D496A
                incbin  'data\sounds\emerald.snd'
Invincibility_Snd_Data:                                        ; Offset_0x0D4A38
                incbin  'data\sounds\invcblty.snd'
Competition_Menu_Snd_Data:                                     ; Offset_0x0D4CB8
                incbin  'data\sounds\2p_menu.snd'
Super_Sonic_Theme_Snd_Data:                                    ; Offset_0x0D5EAA
                incbin  'data\sounds\s_sonic.snd'
Data_Select_Menu_Snd_Data:                                     ; Offset_0x0D695E
                incbin  'data\sounds\menu.snd'
; Z80 Bank $1B
                align   $8000
Final_Boss_Snd_Data:                                           ; Offset_0x0D8000
                incbin  'data\sounds\f_boss.snd'
Panic_Snd_Data:                                                ; Offset_0x0D8592
                incbin  'data\sounds\panic.snd'                                 
;-------------------------------------------------------------------------------
; Offset_0x0D86C0:
                incbin  'data\unknown\dummy3.dat' 
Asm_Code_4:                                                    ; Offset_0x0DFEF2                
                dc.b    'L_No1,VIEW_NOT_FLIPPED,VIEW_SIZE_6', $0D, $0A
                dc.b    '                Dc.b    VIEW_PLANET10,VIEW_PAL_NoA,VIEW_FLIPPED,VIEW_SIZE_6', $0D, $0A, $0D, $0A

                dc.b    '                Dc.b    VIEW_PLANET4,VIEW_PAL_NoC,VIEW_FLIPPED,VIEW_SIZE_7', $0D, $0A
                dc.b    '                Dc.b    VIEW_PLANET10,VIEW_PAL_No1,VIEW_NOT_FLIPPED,VIEW_SIZE_7'  
;-------------------------------------------------------------------------------
; Offset_0xE0000:
Z80_Driver:	incbin	"data\sounds\z80_drv.bin"
		;include	"Z80_Drv.asm"

; Offset_0x0E16A0: MusicPointers:
		rom_ptr_z80	Music_01_Ptr
		rom_ptr_z80	Music_02_Ptr
		rom_ptr_z80	Music_03_Ptr
		rom_ptr_z80	Music_04_Ptr
		rom_ptr_z80	Music_05_Ptr
		rom_ptr_z80	Music_06_Ptr
		rom_ptr_z80	Music_07_Ptr
		rom_ptr_z80	Music_08_Ptr
		rom_ptr_z80	Music_09_Ptr
		rom_ptr_z80	Music_0A_Ptr
		rom_ptr_z80	Music_0B_Ptr
		rom_ptr_z80	Music_0C_Ptr
		rom_ptr_z80	Music_0D_Ptr
		rom_ptr_z80	Music_0E_Ptr
		rom_ptr_z80	Music_0F_Ptr
		rom_ptr_z80	Music_10_Ptr
		rom_ptr_z80	Music_11_Ptr
		rom_ptr_z80	Music_12_Ptr
		rom_ptr_z80	Music_13_Ptr
		rom_ptr_z80	Music_14_Ptr
		rom_ptr_z80	Music_15_Ptr
		rom_ptr_z80	Music_16_Ptr
		rom_ptr_z80	Music_17_Ptr
		rom_ptr_z80	Music_18_Ptr
		rom_ptr_z80	Music_19_Ptr
		rom_ptr_z80	Music_1A_Ptr
		rom_ptr_z80	Music_1B_Ptr
		rom_ptr_z80	Music_1C_Ptr
		rom_ptr_z80	Music_1D_Ptr
		rom_ptr_z80	Music_1E_Ptr
		rom_ptr_z80	Music_1F_Ptr
		rom_ptr_z80	Music_20_Ptr
		rom_ptr_z80	Music_21_Ptr
		rom_ptr_z80	Music_22_Ptr
		rom_ptr_z80	Music_23_Ptr
		rom_ptr_z80	Music_24_Ptr
		rom_ptr_z80	Music_25_Ptr
		rom_ptr_z80	Music_26_Ptr
		rom_ptr_z80	Music_27_Ptr
		rom_ptr_z80	Music_28_Ptr
		rom_ptr_z80	Music_29_Ptr
		rom_ptr_z80	Music_2A_Ptr
		rom_ptr_z80	Music_2B_Ptr
		rom_ptr_z80	Music_2C_Ptr
		rom_ptr_z80	Music_2D_Ptr
		rom_ptr_z80	Music_2E_Ptr
		rom_ptr_z80	Music_2F_Ptr
		rom_ptr_z80	Music_30_Ptr
		rom_ptr_z80	Music_31_Ptr
                
Sfx_32_Ptr equ (Ring_Sfx_Data&$FFFF)|$8000   
Sfx_33_Ptr equ (Ring_Left_Speaker_Sfx_Data&$FFFF)|$8000         
Sfx_34_Ptr equ (Ring_Lost_Sfx_Data&$FFFF)|$8000   
Sfx_35_Ptr equ (Hurt_Sfx_Data&$FFFF)|$8000
Sfx_36_Ptr equ (Skidding_Sfx_Data&$FFFF)|$8000 
Sfx_37_Ptr equ (Spike_Hurt_Sfx_Data&$FFFF)|$8000    
Sfx_38_Ptr equ (Collect_Oxygen_Sfx_Data&$FFFF)|$8000  
Sfx_39_Ptr equ (Water_Splash_Sfx_Data&$FFFF)|$8000    
Sfx_3A_Ptr equ (Got_Classic_Shield_Sfx_Data&$FFFF)|$8000    
Sfx_3B_Ptr equ (Drowning_Sfx_Data&$FFFF)|$8000       
Sfx_3C_Ptr equ (Rolling_Sfx_Data&$FFFF)|$8000 
Sfx_3D_Ptr equ (Object_Hit_Sfx_Data&$FFFF)|$8000    
Sfx_3E_Ptr equ (Got_Fire_Shield_Sfx_Data&$FFFF)|$8000  
Sfx_3F_Ptr equ (Got_Water_Shield_Sfx_Data&$FFFF)|$8000  
Sfx_40_Ptr equ (Offset_0x0EC2D1&$FFFF)|$8000  
Sfx_41_Ptr equ (Got_Lightning_Shield_Sfx_Data&$FFFF)|$8000        
Sfx_42_Ptr equ (Offset_0x0EC317&$FFFF)|$8000 
Sfx_43_Ptr equ (Fire_Shield_Sfx_Data&$FFFF)|$8000  
Sfx_44_Ptr equ (Offset_0x0EC34A&$FFFF)|$8000  
Sfx_45_Ptr equ (Offset_0x0EC377&$FFFF)|$8000  
Sfx_46_Ptr equ (Hyper_Form_Change_Sfx_Data&$FFFF)|$8000
Sfx_47_Ptr equ (Offset_0x0EC3CC&$FFFF)|$8000
Sfx_48_Ptr equ (Offset_0x0EC3EC&$FFFF)|$8000
Sfx_49_Ptr equ (Offset_0x0EC414&$FFFF)|$8000
Sfx_4A_Ptr equ (Grab_Sfx_Data&$FFFF)|$8000
Sfx_4B_Ptr equ (Offset_0x0EC438&$FFFF)|$8000
Sfx_4C_Ptr equ (Offset_0x0EC460&$FFFF)|$8000
Sfx_4D_Ptr equ (Offset_0x0EC483&$FFFF)|$8000
Sfx_4E_Ptr equ (Offset_0x0EC498&$FFFF)|$8000
Sfx_4F_Ptr equ (Waterfall_Splash_Sfx_Data&$FFFF)|$8000
Sfx_50_Ptr equ (Offset_0x0EC4F1&$FFFF)|$8000
Sfx_51_Ptr equ (Projectile_Sfx_Data&$FFFF)|$8000
Sfx_52_Ptr equ (Missile_Explosion_Sfx_Data&$FFFF)|$8000
Sfx_53_Ptr equ (Flame_Sfx_Data&$FFFF)|$8000
Sfx_54_Ptr equ (Flying_Battery_Move_Sfx_Data&$FFFF)|$8000
Sfx_55_Ptr equ (Offset_0x0EC5D1&$FFFF)|$8000
Sfx_56_Ptr equ (Missile_Throw_Sfx_Data&$FFFF)|$8000
Sfx_57_Ptr equ (Robotnik_Buzzer_Sfx_Data&$FFFF)|$8000
Sfx_58_Ptr equ (Spike_Move_Sfx_Data&$FFFF)|$8000
Sfx_59_Ptr equ (Offset_0x0EC68E&$FFFF)|$8000
Sfx_5A_Ptr equ (Offset_0x0EC6CE&$FFFF)|$8000
Sfx_5B_Ptr equ (Offset_0x0EC711&$FFFF)|$8000
Sfx_5C_Ptr equ (Draw_Bridge_Move_Sfx_Data&$FFFF)|$8000
Sfx_5D_Ptr equ (Geyser_Sfx_Data&$FFFF)|$8000
Sfx_5E_Ptr equ (Fan_Big_Sfx_Data&$FFFF)|$8000
Sfx_5F_Ptr equ (Offset_0x0EC794&$FFFF)|$8000
Sfx_60_Ptr equ (Offset_0x0EC7C5&$FFFF)|$8000
Sfx_61_Ptr equ (Offset_0x0EC7DD&$FFFF)|$8000
Sfx_62_Ptr equ (Smash_Sfx_Data&$FFFF)|$8000
Sfx_63_Ptr equ (Offset_0x0EC852&$FFFF)|$8000
Sfx_64_Ptr equ (Switch_Blip_Sfx_Data&$FFFF)|$8000
Sfx_65_Ptr equ (Offset_0x0EC88C&$FFFF)|$8000
Sfx_66_Ptr equ (Offset_0x0EC89B&$FFFF)|$8000
Sfx_67_Ptr equ (Offset_0x0EC8C3&$FFFF)|$8000
Sfx_68_Ptr equ (Floor_Thump_Sfx_Data&$FFFF)|$8000
Sfx_69_Ptr equ (Offset_0x0EC922&$FFFF)|$8000
Sfx_6A_Ptr equ (Offset_0x0EC94A&$FFFF)|$8000
Sfx_6B_Ptr equ (Offset_0x0EC97C&$FFFF)|$8000
Sfx_6C_Ptr equ (Crash_Sfx_Data&$FFFF)|$8000
Sfx_6D_Ptr equ (Offset_0x0EC9BF&$FFFF)|$8000
Sfx_6E_Ptr equ (Offset_0x0ECA00&$FFFF)|$8000
Sfx_6F_Ptr equ (Offset_0x0ECA00&$FFFF)|$8000
Sfx_70_Ptr equ (Jump_Sfx_Data&$FFFF)|$8000
Sfx_71_Ptr equ (Offset_0x0ECA47&$FFFF)|$8000
Sfx_72_Ptr equ (Offset_0x0ECA71&$FFFF)|$8000
Sfx_73_Ptr equ (Offset_0x0ECA90&$FFFF)|$8000
Sfx_74_Ptr equ (Offset_0x0ECAC2&$FFFF)|$8000
Sfx_75_Ptr equ (Level_Projectile_Sfx_Data&$FFFF)|$8000
Sfx_76_Ptr equ (Offset_0x0ECB23&$FFFF)|$8000
Sfx_77_Ptr equ (Offset_0x0ECB52&$FFFF)|$8000
Sfx_78_Ptr equ (Offset_0x0ECB7F&$FFFF)|$8000
Sfx_79_Ptr equ (Underwater_Sfx_Data&$FFFF)|$8000
Sfx_7A_Ptr equ (Offset_0x0ECBC4&$FFFF)|$8000
Sfx_7B_Ptr equ (Offset_0x0ECC05&$FFFF)|$8000
Sfx_7C_Ptr equ (Boss_Hit_Sfx_Data&$FFFF)|$8000
Sfx_7D_Ptr equ (Offset_0x0ECC58&$FFFF)|$8000
Sfx_7E_Ptr equ (Offset_0x0ECC8E&$FFFF)|$8000
Sfx_7F_Ptr equ (Offset_0x0ECCD8&$FFFF)|$8000
Sfx_80_Ptr equ (Hoverpad_Sfx_Data&$FFFF)|$8000
Sfx_81_Ptr equ (Transporter_Sfx_Data&$FFFF)|$8000
Sfx_82_Ptr equ (Tunnel_Booster_Sfx_Data&$FFFF)|$8000
Sfx_83_Ptr equ (Rising_Platform_Sfx_Data&$FFFF)|$8000
Sfx_84_Ptr equ (Wave_Hover_Sfx_Data&$FFFF)|$8000
Sfx_85_Ptr equ (Trapdoor_Sfx_Data&$FFFF)|$8000
Sfx_86_Ptr equ (Balloon_Pop_Sfx_Data&$FFFF)|$8000
Sfx_87_Ptr equ (Cannon_Turn_Sfx_Data&$FFFF)|$8000
Sfx_88_Ptr equ (Offset_0x0ECE99&$FFFF)|$8000
Sfx_89_Ptr equ (Offset_0x0ECEC6&$FFFF)|$8000
Sfx_8A_Ptr equ (Offset_0x0ECF11&$FFFF)|$8000
Sfx_8B_Ptr equ (Small_Bumper_Sfx_Data&$FFFF)|$8000
Sfx_8C_Ptr equ (Offset_0x0ECF75&$FFFF)|$8000
Sfx_8D_Ptr equ (Offset_0x0ECFA6&$FFFF)|$8000
Sfx_8E_Ptr equ (Offset_0x0ECFD3&$FFFF)|$8000
Sfx_8F_Ptr equ (Offset_0x0ECFE4&$FFFF)|$8000
Sfx_90_Ptr equ (Offset_0x0ECFFC&$FFFF)|$8000
Sfx_91_Ptr equ (Frost_Puff_Sfx_Data&$FFFF)|$8000
Sfx_92_Ptr equ (Ice_Spike_Sfx_Data&$FFFF)|$8000
Sfx_93_Ptr equ (Offset_0x0ED07F&$FFFF)|$8000
Sfx_94_Ptr equ (Offset_0x0ED0B2&$FFFF)|$8000
Sfx_95_Ptr equ (Tube_Launcher_Sfx_Data&$FFFF)|$8000
Sfx_96_Ptr equ (Offset_0x0ED12F&$FFFF)|$8000
Sfx_97_Ptr equ (Bridge_Collapse_Sfx_Data&$FFFF)|$8000
Sfx_98_Ptr equ (Offset_0x0ED199&$FFFF)|$8000
Sfx_99_Ptr equ (Offset_0x0ED1D1&$FFFF)|$8000
Sfx_9A_Ptr equ (Offset_0x0ED1FE&$FFFF)|$8000
Sfx_9B_Ptr equ (Buzzer_Sfx_Data&$FFFF)|$8000
Sfx_9C_Ptr equ (Offset_0x0ED258&$FFFF)|$8000
Sfx_9D_Ptr equ (Offset_0x0ED288&$FFFF)|$8000
Sfx_9E_Ptr equ (Offset_0x0ED2AE&$FFFF)|$8000
Sfx_9F_Ptr equ (Offset_0x0ED2D4&$FFFF)|$8000
Sfx_A0_Ptr equ (Offset_0x0ED30A&$FFFF)|$8000
Sfx_A1_Ptr equ (Offset_0x0ED337&$FFFF)|$8000
Sfx_A2_Ptr equ (Offset_0x0ED344&$FFFF)|$8000
Sfx_A3_Ptr equ (Offset_0x0ED378&$FFFF)|$8000
Sfx_A4_Ptr equ (Offset_0x0ED3AE&$FFFF)|$8000
Sfx_A5_Ptr equ (Offset_0x0ED3E2&$FFFF)|$8000
Sfx_A6_Ptr equ (Offset_0x0ED413&$FFFF)|$8000
Sfx_A7_Ptr equ (Offset_0x0ED42D&$FFFF)|$8000
Sfx_A8_Ptr equ (Offset_0x0ED45E&$FFFF)|$8000
Sfx_A9_Ptr equ (Offset_0x0ED494&$FFFF)|$8000
Sfx_AA_Ptr equ (Door_Close_Sfx_Data&$FFFF)|$8000
Sfx_AB_Ptr equ (Offset_0x0ED4FC&$FFFF)|$8000
Sfx_AC_Ptr equ (Offset_0x0ED530&$FFFF)|$8000
Sfx_AD_Ptr equ (Offset_0x0ED57A&$FFFF)|$8000
Sfx_AE_Ptr equ (Offset_0x0ED5A9&$FFFF)|$8000
Sfx_AF_Ptr equ (Offset_0x0ED5DC&$FFFF)|$8000
Sfx_B0_Ptr equ (Slide_Thunk_Sfx_Data&$FFFF)|$8000
Sfx_B1_Ptr equ (Offset_0x0ED63F&$FFFF)|$8000
Sfx_B2_Ptr equ (Offset_0x0ED652&$FFFF)|$8000
Sfx_B3_Ptr equ (Offset_0x0ED688&$FFFF)|$8000
Sfx_B4_Ptr equ (Offset_0x0ED6D4&$FFFF)|$8000
Sfx_B5_Ptr equ (Offset_0x0ED6EA&$FFFF)|$8000
Sfx_B6_Ptr equ (Offset_0x0ED720&$FFFF)|$8000
Sfx_B7_Ptr equ (Offset_0x0ED73F&$FFFF)|$8000
Sfx_B8_Ptr equ (Offset_0x0ED7A4&$FFFF)|$8000
Sfx_B9_Ptr equ (Offset_0x0ED7DB&$FFFF)|$8000
Sfx_BA_Ptr equ (Offset_0x0ED80F&$FFFF)|$8000
Sfx_BB_Ptr equ (Super_Form_Change_Sfx_Data&$FFFF)|$8000
Sfx_BC_Ptr equ (Offset_0x0ED88C&$FFFF)|$8000
Sfx_BD_Ptr equ (Offset_0x0ED8BA&$FFFF)|$8000
Sfx_BE_Ptr equ (Offset_0x0ED8D2&$FFFF)|$8000
Sfx_BF_Ptr equ (Offset_0x0ED8FA&$FFFF)|$8000
Sfx_C0_Ptr equ (Offset_0x0ED927&$FFFF)|$8000
Sfx_C1_Ptr equ (Offset_0x0ED956&$FFFF)|$8000
Sfx_C2_Ptr equ (Offset_0x0ED98E&$FFFF)|$8000
Sfx_C3_Ptr equ (Offset_0x0ED9BB&$FFFF)|$8000
Sfx_C4_Ptr equ (Offset_0x0ED9E8&$FFFF)|$8000
Sfx_C5_Ptr equ (Offset_0x0EDA15&$FFFF)|$8000
Sfx_C6_Ptr equ (Offset_0x0EDA42&$FFFF)|$8000
Sfx_C7_Ptr equ (Offset_0x0EDA6F&$FFFF)|$8000
Sfx_C8_Ptr equ (Offset_0x0EDA87&$FFFF)|$8000
Sfx_C9_Ptr equ (Energy_Zap_Sfx_Data&$FFFF)|$8000
Sfx_CA_Ptr equ (Offset_0x0EDAE1&$FFFF)|$8000
Sfx_CB_Ptr equ (Offset_0x0EDAF7&$FFFF)|$8000
Sfx_CC_Ptr equ (Offset_0x0EDB52&$FFFF)|$8000
Sfx_CD_Ptr equ (Offset_0x0EDBA3&$FFFF)|$8000
Sfx_CE_Ptr equ (Check_Point_Sfx_Data&$FFFF)|$8000
Sfx_CF_Ptr equ (Offset_0x0EDC3F&$FFFF)|$8000
Sfx_D0_Ptr equ (Special_Stage_Entry_Sfx_Data&$FFFF)|$8000
Sfx_D1_Ptr equ (Offset_0x0EDCA1&$FFFF)|$8000
Sfx_D2_Ptr equ (Spring_Sfx_Data&$FFFF)|$8000
Sfx_D3_Ptr equ (Error_Sfx_Data&$FFFF)|$8000
Sfx_D4_Ptr equ (Offset_0x0EDD9D&$FFFF)|$8000
Sfx_D5_Ptr equ (Offset_0x0EDE17&$FFFF)|$8000
Sfx_D6_Ptr equ (Offset_0x0EDE4B&$FFFF)|$8000
Sfx_D7_Ptr equ (Offset_0x0EDE73&$FFFF)|$8000
Sfx_D8_Ptr equ (Offset_0x0EDEB4&$FFFF)|$8000
Sfx_D9_Ptr equ (Offset_0x0EDEDC&$FFFF)|$8000 
; Offset_0x0E1702:                               
                dc.w    (((Sfx_32_Ptr>>$08)|(Sfx_32_Ptr<<$08))&$FFFF)    ; $C000
                dc.w    (((Sfx_33_Ptr>>$08)|(Sfx_33_Ptr<<$08))&$FFFF)    ; $C02E
                dc.w    (((Sfx_34_Ptr>>$08)|(Sfx_34_Ptr<<$08))&$FFFF)    ; $C05C
                dc.w    (((Sfx_35_Ptr>>$08)|(Sfx_35_Ptr<<$08))&$FFFF)    ; $C084
                dc.w    (((Sfx_36_Ptr>>$08)|(Sfx_36_Ptr<<$08))&$FFFF)    ; $C0B6
                dc.w    (((Sfx_37_Ptr>>$08)|(Sfx_37_Ptr<<$08))&$FFFF)    ; $C0EB
                dc.w    (((Sfx_38_Ptr>>$08)|(Sfx_38_Ptr<<$08))&$FFFF)    ; $C11A
                dc.w    (((Sfx_39_Ptr>>$08)|(Sfx_39_Ptr<<$08))&$FFFF)    ; $C150
                dc.w    (((Sfx_3A_Ptr>>$08)|(Sfx_3A_Ptr<<$08))&$FFFF)    ; $C191
                dc.w    (((Sfx_3B_Ptr>>$08)|(Sfx_3B_Ptr<<$08))&$FFFF)    ; $C1BC
                dc.w    (((Sfx_3C_Ptr>>$08)|(Sfx_3C_Ptr<<$08))&$FFFF)    ; $C20B
                dc.w    (((Sfx_3D_Ptr>>$08)|(Sfx_3D_Ptr<<$08))&$FFFF)    ; $C249
                dc.w    (((Sfx_3E_Ptr>>$08)|(Sfx_3E_Ptr<<$08))&$FFFF)    ; $C283
                dc.w    (((Sfx_3F_Ptr>>$08)|(Sfx_3F_Ptr<<$08))&$FFFF)    ; $C2AE
                dc.w    (((Sfx_40_Ptr>>$08)|(Sfx_40_Ptr<<$08))&$FFFF)    ; $C2D1
                dc.w    (((Sfx_41_Ptr>>$08)|(Sfx_41_Ptr<<$08))&$FFFF)    ; $C2F4
                dc.w    (((Sfx_42_Ptr>>$08)|(Sfx_42_Ptr<<$08))&$FFFF)    ; $C317
                dc.w    (((Sfx_43_Ptr>>$08)|(Sfx_43_Ptr<<$08))&$FFFF)    ; $C32F
                dc.w    (((Sfx_44_Ptr>>$08)|(Sfx_44_Ptr<<$08))&$FFFF)    ; $C34A
                dc.w    (((Sfx_45_Ptr>>$08)|(Sfx_45_Ptr<<$08))&$FFFF)    ; $C377
                dc.w    (((Sfx_46_Ptr>>$08)|(Sfx_46_Ptr<<$08))&$FFFF)    ; $C39F
                dc.w    (((Sfx_47_Ptr>>$08)|(Sfx_47_Ptr<<$08))&$FFFF)    ; $C3CC
                dc.w    (((Sfx_48_Ptr>>$08)|(Sfx_48_Ptr<<$08))&$FFFF)    ; $C3EC
                dc.w    (((Sfx_49_Ptr>>$08)|(Sfx_49_Ptr<<$08))&$FFFF)    ; $C414
                dc.w    (((Sfx_4A_Ptr>>$08)|(Sfx_4A_Ptr<<$08))&$FFFF)    ; $C41E
                dc.w    (((Sfx_4B_Ptr>>$08)|(Sfx_4B_Ptr<<$08))&$FFFF)    ; $C438
                dc.w    (((Sfx_4C_Ptr>>$08)|(Sfx_4C_Ptr<<$08))&$FFFF)    ; $C460
                dc.w    (((Sfx_4D_Ptr>>$08)|(Sfx_4D_Ptr<<$08))&$FFFF)    ; $C483
                dc.w    (((Sfx_4E_Ptr>>$08)|(Sfx_4E_Ptr<<$08))&$FFFF)    ; $C498
                dc.w    (((Sfx_4F_Ptr>>$08)|(Sfx_4F_Ptr<<$08))&$FFFF)    ; $C4C0
                dc.w    (((Sfx_50_Ptr>>$08)|(Sfx_50_Ptr<<$08))&$FFFF)    ; $C4F1
                dc.w    (((Sfx_51_Ptr>>$08)|(Sfx_51_Ptr<<$08))&$FFFF)    ; $C51B
                dc.w    (((Sfx_52_Ptr>>$08)|(Sfx_52_Ptr<<$08))&$FFFF)    ; $C548
                dc.w    (((Sfx_53_Ptr>>$08)|(Sfx_53_Ptr<<$08))&$FFFF)    ; $C58C
                dc.w    (((Sfx_54_Ptr>>$08)|(Sfx_54_Ptr<<$08))&$FFFF)    ; $C59D
                dc.w    (((Sfx_55_Ptr>>$08)|(Sfx_55_Ptr<<$08))&$FFFF)    ; $C5D1
                dc.w    (((Sfx_56_Ptr>>$08)|(Sfx_56_Ptr<<$08))&$FFFF)    ; $C609
                dc.w    (((Sfx_57_Ptr>>$08)|(Sfx_57_Ptr<<$08))&$FFFF)    ; $C63A
                dc.w    (((Sfx_58_Ptr>>$08)|(Sfx_58_Ptr<<$08))&$FFFF)    ; $C671
                dc.w    (((Sfx_59_Ptr>>$08)|(Sfx_59_Ptr<<$08))&$FFFF)    ; $C68E
                dc.w    (((Sfx_5A_Ptr>>$08)|(Sfx_5A_Ptr<<$08))&$FFFF)    ; $C6CE
                dc.w    (((Sfx_5B_Ptr>>$08)|(Sfx_5B_Ptr<<$08))&$FFFF)    ; $C711
                dc.w    (((Sfx_5C_Ptr>>$08)|(Sfx_5C_Ptr<<$08))&$FFFF)    ; $C739
                dc.w    (((Sfx_5D_Ptr>>$08)|(Sfx_5D_Ptr<<$08))&$FFFF)    ; $C749
                dc.w    (((Sfx_5E_Ptr>>$08)|(Sfx_5E_Ptr<<$08))&$FFFF)    ; $C762
                dc.w    (((Sfx_5F_Ptr>>$08)|(Sfx_5F_Ptr<<$08))&$FFFF)    ; $C794
                dc.w    (((Sfx_60_Ptr>>$08)|(Sfx_60_Ptr<<$08))&$FFFF)    ; $C7C5
                dc.w    (((Sfx_61_Ptr>>$08)|(Sfx_61_Ptr<<$08))&$FFFF)    ; $C7DD
                dc.w    (((Sfx_62_Ptr>>$08)|(Sfx_62_Ptr<<$08))&$FFFF)    ; $C7F6
                dc.w    (((Sfx_63_Ptr>>$08)|(Sfx_63_Ptr<<$08))&$FFFF)    ; $C852
                dc.w    (((Sfx_64_Ptr>>$08)|(Sfx_64_Ptr<<$08))&$FFFF)    ; $C87F
                dc.w    (((Sfx_65_Ptr>>$08)|(Sfx_65_Ptr<<$08))&$FFFF)    ; $C88C
                dc.w    (((Sfx_66_Ptr>>$08)|(Sfx_66_Ptr<<$08))&$FFFF)    ; $C89B
                dc.w    (((Sfx_67_Ptr>>$08)|(Sfx_67_Ptr<<$08))&$FFFF)    ; $C8C3
                dc.w    (((Sfx_68_Ptr>>$08)|(Sfx_68_Ptr<<$08))&$FFFF)    ; $C8F9
                dc.w    (((Sfx_69_Ptr>>$08)|(Sfx_69_Ptr<<$08))&$FFFF)    ; $C922
                dc.w    (((Sfx_6A_Ptr>>$08)|(Sfx_6A_Ptr<<$08))&$FFFF)    ; $C94A
                dc.w    (((Sfx_6B_Ptr>>$08)|(Sfx_6B_Ptr<<$08))&$FFFF)    ; $C97C
                dc.w    (((Sfx_6C_Ptr>>$08)|(Sfx_6C_Ptr<<$08))&$FFFF)    ; $C997
                dc.w    (((Sfx_6D_Ptr>>$08)|(Sfx_6D_Ptr<<$08))&$FFFF)    ; $C9BF
                dc.w    (((Sfx_6E_Ptr>>$08)|(Sfx_6E_Ptr<<$08))&$FFFF)    ; $CA00
                dc.w    (((Sfx_6F_Ptr>>$08)|(Sfx_6F_Ptr<<$08))&$FFFF)    ; $CA00
                dc.w    (((Sfx_70_Ptr>>$08)|(Sfx_70_Ptr<<$08))&$FFFF)    ; $CA31
                dc.w    (((Sfx_71_Ptr>>$08)|(Sfx_71_Ptr<<$08))&$FFFF)    ; $CA47
                dc.w    (((Sfx_72_Ptr>>$08)|(Sfx_72_Ptr<<$08))&$FFFF)    ; $CA71
                dc.w    (((Sfx_73_Ptr>>$08)|(Sfx_73_Ptr<<$08))&$FFFF)    ; $CA90
                dc.w    (((Sfx_74_Ptr>>$08)|(Sfx_74_Ptr<<$08))&$FFFF)    ; $CAC2
                dc.w    (((Sfx_75_Ptr>>$08)|(Sfx_75_Ptr<<$08))&$FFFF)    ; $CAF7
                dc.w    (((Sfx_76_Ptr>>$08)|(Sfx_76_Ptr<<$08))&$FFFF)    ; $CB23
                dc.w    (((Sfx_77_Ptr>>$08)|(Sfx_77_Ptr<<$08))&$FFFF)    ; $CB52
                dc.w    (((Sfx_78_Ptr>>$08)|(Sfx_78_Ptr<<$08))&$FFFF)    ; $CB7F
                dc.w    (((Sfx_79_Ptr>>$08)|(Sfx_79_Ptr<<$08))&$FFFF)    ; $CBB2
                dc.w    (((Sfx_7A_Ptr>>$08)|(Sfx_7A_Ptr<<$08))&$FFFF)    ; $CBC4
                dc.w    (((Sfx_7B_Ptr>>$08)|(Sfx_7B_Ptr<<$08))&$FFFF)    ; $CC05
                dc.w    (((Sfx_7C_Ptr>>$08)|(Sfx_7C_Ptr<<$08))&$FFFF)    ; $CC24
                dc.w    (((Sfx_7D_Ptr>>$08)|(Sfx_7D_Ptr<<$08))&$FFFF)    ; $CC58
                dc.w    (((Sfx_7E_Ptr>>$08)|(Sfx_7E_Ptr<<$08))&$FFFF)    ; $CC8E
                dc.w    (((Sfx_7F_Ptr>>$08)|(Sfx_7F_Ptr<<$08))&$FFFF)    ; $CCD8
                dc.w    (((Sfx_80_Ptr>>$08)|(Sfx_80_Ptr<<$08))&$FFFF)    ; $CD05
                dc.w    (((Sfx_81_Ptr>>$08)|(Sfx_81_Ptr<<$08))&$FFFF)    ; $CD32
                dc.w    (((Sfx_82_Ptr>>$08)|(Sfx_82_Ptr<<$08))&$FFFF)    ; $CD66
                dc.w    (((Sfx_83_Ptr>>$08)|(Sfx_83_Ptr<<$08))&$FFFF)    ; $CD96
                dc.w    (((Sfx_84_Ptr>>$08)|(Sfx_84_Ptr<<$08))&$FFFF)    ; $CDC5
                dc.w    (((Sfx_85_Ptr>>$08)|(Sfx_85_Ptr<<$08))&$FFFF)    ; $CDF6
                dc.w    (((Sfx_86_Ptr>>$08)|(Sfx_86_Ptr<<$08))&$FFFF)    ; $CE20
                dc.w    (((Sfx_87_Ptr>>$08)|(Sfx_87_Ptr<<$08))&$FFFF)    ; $CE6A
                dc.w    (((Sfx_88_Ptr>>$08)|(Sfx_88_Ptr<<$08))&$FFFF)    ; $CE99
                dc.w    (((Sfx_89_Ptr>>$08)|(Sfx_89_Ptr<<$08))&$FFFF)    ; $CEC6
                dc.w    (((Sfx_8A_Ptr>>$08)|(Sfx_8A_Ptr<<$08))&$FFFF)    ; $CF11
                dc.w    (((Sfx_8B_Ptr>>$08)|(Sfx_8B_Ptr<<$08))&$FFFF)    ; $CF45
                dc.w    (((Sfx_8C_Ptr>>$08)|(Sfx_8C_Ptr<<$08))&$FFFF)    ; $CF75
                dc.w    (((Sfx_8D_Ptr>>$08)|(Sfx_8D_Ptr<<$08))&$FFFF)    ; $CFA6
                dc.w    (((Sfx_8E_Ptr>>$08)|(Sfx_8E_Ptr<<$08))&$FFFF)    ; $CFD3
                dc.w    (((Sfx_8F_Ptr>>$08)|(Sfx_8F_Ptr<<$08))&$FFFF)    ; $CFE4
                dc.w    (((Sfx_90_Ptr>>$08)|(Sfx_90_Ptr<<$08))&$FFFF)    ; $CFFC
                dc.w    (((Sfx_91_Ptr>>$08)|(Sfx_91_Ptr<<$08))&$FFFF)    ; $D032
                dc.w    (((Sfx_92_Ptr>>$08)|(Sfx_92_Ptr<<$08))&$FFFF)    ; $D050
                dc.w    (((Sfx_93_Ptr>>$08)|(Sfx_93_Ptr<<$08))&$FFFF)    ; $D07F
                dc.w    (((Sfx_94_Ptr>>$08)|(Sfx_94_Ptr<<$08))&$FFFF)    ; $D0B2
                dc.w    (((Sfx_95_Ptr>>$08)|(Sfx_95_Ptr<<$08))&$FFFF)    ; $D0E4
                dc.w    (((Sfx_96_Ptr>>$08)|(Sfx_96_Ptr<<$08))&$FFFF)    ; $D12F
                dc.w    (((Sfx_97_Ptr>>$08)|(Sfx_97_Ptr<<$08))&$FFFF)    ; $D14D
                dc.w    (((Sfx_98_Ptr>>$08)|(Sfx_98_Ptr<<$08))&$FFFF)    ; $D199
                dc.w    (((Sfx_99_Ptr>>$08)|(Sfx_99_Ptr<<$08))&$FFFF)    ; $D1D1
                dc.w    (((Sfx_9A_Ptr>>$08)|(Sfx_9A_Ptr<<$08))&$FFFF)    ; $D1FE
                dc.w    (((Sfx_9B_Ptr>>$08)|(Sfx_9B_Ptr<<$08))&$FFFF)    ; $D22B
                dc.w    (((Sfx_9C_Ptr>>$08)|(Sfx_9C_Ptr<<$08))&$FFFF)    ; $D258
                dc.w    (((Sfx_9D_Ptr>>$08)|(Sfx_9D_Ptr<<$08))&$FFFF)    ; $D288
                dc.w    (((Sfx_9E_Ptr>>$08)|(Sfx_9E_Ptr<<$08))&$FFFF)    ; $D2AE
                dc.w    (((Sfx_9F_Ptr>>$08)|(Sfx_9F_Ptr<<$08))&$FFFF)    ; $D2D4
                dc.w    (((Sfx_A0_Ptr>>$08)|(Sfx_A0_Ptr<<$08))&$FFFF)    ; $D30A
                dc.w    (((Sfx_A1_Ptr>>$08)|(Sfx_A1_Ptr<<$08))&$FFFF)    ; $D337
                dc.w    (((Sfx_A2_Ptr>>$08)|(Sfx_A2_Ptr<<$08))&$FFFF)    ; $D344
                dc.w    (((Sfx_A3_Ptr>>$08)|(Sfx_A3_Ptr<<$08))&$FFFF)    ; $D378
                dc.w    (((Sfx_A4_Ptr>>$08)|(Sfx_A4_Ptr<<$08))&$FFFF)    ; $D3AE
                dc.w    (((Sfx_A5_Ptr>>$08)|(Sfx_A5_Ptr<<$08))&$FFFF)    ; $D3E2
                dc.w    (((Sfx_A6_Ptr>>$08)|(Sfx_A6_Ptr<<$08))&$FFFF)    ; $D413
                dc.w    (((Sfx_A7_Ptr>>$08)|(Sfx_A7_Ptr<<$08))&$FFFF)    ; $D42D
                dc.w    (((Sfx_A8_Ptr>>$08)|(Sfx_A8_Ptr<<$08))&$FFFF)    ; $D45E
                dc.w    (((Sfx_A9_Ptr>>$08)|(Sfx_A9_Ptr<<$08))&$FFFF)    ; $D494
                dc.w    (((Sfx_AA_Ptr>>$08)|(Sfx_AA_Ptr<<$08))&$FFFF)    ; $D4C6
                dc.w    (((Sfx_AB_Ptr>>$08)|(Sfx_AB_Ptr<<$08))&$FFFF)    ; $D4FC
                dc.w    (((Sfx_AC_Ptr>>$08)|(Sfx_AC_Ptr<<$08))&$FFFF)    ; $D530
                dc.w    (((Sfx_AD_Ptr>>$08)|(Sfx_AD_Ptr<<$08))&$FFFF)    ; $D57A
                dc.w    (((Sfx_AE_Ptr>>$08)|(Sfx_AE_Ptr<<$08))&$FFFF)    ; $D5A9
                dc.w    (((Sfx_AF_Ptr>>$08)|(Sfx_AF_Ptr<<$08))&$FFFF)    ; $D5DC
                dc.w    (((Sfx_B0_Ptr>>$08)|(Sfx_B0_Ptr<<$08))&$FFFF)    ; $D60B
                dc.w    (((Sfx_B1_Ptr>>$08)|(Sfx_B1_Ptr<<$08))&$FFFF)    ; $D63F
                dc.w    (((Sfx_B2_Ptr>>$08)|(Sfx_B2_Ptr<<$08))&$FFFF)    ; $D652
                dc.w    (((Sfx_B3_Ptr>>$08)|(Sfx_B3_Ptr<<$08))&$FFFF)    ; $D688
                dc.w    (((Sfx_B4_Ptr>>$08)|(Sfx_B4_Ptr<<$08))&$FFFF)    ; $D6D4
                dc.w    (((Sfx_B5_Ptr>>$08)|(Sfx_B5_Ptr<<$08))&$FFFF)    ; $D6EA
                dc.w    (((Sfx_B6_Ptr>>$08)|(Sfx_B6_Ptr<<$08))&$FFFF)    ; $D720
                dc.w    (((Sfx_B7_Ptr>>$08)|(Sfx_B7_Ptr<<$08))&$FFFF)    ; $D73F
                dc.w    (((Sfx_B8_Ptr>>$08)|(Sfx_B8_Ptr<<$08))&$FFFF)    ; $D7A4
                dc.w    (((Sfx_B9_Ptr>>$08)|(Sfx_B9_Ptr<<$08))&$FFFF)    ; $D7DB
                dc.w    (((Sfx_BA_Ptr>>$08)|(Sfx_BA_Ptr<<$08))&$FFFF)    ; $D80F
                dc.w    (((Sfx_BB_Ptr>>$08)|(Sfx_BB_Ptr<<$08))&$FFFF)    ; $D850
                dc.w    (((Sfx_BC_Ptr>>$08)|(Sfx_BC_Ptr<<$08))&$FFFF)    ; $D88C
                dc.w    (((Sfx_BD_Ptr>>$08)|(Sfx_BD_Ptr<<$08))&$FFFF)    ; $D8BA
                dc.w    (((Sfx_BE_Ptr>>$08)|(Sfx_BE_Ptr<<$08))&$FFFF)    ; $D8D2
                dc.w    (((Sfx_BF_Ptr>>$08)|(Sfx_BF_Ptr<<$08))&$FFFF)    ; $D8FA
                dc.w    (((Sfx_C0_Ptr>>$08)|(Sfx_C0_Ptr<<$08))&$FFFF)    ; $D927
                dc.w    (((Sfx_C1_Ptr>>$08)|(Sfx_C1_Ptr<<$08))&$FFFF)    ; $D956
                dc.w    (((Sfx_C2_Ptr>>$08)|(Sfx_C2_Ptr<<$08))&$FFFF)    ; $D98E
                dc.w    (((Sfx_C3_Ptr>>$08)|(Sfx_C3_Ptr<<$08))&$FFFF)    ; $D9BB
                dc.w    (((Sfx_C4_Ptr>>$08)|(Sfx_C4_Ptr<<$08))&$FFFF)    ; $D9E8
                dc.w    (((Sfx_C5_Ptr>>$08)|(Sfx_C5_Ptr<<$08))&$FFFF)    ; $DA15
                dc.w    (((Sfx_C6_Ptr>>$08)|(Sfx_C6_Ptr<<$08))&$FFFF)    ; $DA42
                dc.w    (((Sfx_C7_Ptr>>$08)|(Sfx_C7_Ptr<<$08))&$FFFF)    ; $DA6F
                dc.w    (((Sfx_C8_Ptr>>$08)|(Sfx_C8_Ptr<<$08))&$FFFF)    ; $DA87
                dc.w    (((Sfx_C9_Ptr>>$08)|(Sfx_C9_Ptr<<$08))&$FFFF)    ; $DAB7
                dc.w    (((Sfx_CA_Ptr>>$08)|(Sfx_CA_Ptr<<$08))&$FFFF)    ; $DAE1
                dc.w    (((Sfx_CB_Ptr>>$08)|(Sfx_CB_Ptr<<$08))&$FFFF)    ; $DAF7
                dc.w    (((Sfx_CC_Ptr>>$08)|(Sfx_CC_Ptr<<$08))&$FFFF)    ; $DB52
                dc.w    (((Sfx_CD_Ptr>>$08)|(Sfx_CD_Ptr<<$08))&$FFFF)    ; $DBA3
                dc.w    (((Sfx_CE_Ptr>>$08)|(Sfx_CE_Ptr<<$08))&$FFFF)    ; $DC15
                dc.w    (((Sfx_CF_Ptr>>$08)|(Sfx_CF_Ptr<<$08))&$FFFF)    ; $DC3F
                dc.w    (((Sfx_D0_Ptr>>$08)|(Sfx_D0_Ptr<<$08))&$FFFF)    ; $DC74
                dc.w    (((Sfx_D1_Ptr>>$08)|(Sfx_D1_Ptr<<$08))&$FFFF)    ; $DCA1
                dc.w    (((Sfx_D2_Ptr>>$08)|(Sfx_D2_Ptr<<$08))&$FFFF)    ; $DD1C
                dc.w    (((Sfx_D3_Ptr>>$08)|(Sfx_D3_Ptr<<$08))&$FFFF)    ; $DD71
                dc.w    (((Sfx_D4_Ptr>>$08)|(Sfx_D4_Ptr<<$08))&$FFFF)    ; $DD9D
                dc.w    (((Sfx_D5_Ptr>>$08)|(Sfx_D5_Ptr<<$08))&$FFFF)    ; $DE17
                dc.w    (((Sfx_D6_Ptr>>$08)|(Sfx_D6_Ptr<<$08))&$FFFF)    ; $DE4B
                dc.w    (((Sfx_D7_Ptr>>$08)|(Sfx_D7_Ptr<<$08))&$FFFF)    ; $DE73
                dc.w    (((Sfx_D8_Ptr>>$08)|(Sfx_D8_Ptr<<$08))&$FFFF)    ; $DEB4
                dc.w    (((Sfx_D9_Ptr>>$08)|(Sfx_D9_Ptr<<$08))&$FFFF)    ; $DEDC               
;-------------------------------------------------------------------------------
Offset_0x0E1852:
                incbin  'data\unknown\dummy4.dat'
;-------------------------------------------------------------------------------                 
Ring_Sfx_Data:                                           ; $32 ; Offset_0x0EC000
                incbin  'data\sounds\0x32.sfx'                
Ring_Left_Speaker_Sfx_Data:                                    ; Offset_0x0EC02E
                incbin  'data\sounds\0x33.sfx'
Ring_Lost_Sfx_Data:                                            ; Offset_0x0EC05C
                incbin  'data\sounds\0x34.sfx'
Hurt_Sfx_Data:                                                 ; Offset_0x0EC084
                incbin  'data\sounds\0x35.sfx'
Skidding_Sfx_Data:                                             ; Offset_0x0EC0B6
                incbin  'data\sounds\0x36.sfx'
Spike_Hurt_Sfx_Data:                                           ; Offset_0x0EC0EB
                incbin  'data\sounds\0x37.sfx'
Collect_Oxygen_Sfx_Data:                                       ; Offset_0x0EC11A
                incbin  'data\sounds\0x38.sfx'
Water_Splash_Sfx_Data:                                         ; Offset_0x0EC150
                incbin  'data\sounds\0x39.sfx'
Got_Classic_Shield_Sfx_Data:                                   ; Offset_0x0EC191
                incbin  'data\sounds\0x3A.sfx'
Drowning_Sfx_Data:                                             ; Offset_0x0EC1BC
                incbin  'data\sounds\0x3B.sfx'
Rolling_Sfx_Data:                                              ; Offset_0x0EC20B
                incbin  'data\sounds\0x3C.sfx'
Object_Hit_Sfx_Data:                                           ; Offset_0x0EC249
                incbin  'data\sounds\0x3D.sfx'
Got_Fire_Shield_Sfx_Data:                                      ; Offset_0x0EC283
                incbin  'data\sounds\0x3E.sfx'
Got_Water_Shield_Sfx_Data:                                     ; Offset_0x0EC2AE
                incbin  'data\sounds\0x3F.sfx'
Offset_0x0EC2D1: 
                incbin  'data\sounds\0x40.sfx'
Got_Lightning_Shield_Sfx_Data:                                 ; Offset_0x0EC2F4  
                incbin  'data\sounds\0x41.sfx'
Offset_0x0EC317:    
                incbin  'data\sounds\0x42.sfx'
Fire_Shield_Sfx_Data:                                          ; Offset_0x0EC32F  
                incbin  'data\sounds\0x43.sfx'
Offset_0x0EC34A:   
                incbin  'data\sounds\0x44.sfx'
Offset_0x0EC377:  
                incbin  'data\sounds\0x45.sfx'
Hyper_Form_Change_Sfx_Data:                                    ; Offset_0x0EC39F   
                incbin  'data\sounds\0x46.sfx'
Offset_0x0EC3CC:  
                incbin  'data\sounds\0x47.sfx'
Offset_0x0EC3EC:  
                incbin  'data\sounds\0x48.sfx'
Offset_0x0EC414:     
                incbin  'data\sounds\0x49.sfx'
Grab_Sfx_Data:                                                 ; Offset_0x0EC41E   
                incbin  'data\sounds\0x4A.sfx'
Offset_0x0EC438: 
                incbin  'data\sounds\0x4B.sfx'
Offset_0x0EC460:  
                incbin  'data\sounds\0x4C.sfx'
Offset_0x0EC483:  
                incbin  'data\sounds\0x4D.sfx'
Offset_0x0EC498:  
                incbin  'data\sounds\0x4E.sfx'
Waterfall_Splash_Sfx_Data:                                     ; Offset_0x0EC4C0  
                incbin  'data\sounds\0x4F.sfx'
Offset_0x0EC4F1:  
                incbin  'data\sounds\0x50.sfx'
Projectile_Sfx_Data:                                           ; Offset_0x0EC51B  
                incbin  'data\sounds\0x51.sfx'
Missile_Explosion_Sfx_Data:                                    ; Offset_0x0EC548  
                incbin  'data\sounds\0x52.sfx'
Flame_Sfx_Data:                                                ; Offset_0x0EC58C  
                incbin  'data\sounds\0x53.sfx'
Flying_Battery_Move_Sfx_Data:                                  ; Offset_0x0EC59D  
                incbin  'data\sounds\0x54.sfx'
Offset_0x0EC5D1:  
                incbin  'data\sounds\0x55.sfx'
Missile_Throw_Sfx_Data:                                        ; Offset_0x0EC609  
                incbin  'data\sounds\0x56.sfx'
Robotnik_Buzzer_Sfx_Data:                                      ; Offset_0x0EC63A  
                incbin  'data\sounds\0x57.sfx'
Spike_Move_Sfx_Data:                                           ; Offset_0x0EC671  
                incbin  'data\sounds\0x58.sfx'
Offset_0x0EC68E:  
                incbin  'data\sounds\0x59.sfx'
Offset_0x0EC6CE:  
                incbin  'data\sounds\0x5A.sfx'
Offset_0x0EC711:  
                incbin  'data\sounds\0x5B.sfx'
Draw_Bridge_Move_Sfx_Data:                                     ; Offset_0x0EC739  
                incbin  'data\sounds\0x5C.sfx'
Geyser_Sfx_Data:                                               ; Offset_0x0EC749  
                incbin  'data\sounds\0x5D.sfx'
Fan_Big_Sfx_Data:                                              ; Offset_0x0EC762  
                incbin  'data\sounds\0x5E.sfx'
Offset_0x0EC794:  
                incbin  'data\sounds\0x5F.sfx'
Offset_0x0EC7C5:  
                incbin  'data\sounds\0x60.sfx'
Offset_0x0EC7DD:  
                incbin  'data\sounds\0x61.sfx'
Smash_Sfx_Data:                                                ; Offset_0x0EC7F6  
                incbin  'data\sounds\0x62.sfx'
Offset_0x0EC852:  
                incbin  'data\sounds\0x63.sfx'
Switch_Blip_Sfx_Data:                                          ; Offset_0x0EC87F  
                incbin  'data\sounds\0x64.sfx'
Offset_0x0EC88C:                        
                incbin  'data\sounds\0x65.sfx'
Offset_0x0EC89B:  
                incbin  'data\sounds\0x66.sfx'
Offset_0x0EC8C3:  
                incbin  'data\sounds\0x67.sfx'
Floor_Thump_Sfx_Data:                                          ; Offset_0x0EC8F9  
                incbin  'data\sounds\0x68.sfx'
Offset_0x0EC922:  
                incbin  'data\sounds\0x69.sfx'
Offset_0x0EC94A:  
                incbin  'data\sounds\0x6A.sfx'
Offset_0x0EC97C:  
                incbin  'data\sounds\0x6B.sfx'
Crash_Sfx_Data:                                                ; Offset_0x0EC997  
                incbin  'data\sounds\0x6C.sfx'
Offset_0x0EC9BF:  
                incbin  'data\sounds\0x6D.sfx'
Offset_0x0ECA00:  
                incbin  'data\sounds\0x6E_6F.sfx'
Jump_Sfx_Data:                                                 ; Offset_0x0ECA31  
                incbin  'data\sounds\0x70.sfx'
Offset_0x0ECA47:  
                incbin  'data\sounds\0x71.sfx'
Offset_0x0ECA71:  
                incbin  'data\sounds\0x72.sfx'
Offset_0x0ECA90:  
                incbin  'data\sounds\0x73.sfx'
Offset_0x0ECAC2:  
                incbin  'data\sounds\0x74.sfx'
Level_Projectile_Sfx_Data:                                     ; Offset_0x0ECAF7  
                incbin  'data\sounds\0x75.sfx'
Offset_0x0ECB23:  
                incbin  'data\sounds\0x76.sfx'
Offset_0x0ECB52:  
                incbin  'data\sounds\0x77.sfx'
Offset_0x0ECB7F:  
                incbin  'data\sounds\0x78.sfx'
Underwater_Sfx_Data:                                           ; Offset_0x0ECBB2  
                incbin  'data\sounds\0x79.sfx'
Offset_0x0ECBC4:  
                incbin  'data\sounds\0x7A.sfx'
Offset_0x0ECC05:  
                incbin  'data\sounds\0x7B.sfx'
Boss_Hit_Sfx_Data:                                             ; Offset_0x0ECC24  
                incbin  'data\sounds\0x7C.sfx'
Offset_0x0ECC58:  
                incbin  'data\sounds\0x7D.sfx'
Offset_0x0ECC8E:  
                incbin  'data\sounds\0x7E.sfx'
Offset_0x0ECCD8:  
                incbin  'data\sounds\0x7F.sfx'
Hoverpad_Sfx_Data:                                             ; Offset_0x0ECD05  
                incbin  'data\sounds\0x80.sfx'
Transporter_Sfx_Data:                                          ; Offset_0x0ECD32  
                incbin  'data\sounds\0x81.sfx'
Tunnel_Booster_Sfx_Data:                                       ; Offset_0x0ECD66  
                incbin  'data\sounds\0x82.sfx'
Rising_Platform_Sfx_Data:                                      ; Offset_0x0ECD96  
                incbin  'data\sounds\0x83.sfx'
Wave_Hover_Sfx_Data:                                           ; Offset_0x0ECDC5  
                incbin  'data\sounds\0x84.sfx'
Trapdoor_Sfx_Data:                                             ; Offset_0x0ECDF6  
                incbin  'data\sounds\0x85.sfx'
Balloon_Pop_Sfx_Data:                                          ; Offset_0x0ECE20  
                incbin  'data\sounds\0x86.sfx'
Cannon_Turn_Sfx_Data:                                          ; Offset_0x0ECE6A  
                incbin  'data\sounds\0x87.sfx'
Offset_0x0ECE99:  
                incbin  'data\sounds\0x88.sfx'
Offset_0x0ECEC6:  
                incbin  'data\sounds\0x89.sfx'
Offset_0x0ECF11:  
                incbin  'data\sounds\0x8A.sfx'
Small_Bumper_Sfx_Data:                                         ; Offset_0x0ECF45  
                incbin  'data\sounds\0x8B.sfx'
Offset_0x0ECF75:  
                incbin  'data\sounds\0x8C.sfx'
Offset_0x0ECFA6:  
                incbin  'data\sounds\0x8D.sfx'
Offset_0x0ECFD3:  
                incbin  'data\sounds\0x8E.sfx'
Offset_0x0ECFE4:  
                incbin  'data\sounds\0x8F.sfx'
Offset_0x0ECFFC:  
                incbin  'data\sounds\0x90.sfx'
Frost_Puff_Sfx_Data:                                           ; Offset_0x0ED032  
                incbin  'data\sounds\0x91.sfx'
Ice_Spike_Sfx_Data:                                            ; Offset_0x0ED050  
                incbin  'data\sounds\0x92.sfx'
Offset_0x0ED07F:  
                incbin  'data\sounds\0x93.sfx'
Offset_0x0ED0B2:  
                incbin  'data\sounds\0x94.sfx'
Tube_Launcher_Sfx_Data:                                        ; Offset_0x0ED0E4  
                incbin  'data\sounds\0x95.sfx'
Offset_0x0ED12F:  
                incbin  'data\sounds\0x96.sfx'
Bridge_Collapse_Sfx_Data:                                      ; Offset_0x0ED14D  
                incbin  'data\sounds\0x97.sfx'
Offset_0x0ED199:  
                incbin  'data\sounds\0x98.sfx'
Offset_0x0ED1D1:  
                incbin  'data\sounds\0x99.sfx'
Offset_0x0ED1FE:  
                incbin  'data\sounds\0x9A.sfx'
Buzzer_Sfx_Data:                                               ; Offset_0x0ED22B  
                incbin  'data\sounds\0x9B.sfx'
Offset_0x0ED258:  
                incbin  'data\sounds\0x9C.sfx'
Offset_0x0ED288:  
                incbin  'data\sounds\0x9D.sfx'
Offset_0x0ED2AE:  
                incbin  'data\sounds\0x9E.sfx'
Offset_0x0ED2D4:  
                incbin  'data\sounds\0x9F.sfx'
Offset_0x0ED30A:  
                incbin  'data\sounds\0xA0.sfx'
Offset_0x0ED337:  
                incbin  'data\sounds\0xA1.sfx'
Offset_0x0ED344:  
                incbin  'data\sounds\0xA2.sfx'
Offset_0x0ED378:  
                incbin  'data\sounds\0xA3.sfx'
Offset_0x0ED3AE:  
                incbin  'data\sounds\0xA4.sfx'
Offset_0x0ED3E2:  
                incbin  'data\sounds\0xA5.sfx'
Offset_0x0ED413:  
                incbin  'data\sounds\0xA6.sfx'
Offset_0x0ED42D:  
                incbin  'data\sounds\0xA7.sfx'
Offset_0x0ED45E:  
                incbin  'data\sounds\0xA8.sfx'
Offset_0x0ED494:  
                incbin  'data\sounds\0xA9.sfx'
Door_Close_Sfx_Data:                                           ; Offset_0x0ED4C6  
                incbin  'data\sounds\0xAA.sfx'
Offset_0x0ED4FC:  
                incbin  'data\sounds\0xAB.sfx'
Offset_0x0ED530:  
                incbin  'data\sounds\0xAC.sfx'
Offset_0x0ED57A:  
                incbin  'data\sounds\0xAD.sfx'
Offset_0x0ED5A9:  
                incbin  'data\sounds\0xAE.sfx'
Offset_0x0ED5DC:  
                incbin  'data\sounds\0xAF.sfx'
Slide_Thunk_Sfx_Data:                                          ; Offset_0x0ED60B  
                incbin  'data\sounds\0xB0.sfx'
Offset_0x0ED63F:  
                incbin  'data\sounds\0xB1.sfx'
Offset_0x0ED652:  
                incbin  'data\sounds\0xB2.sfx'
Offset_0x0ED688:  
                incbin  'data\sounds\0xB3.sfx'
Offset_0x0ED6D4:  
                incbin  'data\sounds\0xB4.sfx'
Offset_0x0ED6EA:  
                incbin  'data\sounds\0xB5.sfx'
Offset_0x0ED720:  
                incbin  'data\sounds\0xB6.sfx'
Offset_0x0ED73F:  
                incbin  'data\sounds\0xB7.sfx'
Offset_0x0ED7A4:  
                incbin  'data\sounds\0xB8.sfx'
Offset_0x0ED7DB:  
                incbin  'data\sounds\0xB9.sfx'
Offset_0x0ED80F:  
                incbin  'data\sounds\0xBA.sfx'
Super_Form_Change_Sfx_Data:                                    ; Offset_0x0ED850  
                incbin  'data\sounds\0xBB.sfx'
Offset_0x0ED88C:  
                incbin  'data\sounds\0xBC.sfx'
Offset_0x0ED8BA:  
                incbin  'data\sounds\0xBD.sfx' 
Offset_0x0ED8D2:  
                incbin  'data\sounds\0xBE.sfx'
Offset_0x0ED8FA:  
                incbin  'data\sounds\0xBF.sfx'
Offset_0x0ED927:  
                incbin  'data\sounds\0xC0.sfx'
Offset_0x0ED956:  
                incbin  'data\sounds\0xC1.sfx'
Offset_0x0ED98E:  
                incbin  'data\sounds\0xC2.sfx'
Offset_0x0ED9BB:  
                incbin  'data\sounds\0xC3.sfx'
Offset_0x0ED9E8:  
                incbin  'data\sounds\0xC4.sfx'
Offset_0x0EDA15:  
                incbin  'data\sounds\0xC5.sfx'
Offset_0x0EDA42:  
                incbin  'data\sounds\0xC6.sfx'
Offset_0x0EDA6F:  
                incbin  'data\sounds\0xC7.sfx'
Offset_0x0EDA87:  
                incbin  'data\sounds\0xC8.sfx'
Energy_Zap_Sfx_Data:                                           ; Offset_0x0EDAB7  
                incbin  'data\sounds\0xC9.sfx'
Offset_0x0EDAE1:  
                incbin  'data\sounds\0xCA.sfx'
Offset_0x0EDAF7:  
                incbin  'data\sounds\0xCB.sfx'
Offset_0x0EDB52:  
                incbin  'data\sounds\0xCC.sfx'
Offset_0x0EDBA3:  
                incbin  'data\sounds\0xCD.sfx'
Check_Point_Sfx_Data:                                          ; Offset_0x0EDC15  
                incbin  'data\sounds\0xCE.sfx'
Offset_0x0EDC3F:  
                incbin  'data\sounds\0xCF.sfx'
Special_Stage_Entry_Sfx_Data:                                  ; Offset_0x0EDC74  
                incbin  'data\sounds\0xD0.sfx'
Offset_0x0EDCA1:  
                incbin  'data\sounds\0xD1.sfx'
Spring_Sfx_Data:                                               ; Offset_0x0EDD1C  
                incbin  'data\sounds\0xD2.sfx'
Error_Sfx_Data:                                                ; Offset_0x0EDD71  
                incbin  'data\sounds\0xD3.sfx'
Offset_0x0EDD9D:  
                incbin  'data\sounds\0xD4.sfx'
Offset_0x0EDE17:  
                incbin  'data\sounds\0xD5.sfx'
Offset_0x0EDE4B:  
                incbin  'data\sounds\0xD6.sfx'
Offset_0x0EDE73:  
                incbin  'data\sounds\0xD7.sfx'
Offset_0x0EDEB4:  
                incbin  'data\sounds\0xD8.sfx'
Offset_0x0EDEDC:  
                incbin  'data\sounds\0xD9.sfx'                               
;-------------------------------------------------------------------------------
Offset_0x0EDF30:
                incbin  'data\unknown\dummy5.dat'   
;-------------------------------------------------------------------------------
Left_Over_Code:                                                ; Offset_0x0EF1DD
                incbin 'leftover.bin' ;If you want to remove this, uncomment the next line and comment the previous one.
                ;align $8000
;-------------------------------------------------------------------------------
DAC_81_Ptr      equ (DAC_81_Setup&$FFFF)|$8000
DAC_82_Ptr      equ (DAC_82_Setup&$FFFF)|$8000
DAC_83_Ptr      equ (DAC_83_Setup&$FFFF)|$8000
DAC_84_Ptr      equ (DAC_84_Setup&$FFFF)|$8000
DAC_85_Ptr      equ (DAC_85_Setup&$FFFF)|$8000
DAC_86_Ptr      equ (DAC_86_Setup&$FFFF)|$8000
DAC_87_Ptr      equ (DAC_87_Setup&$FFFF)|$8000
DAC_88_Ptr      equ (DAC_88_Setup&$FFFF)|$8000
DAC_89_Ptr      equ (DAC_89_Setup&$FFFF)|$8000
DAC_8A_Ptr      equ (DAC_8A_Setup&$FFFF)|$8000
DAC_8B_Ptr      equ (DAC_8B_Setup&$FFFF)|$8000
DAC_8C_Ptr      equ (DAC_8C_Setup&$FFFF)|$8000
DAC_8D_Ptr      equ (DAC_8D_Setup&$FFFF)|$8000
DAC_8E_Ptr      equ (DAC_8E_Setup&$FFFF)|$8000
DAC_8F_Ptr      equ (DAC_8F_Setup&$FFFF)|$8000
DAC_90_Ptr      equ (DAC_90_Setup&$FFFF)|$8000
DAC_91_Ptr      equ (DAC_91_Setup&$FFFF)|$8000
DAC_92_Ptr      equ (DAC_92_Setup&$FFFF)|$8000
DAC_93_Ptr      equ (DAC_93_Setup&$FFFF)|$8000
DAC_94_Ptr      equ (DAC_94_Setup&$FFFF)|$8000
DAC_95_Ptr      equ (DAC_95_Setup&$FFFF)|$8000
DAC_96_Ptr      equ (DAC_96_Setup&$FFFF)|$8000
DAC_97_Ptr      equ (DAC_97_Setup&$FFFF)|$8000
DAC_98_Ptr      equ (DAC_98_Setup&$FFFF)|$8000
DAC_99_Ptr      equ (DAC_99_Setup&$FFFF)|$8000
DAC_9A_Ptr      equ (DAC_9A_Setup&$FFFF)|$8000
DAC_9B_Ptr      equ (DAC_9B_Setup&$FFFF)|$8000

DAC_81_Size           equ (DAC_81_Data_End-DAC_81_Data)  
DAC_81_Data_Ptr       equ (DAC_81_Data&$FFFF)|$8000 
DAC_82_To_85_Size     equ (DAC_82_To_85_Data_End-DAC_82_To_85_Data)  
DAC_82_To_85_Data_Ptr equ (DAC_82_To_85_Data&$FFFF)|$8000 
DAC_86_Size           equ (DAC_86_Data_End-DAC_86_Data)   
DAC_86_Data_Ptr       equ (DAC_86_Data&$FFFF)|$8000
DAC_87_Size           equ (DAC_87_Data_End-DAC_87_Data)   
DAC_87_Data_Ptr       equ (DAC_87_Data&$FFFF)|$8000
DAC_88_Size           equ (DAC_88_Data_End-DAC_88_Data)   
DAC_88_Data_Ptr       equ (DAC_88_Data&$FFFF)|$8000
DAC_89_Size           equ (DAC_89_Data_End-DAC_89_Data)   
DAC_89_Data_Ptr       equ (DAC_89_Data&$FFFF)|$8000
DAC_8A_To_8B_Size     equ (DAC_8A_To_8B_Data_End-DAC_8A_To_8B_Data)  
DAC_8A_To_8B_Data_Ptr equ (DAC_8A_To_8B_Data&$FFFF)|$8000 
DAC_8C_Size           equ (DAC_8C_Data_End-DAC_8C_Data)   
DAC_8C_Data_Ptr       equ (DAC_8C_Data&$FFFF)|$8000
DAC_8D_To_8E_Size     equ (DAC_8D_To_8E_Data_End-DAC_8D_To_8E_Data)  
DAC_8D_To_8E_Data_Ptr equ (DAC_8D_To_8E_Data&$FFFF)|$8000 
DAC_8F_Size           equ (DAC_8F_Data_End-DAC_8F_Data)   
DAC_8F_Data_Ptr       equ (DAC_8F_Data&$FFFF)|$8000
DAC_90_To_93_Size     equ (DAC_90_To_93_Data_End-DAC_90_To_93_Data)  
DAC_90_To_93_Data_Ptr equ (DAC_90_To_93_Data&$FFFF)|$8000 
DAC_94_To_97_Size     equ (DAC_94_To_97_Data_End-DAC_94_To_97_Data)  
DAC_94_To_97_Data_Ptr equ (DAC_94_To_97_Data&$FFFF)|$8000 
DAC_98_To_9A_Size     equ (DAC_98_To_9A_Data_End-DAC_98_To_9A_Data)  
DAC_98_To_9A_Data_Ptr equ (DAC_98_To_9A_Data&$FFFF)|$8000 
DAC_9B_Size           equ (DAC_9B_Data_End-DAC_9B_Data)   
DAC_9B_Data_Ptr       equ (DAC_9B_Data&$FFFF)|$8000

DAC_Table:                                                     ; Offset_0x0F0000
                dc.w    (((DAC_81_Ptr>>$08)|(DAC_81_Ptr<<$08))&$FFFF)    ; $8036
                dc.w    (((DAC_82_Ptr>>$08)|(DAC_82_Ptr<<$08))&$FFFF)    ; $803B
                dc.w    (((DAC_83_Ptr>>$08)|(DAC_83_Ptr<<$08))&$FFFF)    ; $8040
                dc.w    (((DAC_84_Ptr>>$08)|(DAC_84_Ptr<<$08))&$FFFF)    ; $8045
                dc.w    (((DAC_85_Ptr>>$08)|(DAC_85_Ptr<<$08))&$FFFF)    ; $804A
                dc.w    (((DAC_86_Ptr>>$08)|(DAC_86_Ptr<<$08))&$FFFF)    ; $804F
                dc.w    (((DAC_87_Ptr>>$08)|(DAC_87_Ptr<<$08))&$FFFF)    ; $8054
                dc.w    (((DAC_88_Ptr>>$08)|(DAC_88_Ptr<<$08))&$FFFF)    ; $8059
                dc.w    (((DAC_89_Ptr>>$08)|(DAC_89_Ptr<<$08))&$FFFF)    ; $805E
                dc.w    (((DAC_8A_Ptr>>$08)|(DAC_8A_Ptr<<$08))&$FFFF)    ; $8063
                dc.w    (((DAC_8B_Ptr>>$08)|(DAC_8B_Ptr<<$08))&$FFFF)    ; $8068
                dc.w    (((DAC_8C_Ptr>>$08)|(DAC_8C_Ptr<<$08))&$FFFF)    ; $806D
                dc.w    (((DAC_8D_Ptr>>$08)|(DAC_8D_Ptr<<$08))&$FFFF)    ; $8072
                dc.w    (((DAC_8E_Ptr>>$08)|(DAC_8E_Ptr<<$08))&$FFFF)    ; $8077
                dc.w    (((DAC_8F_Ptr>>$08)|(DAC_8F_Ptr<<$08))&$FFFF)    ; $807C
                dc.w    (((DAC_90_Ptr>>$08)|(DAC_90_Ptr<<$08))&$FFFF)    ; $8081
                dc.w    (((DAC_91_Ptr>>$08)|(DAC_91_Ptr<<$08))&$FFFF)    ; $8086
                dc.w    (((DAC_92_Ptr>>$08)|(DAC_92_Ptr<<$08))&$FFFF)    ; $808B
                dc.w    (((DAC_93_Ptr>>$08)|(DAC_93_Ptr<<$08))&$FFFF)    ; $8090
                dc.w    (((DAC_94_Ptr>>$08)|(DAC_94_Ptr<<$08))&$FFFF)    ; $8095
                dc.w    (((DAC_95_Ptr>>$08)|(DAC_95_Ptr<<$08))&$FFFF)    ; $809A
                dc.w    (((DAC_96_Ptr>>$08)|(DAC_96_Ptr<<$08))&$FFFF)    ; $809F
                dc.w    (((DAC_97_Ptr>>$08)|(DAC_97_Ptr<<$08))&$FFFF)    ; $80A4
                dc.w    (((DAC_98_Ptr>>$08)|(DAC_98_Ptr<<$08))&$FFFF)    ; $80A9
                dc.w    (((DAC_99_Ptr>>$08)|(DAC_99_Ptr<<$08))&$FFFF)    ; $80AE
                dc.w    (((DAC_9A_Ptr>>$08)|(DAC_9A_Ptr<<$08))&$FFFF)    ; $80B3
                dc.w    (((DAC_9B_Ptr>>$08)|(DAC_9B_Ptr<<$08))&$FFFF)    ; $80B8                    
                         
DAC_81_Setup:                                                  ; Offset_0x0F0036
                dc.b    $04
                dc.w    (((DAC_81_Size>>$08)|(DAC_81_Size<<$08))&$FFFF)         ; $0790
                dc.w    (((DAC_81_Data_Ptr>>$08)|(DAC_81_Data_Ptr<<$08))&$FFFF) ; $83BD                
DAC_82_Setup:                                                  ; Offset_0x0F003B
                dc.b    $0E
                dc.w    (((DAC_82_To_85_Size>>$08)|(DAC_82_To_85_Size<<$08))&$FFFF)         ; $04C0
                dc.w    (((DAC_82_To_85_Data_Ptr>>$08)|(DAC_82_To_85_Data_Ptr<<$08))&$FFFF) ; $8B4D
DAC_83_Setup:                                                  ; Offset_0x0F0040
                dc.b    $14
                dc.w    (((DAC_82_To_85_Size>>$08)|(DAC_82_To_85_Size<<$08))&$FFFF)         ; $04C0
                dc.w    (((DAC_82_To_85_Data_Ptr>>$08)|(DAC_82_To_85_Data_Ptr<<$08))&$FFFF) ; $8B4D
DAC_84_Setup:                                                  ; Offset_0x0F0045
                dc.b    $1A
                dc.w    (((DAC_82_To_85_Size>>$08)|(DAC_82_To_85_Size<<$08))&$FFFF)         ; $04C0
                dc.w    (((DAC_82_To_85_Data_Ptr>>$08)|(DAC_82_To_85_Data_Ptr<<$08))&$FFFF) ; $8B4D
DAC_85_Setup:                                                  ; Offset_0x0F004A
                dc.b    $20
                dc.w    (((DAC_82_To_85_Size>>$08)|(DAC_82_To_85_Size<<$08))&$FFFF)         ; $04C0
                dc.w    (((DAC_82_To_85_Data_Ptr>>$08)|(DAC_82_To_85_Data_Ptr<<$08))&$FFFF) ; $8B4D
DAC_86_Setup:                                                  ; Offset_0x0F004F
                dc.b    $04
                dc.w    (((DAC_86_Size>>$08)|(DAC_86_Size<<$08))&$FFFF)         ; $0300
                dc.w    (((DAC_86_Data_Ptr>>$08)|(DAC_86_Data_Ptr<<$08))&$FFFF) ; $80BD 
DAC_87_Setup:                                                  ; Offset_0x0F0054
                dc.b    $04
                dc.w    (((DAC_87_Size>>$08)|(DAC_87_Size<<$08))&$FFFF)         ; $0740 
                dc.w    (((DAC_87_Data_Ptr>>$08)|(DAC_87_Data_Ptr<<$08))&$FFFF) ; $B8D8
DAC_88_Setup:                                                  ; Offset_0x0F0059
                dc.b    $06
                dc.w    (((DAC_88_Size>>$08)|(DAC_88_Size<<$08))&$FFFF)         ; $1250
                dc.w    (((DAC_88_Data_Ptr>>$08)|(DAC_88_Data_Ptr<<$08))&$FFFF) ; $9FED
DAC_89_Setup:                                                  ; Offset_0x0F005E
                dc.b    $0A
                dc.w    (((DAC_89_Size>>$08)|(DAC_89_Size<<$08))&$FFFF)         ; $0A20 
                dc.w    (((DAC_89_Data_Ptr>>$08)|(DAC_89_Data_Ptr<<$08))&$FFFF) ; $C528
DAC_8A_Setup:                                                  ; Offset_0x0F0063
                dc.b    $14
                dc.w    (((DAC_8A_To_8B_Size>>$08)|(DAC_8A_To_8B_Size<<$08))&$FFFF)         ; $0160
                dc.w    (((DAC_8A_To_8B_Data_Ptr>>$08)|(DAC_8A_To_8B_Data_Ptr<<$08))&$FFFF) ; $B23D
DAC_8B_Setup:                                                  ; Offset_0x0F0068
                dc.b    $1B
                dc.w    (((DAC_8A_To_8B_Size>>$08)|(DAC_8A_To_8B_Size<<$08))&$FFFF)         ; $0160
                dc.w    (((DAC_8A_To_8B_Data_Ptr>>$08)|(DAC_8A_To_8B_Data_Ptr<<$08))&$FFFF) ; $B23D
DAC_8C_Setup:                                                  ; Offset_0x0F006D
                dc.b    $08
                dc.w    (((DAC_8C_Size>>$08)|(DAC_8C_Size<<$08))&$FFFF)         ; $006B
                dc.w    (((DAC_8C_Data_Ptr>>$08)|(DAC_8C_Data_Ptr<<$08))&$FFFF) ; $B39D
DAC_8D_Setup:                                                  ; Offset_0x0F0072
                dc.b    $0B
                dc.w    (((DAC_8D_To_8E_Size>>$08)|(DAC_8D_To_8E_Size<<$08))&$FFFF)         ; $04D0
                dc.w    (((DAC_8D_To_8E_Data_Ptr>>$08)|(DAC_8D_To_8E_Data_Ptr<<$08))&$FFFF) ; $B408
DAC_8E_Setup:                                                  ; Offset_0x0F0077
                dc.b    $11
                dc.w    (((DAC_8D_To_8E_Size>>$08)|(DAC_8D_To_8E_Size<<$08))&$FFFF)         ; $04D0
                dc.w    (((DAC_8D_To_8E_Data_Ptr>>$08)|(DAC_8D_To_8E_Data_Ptr<<$08))&$FFFF) ; $B408
DAC_8F_Setup:                                                  ; Offset_0x0F007C
                dc.b    $08
                dc.w    (((DAC_8F_Size>>$08)|(DAC_8F_Size<<$08))&$FFFF)         ; $0510 
                dc.w    (((DAC_8F_Data_Ptr>>$08)|(DAC_8F_Data_Ptr<<$08))&$FFFF) ; $C018
DAC_90_Setup:                                                  ; Offset_0x0F0081
                dc.b    $03
                dc.w    (((DAC_90_To_93_Size>>$08)|(DAC_90_To_93_Size<<$08))&$FFFF)         ; $0650
                dc.w    (((DAC_90_To_93_Data_Ptr>>$08)|(DAC_90_To_93_Data_Ptr<<$08))&$FFFF) ; $999D
DAC_91_Setup:                                                  ; Offset_0x0F0086
                dc.b    $07
                dc.w    (((DAC_90_To_93_Size>>$08)|(DAC_90_To_93_Size<<$08))&$FFFF)         ; $0650
                dc.w    (((DAC_90_To_93_Data_Ptr>>$08)|(DAC_90_To_93_Data_Ptr<<$08))&$FFFF) ; $999D
DAC_92_Setup:                                                  ; Offset_0x0F008B
                dc.b    $0A
                dc.w    (((DAC_90_To_93_Size>>$08)|(DAC_90_To_93_Size<<$08))&$FFFF)         ; $0650
                dc.w    (((DAC_90_To_93_Data_Ptr>>$08)|(DAC_90_To_93_Data_Ptr<<$08))&$FFFF) ; $999D
DAC_93_Setup:                                                  ; Offset_0x0F0090
                dc.b    $0E
                dc.w    (((DAC_90_To_93_Size>>$08)|(DAC_90_To_93_Size<<$08))&$FFFF)         ; $0650
                dc.w    (((DAC_90_To_93_Data_Ptr>>$08)|(DAC_90_To_93_Data_Ptr<<$08))&$FFFF) ; $999D
DAC_94_Setup:                                                  ; Offset_0x0F0095
                dc.b    $06
                dc.w    (((DAC_94_To_97_Size>>$08)|(DAC_94_To_97_Size<<$08))&$FFFF)         ; $0990
                dc.w    (((DAC_94_To_97_Data_Ptr>>$08)|(DAC_94_To_97_Data_Ptr<<$08))&$FFFF) ; $900D
DAC_95_Setup:                                                  ; Offset_0x0F009A
                dc.b    $0A
                dc.w    (((DAC_94_To_97_Size>>$08)|(DAC_94_To_97_Size<<$08))&$FFFF)         ; $0990
                dc.w    (((DAC_94_To_97_Data_Ptr>>$08)|(DAC_94_To_97_Data_Ptr<<$08))&$FFFF) ; $900D
DAC_96_Setup:                                                  ; Offset_0x0F009F
                dc.b    $0D
                dc.w    (((DAC_94_To_97_Size>>$08)|(DAC_94_To_97_Size<<$08))&$FFFF)         ; $0990
                dc.w    (((DAC_94_To_97_Data_Ptr>>$08)|(DAC_94_To_97_Data_Ptr<<$08))&$FFFF) ; $900D
DAC_97_Setup:                                                  ; Offset_0x0F00A4
                dc.b    $12
                dc.w    (((DAC_94_To_97_Size>>$08)|(DAC_94_To_97_Size<<$08))&$FFFF)         ; $0990
                dc.w    (((DAC_94_To_97_Data_Ptr>>$08)|(DAC_94_To_97_Data_Ptr<<$08))&$FFFF) ; $900D
DAC_98_Setup:                                                  ; Offset_0x0F00A9
                dc.b    $0B
                dc.w    (((DAC_98_To_9A_Size>>$08)|(DAC_98_To_9A_Size<<$08))&$FFFF)         ; $0D1F
                dc.w    (((DAC_98_To_9A_Data_Ptr>>$08)|(DAC_98_To_9A_Data_Ptr<<$08))&$FFFF) ; $CF48
DAC_99_Setup:                                                  ; Offset_0x0F00AE
                dc.b    $13
                dc.w    (((DAC_98_To_9A_Size>>$08)|(DAC_98_To_9A_Size<<$08))&$FFFF)         ; $0D1F
                dc.w    (((DAC_98_To_9A_Data_Ptr>>$08)|(DAC_98_To_9A_Data_Ptr<<$08))&$FFFF) ; $CF48
DAC_9A_Setup:                                                  ; Offset_0x0F00B3
                dc.b    $16
                dc.w    (((DAC_98_To_9A_Size>>$08)|(DAC_98_To_9A_Size<<$08))&$FFFF)         ; $0D1F
                dc.w    (((DAC_98_To_9A_Data_Ptr>>$08)|(DAC_98_To_9A_Data_Ptr<<$08))&$FFFF) ; $CF48
DAC_9B_Setup:                                                  ; Offset_0x0F00B8
                dc.b    $12
                dc.w    (((DAC_9B_Size>>$08)|(DAC_9B_Size<<$08))&$FFFF)         ; $169D  
                dc.w    (((DAC_9B_Data_Ptr>>$08)|(DAC_9B_Data_Ptr<<$08))&$FFFF) ; $DC67
                
;-------------------------------------------------------------------------------
DAC_86_Data:                                                   ; Offset_0x0F00BD
                incbin  'data\sounds\dacs\dac_86.bin' 
DAC_86_Data_End:                  
;-------------------------------------------------------------------------------                          
DAC_81_Data:                                                   ; Offset_0x0F03BD
                incbin  'data\sounds\dacs\dac_81.bin' 
DAC_81_Data_End:  
;-------------------------------------------------------------------------------
DAC_82_To_85_Data:                                             ; Offset_0x0F0B4D
                incbin  'data\sounds\dacs\dac82-85.bin' 
DAC_82_To_85_Data_End:  
;-------------------------------------------------------------------------------
DAC_94_To_97_Data:                                             ; Offset_0x0F100D
                incbin  'data\sounds\dacs\dac94-97.bin' 
DAC_94_To_97_Data_End: 
;-------------------------------------------------------------------------------
DAC_90_To_93_Data:                                             ; Offset_0x0F199D
                incbin  'data\sounds\dacs\dac90-93.bin' 
DAC_90_To_93_Data_End:       
;-------------------------------------------------------------------------------
DAC_88_Data:                                                   ; Offset_0x0F1FED
                incbin  'data\sounds\dacs\dac_88.bin' 
DAC_88_Data_End:  
;-------------------------------------------------------------------------------
DAC_8A_To_8B_Data:                                             ; Offset_0x0F323D
                incbin  'data\sounds\dacs\dac8A-8B.bin' 
DAC_8A_To_8B_Data_End:     
;-------------------------------------------------------------------------------
DAC_8C_Data:                                                   ; Offset_0x0F339D
                incbin  'data\sounds\dacs\dac_8C.bin' 
DAC_8C_Data_End:   
;-------------------------------------------------------------------------------
DAC_8D_To_8E_Data:                                             ; Offset_0x0F3408
                incbin  'data\sounds\dacs\dac8D-8E.bin' 
DAC_8D_To_8E_Data_End:                    
;-------------------------------------------------------------------------------
DAC_87_Data:                                                   ; Offset_0x0F38D8
                incbin  'data\sounds\dacs\dac_87.bin' 
DAC_87_Data_End:   
;-------------------------------------------------------------------------------
DAC_8F_Data:                                                   ; Offset_0x0F4018
                incbin  'data\sounds\dacs\dac_8F.bin' 
DAC_8F_Data_End:
;-------------------------------------------------------------------------------
DAC_89_Data:                                                   ; Offset_0x0F4528
                incbin  'data\sounds\dacs\dac_89.bin' 
DAC_89_Data_End:
;-------------------------------------------------------------------------------
DAC_98_To_9A_Data:                                             ; Offset_0x0F4F48
                incbin  'data\sounds\dacs\dac98-9A.bin' 
DAC_98_To_9A_Data_End:  
;-------------------------------------------------------------------------------
DAC_9B_Data:                                                   ; Offset_0x0F5C67
                incbin  'data\sounds\dacs\dac_9B.bin' 
DAC_9B_Data_End:
;-------------------------------------------------------------------------------
Offset_0x0F7304:
                incbin  'data\unknown\dummy6.dat'           
;-------------------------------------------------------------------------------                   
SEGA_PCM_Data:                                                 ; Offset_0x0F8000
                incbin  'data\sounds\sega.pcm'
;===============================================================================
; Mapeamento dos Sprites do Sonic      
; ->>>
;===============================================================================                
Sonic_Mappings:                                                ; Offset_0x100000
                dc.w    Offset_0x1001E4-Sonic_Mappings
                dc.w    Offset_0x1001E6-Sonic_Mappings
                dc.w    Offset_0x100200-Sonic_Mappings
                dc.w    Offset_0x10020E-Sonic_Mappings
                dc.w    Offset_0x100228-Sonic_Mappings
                dc.w    Offset_0x100242-Sonic_Mappings
                dc.w    Offset_0x100262-Sonic_Mappings
                dc.w    Offset_0x100276-Sonic_Mappings
                dc.w    Offset_0x100284-Sonic_Mappings
                dc.w    Offset_0x100292-Sonic_Mappings
                dc.w    Offset_0x1002A0-Sonic_Mappings
                dc.w    Offset_0x1002AE-Sonic_Mappings
                dc.w    Offset_0x1002C8-Sonic_Mappings
                dc.w    Offset_0x1002E2-Sonic_Mappings
                dc.w    Offset_0x1002F6-Sonic_Mappings
                dc.w    Offset_0x100310-Sonic_Mappings
                dc.w    Offset_0x100324-Sonic_Mappings
                dc.w    Offset_0x100332-Sonic_Mappings
                dc.w    Offset_0x100346-Sonic_Mappings
                dc.w    Offset_0x100360-Sonic_Mappings
                dc.w    Offset_0x100374-Sonic_Mappings
                dc.w    Offset_0x100382-Sonic_Mappings
                dc.w    Offset_0x10039C-Sonic_Mappings
                dc.w    Offset_0x1003BC-Sonic_Mappings
                dc.w    Offset_0x1003D6-Sonic_Mappings
                dc.w    Offset_0x1003F0-Sonic_Mappings
                dc.w    Offset_0x100410-Sonic_Mappings
                dc.w    Offset_0x100430-Sonic_Mappings
                dc.w    Offset_0x10044A-Sonic_Mappings
                dc.w    Offset_0x10046A-Sonic_Mappings
                dc.w    Offset_0x10047E-Sonic_Mappings
                dc.w    Offset_0x100492-Sonic_Mappings
                dc.w    Offset_0x1004A6-Sonic_Mappings
                dc.w    Offset_0x1004B4-Sonic_Mappings
                dc.w    Offset_0x1004C8-Sonic_Mappings
                dc.w    Offset_0x1004DC-Sonic_Mappings
                dc.w    Offset_0x1004F0-Sonic_Mappings
                dc.w    Offset_0x1004FE-Sonic_Mappings
                dc.w    Offset_0x100518-Sonic_Mappings
                dc.w    Offset_0x100538-Sonic_Mappings
                dc.w    Offset_0x100552-Sonic_Mappings
                dc.w    Offset_0x10056C-Sonic_Mappings
                dc.w    Offset_0x100586-Sonic_Mappings
                dc.w    Offset_0x1005A6-Sonic_Mappings
                dc.w    Offset_0x1005C0-Sonic_Mappings
                dc.w    Offset_0x1005DA-Sonic_Mappings
                dc.w    Offset_0x1005E8-Sonic_Mappings
                dc.w    Offset_0x1005F6-Sonic_Mappings
                dc.w    Offset_0x100604-Sonic_Mappings
                dc.w    Offset_0x100612-Sonic_Mappings
                dc.w    Offset_0x10062C-Sonic_Mappings
                dc.w    Offset_0x100640-Sonic_Mappings
                dc.w    Offset_0x10065A-Sonic_Mappings
                dc.w    Offset_0x10066E-Sonic_Mappings
                dc.w    Offset_0x10067C-Sonic_Mappings
                dc.w    Offset_0x10068A-Sonic_Mappings
                dc.w    Offset_0x100698-Sonic_Mappings
                dc.w    Offset_0x1006A6-Sonic_Mappings
                dc.w    Offset_0x1006BA-Sonic_Mappings
                dc.w    Offset_0x1006C8-Sonic_Mappings
                dc.w    Offset_0x1006DC-Sonic_Mappings
                dc.w    Offset_0x1006EA-Sonic_Mappings
                dc.w    Offset_0x1006F2-Sonic_Mappings
                dc.w    Offset_0x1006FA-Sonic_Mappings
                dc.w    Offset_0x100702-Sonic_Mappings
                dc.w    Offset_0x10070A-Sonic_Mappings
                dc.w    Offset_0x100712-Sonic_Mappings
                dc.w    Offset_0x10071A-Sonic_Mappings
                dc.w    Offset_0x100722-Sonic_Mappings
                dc.w    Offset_0x10072A-Sonic_Mappings
                dc.w    Offset_0x100732-Sonic_Mappings
                dc.w    Offset_0x10073A-Sonic_Mappings
                dc.w    Offset_0x100742-Sonic_Mappings
                dc.w    Offset_0x100756-Sonic_Mappings
                dc.w    Offset_0x10076A-Sonic_Mappings
                dc.w    Offset_0x10077E-Sonic_Mappings
                dc.w    Offset_0x100792-Sonic_Mappings
                dc.w    Offset_0x10079A-Sonic_Mappings
                dc.w    Offset_0x1007A2-Sonic_Mappings
                dc.w    Offset_0x1007B0-Sonic_Mappings
                dc.w    Offset_0x1007BE-Sonic_Mappings
                dc.w    Offset_0x1007D2-Sonic_Mappings
                dc.w    Offset_0x1007E6-Sonic_Mappings
                dc.w    Offset_0x1007F4-Sonic_Mappings
                dc.w    Offset_0x100802-Sonic_Mappings
                dc.w    Offset_0x100816-Sonic_Mappings
                dc.w    Offset_0x100830-Sonic_Mappings
                dc.w    Offset_0x100844-Sonic_Mappings
                dc.w    Offset_0x100858-Sonic_Mappings
                dc.w    Offset_0x10086C-Sonic_Mappings
                dc.w    Offset_0x100880-Sonic_Mappings
                dc.w    Offset_0x100894-Sonic_Mappings
                dc.w    Offset_0x1008A2-Sonic_Mappings
                dc.w    Offset_0x1008BC-Sonic_Mappings
                dc.w    Offset_0x1008D6-Sonic_Mappings
                dc.w    Offset_0x1008EA-Sonic_Mappings
                dc.w    Offset_0x1008FE-Sonic_Mappings
                dc.w    Offset_0x100912-Sonic_Mappings
                dc.w    Offset_0x100920-Sonic_Mappings
                dc.w    Offset_0x100928-Sonic_Mappings
                dc.w    Offset_0x100936-Sonic_Mappings
                dc.w    Offset_0x10094A-Sonic_Mappings
                dc.w    Offset_0x10095E-Sonic_Mappings
                dc.w    Offset_0x100972-Sonic_Mappings
                dc.w    Offset_0x100980-Sonic_Mappings
                dc.w    Offset_0x10098E-Sonic_Mappings
                dc.w    Offset_0x1009A2-Sonic_Mappings
                dc.w    Offset_0x1009B0-Sonic_Mappings
                dc.w    Offset_0x1009C4-Sonic_Mappings
                dc.w    Offset_0x1009D8-Sonic_Mappings
                dc.w    Offset_0x1009E0-Sonic_Mappings
                dc.w    Offset_0x1009F4-Sonic_Mappings
                dc.w    Offset_0x100A08-Sonic_Mappings
                dc.w    Offset_0x100A28-Sonic_Mappings
                dc.w    Offset_0x100A48-Sonic_Mappings
                dc.w    Offset_0x100A56-Sonic_Mappings
                dc.w    Offset_0x100A64-Sonic_Mappings
                dc.w    Offset_0x100A72-Sonic_Mappings
                dc.w    Offset_0x100A86-Sonic_Mappings
                dc.w    Offset_0x100AA0-Sonic_Mappings
                dc.w    Offset_0x100AB4-Sonic_Mappings
                dc.w    Offset_0x100AC2-Sonic_Mappings
                dc.w    Offset_0x100AD6-Sonic_Mappings
                dc.w    Offset_0x100AF0-Sonic_Mappings
                dc.w    Offset_0x100B04-Sonic_Mappings
                dc.w    Offset_0x100B12-Sonic_Mappings
                dc.w    Offset_0x100B2C-Sonic_Mappings
                dc.w    Offset_0x100B4C-Sonic_Mappings
                dc.w    Offset_0x100B6C-Sonic_Mappings
                dc.w    Offset_0x100B8C-Sonic_Mappings
                dc.w    Offset_0x100BB2-Sonic_Mappings
                dc.w    Offset_0x100BD8-Sonic_Mappings
                dc.w    Offset_0x100BF8-Sonic_Mappings
                dc.w    Offset_0x100C18-Sonic_Mappings
                dc.w    Offset_0x100C2C-Sonic_Mappings
                dc.w    Offset_0x100C40-Sonic_Mappings
                dc.w    Offset_0x100C54-Sonic_Mappings
                dc.w    Offset_0x100C62-Sonic_Mappings
                dc.w    Offset_0x100C76-Sonic_Mappings
                dc.w    Offset_0x100C8A-Sonic_Mappings
                dc.w    Offset_0x100C9E-Sonic_Mappings
                dc.w    Offset_0x100CAC-Sonic_Mappings
                dc.w    Offset_0x100CC6-Sonic_Mappings
                dc.w    Offset_0x100CE6-Sonic_Mappings
                dc.w    Offset_0x100D00-Sonic_Mappings
                dc.w    Offset_0x100D1A-Sonic_Mappings
                dc.w    Offset_0x100D34-Sonic_Mappings
                dc.w    Offset_0x100D54-Sonic_Mappings
                dc.w    Offset_0x100D6E-Sonic_Mappings
                dc.w    Offset_0x100D88-Sonic_Mappings
                dc.w    Offset_0x100D9C-Sonic_Mappings
                dc.w    Offset_0x100DB6-Sonic_Mappings
                dc.w    Offset_0x100DCA-Sonic_Mappings
                dc.w    Offset_0x100DD8-Sonic_Mappings
                dc.w    Offset_0x100DEC-Sonic_Mappings
                dc.w    Offset_0x100E06-Sonic_Mappings
                dc.w    Offset_0x100E1A-Sonic_Mappings
                dc.w    Offset_0x100E28-Sonic_Mappings
                dc.w    Offset_0x100E48-Sonic_Mappings
                dc.w    Offset_0x100E6E-Sonic_Mappings
                dc.w    Offset_0x100E8E-Sonic_Mappings
                dc.w    Offset_0x100EAE-Sonic_Mappings
                dc.w    Offset_0x100ED4-Sonic_Mappings
                dc.w    Offset_0x100EFA-Sonic_Mappings
                dc.w    Offset_0x100F1A-Sonic_Mappings
                dc.w    Offset_0x100F40-Sonic_Mappings
                dc.w    Offset_0x100F54-Sonic_Mappings
                dc.w    Offset_0x100F68-Sonic_Mappings
                dc.w    Offset_0x100F7C-Sonic_Mappings
                dc.w    Offset_0x100F8A-Sonic_Mappings
                dc.w    Offset_0x100F9E-Sonic_Mappings
                dc.w    Offset_0x100FB2-Sonic_Mappings
                dc.w    Offset_0x100FC6-Sonic_Mappings
                dc.w    Offset_0x100FD4-Sonic_Mappings
                dc.w    Offset_0x100FEE-Sonic_Mappings
                dc.w    Offset_0x10100E-Sonic_Mappings
                dc.w    Offset_0x10102E-Sonic_Mappings
                dc.w    Offset_0x101048-Sonic_Mappings
                dc.w    Offset_0x101062-Sonic_Mappings
                dc.w    Offset_0x101082-Sonic_Mappings
                dc.w    Offset_0x1010A2-Sonic_Mappings
                dc.w    Offset_0x1010C2-Sonic_Mappings
                dc.w    Offset_0x1010DC-Sonic_Mappings
                dc.w    Offset_0x1010F6-Sonic_Mappings
                dc.w    Offset_0x101110-Sonic_Mappings
                dc.w    Offset_0x101130-Sonic_Mappings
                dc.w    Offset_0x10114A-Sonic_Mappings
                dc.w    Offset_0x101164-Sonic_Mappings
                dc.w    Offset_0x10117E-Sonic_Mappings
                dc.w    Offset_0x10119E-Sonic_Mappings
                dc.w    Offset_0x1011B8-Sonic_Mappings
                dc.w    Offset_0x1011D2-Sonic_Mappings
                dc.w    Offset_0x1011EC-Sonic_Mappings
                dc.w    Offset_0x101206-Sonic_Mappings
                dc.w    Offset_0x101214-Sonic_Mappings
                dc.w    Offset_0x101228-Sonic_Mappings
                dc.w    Offset_0x10123C-Sonic_Mappings
                dc.w    Offset_0x101250-Sonic_Mappings
                dc.w    Offset_0x101264-Sonic_Mappings
                dc.w    Offset_0x101278-Sonic_Mappings
                dc.w    Offset_0x10128C-Sonic_Mappings
                dc.w    Offset_0x1012A0-Sonic_Mappings
                dc.w    Offset_0x1012B4-Sonic_Mappings
                dc.w    Offset_0x1012C8-Sonic_Mappings
                dc.w    Offset_0x1012E8-Sonic_Mappings
                dc.w    Offset_0x101302-Sonic_Mappings
                dc.w    Offset_0x10131C-Sonic_Mappings
                dc.w    Offset_0x101336-Sonic_Mappings
                dc.w    Offset_0x10134A-Sonic_Mappings
                dc.w    Offset_0x10135E-Sonic_Mappings
                dc.w    Offset_0x101372-Sonic_Mappings
                dc.w    Offset_0x10138C-Sonic_Mappings
                dc.w    Offset_0x1013A6-Sonic_Mappings
                dc.w    Offset_0x1013C0-Sonic_Mappings
                dc.w    Offset_0x1013CE-Sonic_Mappings
                dc.w    Offset_0x1013DC-Sonic_Mappings
                dc.w    Offset_0x1013F6-Sonic_Mappings
                dc.w    Offset_0x10140A-Sonic_Mappings
                dc.w    Offset_0x10141E-Sonic_Mappings
                dc.w    Offset_0x10142C-Sonic_Mappings
                dc.w    Offset_0x101440-Sonic_Mappings
                dc.w    Offset_0x101454-Sonic_Mappings
                dc.w    Offset_0x101468-Sonic_Mappings
                dc.w    Offset_0x101476-Sonic_Mappings
                dc.w    Offset_0x101490-Sonic_Mappings
                dc.w    Offset_0x1014A4-Sonic_Mappings
                dc.w    Offset_0x1014B8-Sonic_Mappings
                dc.w    Offset_0x1014C6-Sonic_Mappings
                dc.w    Offset_0x1014DA-Sonic_Mappings
                dc.w    Offset_0x1014E2-Sonic_Mappings
                dc.w    Offset_0x1014F6-Sonic_Mappings
                dc.w    Offset_0x101516-Sonic_Mappings
                dc.w    Offset_0x10152A-Sonic_Mappings
                dc.w    Offset_0x10154A-Sonic_Mappings
                dc.w    Offset_0x10155E-Sonic_Mappings
                dc.w    Offset_0x10157E-Sonic_Mappings
                dc.w    Offset_0x101592-Sonic_Mappings
                dc.w    Offset_0x1015B2-Sonic_Mappings
                dc.w    Offset_0x1015D2-Sonic_Mappings
                dc.w    Offset_0x1015F2-Sonic_Mappings
                dc.w    Offset_0x101600-Sonic_Mappings
                dc.w    Offset_0x10160E-Sonic_Mappings
Offset_0x1001E4:
                dc.w    $0000
Offset_0x1001E6:
                dc.w    $0004
                dc.w    $E405, $0000, $FFF8
                dc.w    $EC03, $0004, $FFF0
                dc.w    $F409, $0008, $FFF8
                dc.w    $0409, $000E, $FFF8
Offset_0x100200:
                dc.w    $0002
                dc.w    $EC0B, $0000, $FFF0
                dc.w    $0C09, $000C, $FFF8
Offset_0x10020E:
                dc.w    $0004
                dc.w    $EC03, $0000, $FFF0
                dc.w    $EC05, $0004, $FFF8
                dc.w    $FC05, $0008, $FFF8
                dc.w    $0C09, $000C, $FFF8
Offset_0x100228:
                dc.w    $0004
                dc.w    $EC03, $0000, $FFF0
                dc.w    $EC05, $0004, $FFF8
                dc.w    $FC05, $0008, $FFF8
                dc.w    $0C09, $000C, $FFF8
Offset_0x100242:
                dc.w    $0005
                dc.w    $EC03, $0000, $FFF0
                dc.w    $EC05, $0004, $FFF8
                dc.w    $FC05, $0008, $FFF8
                dc.w    $0C01, $000C, $FFF8
                dc.w    $0C05, $000E, $0000
Offset_0x100262:
                dc.w    $0003
                dc.w    $EC03, $0000, $FFF0
                dc.w    $EC07, $0004, $FFF8
                dc.w    $0C09, $000C, $FFF8
Offset_0x100276:
                dc.w    $0002
                dc.w    $F40B, $0000, $FFF0
                dc.w    $0401, $000C, $0008
Offset_0x100284:
                dc.w    $0002
                dc.w    $F40B, $0000, $FFE8
                dc.w    $0405, $000C, $0000
Offset_0x100292:
                dc.w    $0002
                dc.w    $F40B, $0000, $FFE8
                dc.w    $0405, $000C, $0000
Offset_0x1002A0:
                dc.w    $0002
                dc.w    $E40B, $0000, $FFF0
                dc.w    $040D, $000C, $FFF0
Offset_0x1002AE:
                dc.w    $0004
                dc.w    $E405, $0000, $FFF8
                dc.w    $EC03, $0004, $FFF0
                dc.w    $F409, $0008, $FFF8
                dc.w    $0409, $000E, $FFF8
Offset_0x1002C8:
                dc.w    $0004
                dc.w    $EC03, $0000, $FFF0
                dc.w    $E405, $0004, $FFF8
                dc.w    $F405, $0008, $FFF8
                dc.w    $0409, $000C, $FFF8
Offset_0x1002E2:
                dc.w    $0003
                dc.w    $EB0D, $0000, $FFEE
                dc.w    $0301, $0008, $FFEC
                dc.w    $FB0F, $000A, $FFF4
Offset_0x1002F6:
                dc.w    $0004
                dc.w    $EC0D, $0000, $FFEE
                dc.w    $0401, $0008, $FFEC
                dc.w    $FC0B, $000A, $FFF4
                dc.w    $0401, $0016, $000C
Offset_0x100310:
                dc.w    $0003
                dc.w    $ED0D, $0000, $FFED
                dc.w    $FD09, $0008, $FFF4
                dc.w    $0D05, $000E, $FFF7
Offset_0x100324:
                dc.w    $0002
                dc.w    $EC09, $0000, $FFF4
                dc.w    $FC0F, $0006, $FFEE
Offset_0x100332:
                dc.w    $0003
                dc.w    $EB09, $0000, $FFF4
                dc.w    $FB0F, $0006, $FFEE
                dc.w    $FB01, $0016, $000E
Offset_0x100346:
                dc.w    $0004
                dc.w    $EC09, $0000, $FFF4
                dc.w    $0401, $0006, $FFEC
                dc.w    $FC0B, $0008, $FFF4
                dc.w    $0401, $0014, $000C
Offset_0x100360:
                dc.w    $0003
                dc.w    $ED0D, $0000, $FFED
                dc.w    $FD09, $0008, $FFF4
                dc.w    $0D05, $000E, $FFF7
Offset_0x100374:
                dc.w    $0002
                dc.w    $EC0D, $0000, $FFEE
                dc.w    $FC0B, $0008, $FFF3
Offset_0x100382:
                dc.w    $0004
                dc.w    $EB09, $0000, $FFEA
                dc.w    $FB09, $0006, $FFEA
                dc.w    $F305, $000C, $0002
                dc.w    $0B01, $0010, $FFFA
Offset_0x10039C:
                dc.w    $0005
                dc.w    $EC09, $0000, $FFEB
                dc.w    $EC01, $0006, $0003
                dc.w    $FC0D, $0008, $FFEB
                dc.w    $FC05, $0010, $000B
                dc.w    $0C01, $0014, $FFFB
Offset_0x1003BC:
                dc.w    $0004
                dc.w    $ED07, $0000, $FFEC
                dc.w    $ED03, $0008, $FFFC
                dc.w    $F501, $000C, $0004
                dc.w    $0505, $000E, $0004
Offset_0x1003D6:
                dc.w    $0004
                dc.w    $EC09, $0000, $FFEB
                dc.w    $EC01, $0006, $0003
                dc.w    $FC05, $0008, $FFEB
                dc.w    $FC0B, $000C, $FFFB
Offset_0x1003F0:
                dc.w    $0005
                dc.w    $EB09, $0000, $FFEA
                dc.w    $EB01, $0006, $0002
                dc.w    $FB0D, $0008, $FFEA
                dc.w    $F301, $0010, $000A
                dc.w    $0B05, $0012, $FFF2
Offset_0x100410:
                dc.w    $0005
                dc.w    $EC09, $0000, $FFEB
                dc.w    $EC01, $0006, $0003
                dc.w    $FC0D, $0008, $FFEB
                dc.w    $FA05, $0010, $000B
                dc.w    $0C01, $0014, $FFFB
Offset_0x100430:
                dc.w    $0004
                dc.w    $ED07, $0000, $FFEC
                dc.w    $ED03, $0008, $FFFC
                dc.w    $F501, $000C, $0004
                dc.w    $0505, $000E, $0004
Offset_0x10044A:
                dc.w    $0005
                dc.w    $EC09, $0000, $FFEB
                dc.w    $FC09, $0006, $FFEB
                dc.w    $F401, $000C, $0003
                dc.w    $0C01, $000E, $FFFB
                dc.w    $0405, $0010, $0003
Offset_0x10046A:
                dc.w    $0003
                dc.w    $F207, $0000, $FFEB
                dc.w    $EC0B, $0008, $FFFB
                dc.w    $0C05, $0014, $0003
Offset_0x10047E:
                dc.w    $0003
                dc.w    $F207, $0000, $FFEC
                dc.w    $EC0B, $0008, $FFFC
                dc.w    $0C05, $0014, $0004
Offset_0x100492:
                dc.w    $0003
                dc.w    $F307, $0000, $FFED
                dc.w    $F403, $0008, $FFFD
                dc.w    $F905, $000C, $0005
Offset_0x1004A6:
                dc.w    $0002
                dc.w    $F407, $0000, $FFEC
                dc.w    $F20B, $0008, $FFFC
Offset_0x1004B4:
                dc.w    $0003
                dc.w    $F407, $0000, $FFEB
                dc.w    $E305, $0008, $FFFB
                dc.w    $F30B, $000C, $FFFB
Offset_0x1004C8:
                dc.w    $0003
                dc.w    $F407, $0000, $FFEC
                dc.w    $EC0B, $0008, $FFFC
                dc.w    $0C05, $0014, $0004
Offset_0x1004DC:
                dc.w    $0003
                dc.w    $F307, $0000, $FFED
                dc.w    $F403, $0008, $FFFD
                dc.w    $F905, $000C, $0005
Offset_0x1004F0:
                dc.w    $0002
                dc.w    $F207, $0000, $FFEC
                dc.w    $F40B, $0008, $FFFC
Offset_0x1004FE:
                dc.w    $0004
                dc.w    $EE05, $0000, $FFF3
                dc.w    $FE07, $0004, $FFEB
                dc.w    $FE0D, $000C, $FFFB
                dc.w    $0E01, $0014, $FFFB
Offset_0x100518:
                dc.w    $0005
                dc.w    $DD05, $0000, $FFFC
                dc.w    $ED09, $0004, $FFF4
                dc.w    $FD07, $000A, $FFEC
                dc.w    $FD0D, $0012, $FFFC
                dc.w    $0D01, $001A, $FFFC
Offset_0x100538:
                dc.w    $0004
                dc.w    $EC0D, $0000, $FFF5
                dc.w    $FC07, $0008, $FFED
                dc.w    $FC05, $0010, $FFFD
                dc.w    $0C01, $0014, $FFFD
Offset_0x100552:
                dc.w    $0004
                dc.w    $ED0D, $0000, $FFF4
                dc.w    $FD07, $0008, $FFEC
                dc.w    $FD09, $0010, $FFFC
                dc.w    $0D01, $0016, $FFFC
Offset_0x10056C:
                dc.w    $0004
                dc.w    $EE09, $0000, $FFF3
                dc.w    $FE07, $0006, $FFEB
                dc.w    $FE0D, $000E, $FFFB
                dc.w    $0E01, $0016, $FFFB
Offset_0x100586:
                dc.w    $0005
                dc.w    $DD05, $0000, $FFFA
                dc.w    $ED09, $0004, $FFF4
                dc.w    $FD07, $000A, $FFEC
                dc.w    $FD0D, $0012, $FFFC
                dc.w    $0D01, $001A, $FFFC
Offset_0x1005A6:
                dc.w    $0004
                dc.w    $EC0D, $0000, $FFF5
                dc.w    $FC07, $0008, $FFED
                dc.w    $FC05, $0010, $FFFD
                dc.w    $0C01, $0014, $FFFD
Offset_0x1005C0:
                dc.w    $0004
                dc.w    $ED0D, $0000, $FFF4
                dc.w    $FD07, $0008, $FFEC
                dc.w    $FD09, $0010, $FFFC
                dc.w    $0D01, $0016, $FFFC
Offset_0x1005DA:
                dc.w    $0002
                dc.w    $EE09, $0000, $FFF8
                dc.w    $FE0F, $0006, $FFF0
Offset_0x1005E8:
                dc.w    $0002
                dc.w    $EE09, $0000, $FFF8
                dc.w    $FE0F, $0006, $FFF0
Offset_0x1005F6:
                dc.w    $0002
                dc.w    $EE09, $0000, $FFF8
                dc.w    $FE0F, $0006, $FFF0
Offset_0x100604:
                dc.w    $0002
                dc.w    $EE09, $0000, $FFF8
                dc.w    $FE0F, $0006, $FFF0
Offset_0x100612:
                dc.w    $0004
                dc.w    $EC09, $0000, $FFED
                dc.w    $EC01, $0006, $0005
                dc.w    $FC0D, $0008, $FFF4
                dc.w    $0C09, $0010, $FFFA
Offset_0x10062C:
                dc.w    $0003
                dc.w    $EC0D, $0000, $FFED
                dc.w    $FC0D, $0008, $FFF5
                dc.w    $0C09, $0010, $FFF8
Offset_0x100640:
                dc.w    $0004
                dc.w    $EC09, $0000, $FFED
                dc.w    $EC01, $0006, $0005
                dc.w    $FC0D, $0008, $FFF4
                dc.w    $0C09, $0010, $FFFD
Offset_0x10065A:
                dc.w    $0003
                dc.w    $EC0D, $0000, $FFED
                dc.w    $FC0D, $0008, $FFF5
                dc.w    $0C09, $0010, $FFF8
Offset_0x10066E:
                dc.w    $0002
                dc.w    $F007, $0000, $FFEE
                dc.w    $F00B, $0008, $FFFE
Offset_0x10067C:
                dc.w    $0002
                dc.w    $F007, $0000, $FFEE
                dc.w    $F00B, $0008, $FFFE
Offset_0x10068A:
                dc.w    $0002
                dc.w    $F007, $0000, $FFEE
                dc.w    $F00B, $0008, $FFFE
Offset_0x100698:
                dc.w    $0002
                dc.w    $F007, $0000, $FFEE
                dc.w    $F00B, $0008, $FFFE
Offset_0x1006A6:
                dc.w    $0003
                dc.w    $E901, $0000, $FFF4
                dc.w    $F907, $0002, $FFEC
                dc.w    $EC0B, $000A, $FFFC
Offset_0x1006BA:
                dc.w    $0002
                dc.w    $F307, $0000, $FFEC
                dc.w    $EB0B, $0008, $FFFC
Offset_0x1006C8:
                dc.w    $0003
                dc.w    $E901, $0000, $FFF4
                dc.w    $F907, $0002, $FFEC
                dc.w    $EC0B, $000A, $FFFC
Offset_0x1006DC:
                dc.w    $0002
                dc.w    $F307, $0000, $FFEC
                dc.w    $EB0B, $0008, $FFFC
Offset_0x1006EA:
                dc.w    $0001
                dc.w    $F00F, $0000, $FFF0
Offset_0x1006F2:
                dc.w    $0001
                dc.w    $F00F, $0000, $FFF0
Offset_0x1006FA:
                dc.w    $0001
                dc.w    $F00F, $0000, $FFF0
Offset_0x100702:
                dc.w    $0001
                dc.w    $F00F, $0000, $FFF0
Offset_0x10070A:
                dc.w    $0001
                dc.w    $F00F, $0000, $FFF0
Offset_0x100712:
                dc.w    $0001
                dc.w    $F80F, $0000, $FFF4
Offset_0x10071A:
                dc.w    $0001
                dc.w    $F80F, $0000, $FFF4
Offset_0x100722:
                dc.w    $0001
                dc.w    $F80F, $0000, $FFF4
Offset_0x10072A:
                dc.w    $0001
                dc.w    $F80F, $0000, $FFF4
Offset_0x100732:
                dc.w    $0001
                dc.w    $F80F, $0000, $FFF4
Offset_0x10073A:
                dc.w    $0001
                dc.w    $F80F, $0000, $FFF4
Offset_0x100742:
                dc.w    $0003
                dc.w    $E509, $0000, $FFF3
                dc.w    $F509, $0006, $FFF3
                dc.w    $050D, $000C, $FFEB
Offset_0x100756:
                dc.w    $0003
                dc.w    $E409, $0000, $FFF3
                dc.w    $F409, $0006, $FFF3
                dc.w    $0409, $000C, $FFF3
Offset_0x10076A:
                dc.w    $0003
                dc.w    $E509, $0000, $FFF3
                dc.w    $F509, $0006, $FFF3
                dc.w    $050D, $000C, $FFEB
Offset_0x10077E:
                dc.w    $0003
                dc.w    $E509, $0000, $FFF3
                dc.w    $F509, $0006, $FFF3
                dc.w    $0509, $000C, $FFF3
Offset_0x100792:
                dc.w    $0001
                dc.w    $F40B, $0000, $FFF6
Offset_0x10079A:
                dc.w    $0001
                dc.w    $F40F, $0000, $FFF2
Offset_0x1007A2:
                dc.w    $0002
                dc.w    $F801, $0000, $FFEC
                dc.w    $F00F, $0002, $FFF4
Offset_0x1007B0:
                dc.w    $0002
                dc.w    $F003, $0000, $FFEC
                dc.w    $F00F, $0004, $FFF4
Offset_0x1007BE:
                dc.w    $0003
                dc.w    $E80F, $0000, $FFE8
                dc.w    $E801, $0010, $0008
                dc.w    $F805, $0012, $0008
Offset_0x1007D2:
                dc.w    $0003
                dc.w    $E80F, $0000, $FFE8
                dc.w    $E801, $0010, $0008
                dc.w    $F805, $0012, $0008
Offset_0x1007E6:
                dc.w    $0002
                dc.w    $E80B, $0000, $FFF4
                dc.w    $0809, $000C, $FFF4
Offset_0x1007F4:
                dc.w    $0002
                dc.w    $E80B, $0000, $FFF4
                dc.w    $0809, $000C, $FFF4
Offset_0x100802:
                dc.w    $0003
                dc.w    $FC05, $0000, $FFEC
                dc.w    $F40B, $0004, $FFFC
                dc.w    $F401, $0010, $0014
Offset_0x100816:
                dc.w    $0004
                dc.w    $F401, $0000, $FFE8
                dc.w    $F407, $0002, $FFF0
                dc.w    $F407, $0802, $0000
                dc.w    $F401, $0800, $0010
Offset_0x100830:
                dc.w    $0003
                dc.w    $FC05, $0800, $0004
                dc.w    $F40B, $0804, $FFEC
                dc.w    $F401, $0810, $FFE4
Offset_0x100844:
                dc.w    $0003
                dc.w    $F401, $0000, $FFE4
                dc.w    $F40B, $0002, $FFEC
                dc.w    $FC01, $000E, $0004
Offset_0x100858:
                dc.w    $0003
                dc.w    $F401, $0800, $0014
                dc.w    $F40B, $0802, $FFFC
                dc.w    $FC01, $080E, $FFF4
Offset_0x10086C:
                dc.w    $0003
                dc.w    $FC05, $0000, $FFEC
                dc.w    $F40B, $0004, $FFFC
                dc.w    $F401, $0010, $0014
Offset_0x100880:
                dc.w    $0003
                dc.w    $E409, $0000, $FFF4
                dc.w    $F40F, $0006, $FFEC
                dc.w    $0401, $0016, $000C
Offset_0x100894:
                dc.w    $0002
                dc.w    $E80B, $0000, $FFF4
                dc.w    $0805, $000C, $FFFC
Offset_0x1008A2:
                dc.w    $0004
                dc.w    $EA01, $0000, $FFE8
                dc.w    $EA0B, $0002, $FFF0
                dc.w    $EA01, $000E, $0008
                dc.w    $0A0D, $0010, $FFF0
Offset_0x1008BC:
                dc.w    $0004
                dc.w    $EA01, $0000, $FFE8
                dc.w    $EA0B, $0002, $FFF0
                dc.w    $EA01, $000E, $0008
                dc.w    $0A0D, $0010, $FFF0
Offset_0x1008D6:
                dc.w    $0003
                dc.w    $EA0D, $0000, $FFE8
                dc.w    $EA01, $0008, $0008
                dc.w    $FA0B, $000A, $FFF0
Offset_0x1008EA:
                dc.w    $0003
                dc.w    $E409, $0000, $FFF0
                dc.w    $F40B, $0006, $FFF0
                dc.w    $F401, $0012, $0008
Offset_0x1008FE:
                dc.w    $0003
                dc.w    $E50B, $0000, $FFF0
                dc.w    $F401, $000C, $0008
                dc.w    $0505, $000E, $FFF8
Offset_0x100912:
                dc.w    $0002
                dc.w    $EC0B, $0000, $FFF1
                dc.w    $FC01, $000C, $0009
Offset_0x100920:
                dc.w    $0001
                dc.w    $EE0F, $0000, $FFF0
Offset_0x100928:
                dc.w    $0002
                dc.w    $F20B, $0000, $FFF0
                dc.w    $FA01, $000C, $0008
Offset_0x100936:
                dc.w    $0003
                dc.w    $E401, $0000, $0000
                dc.w    $F40B, $0002, $FFF0
                dc.w    $F401, $000E, $0008
Offset_0x10094A:
                dc.w    $0003
                dc.w    $E509, $0000, $FFF0
                dc.w    $F50B, $0006, $FFF0
                dc.w    $ED03, $0012, $0008
Offset_0x10095E:
                dc.w    $0003
                dc.w    $E405, $0000, $FFF8
                dc.w    $F40B, $0004, $FFF0
                dc.w    $F401, $0010, $0008
Offset_0x100972:
                dc.w    $0002
                dc.w    $ED0B, $0000, $FFF0
                dc.w    $F501, $000C, $0008
Offset_0x100980:
                dc.w    $0002
                dc.w    $F401, $0000, $FFF0
                dc.w    $F10B, $0002, $FFF8
Offset_0x10098E:
                dc.w    $0003
                dc.w    $E405, $0000, $FFF1
                dc.w    $F40B, $0004, $FFF0
                dc.w    $F401, $0010, $0008
Offset_0x1009A2:
                dc.w    $0002
                dc.w    $E105, $0000, $FFF0
                dc.w    $F10F, $0004, $FFF0
Offset_0x1009B0:
                dc.w    $0003
                dc.w    $E807, $0000, $FFF0
                dc.w    $E003, $0008, $0000
                dc.w    $0009, $000C, $0000
Offset_0x1009C4:
                dc.w    $0003
                dc.w    $E807, $0000, $FFF0
                dc.w    $E003, $0008, $0000
                dc.w    $0009, $000C, $0000
Offset_0x1009D8:
                dc.w    $0001
                dc.w    $F00B, $0000, $FFF5
Offset_0x1009E0:
                dc.w    $0003
                dc.w    $E60B, $0000, $FFF0
                dc.w    $EE01, $000C, $0008
                dc.w    $0609, $000E, $FFF0
Offset_0x1009F4:
                dc.w    $0003
                dc.w    $E40A, $0000, $FFF0
                dc.w    $FC00, $0009, $0008
                dc.w    $FC0A, $000A, $FFF0
Offset_0x100A08:
                dc.w    $0005
                dc.w    $E408, $0000, $FFF0
                dc.w    $EC01, $0003, $FFF0
                dc.w    $EC05, $0005, $FFF8
                dc.w    $FC0A, $0009, $FFF0
                dc.w    $FD00, $0012, $0008
Offset_0x100A28:
                dc.w    $0005
                dc.w    $E408, $0000, $FFF0
                dc.w    $EC01, $0003, $FFF0
                dc.w    $EC05, $0005, $FFF8
                dc.w    $FC0A, $0009, $FFF0
                dc.w    $FD00, $0012, $0008
Offset_0x100A48:
                dc.w    $0002
                dc.w    $E70A, $0000, $FFF1
                dc.w    $FF0A, $0009, $FFF3
Offset_0x100A56:
                dc.w    $0002
                dc.w    $E70A, $0000, $FFF1
                dc.w    $FF0A, $0009, $FFF3
Offset_0x100A64:
                dc.w    $0002
                dc.w    $E70A, $0000, $FFF1
                dc.w    $FF0A, $0009, $FFF3
Offset_0x100A72:
                dc.w    $0003
                dc.w    $E30E, $0000, $FFEE
                dc.w    $0301, $000C, $FFEC
                dc.w    $FB0F, $000E, $FFF4
Offset_0x100A86:
                dc.w    $0004
                dc.w    $E40E, $0000, $FFEE
                dc.w    $0401, $000C, $FFEC
                dc.w    $FC0B, $000E, $FFF4
                dc.w    $0401, $001A, $000C
Offset_0x100AA0:
                dc.w    $0003
                dc.w    $E50E, $0000, $FFED
                dc.w    $FD09, $000C, $FFF4
                dc.w    $0D05, $0012, $FFF7
Offset_0x100AB4:
                dc.w    $0002
                dc.w    $E40A, $0000, $FFF4
                dc.w    $FC0F, $0009, $FFEE
Offset_0x100AC2:
                dc.w    $0003
                dc.w    $E30A, $0000, $FFF4
                dc.w    $FB0F, $0009, $FFEE
                dc.w    $FB01, $0019, $000E
Offset_0x100AD6:
                dc.w    $0004
                dc.w    $E40A, $0000, $FFF4
                dc.w    $0401, $0009, $FFEC
                dc.w    $FC0B, $000B, $FFF4
                dc.w    $0401, $0017, $000C
Offset_0x100AF0:
                dc.w    $0003
                dc.w    $E50E, $0000, $FFED
                dc.w    $FD09, $000C, $FFF4
                dc.w    $0D05, $0012, $FFF7
Offset_0x100B04:
                dc.w    $0002
                dc.w    $E40E, $0000, $FFEE
                dc.w    $FC0B, $000C, $FFF3
Offset_0x100B12:
                dc.w    $0004
                dc.w    $EB0D, $0000, $FFE2
                dc.w    $F305, $0008, $0002
                dc.w    $FB09, $000C, $FFEA
                dc.w    $0B01, $0012, $FFFA
Offset_0x100B2C:
                dc.w    $0005
                dc.w    $EC0D, $0000, $FFE3
                dc.w    $EC01, $0008, $0003
                dc.w    $FC0D, $000A, $FFEB
                dc.w    $FC05, $0012, $000B
                dc.w    $0C01, $0016, $FFFB
Offset_0x100B4C:
                dc.w    $0005
                dc.w    $ED0A, $0000, $FFE4
                dc.w    $ED03, $0009, $FFFC
                dc.w    $0500, $000D, $FFF4
                dc.w    $F501, $000E, $0004
                dc.w    $0505, $0010, $0004
Offset_0x100B6C:
                dc.w    $0005
                dc.w    $E400, $0000, $FFF1
                dc.w    $EC0D, $0001, $FFE3
                dc.w    $EC01, $0009, $0003
                dc.w    $FC05, $000B, $FFEB
                dc.w    $FC0B, $000F, $FFFB
Offset_0x100B8C:
                dc.w    $0006
                dc.w    $E300, $0000, $FFF0
                dc.w    $EB0D, $0001, $FFE2
                dc.w    $EB01, $0009, $0002
                dc.w    $F301, $000B, $000A
                dc.w    $FB0D, $000D, $FFEA
                dc.w    $0B05, $0015, $FFF2
Offset_0x100BB2:
                dc.w    $0006
                dc.w    $E400, $0000, $FFF1
                dc.w    $EC0D, $0001, $FFE3
                dc.w    $EC01, $0009, $0003
                dc.w    $FC0D, $000B, $FFEB
                dc.w    $FA05, $0013, $000B
                dc.w    $0C01, $0017, $FFFB
Offset_0x100BD8:
                dc.w    $0005
                dc.w    $ED0A, $0000, $FFE4
                dc.w    $ED03, $0009, $FFFC
                dc.w    $0500, $000D, $FFF4
                dc.w    $F501, $000E, $0004
                dc.w    $0505, $0010, $0004
Offset_0x100BF8:
                dc.w    $0005
                dc.w    $EC0D, $0000, $FFE3
                dc.w    $F401, $0008, $0003
                dc.w    $FC09, $000A, $FFEB
                dc.w    $0C00, $0010, $FFFB
                dc.w    $0405, $0011, $0003
Offset_0x100C18:
                dc.w    $0003
                dc.w    $F20B, $0000, $FFE3
                dc.w    $EC0B, $000C, $FFFB
                dc.w    $0C05, $0018, $0003
Offset_0x100C2C:
                dc.w    $0003
                dc.w    $F20B, $0000, $FFE4
                dc.w    $EC0B, $000C, $FFFC
                dc.w    $0C05, $0018, $0004
Offset_0x100C40:
                dc.w    $0003
                dc.w    $F30B, $0000, $FFE5
                dc.w    $F403, $000C, $FFFD
                dc.w    $F905, $0010, $0005
Offset_0x100C54:
                dc.w    $0002
                dc.w    $F40A, $0000, $FFE4
                dc.w    $F20B, $0009, $FFFC
Offset_0x100C62:
                dc.w    $0003
                dc.w    $F40A, $0000, $FFE3
                dc.w    $E305, $0009, $FFFB
                dc.w    $F30B, $000D, $FFFB
Offset_0x100C76:
                dc.w    $0003
                dc.w    $F40A, $0000, $FFE4
                dc.w    $EC0B, $0009, $FFFC
                dc.w    $0C05, $0015, $0004
Offset_0x100C8A:
                dc.w    $0003
                dc.w    $F30B, $0000, $FFE5
                dc.w    $F403, $000C, $FFFD
                dc.w    $F905, $0010, $0005
Offset_0x100C9E:
                dc.w    $0002
                dc.w    $F40B, $0000, $FFE4
                dc.w    $F20B, $000C, $FFFC
Offset_0x100CAC:
                dc.w    $0004
                dc.w    $EE05, $0000, $FFF3
                dc.w    $FE07, $0004, $FFEB
                dc.w    $FE0D, $000C, $FFFB
                dc.w    $0E00, $0014, $FFFB
Offset_0x100CC6:
                dc.w    $0005
                dc.w    $DD05, $0000, $FFFC
                dc.w    $ED09, $0004, $FFF4
                dc.w    $FD07, $000A, $FFEC
                dc.w    $FD0D, $0012, $FFFC
                dc.w    $0D00, $001A, $FFFC
Offset_0x100CE6:
                dc.w    $0004
                dc.w    $EC0D, $0000, $FFF5
                dc.w    $FC07, $0008, $FFED
                dc.w    $FC05, $0010, $FFFD
                dc.w    $0C01, $0014, $FFFD
Offset_0x100D00:
                dc.w    $0004
                dc.w    $ED0D, $0000, $FFF4
                dc.w    $FD0B, $0008, $FFE4
                dc.w    $FD09, $0014, $FFFC
                dc.w    $0D00, $001A, $FFFC
Offset_0x100D1A:
                dc.w    $0004
                dc.w    $EE09, $0000, $FFF3
                dc.w    $FE0B, $0006, $FFE3
                dc.w    $FE0D, $0012, $FFFB
                dc.w    $0E00, $001A, $FFFB
Offset_0x100D34:
                dc.w    $0005
                dc.w    $DD05, $0000, $FFFA
                dc.w    $ED09, $0004, $FFF4
                dc.w    $FD0B, $000A, $FFE4
                dc.w    $FD0D, $0016, $FFFC
                dc.w    $0D00, $001E, $FFFC
Offset_0x100D54:
                dc.w    $0004
                dc.w    $EC0D, $0000, $FFF5
                dc.w    $FC07, $0008, $FFED
                dc.w    $FC05, $0010, $FFFD
                dc.w    $0C01, $0014, $FFFD
Offset_0x100D6E:
                dc.w    $0004
                dc.w    $ED0D, $0000, $FFF4
                dc.w    $FD07, $0008, $FFEC
                dc.w    $FD09, $0010, $FFFC
                dc.w    $0D00, $0016, $FFFC
Offset_0x100D88:
                dc.w    $0003
                dc.w    $E30E, $0000, $FFEE
                dc.w    $0301, $000C, $FFEC
                dc.w    $FB0F, $000E, $FFF4
Offset_0x100D9C:
                dc.w    $0004
                dc.w    $E40E, $0000, $FFEE
                dc.w    $0401, $000C, $FFEC
                dc.w    $FC0B, $000E, $FFF4
                dc.w    $0401, $001A, $000C
Offset_0x100DB6:
                dc.w    $0003
                dc.w    $E50E, $0000, $FFED
                dc.w    $FD09, $000C, $FFF4
                dc.w    $0D05, $0012, $FFF7
Offset_0x100DCA:
                dc.w    $0002
                dc.w    $E40A, $0000, $FFF4
                dc.w    $FC0F, $0009, $FFEE
Offset_0x100DD8:
                dc.w    $0003
                dc.w    $E30A, $0000, $FFF4
                dc.w    $FB0F, $0009, $FFEE
                dc.w    $FB01, $0019, $000E
Offset_0x100DEC:
                dc.w    $0004
                dc.w    $E40A, $0000, $FFF4
                dc.w    $0401, $0009, $FFEC
                dc.w    $FC0B, $000B, $FFF4
                dc.w    $0401, $0017, $000C
Offset_0x100E06:
                dc.w    $0003
                dc.w    $E50E, $0000, $FFED
                dc.w    $FD09, $000C, $FFF4
                dc.w    $0D05, $0012, $FFF7
Offset_0x100E1A:
                dc.w    $0002
                dc.w    $E40E, $0000, $FFEE
                dc.w    $FC0B, $000C, $FFF3
Offset_0x100E28:
                dc.w    $0005
                dc.w    $E304, $0000, $FFEA
                dc.w    $EB0D, $0002, $FFE2
                dc.w    $FB09, $000A, $FFEA
                dc.w    $F305, $0010, $0002
                dc.w    $0B01, $0014, $FFFA
Offset_0x100E48:
                dc.w    $0006
                dc.w    $E404, $0000, $FFEB
                dc.w    $EC0D, $0002, $FFE3
                dc.w    $EC01, $000A, $0003
                dc.w    $FC0D, $000C, $FFEB
                dc.w    $FC05, $0014, $000B
                dc.w    $0C01, $0018, $FFFB
Offset_0x100E6E:
                dc.w    $0005
                dc.w    $EB09, $0000, $FFE4
                dc.w    $FB05, $0006, $FFEC
                dc.w    $ED03, $000A, $FFFC
                dc.w    $F501, $000E, $0004
                dc.w    $0505, $0010, $0004
Offset_0x100E8E:
                dc.w    $0005
                dc.w    $E404, $0000, $FFEB
                dc.w    $EC0D, $0002, $FFE3
                dc.w    $EC01, $000A, $0003
                dc.w    $FC05, $000C, $FFEB
                dc.w    $FC0B, $0010, $FFFB
Offset_0x100EAE:
                dc.w    $0006
                dc.w    $E304, $0000, $FFEA
                dc.w    $EB0D, $0002, $FFE2
                dc.w    $EB01, $000A, $0002
                dc.w    $F301, $000C, $000A
                dc.w    $FB0D, $000E, $FFEA
                dc.w    $0B05, $0016, $FFF2
Offset_0x100ED4:
                dc.w    $0006
                dc.w    $E404, $0000, $FFEB
                dc.w    $EC0D, $0002, $FFE3
                dc.w    $EC01, $000A, $0003
                dc.w    $FC0D, $000C, $FFEB
                dc.w    $FA05, $0014, $000B
                dc.w    $0C01, $0018, $FFFB
Offset_0x100EFA:
                dc.w    $0005
                dc.w    $EB09, $0000, $FFE4
                dc.w    $FB05, $0006, $FFEC
                dc.w    $ED03, $000A, $FFFC
                dc.w    $F501, $000E, $0004
                dc.w    $0505, $0010, $0004
Offset_0x100F1A:
                dc.w    $0006
                dc.w    $E404, $0000, $FFEB
                dc.w    $EC0D, $0002, $FFE3
                dc.w    $FC09, $000A, $FFEB
                dc.w    $F401, $0010, $0003
                dc.w    $0405, $0012, $0003
                dc.w    $0C01, $0016, $FFFB
Offset_0x100F40:
                dc.w    $0003
                dc.w    $F20B, $0000, $FFE3
                dc.w    $EC0B, $000C, $FFFB
                dc.w    $0C05, $0018, $0003
Offset_0x100F54:
                dc.w    $0003
                dc.w    $F20B, $0000, $FFE4
                dc.w    $EC0B, $000C, $FFFC
                dc.w    $0C05, $0018, $0004
Offset_0x100F68:
                dc.w    $0003
                dc.w    $F30B, $0000, $FFE5
                dc.w    $F403, $000C, $FFFD
                dc.w    $F905, $0010, $0005
Offset_0x100F7C:
                dc.w    $0002
                dc.w    $F40A, $0000, $FFE4
                dc.w    $F20B, $0009, $FFFC
Offset_0x100F8A:
                dc.w    $0003
                dc.w    $F40A, $0000, $FFE3
                dc.w    $E305, $0009, $FFFB
                dc.w    $F30B, $000D, $FFFB
Offset_0x100F9E:
                dc.w    $0003
                dc.w    $F40A, $0000, $FFE4
                dc.w    $EC0B, $0009, $FFFC
                dc.w    $0C05, $0015, $0004
Offset_0x100FB2:
                dc.w    $0003
                dc.w    $F30B, $0000, $FFE5
                dc.w    $F403, $000C, $FFFD
                dc.w    $F905, $0010, $0005
Offset_0x100FC6:
                dc.w    $0002
                dc.w    $F20B, $0000, $FFE4
                dc.w    $F40B, $000C, $FFFC
Offset_0x100FD4:
                dc.w    $0004
                dc.w    $EE05, $0000, $FFF3
                dc.w    $FE0B, $0004, $FFE3
                dc.w    $FE0D, $0010, $FFFB
                dc.w    $0E00, $0018, $FFFB
Offset_0x100FEE:
                dc.w    $0005
                dc.w    $DD05, $0000, $FFFC
                dc.w    $ED09, $0004, $FFF4
                dc.w    $FD0B, $000A, $FFE4
                dc.w    $FD0D, $0016, $FFFC
                dc.w    $0D00, $001E, $FFFC
Offset_0x10100E:
                dc.w    $0005
                dc.w    $EC0D, $0000, $FFF5
                dc.w    $0401, $0008, $FFE5
                dc.w    $FC07, $000A, $FFED
                dc.w    $FC05, $0012, $FFFD
                dc.w    $0C00, $0016, $FFFD
Offset_0x10102E:
                dc.w    $0004
                dc.w    $ED0D, $0000, $FFF4
                dc.w    $FD0B, $0008, $FFE4
                dc.w    $FD09, $0014, $FFFC
                dc.w    $0D00, $001A, $FFFC
Offset_0x101048:
                dc.w    $0004
                dc.w    $EE09, $0000, $FFF3
                dc.w    $FE0B, $0006, $FFE3
                dc.w    $FE0D, $0012, $FFFB
                dc.w    $0E00, $001A, $FFFB
Offset_0x101062:
                dc.w    $0005
                dc.w    $DD05, $0000, $FFFA
                dc.w    $ED09, $0004, $FFF4
                dc.w    $FD0B, $000A, $FFE4
                dc.w    $FD0D, $0016, $FFFC
                dc.w    $0D00, $001E, $FFFC
Offset_0x101082:
                dc.w    $0005
                dc.w    $EC0D, $0000, $FFF5
                dc.w    $0401, $0008, $FFE5
                dc.w    $FC07, $000A, $FFED
                dc.w    $FC05, $0012, $FFFD
                dc.w    $0C00, $0016, $FFFD
Offset_0x1010A2:
                dc.w    $0005
                dc.w    $ED0D, $0000, $FFF4
                dc.w    $0501, $0008, $FFE4
                dc.w    $FD07, $000A, $FFEC
                dc.w    $FD09, $0012, $FFFC
                dc.w    $0D00, $0018, $FFFC
Offset_0x1010C2:
                dc.w    $0004
                dc.w    $F008, $0000, $FFFC
                dc.w    $F800, $0003, $FFFC
                dc.w    $F805, $0004, $0004
                dc.w    $0009, $0008, $FFEC
Offset_0x1010DC:
                dc.w    $0004
                dc.w    $E604, $0000, $FFFA
                dc.w    $EE0B, $0002, $FFF2
                dc.w    $EE02, $000E, $000A
                dc.w    $0E04, $0011, $FFFA
Offset_0x1010F6:
                dc.w    $0004
                dc.w    $EC02, $0000, $FFF0
                dc.w    $EC05, $0003, $FFF8
                dc.w    $FC08, $0007, $FFF8
                dc.w    $0405, $000A, $0000
Offset_0x101110:
                dc.w    $0005
                dc.w    $EE08, $0000, $FFEE
                dc.w    $F60D, $0003, $FFE6
                dc.w    $F605, $000B, $0006
                dc.w    $0604, $000F, $FFEE
                dc.w    $0600, $0011, $0006
Offset_0x101130:
                dc.w    $0004
                dc.w    $E809, $0000, $FFFC
                dc.w    $F800, $0006, $FFFC
                dc.w    $F805, $0007, $0004
                dc.w    $0009, $000B, $FFEC
Offset_0x10114A:
                dc.w    $0004
                dc.w    $E604, $0000, $FFFA
                dc.w    $EE0B, $0002, $FFF2
                dc.w    $EE02, $000E, $000A
                dc.w    $0E00, $0011, $FFFA
Offset_0x101164:
                dc.w    $0004
                dc.w    $EC06, $0000, $FFE8
                dc.w    $EC05, $0006, $FFF8
                dc.w    $FC00, $000A, $FFF8
                dc.w    $FC06, $000B, $0000
Offset_0x10117E:
                dc.w    $0005
                dc.w    $EE08, $0000, $FFEE
                dc.w    $F60D, $0003, $FFE6
                dc.w    $F605, $000B, $0006
                dc.w    $0604, $000F, $FFEE
                dc.w    $0600, $0011, $0006
Offset_0x10119E:
                dc.w    $0004
                dc.w    $E509, $0000, $FFEE
                dc.w    $F505, $0006, $FFEB
                dc.w    $F505, $000A, $FFFB
                dc.w    $050D, $000E, $FFEB
Offset_0x1011B8:
                dc.w    $0004
                dc.w    $E409, $0000, $FFEE
                dc.w    $F405, $0006, $FFEB
                dc.w    $F405, $000A, $FFFB
                dc.w    $040D, $000E, $FFEB
Offset_0x1011D2:
                dc.w    $0004
                dc.w    $E509, $0000, $FFEE
                dc.w    $F505, $0006, $FFEB
                dc.w    $F505, $000A, $FFFB
                dc.w    $050D, $000E, $FFEB
Offset_0x1011EC:
                dc.w    $0004
                dc.w    $E409, $0000, $FFEE
                dc.w    $F405, $0006, $FFEB
                dc.w    $F405, $000A, $FFFB
                dc.w    $040D, $000E, $FFEB
Offset_0x101206:
                dc.w    $0002
                dc.w    $FC02, $0000, $FFF0
                dc.w    $F40B, $0003, $FFF8
Offset_0x101214:
                dc.w    $0003
                dc.w    $E40A, $0000, $FFEC
                dc.w    $FC08, $0009, $FFEC
                dc.w    $0405, $000C, $FFF1
Offset_0x101228:
                dc.w    $0003
                dc.w    $E40A, $0000, $FFEC
                dc.w    $FC08, $0009, $FFEC
                dc.w    $0405, $000C, $FFF1
Offset_0x10123C:
                dc.w    $0003
                dc.w    $E40A, $0000, $FFEC
                dc.w    $FC08, $0009, $FFEC
                dc.w    $0405, $000C, $FFF1
Offset_0x101250:
                dc.w    $0003
                dc.w    $E50A, $0000, $FFED
                dc.w    $FD08, $0009, $FFED
                dc.w    $0505, $000C, $FFF1
Offset_0x101264:
                dc.w    $0003
                dc.w    $E50A, $0000, $FFED
                dc.w    $FD08, $0009, $FFED
                dc.w    $0505, $000C, $FFF1
Offset_0x101278:
                dc.w    $0003
                dc.w    $E50A, $0000, $FFED
                dc.w    $FD08, $0009, $FFED
                dc.w    $0505, $000C, $FFF1
Offset_0x10128C:
                dc.w    $0003
                dc.w    $EC0B, $0000, $FFF0
                dc.w    $EC03, $000C, $0008
                dc.w    $0C05, $0010, $FFF1
Offset_0x1012A0:
                dc.w    $0003
                dc.w    $EC0B, $0000, $FFF0
                dc.w    $EC03, $000C, $0008
                dc.w    $0C05, $0010, $FFF1
Offset_0x1012B4:
                dc.w    $0003
                dc.w    $EC0B, $0000, $FFF0
                dc.w    $EC03, $000C, $0008
                dc.w    $0C05, $0010, $FFF1
Offset_0x1012C8:
                dc.w    $0005
                dc.w    $EC0B, $0000, $FFF0
                dc.w    $EC01, $000C, $0008
                dc.w    $EC01, $000E, $0010
                dc.w    $FC01, $0010, $0008
                dc.w    $0C05, $0012, $FFF1
Offset_0x1012E8:
                dc.w    $0004
                dc.w    $EC07, $0000, $FFEB
                dc.w    $EC09, $0008, $FFFB
                dc.w    $FC05, $000E, $FFFB
                dc.w    $0C09, $0012, $FFEE
Offset_0x101302:
                dc.w    $0004
                dc.w    $EC07, $0000, $FFEC
                dc.w    $EC09, $0008, $FFFC
                dc.w    $FC05, $000E, $FFFC
                dc.w    $0C09, $0012, $FFEF
Offset_0x10131C:
                dc.w    $0004
                dc.w    $EC07, $0000, $FFEC
                dc.w    $EC09, $0008, $FFFC
                dc.w    $FC09, $000E, $FFFC
                dc.w    $0C09, $0014, $FFF0
Offset_0x101336:
                dc.w    $0003
                dc.w    $F403, $0000, $FFE8
                dc.w    $EC0B, $0004, $FFF0
                dc.w    $0C05, $0010, $FFF0
Offset_0x10134A:
                dc.w    $0003
                dc.w    $F403, $0800, $000C
                dc.w    $EC0B, $0804, $FFF4
                dc.w    $0C05, $0810, $FFFC
Offset_0x10135E:
                dc.w    $0003
                dc.w    $F403, $0800, $000C
                dc.w    $EC0B, $0804, $FFF4
                dc.w    $0C05, $0810, $FFFC
Offset_0x101372:
                dc.w    $0004
                dc.w    $EC0D, $0000, $FFED
                dc.w    $FC0D, $0008, $FFEF
                dc.w    $FC01, $0010, $000F
                dc.w    $0C05, $0012, $0001
Offset_0x10138C:
                dc.w    $0004
                dc.w    $EC0D, $0000, $FFEE
                dc.w    $FC0D, $0008, $FFEF
                dc.w    $FC01, $0010, $000F
                dc.w    $0C05, $0012, $0001
Offset_0x1013A6:
                dc.w    $0004
                dc.w    $EC0D, $0000, $FFEF
                dc.w    $FC0D, $0008, $FFEF
                dc.w    $FC01, $0010, $000F
                dc.w    $0C05, $0012, $0001
Offset_0x1013C0:
                dc.w    $0002
                dc.w    $EC09, $0000, $FFF4
                dc.w    $FC0B, $0006, $FFF7
Offset_0x1013CE:
                dc.w    $0002
                dc.w    $E80B, $0000, $FFF3
                dc.w    $0808, $000C, $FFFB
Offset_0x1013DC:
                dc.w    $0004
                dc.w    $E804, $0000, $FFF0
                dc.w    $F00C, $0002, $FFF0
                dc.w    $F809, $0006, $FFF0
                dc.w    $0804, $000C, $FFF8
Offset_0x1013F6:
                dc.w    $0003
                dc.w    $E800, $0000, $FFF8
                dc.w    $F00D, $0001, $FFE8
                dc.w    $0008, $0009, $FFF0
Offset_0x10140A:
                dc.w    $0003
                dc.w    $EF00, $0000, $FFFB
                dc.w    $F70D, $0001, $FFEB
                dc.w    $0708, $0009, $FFEB
Offset_0x10141E:
                dc.w    $0002
                dc.w    $F10B, $0000, $FFF6
                dc.w    $F906, $000C, $FFE6
Offset_0x10142C:
                dc.w    $0003
                dc.w    $EF00, $0000, $FFFA
                dc.w    $F70A, $0001, $FFEA
                dc.w    $F705, $000A, $0002
Offset_0x101440:
                dc.w    $0003
                dc.w    $F004, $0000, $FFF8
                dc.w    $F80A, $0002, $FFF0
                dc.w    $0800, $000B, $0008
Offset_0x101454:
                dc.w    $0003
                dc.w    $F009, $0000, $FFF8
                dc.w    $000C, $0006, $FFF0
                dc.w    $0804, $000A, $0000
Offset_0x101468:
                dc.w    $0002
                dc.w    $EF00, $0000, $FFFC
                dc.w    $F70E, $0001, $FFEC
Offset_0x101476:
                dc.w    $0004
                dc.w    $EE04, $0000, $FFF4
                dc.w    $F600, $0002, $FFEC
                dc.w    $F60E, $0003, $FFF4
                dc.w    $0600, $000F, $FFEC
Offset_0x101490:
                dc.w    $0003
                dc.w    $F004, $0000, $0001
                dc.w    $F80A, $0002, $FFF1
                dc.w    $F806, $000B, $0009
Offset_0x1014A4:
                dc.w    $0003
                dc.w    $F004, $0000, $FFFB
                dc.w    $F80D, $0002, $FFF3
                dc.w    $0808, $000A, $FFFB
Offset_0x1014B8:
                dc.w    $0002
                dc.w    $F000, $0000, $FFF5
                dc.w    $F80A, $0001, $FFF5
Offset_0x1014C6:
                dc.w    $0003
                dc.w    $F008, $0000, $FFF2
                dc.w    $F80D, $0003, $FFF2
                dc.w    $0808, $000B, $FFF2
Offset_0x1014DA:
                dc.w    $0001
                dc.w    $F50E, $0000, $FFEE
Offset_0x1014E2:
                dc.w    $0003
                dc.w    $E60C, $0000, $FFF0
                dc.w    $EE0A, $0004, $FFF0
                dc.w    $0609, $000D, $FFF8
Offset_0x1014F6:
                dc.w    $0005
                dc.w    $E604, $0000, $FFE8
                dc.w    $EE0A, $0002, $FFE8
                dc.w    $F600, $000B, $0000
                dc.w    $FE09, $000C, $0000
                dc.w    $0604, $0012, $FFF0
Offset_0x101516:
                dc.w    $0003
                dc.w    $F100, $0000, $FFE6
                dc.w    $F90E, $0001, $FFE6
                dc.w    $F106, $000D, $0006
Offset_0x10152A:
                dc.w    $0005
                dc.w    $E905, $0000, $FFFE
                dc.w    $F90A, $0004, $FFF6
                dc.w    $0100, $000D, $FFEE
                dc.w    $0905, $000E, $FFE6
                dc.w    $1104, $0012, $FFF6
Offset_0x10154A:
                dc.w    $0003
                dc.w    $EB09, $1800, $FFF1
                dc.w    $FB0A, $1806, $FFF9
                dc.w    $130C, $180F, $FFF1
Offset_0x10155E:
                dc.w    $0005
                dc.w    $F305, $1800, $FFE9
                dc.w    $F30A, $0004, $FFF9
                dc.w    $FB01, $180D, $0011
                dc.w    $0B00, $180F, $0001
                dc.w    $0B05, $0010, $0009
Offset_0x10157E:
                dc.w    $0003
                dc.w    $F806, $1800, $FFEB
                dc.w    $F00A, $1806, $FFFB
                dc.w    $F003, $180F, $0013
Offset_0x101592:
                dc.w    $0005
                dc.w    $E80D, $0000, $FFFB
                dc.w    $F000, $1808, $FFF3
                dc.w    $F80C, $0009, $FFF3
                dc.w    $0008, $000D, $FFF3
                dc.w    $0805, $1810, $FFF3
Offset_0x1015B2:
                dc.w    $0005
                dc.w    $E80A, $0000, $FFF0
                dc.w    $F001, $0009, $FFE8
                dc.w    $0009, $000B, $FFE0
                dc.w    $0000, $0011, $FFF8
                dc.w    $1000, $0012, $FFE8
Offset_0x1015D2:
                dc.w    $0005
                dc.w    $E80A, $0000, $FFF0
                dc.w    $F001, $0009, $FFE8
                dc.w    $0005, $000B, $FFF0
                dc.w    $0800, $000F, $FFE8
                dc.w    $1004, $0010, $FFE8
Offset_0x1015F2:
                dc.w    $0002
                dc.w    $E80B, $0000, $FFF0
                dc.w    $080A, $000C, $FFF0
Offset_0x101600:
                dc.w    $0002
                dc.w    $E80A, $0000, $FFF8
                dc.w    $0007, $0009, $0000
Offset_0x10160E:
                dc.w    $0003
                dc.w    $E80D, $0000, $FFF8
                dc.w    $F809, $0008, $0000
                dc.w    $0809, $000E, $0008
;===============================================================================
; Mapeamento dos Sprites do Sonic      
; <<<-
;===============================================================================
                  
;===============================================================================
; Script para carga dos Sprites do Sonic      
; ->>>
;===============================================================================
Sonic_Dyn_Script:                                              ; Offset_0x101622
                dc.w    Offset_0x101806-Sonic_Dyn_Script
                dc.w    Offset_0x101808-Sonic_Dyn_Script
                dc.w    Offset_0x101812-Sonic_Dyn_Script
                dc.w    Offset_0x101818-Sonic_Dyn_Script
                dc.w    Offset_0x101822-Sonic_Dyn_Script
                dc.w    Offset_0x10182C-Sonic_Dyn_Script
                dc.w    Offset_0x101838-Sonic_Dyn_Script
                dc.w    Offset_0x101840-Sonic_Dyn_Script
                dc.w    Offset_0x101846-Sonic_Dyn_Script
                dc.w    Offset_0x10184C-Sonic_Dyn_Script
                dc.w    Offset_0x101852-Sonic_Dyn_Script
                dc.w    Offset_0x101858-Sonic_Dyn_Script
                dc.w    Offset_0x101862-Sonic_Dyn_Script
                dc.w    Offset_0x10186C-Sonic_Dyn_Script
                dc.w    Offset_0x101874-Sonic_Dyn_Script
                dc.w    Offset_0x10187E-Sonic_Dyn_Script
                dc.w    Offset_0x101886-Sonic_Dyn_Script
                dc.w    Offset_0x10188C-Sonic_Dyn_Script
                dc.w    Offset_0x101894-Sonic_Dyn_Script
                dc.w    Offset_0x10189E-Sonic_Dyn_Script
                dc.w    Offset_0x1018A6-Sonic_Dyn_Script
                dc.w    Offset_0x1018AC-Sonic_Dyn_Script
                dc.w    Offset_0x1018B6-Sonic_Dyn_Script
                dc.w    Offset_0x1018C2-Sonic_Dyn_Script
                dc.w    Offset_0x1018CC-Sonic_Dyn_Script
                dc.w    Offset_0x1018D6-Sonic_Dyn_Script
                dc.w    Offset_0x1018E2-Sonic_Dyn_Script
                dc.w    Offset_0x1018EE-Sonic_Dyn_Script
                dc.w    Offset_0x1018F8-Sonic_Dyn_Script
                dc.w    Offset_0x101904-Sonic_Dyn_Script
                dc.w    Offset_0x10190C-Sonic_Dyn_Script
                dc.w    Offset_0x101914-Sonic_Dyn_Script
                dc.w    Offset_0x10191C-Sonic_Dyn_Script
                dc.w    Offset_0x101922-Sonic_Dyn_Script
                dc.w    Offset_0x10192A-Sonic_Dyn_Script
                dc.w    Offset_0x101932-Sonic_Dyn_Script
                dc.w    Offset_0x10193A-Sonic_Dyn_Script
                dc.w    Offset_0x101940-Sonic_Dyn_Script
                dc.w    Offset_0x10194A-Sonic_Dyn_Script
                dc.w    Offset_0x101956-Sonic_Dyn_Script
                dc.w    Offset_0x101960-Sonic_Dyn_Script
                dc.w    Offset_0x10196A-Sonic_Dyn_Script
                dc.w    Offset_0x101974-Sonic_Dyn_Script
                dc.w    Offset_0x101980-Sonic_Dyn_Script
                dc.w    Offset_0x10198A-Sonic_Dyn_Script
                dc.w    Offset_0x101994-Sonic_Dyn_Script
                dc.w    Offset_0x10199A-Sonic_Dyn_Script
                dc.w    Offset_0x1019A0-Sonic_Dyn_Script
                dc.w    Offset_0x1019A6-Sonic_Dyn_Script
                dc.w    Offset_0x1019AC-Sonic_Dyn_Script
                dc.w    Offset_0x1019B6-Sonic_Dyn_Script
                dc.w    Offset_0x1019BE-Sonic_Dyn_Script
                dc.w    Offset_0x1019C8-Sonic_Dyn_Script
                dc.w    Offset_0x1019D0-Sonic_Dyn_Script
                dc.w    Offset_0x1019D6-Sonic_Dyn_Script
                dc.w    Offset_0x1019DC-Sonic_Dyn_Script
                dc.w    Offset_0x1019E2-Sonic_Dyn_Script
                dc.w    Offset_0x1019E8-Sonic_Dyn_Script
                dc.w    Offset_0x1019F0-Sonic_Dyn_Script
                dc.w    Offset_0x1019F6-Sonic_Dyn_Script
                dc.w    Offset_0x1019FE-Sonic_Dyn_Script
                dc.w    Offset_0x101A04-Sonic_Dyn_Script
                dc.w    Offset_0x101A08-Sonic_Dyn_Script
                dc.w    Offset_0x101A0C-Sonic_Dyn_Script
                dc.w    Offset_0x101A10-Sonic_Dyn_Script
                dc.w    Offset_0x101A14-Sonic_Dyn_Script
                dc.w    Offset_0x101A18-Sonic_Dyn_Script
                dc.w    Offset_0x101A1C-Sonic_Dyn_Script
                dc.w    Offset_0x101A20-Sonic_Dyn_Script
                dc.w    Offset_0x101A24-Sonic_Dyn_Script
                dc.w    Offset_0x101A28-Sonic_Dyn_Script
                dc.w    Offset_0x101A2C-Sonic_Dyn_Script
                dc.w    Offset_0x101A30-Sonic_Dyn_Script
                dc.w    Offset_0x101A38-Sonic_Dyn_Script
                dc.w    Offset_0x101A40-Sonic_Dyn_Script
                dc.w    Offset_0x101A48-Sonic_Dyn_Script
                dc.w    Offset_0x101A50-Sonic_Dyn_Script
                dc.w    Offset_0x101A54-Sonic_Dyn_Script
                dc.w    Offset_0x101A58-Sonic_Dyn_Script
                dc.w    Offset_0x101A5E-Sonic_Dyn_Script
                dc.w    Offset_0x101A64-Sonic_Dyn_Script
                dc.w    Offset_0x101A6C-Sonic_Dyn_Script
                dc.w    Offset_0x101A74-Sonic_Dyn_Script
                dc.w    Offset_0x101A7A-Sonic_Dyn_Script
                dc.w    Offset_0x101A80-Sonic_Dyn_Script
                dc.w    Offset_0x101A88-Sonic_Dyn_Script
                dc.w    Offset_0x101A80-Sonic_Dyn_Script
                dc.w    Offset_0x101A8E-Sonic_Dyn_Script
                dc.w    Offset_0x101A8E-Sonic_Dyn_Script
                dc.w    Offset_0x101A96-Sonic_Dyn_Script
                dc.w    Offset_0x101A9E-Sonic_Dyn_Script
                dc.w    Offset_0x101AA6-Sonic_Dyn_Script
                dc.w    Offset_0x101AAC-Sonic_Dyn_Script
                dc.w    Offset_0x101AB6-Sonic_Dyn_Script
                dc.w    Offset_0x101AC0-Sonic_Dyn_Script
                dc.w    Offset_0x101AC8-Sonic_Dyn_Script
                dc.w    Offset_0x101AD0-Sonic_Dyn_Script
                dc.w    Offset_0x101AD8-Sonic_Dyn_Script
                dc.w    Offset_0x101ADE-Sonic_Dyn_Script
                dc.w    Offset_0x101AE2-Sonic_Dyn_Script
                dc.w    Offset_0x101AE8-Sonic_Dyn_Script
                dc.w    Offset_0x101AF0-Sonic_Dyn_Script
                dc.w    Offset_0x101AF8-Sonic_Dyn_Script
                dc.w    Offset_0x101B00-Sonic_Dyn_Script
                dc.w    Offset_0x101B06-Sonic_Dyn_Script
                dc.w    Offset_0x101B0C-Sonic_Dyn_Script
                dc.w    Offset_0x101B14-Sonic_Dyn_Script
                dc.w    Offset_0x101B1A-Sonic_Dyn_Script
                dc.w    Offset_0x101B22-Sonic_Dyn_Script
                dc.w    Offset_0x101B2A-Sonic_Dyn_Script
                dc.w    Offset_0x101B2E-Sonic_Dyn_Script
                dc.w    Offset_0x101B36-Sonic_Dyn_Script
                dc.w    Offset_0x101B3E-Sonic_Dyn_Script
                dc.w    Offset_0x101B4A-Sonic_Dyn_Script
                dc.w    Offset_0x101B56-Sonic_Dyn_Script
                dc.w    Offset_0x101B5C-Sonic_Dyn_Script
                dc.w    Offset_0x101B62-Sonic_Dyn_Script
                dc.w    Offset_0x101B68-Sonic_Dyn_Script
                dc.w    Offset_0x101B70-Sonic_Dyn_Script
                dc.w    Offset_0x101B7A-Sonic_Dyn_Script
                dc.w    Offset_0x101B82-Sonic_Dyn_Script
                dc.w    Offset_0x101B88-Sonic_Dyn_Script
                dc.w    Offset_0x101B90-Sonic_Dyn_Script
                dc.w    Offset_0x101B9A-Sonic_Dyn_Script
                dc.w    Offset_0x101BA2-Sonic_Dyn_Script
                dc.w    Offset_0x101BA8-Sonic_Dyn_Script
                dc.w    Offset_0x101BB2-Sonic_Dyn_Script
                dc.w    Offset_0x101BBE-Sonic_Dyn_Script
                dc.w    Offset_0x101BCA-Sonic_Dyn_Script
                dc.w    Offset_0x101BD6-Sonic_Dyn_Script
                dc.w    Offset_0x101BE4-Sonic_Dyn_Script
                dc.w    Offset_0x101BF2-Sonic_Dyn_Script
                dc.w    Offset_0x101BFE-Sonic_Dyn_Script
                dc.w    Offset_0x101C0A-Sonic_Dyn_Script
                dc.w    Offset_0x101C12-Sonic_Dyn_Script
                dc.w    Offset_0x101C1A-Sonic_Dyn_Script
                dc.w    Offset_0x101C22-Sonic_Dyn_Script
                dc.w    Offset_0x101C28-Sonic_Dyn_Script
                dc.w    Offset_0x101C30-Sonic_Dyn_Script
                dc.w    Offset_0x101C38-Sonic_Dyn_Script
                dc.w    Offset_0x101C40-Sonic_Dyn_Script
                dc.w    Offset_0x101C46-Sonic_Dyn_Script
                dc.w    Offset_0x101C50-Sonic_Dyn_Script
                dc.w    Offset_0x101C5C-Sonic_Dyn_Script
                dc.w    Offset_0x101C66-Sonic_Dyn_Script
                dc.w    Offset_0x101C70-Sonic_Dyn_Script
                dc.w    Offset_0x101C7A-Sonic_Dyn_Script
                dc.w    Offset_0x101C86-Sonic_Dyn_Script
                dc.w    Offset_0x101C90-Sonic_Dyn_Script
                dc.w    Offset_0x101C9A-Sonic_Dyn_Script
                dc.w    Offset_0x101CA2-Sonic_Dyn_Script
                dc.w    Offset_0x101CAC-Sonic_Dyn_Script
                dc.w    Offset_0x101CB4-Sonic_Dyn_Script
                dc.w    Offset_0x101CBA-Sonic_Dyn_Script
                dc.w    Offset_0x101CC2-Sonic_Dyn_Script
                dc.w    Offset_0x101CCC-Sonic_Dyn_Script
                dc.w    Offset_0x101CD4-Sonic_Dyn_Script
                dc.w    Offset_0x101CDA-Sonic_Dyn_Script
                dc.w    Offset_0x101CE6-Sonic_Dyn_Script
                dc.w    Offset_0x101CF4-Sonic_Dyn_Script
                dc.w    Offset_0x101D00-Sonic_Dyn_Script
                dc.w    Offset_0x101D0C-Sonic_Dyn_Script
                dc.w    Offset_0x101D1A-Sonic_Dyn_Script
                dc.w    Offset_0x101D28-Sonic_Dyn_Script
                dc.w    Offset_0x101D34-Sonic_Dyn_Script
                dc.w    Offset_0x101D42-Sonic_Dyn_Script
                dc.w    Offset_0x101D4A-Sonic_Dyn_Script
                dc.w    Offset_0x101D52-Sonic_Dyn_Script
                dc.w    Offset_0x101D5A-Sonic_Dyn_Script
                dc.w    Offset_0x101D60-Sonic_Dyn_Script
                dc.w    Offset_0x101D68-Sonic_Dyn_Script
                dc.w    Offset_0x101D70-Sonic_Dyn_Script
                dc.w    Offset_0x101D78-Sonic_Dyn_Script
                dc.w    Offset_0x101D7E-Sonic_Dyn_Script
                dc.w    Offset_0x101D88-Sonic_Dyn_Script
                dc.w    Offset_0x101D94-Sonic_Dyn_Script
                dc.w    Offset_0x101DA0-Sonic_Dyn_Script
                dc.w    Offset_0x101DAA-Sonic_Dyn_Script
                dc.w    Offset_0x101DB4-Sonic_Dyn_Script
                dc.w    Offset_0x101DC0-Sonic_Dyn_Script
                dc.w    Offset_0x101DCC-Sonic_Dyn_Script
                dc.w    Offset_0x101DD8-Sonic_Dyn_Script
                dc.w    Offset_0x101DE2-Sonic_Dyn_Script
                dc.w    Offset_0x101DEC-Sonic_Dyn_Script
                dc.w    Offset_0x101DF6-Sonic_Dyn_Script
                dc.w    Offset_0x101E02-Sonic_Dyn_Script
                dc.w    Offset_0x101E0C-Sonic_Dyn_Script
                dc.w    Offset_0x101E16-Sonic_Dyn_Script
                dc.w    Offset_0x101E20-Sonic_Dyn_Script
                dc.w    Offset_0x101E2C-Sonic_Dyn_Script
                dc.w    Offset_0x101E36-Sonic_Dyn_Script
                dc.w    Offset_0x101E40-Sonic_Dyn_Script
                dc.w    Offset_0x101E4A-Sonic_Dyn_Script
                dc.w    Offset_0x101E54-Sonic_Dyn_Script
                dc.w    Offset_0x101E5A-Sonic_Dyn_Script
                dc.w    Offset_0x101E62-Sonic_Dyn_Script
                dc.w    Offset_0x101E6A-Sonic_Dyn_Script
                dc.w    Offset_0x101E72-Sonic_Dyn_Script
                dc.w    Offset_0x101E7A-Sonic_Dyn_Script
                dc.w    Offset_0x101E82-Sonic_Dyn_Script
                dc.w    Offset_0x101E8A-Sonic_Dyn_Script
                dc.w    Offset_0x101E92-Sonic_Dyn_Script
                dc.w    Offset_0x101E9A-Sonic_Dyn_Script
                dc.w    Offset_0x101EA2-Sonic_Dyn_Script
                dc.w    Offset_0x101EAE-Sonic_Dyn_Script
                dc.w    Offset_0x101EB8-Sonic_Dyn_Script
                dc.w    Offset_0x101EC2-Sonic_Dyn_Script
                dc.w    Offset_0x101ECC-Sonic_Dyn_Script
                dc.w    Offset_0x101ED4-Sonic_Dyn_Script
                dc.w    Offset_0x101EDC-Sonic_Dyn_Script
                dc.w    Offset_0x101EE4-Sonic_Dyn_Script
                dc.w    Offset_0x101EEE-Sonic_Dyn_Script
                dc.w    Offset_0x101EF8-Sonic_Dyn_Script
                dc.w    Offset_0x101F02-Sonic_Dyn_Script
                dc.w    Offset_0x101F08-Sonic_Dyn_Script
                dc.w    Offset_0x101F0E-Sonic_Dyn_Script
                dc.w    Offset_0x101F18-Sonic_Dyn_Script
                dc.w    Offset_0x101F20-Sonic_Dyn_Script
                dc.w    Offset_0x101F28-Sonic_Dyn_Script
                dc.w    Offset_0x101F2E-Sonic_Dyn_Script
                dc.w    Offset_0x101F36-Sonic_Dyn_Script
                dc.w    Offset_0x101F3E-Sonic_Dyn_Script
                dc.w    Offset_0x101F46-Sonic_Dyn_Script
                dc.w    Offset_0x101F4C-Sonic_Dyn_Script
                dc.w    Offset_0x101F56-Sonic_Dyn_Script
                dc.w    Offset_0x101F5E-Sonic_Dyn_Script
                dc.w    Offset_0x101F66-Sonic_Dyn_Script
                dc.w    Offset_0x101F6C-Sonic_Dyn_Script
                dc.w    Offset_0x101F74-Sonic_Dyn_Script
                dc.w    Offset_0x101F78-Sonic_Dyn_Script
                dc.w    Offset_0x101F80-Sonic_Dyn_Script
                dc.w    Offset_0x101F8C-Sonic_Dyn_Script
                dc.w    Offset_0x101F94-Sonic_Dyn_Script
                dc.w    Offset_0x101FA0-Sonic_Dyn_Script
                dc.w    Offset_0x101FA8-Sonic_Dyn_Script
                dc.w    Offset_0x101FB4-Sonic_Dyn_Script
                dc.w    Offset_0x101FBC-Sonic_Dyn_Script
                dc.w    Offset_0x101FC8-Sonic_Dyn_Script
                dc.w    Offset_0x101FD4-Sonic_Dyn_Script
                dc.w    Offset_0x101FE0-Sonic_Dyn_Script
                dc.w    Offset_0x101FE6-Sonic_Dyn_Script
                dc.w    Offset_0x101FEC-Sonic_Dyn_Script
Offset_0x101806:
                dc.w    $0000
Offset_0x101808:
                dc.w    $0004
                dc.w    $3000, $3004, $5008, $500E
Offset_0x101812:
                dc.w    $0002
                dc.w    $B014, $5020
Offset_0x101818:
                dc.w    $0004
                dc.w    $3026, $302A, $302E, $5032
Offset_0x101822:
                dc.w    $0004
                dc.w    $3026, $3038, $302E, $5032
Offset_0x10182C:
                dc.w    $0005
                dc.w    $3026, $3038, $302E, $1032, $303C
Offset_0x101838:
                dc.w    $0003
                dc.w    $3026, $7040, $5032
Offset_0x101840:
                dc.w    $0002
                dc.w    $B048, $1054
Offset_0x101846:
                dc.w    $0002
                dc.w    $B056, $3062
Offset_0x10184C:
                dc.w    $0002
                dc.w    $B056, $3066
Offset_0x101852:
                dc.w    $0002
                dc.w    $B06A, $7076
Offset_0x101858:
                dc.w    $0004
                dc.w    $307E, $3082, $5086, $500E
Offset_0x101862:
                dc.w    $0004
                dc.w    $308C, $3090, $3094, $500E
Offset_0x10186C:
                dc.w    $0003
                dc.w    $7098, $10A0, $F0A2
Offset_0x101874:
                dc.w    $0004
                dc.w    $7098, $10B2, $B0B4, $10C0
Offset_0x10187E:
                dc.w    $0003
                dc.w    $70C2, $50CA, $30D0
Offset_0x101886:
                dc.w    $0002
                dc.w    $50D4, $F0DA
Offset_0x10188C:
                dc.w    $0003
                dc.w    $50D4, $F0EA, $10FA
Offset_0x101894:
                dc.w    $0004
                dc.w    $50D4, $10FC, $B0FE, $110A
Offset_0x10189E:
                dc.w    $0003
                dc.w    $70C2, $510C, $3112
Offset_0x1018A6:
                dc.w    $0002
                dc.w    $7098, $B116
Offset_0x1018AC:
                dc.w    $0004
                dc.w    $5122, $5128, $312E, $1132
Offset_0x1018B6:
                dc.w    $0005
                dc.w    $5122, $1134, $7136, $313E, $1142
Offset_0x1018C2:
                dc.w    $0004
                dc.w    $7144, $314C, $1150, $3152
Offset_0x1018CC:
                dc.w    $0004
                dc.w    $5156, $115C, $315E, $B162
Offset_0x1018D6:
                dc.w    $0005
                dc.w    $5156, $116E, $7170, $1178, $317A
Offset_0x1018E2:
                dc.w    $0005
                dc.w    $5156, $117E, $7180, $3188, $118C
Offset_0x1018EE:
                dc.w    $0004
                dc.w    $7144, $318E, $1192, $3194
Offset_0x1018F8:
                dc.w    $0005
                dc.w    $5122, $5198, $119E, $11A0, $31A2
Offset_0x101904:
                dc.w    $0003
                dc.w    $71A6, $B1AE, $31BA
Offset_0x10190C:
                dc.w    $0003
                dc.w    $71A6, $B1BE, $31CA
Offset_0x101914:
                dc.w    $0003
                dc.w    $71CE, $31D6, $31DA
Offset_0x10191C:
                dc.w    $0002
                dc.w    $71DE, $B1E6
Offset_0x101922:
                dc.w    $0003
                dc.w    $71DE, $31F2, $B1F6
Offset_0x10192A:
                dc.w    $0003
                dc.w    $71DE, $B202, $320E
Offset_0x101932:
                dc.w    $0003
                dc.w    $71CE, $3212, $3216
Offset_0x10193A:
                dc.w    $0002
                dc.w    $71A6, $B21A
Offset_0x101940:
                dc.w    $0004
                dc.w    $3226, $722A, $7232, $123A
Offset_0x10194A:
                dc.w    $0005
                dc.w    $323C, $5240, $722A, $7246, $123A
Offset_0x101956:
                dc.w    $0004
                dc.w    $724E, $7256, $325E, $1262
Offset_0x101960:
                dc.w    $0004
                dc.w    $7264, $726C, $5274, $127A
Offset_0x10196A:
                dc.w    $0004
                dc.w    $527C, $726C, $7282, $127A
Offset_0x101974:
                dc.w    $0005
                dc.w    $328A, $528E, $726C, $7294, $127A
Offset_0x101980:
                dc.w    $0004
                dc.w    $729C, $7256, $32A4, $1262
Offset_0x10198A:
                dc.w    $0004
                dc.w    $72A8, $722A, $52B0, $123A
Offset_0x101994:
                dc.w    $0002
                dc.w    $52B6, $F2BC
Offset_0x10199A:
                dc.w    $0002
                dc.w    $52CC, $F2D2
Offset_0x1019A0:
                dc.w    $0002
                dc.w    $52B6, $F2E2
Offset_0x1019A6:
                dc.w    $0002
                dc.w    $52CC, $F2F2
Offset_0x1019AC:
                dc.w    $0004
                dc.w    $5302, $1308, $730A, $5312
Offset_0x1019B6:
                dc.w    $0003
                dc.w    $7318, $7320, $5328
Offset_0x1019BE:
                dc.w    $0004
                dc.w    $5302, $132E, $7330, $5338
Offset_0x1019C8:
                dc.w    $0003
                dc.w    $7318, $733E, $5346
Offset_0x1019D0:
                dc.w    $0002
                dc.w    $734C, $B354
Offset_0x1019D6:
                dc.w    $0002
                dc.w    $7360, $B368
Offset_0x1019DC:
                dc.w    $0002
                dc.w    $734C, $B374
Offset_0x1019E2:
                dc.w    $0002
                dc.w    $7360, $B380
Offset_0x1019E8:
                dc.w    $0003
                dc.w    $138C, $738E, $B396
Offset_0x1019F0:
                dc.w    $0002
                dc.w    $73A2, $B3AA
Offset_0x1019F6:
                dc.w    $0003
                dc.w    $13B6, $738E, $B3C0
Offset_0x1019FE:
                dc.w    $0002
                dc.w    $73A2, $B3CC
Offset_0x101A04:
                dc.w    $0001
                dc.w    $F400
Offset_0x101A08:
                dc.w    $0001
                dc.w    $F410
Offset_0x101A0C:
                dc.w    $0001
                dc.w    $F420
Offset_0x101A10:
                dc.w    $0001
                dc.w    $F430
Offset_0x101A14:
                dc.w    $0001
                dc.w    $F440
Offset_0x101A18:
                dc.w    $0001
                dc.w    $F450
Offset_0x101A1C:
                dc.w    $0001
                dc.w    $F460
Offset_0x101A20:
                dc.w    $0001
                dc.w    $F470
Offset_0x101A24:
                dc.w    $0001
                dc.w    $F480
Offset_0x101A28:
                dc.w    $0001
                dc.w    $F490
Offset_0x101A2C:
                dc.w    $0001
                dc.w    $F4A0
Offset_0x101A30:
                dc.w    $0003
                dc.w    $53D8, $53DE, $73E4
Offset_0x101A38:
                dc.w    $0003
                dc.w    $53D8, $53EC, $53F2
Offset_0x101A40:
                dc.w    $0003
                dc.w    $53D8, $53DE, $73B8
Offset_0x101A48:
                dc.w    $0003
                dc.w    $53D8, $53EC, $54B0
Offset_0x101A50:
                dc.w    $0001
                dc.w    $B4B6
Offset_0x101A54:
                dc.w    $0001
                dc.w    $F4C2
Offset_0x101A58:
                dc.w    $0002
                dc.w    $14D2, $F4D4
Offset_0x101A5E:
                dc.w    $0002
                dc.w    $34E4, $F4E8
Offset_0x101A64:
                dc.w    $0003
                dc.w    $F4F8, $1508, $350A
Offset_0x101A6C:
                dc.w    $0003
                dc.w    $F50E, $151E, $3520
Offset_0x101A74:
                dc.w    $0002
                dc.w    $B524, $5530
Offset_0x101A7A:
                dc.w    $0002
                dc.w    $B536, $5542
Offset_0x101A80:
                dc.w    $0003
                dc.w    $3548, $B54C, $1558
Offset_0x101A88:
                dc.w    $0002
                dc.w    $155A, $755C
Offset_0x101A8E:
                dc.w    $0003
                dc.w    $1564, $B566, $1572
Offset_0x101A96:
                dc.w    $0003
                dc.w    $3574, $B578, $1584
Offset_0x101A9E:
                dc.w    $0003
                dc.w    $5586, $F58C, $159C
Offset_0x101AA6:
                dc.w    $0002
                dc.w    $B59E, $35AA
Offset_0x101AAC:
                dc.w    $0004
                dc.w    $15AE, $B5B0, $15BC, $75BE
Offset_0x101AB6:
                dc.w    $0004
                dc.w    $15AE, $B5C6, $15BC, $75BE
Offset_0x101AC0:
                dc.w    $0003
                dc.w    $75D2, $15DA, $B5DC
Offset_0x101AC8:
                dc.w    $0003
                dc.w    $55E8, $B5EE, $15FA
Offset_0x101AD0:
                dc.w    $0003
                dc.w    $B5FC, $1608, $360A
Offset_0x101AD8:
                dc.w    $0002
                dc.w    $B60E, $161A
Offset_0x101ADE:
                dc.w    $0001
                dc.w    $F61C
Offset_0x101AE2:
                dc.w    $0002
                dc.w    $B62C, $1638
Offset_0x101AE8:
                dc.w    $0003
                dc.w    $163A, $B63C, $1648
Offset_0x101AF0:
                dc.w    $0003
                dc.w    $564A, $B650, $365C
Offset_0x101AF8:
                dc.w    $0003
                dc.w    $3660, $B664, $1670
Offset_0x101B00:
                dc.w    $0002
                dc.w    $B672, $167E
Offset_0x101B06:
                dc.w    $0002
                dc.w    $1680, $B682
Offset_0x101B0C:
                dc.w    $0003
                dc.w    $368E, $B692, $169E
Offset_0x101B14:
                dc.w    $0002
                dc.w    $36A0, $F6A4
Offset_0x101B1A:
                dc.w    $0003
                dc.w    $76B4, $36BC, $56C0
Offset_0x101B22:
                dc.w    $0003
                dc.w    $76C6, $36BC, $56CE
Offset_0x101B2A:
                dc.w    $0001
                dc.w    $B7D6
Offset_0x101B2E:
                dc.w    $0003
                dc.w    $B7E2, $17EE, $57F0
Offset_0x101B36:
                dc.w    $0003
                dc.w    $87F6, $0A18, $8800
Offset_0x101B3E:
                dc.w    $0005
                dc.w    $2809, $180C, $380E, $8812, $081B
Offset_0x101B4A:
                dc.w    $0005
                dc.w    $281C, $181F, $380E, $8812, $081B
Offset_0x101B56:
                dc.w    $0002
                dc.w    $8821, $882A
Offset_0x101B5C:
                dc.w    $0002
                dc.w    $8833, $882A
Offset_0x101B62:
                dc.w    $0002
                dc.w    $883C, $882A
Offset_0x101B68:
                dc.w    $0003
                dc.w    $B6D4, $10A0, $F0A2
Offset_0x101B70:
                dc.w    $0004
                dc.w    $B6D4, $10B2, $B0B4, $10C0
Offset_0x101B7A:
                dc.w    $0003
                dc.w    $B6E0, $50CA, $30D0
Offset_0x101B82:
                dc.w    $0002
                dc.w    $86EC, $F0DA
Offset_0x101B88:
                dc.w    $0003
                dc.w    $86EC, $F0EA, $10FA
Offset_0x101B90:
                dc.w    $0004
                dc.w    $86EC, $10FC, $B0FE, $110A
Offset_0x101B9A:
                dc.w    $0003
                dc.w    $B6E0, $510C, $3112
Offset_0x101BA2:
                dc.w    $0002
                dc.w    $B6D4, $B116
Offset_0x101BA8:
                dc.w    $0004
                dc.w    $76F5, $312E, $5128, $1132
Offset_0x101BB2:
                dc.w    $0005
                dc.w    $76F5, $1134, $7136, $313E, $1142
Offset_0x101BBE:
                dc.w    $0005
                dc.w    $86FD, $314C, $0706, $1150, $3152
Offset_0x101BCA:
                dc.w    $0005
                dc.w    $0707, $7708, $115C, $315E, $B162
Offset_0x101BD6:
                dc.w    $0006
                dc.w    $0707, $7708, $116E, $1178, $7170, $317A
Offset_0x101BE4:
                dc.w    $0006
                dc.w    $0707, $7708, $117E, $7180, $3188, $118C
Offset_0x101BF2:
                dc.w    $0005
                dc.w    $86FD, $318E, $0706, $1192, $3194
Offset_0x101BFE:
                dc.w    $0005
                dc.w    $76F5, $119E, $5198, $01A0, $31A2
Offset_0x101C0A:
                dc.w    $0003
                dc.w    $B710, $B1AE, $31BA
Offset_0x101C12:
                dc.w    $0003
                dc.w    $B710, $B1BE, $31CA
Offset_0x101C1A:
                dc.w    $0003
                dc.w    $B71C, $31D6, $31DA
Offset_0x101C22:
                dc.w    $0002
                dc.w    $8728, $B1E6
Offset_0x101C28:
                dc.w    $0003
                dc.w    $8728, $31F2, $B1F6
Offset_0x101C30:
                dc.w    $0003
                dc.w    $8728, $B202, $320E
Offset_0x101C38:
                dc.w    $0003
                dc.w    $B71C, $3212, $3216
Offset_0x101C40:
                dc.w    $0002
                dc.w    $B710, $B21A
Offset_0x101C46:
                dc.w    $0004
                dc.w    $3226, $7731, $7232, $0739
Offset_0x101C50:
                dc.w    $0005
                dc.w    $323C, $5240, $7731, $7246, $0739
Offset_0x101C5C:
                dc.w    $0004
                dc.w    $724E, $773A, $325E, $1742
Offset_0x101C66:
                dc.w    $0004
                dc.w    $7264, $B744, $5274, $0750
Offset_0x101C70:
                dc.w    $0004
                dc.w    $527C, $B744, $7282, $0750
Offset_0x101C7A:
                dc.w    $0005
                dc.w    $328A, $528E, $B744, $7294, $0750
Offset_0x101C86:
                dc.w    $0004
                dc.w    $729C, $773A, $32A4, $1742
Offset_0x101C90:
                dc.w    $0004
                dc.w    $72A8, $7731, $52B0, $0739
Offset_0x101C9A:
                dc.w    $0003
                dc.w    $B751, $10A0, $F0A2
Offset_0x101CA2:
                dc.w    $0004
                dc.w    $B751, $10B2, $B0B4, $10C0
Offset_0x101CAC:
                dc.w    $0003
                dc.w    $B75D, $50CA, $30D0
Offset_0x101CB4:
                dc.w    $0002
                dc.w    $8769, $F0DA
Offset_0x101CBA:
                dc.w    $0003
                dc.w    $8769, $F0EA, $10FA
Offset_0x101CC2:
                dc.w    $0004
                dc.w    $8769, $10FC, $B0FE, $110A
Offset_0x101CCC:
                dc.w    $0003
                dc.w    $B75D, $510C, $3112
Offset_0x101CD4:
                dc.w    $0002
                dc.w    $B751, $B116
Offset_0x101CDA:
                dc.w    $0005
                dc.w    $1772, $7774, $5128, $312E, $1132
Offset_0x101CE6:
                dc.w    $0006
                dc.w    $1772, $7774, $1134, $7136, $313E, $1142
Offset_0x101CF4:
                dc.w    $0005
                dc.w    $577C, $3782, $314C, $1150, $3152
Offset_0x101D00:
                dc.w    $0005
                dc.w    $1786, $7788, $115C, $315E, $B162
Offset_0x101D0C:
                dc.w    $0006
                dc.w    $1786, $7788, $116E, $1178, $7170, $317A
Offset_0x101D1A:
                dc.w    $0006
                dc.w    $1786, $7788, $117E, $7180, $3188, $118C
Offset_0x101D28:
                dc.w    $0005
                dc.w    $577C, $3782, $318E, $1192, $3194
Offset_0x101D34:
                dc.w    $0006
                dc.w    $1772, $7774, $5198, $119E, $31A2, $11A0
Offset_0x101D42:
                dc.w    $0003
                dc.w    $B790, $B1AE, $31BA
Offset_0x101D4A:
                dc.w    $0003
                dc.w    $B790, $B1BE, $31CA
Offset_0x101D52:
                dc.w    $0003
                dc.w    $B79C, $31D6, $31DA
Offset_0x101D5A:
                dc.w    $0002
                dc.w    $87A8, $B1E6
Offset_0x101D60:
                dc.w    $0003
                dc.w    $87A8, $31F2, $B1F6
Offset_0x101D68:
                dc.w    $0003
                dc.w    $87A8, $B202, $320E
Offset_0x101D70:
                dc.w    $0003
                dc.w    $B79C, $3212, $3216
Offset_0x101D78:
                dc.w    $0002
                dc.w    $B790, $B21A
Offset_0x101D7E:
                dc.w    $0004
                dc.w    $3226, $B7B1, $7232, $07BD
Offset_0x101D88:
                dc.w    $0005
                dc.w    $323C, $5240, $B7B1, $7246, $07BD
Offset_0x101D94:
                dc.w    $0005
                dc.w    $724E, $17BE, $77C0, $325E, $07C8
Offset_0x101DA0:
                dc.w    $0004
                dc.w    $7264, $B7C9, $5274, $07D5
Offset_0x101DAA:
                dc.w    $0004
                dc.w    $527C, $B7C9, $7282, $07D5
Offset_0x101DB4:
                dc.w    $0005
                dc.w    $328A, $528E, $B7C9, $7294, $07D5
Offset_0x101DC0:
                dc.w    $0005
                dc.w    $729C, $17BE, $77C0, $32A4, $07C8
Offset_0x101DCC:
                dc.w    $0005
                dc.w    $72A8, $17B2, $77B5, $52B0, $07BD
Offset_0x101DD8:
                dc.w    $0004
                dc.w    $2845, $0848, $3849, $584D
Offset_0x101DE2:
                dc.w    $0004
                dc.w    $1853, $B855, $2861, $1864
Offset_0x101DEC:
                dc.w    $0004
                dc.w    $2866, $3869, $286D, $3870
Offset_0x101DF6:
                dc.w    $0005
                dc.w    $2874, $7877, $387F, $1883, $0885
Offset_0x101E02:
                dc.w    $0004
                dc.w    $5886, $088C, $3849, $588D
Offset_0x101E0C:
                dc.w    $0004
                dc.w    $1893, $B895, $2861, $08A1
Offset_0x101E16:
                dc.w    $0004
                dc.w    $58A2, $3869, $08A8, $58A9
Offset_0x101E20:
                dc.w    $0005
                dc.w    $2874, $78AF, $38B7, $18BB, $0885
Offset_0x101E2C:
                dc.w    $0004
                dc.w    $58BD, $38C3, $38C7, $78CB
Offset_0x101E36:
                dc.w    $0004
                dc.w    $58D3, $38D9, $38C7, $78DD
Offset_0x101E40:
                dc.w    $0004
                dc.w    $58BD, $38C3, $38C7, $78E5
Offset_0x101E4A:
                dc.w    $0004
                dc.w    $58D3, $38D9, $38C7, $78ED
Offset_0x101E54:
                dc.w    $0002
                dc.w    $28F5, $B8F8
Offset_0x101E5A:
                dc.w    $0003
                dc.w    $8904, $290D, $3910
Offset_0x101E62:
                dc.w    $0003
                dc.w    $8833, $290D, $3910
Offset_0x101E6A:
                dc.w    $0003
                dc.w    $883C, $290D, $3910
Offset_0x101E72:
                dc.w    $0003
                dc.w    $8904, $290D, $3914
Offset_0x101E7A:
                dc.w    $0003
                dc.w    $8833, $290D, $3914
Offset_0x101E82:
                dc.w    $0003
                dc.w    $883C, $290D, $3914
Offset_0x101E8A:
                dc.w    $0003
                dc.w    $B918, $3924, $3928
Offset_0x101E92:
                dc.w    $0003
                dc.w    $B92C, $3938, $3928
Offset_0x101E9A:
                dc.w    $0003
                dc.w    $B93C, $3948, $3928
Offset_0x101EA2:
                dc.w    $0005
                dc.w    $B94C, $1924, $1958, $193A, $3928
Offset_0x101EAE:
                dc.w    $0004
                dc.w    $795A, $5962, $3968, $596C
Offset_0x101EB8:
                dc.w    $0004
                dc.w    $7972, $5962, $397A, $597E
Offset_0x101EC2:
                dc.w    $0004
                dc.w    $7984, $5962, $598C, $5992
Offset_0x101ECC:
                dc.w    $0003
                dc.w    $3998, $B99C, $39A8
Offset_0x101ED4:
                dc.w    $0003
                dc.w    $39AC, $B9B0, $39BC
Offset_0x101EDC:
                dc.w    $0003
                dc.w    $39C0, $B9C4, $39BC
Offset_0x101EE4:
                dc.w    $0004
                dc.w    $79D0, $79D8, $19E0, $39E2
Offset_0x101EEE:
                dc.w    $0004
                dc.w    $79E6, $79EE, $19E0, $39E2
Offset_0x101EF8:
                dc.w    $0004
                dc.w    $79F6, $79FE, $19E0, $39E2
Offset_0x101F02:
                dc.w    $0002
                dc.w    $5A06, $BA0C
Offset_0x101F08:
                dc.w    $0002
                dc.w    $BA20, $2A2C
Offset_0x101F0E:
                dc.w    $0004
                dc.w    $1A2F, $3A31, $5A35, $1A3B
Offset_0x101F18:
                dc.w    $0003
                dc.w    $0A3D, $7A3E, $2A46
Offset_0x101F20:
                dc.w    $0003
                dc.w    $0A49, $7A4A, $2A52
Offset_0x101F28:
                dc.w    $0002
                dc.w    $BA55, $5A61
Offset_0x101F2E:
                dc.w    $0003
                dc.w    $0A67, $8A68, $3A71
Offset_0x101F36:
                dc.w    $0003
                dc.w    $1A75, $8A77, $0A80
Offset_0x101F3E:
                dc.w    $0003
                dc.w    $5A81, $3A87, $1A8B
Offset_0x101F46:
                dc.w    $0002
                dc.w    $0A8D, $BA8E
Offset_0x101F4C:
                dc.w    $0004
                dc.w    $1A9A, $0A9C, $BA9D, $0AA9
Offset_0x101F56:
                dc.w    $0003
                dc.w    $1AAA, $8AAC, $5AB5
Offset_0x101F5E:
                dc.w    $0003
                dc.w    $1ABB, $7ABD, $2AC5
Offset_0x101F66:
                dc.w    $0002
                dc.w    $0AC8, $8AC9
Offset_0x101F6C:
                dc.w    $0003
                dc.w    $2AD2, $7AD5, $2ADD
Offset_0x101F74:
                dc.w    $0001
                dc.w    $BAE0
Offset_0x101F78:
                dc.w    $0003
                dc.w    $3AEC, $8AF0, $5AF9
Offset_0x101F80:
                dc.w    $0005
                dc.w    $1AFF, $8B01, $0B0A, $5B0B, $1B11
Offset_0x101F8C:
                dc.w    $0003
                dc.w    $0B13, $BB14, $5B20
Offset_0x101F94:
                dc.w    $0005
                dc.w    $3B26, $8B2A, $0B33, $3B34, $1B38
Offset_0x101FA0:
                dc.w    $0003
                dc.w    $5AF9, $8AF0, $3AEC
Offset_0x101FA8:
                dc.w    $0005
                dc.w    $3B0D, $8B3A, $1B02, $0B07, $3B43
Offset_0x101FB4:
                dc.w    $0003
                dc.w    $5B20, $8B17, $3B13
Offset_0x101FBC:
                dc.w    $0005
                dc.w    $7B47, $0B32, $3B4F, $2B53, $3B26
Offset_0x101FC8:
                dc.w    $0005
                dc.w    $8B56, $1B5F, $5B61, $0B67, $0B68
Offset_0x101FD4:
                dc.w    $0005
                dc.w    $8B69, $1B72, $3B74, $0B78, $1B79
Offset_0x101FE0:
                dc.w    $0002
                dc.w    $BB7B, $8B87
Offset_0x101FE6:
                dc.w    $0002
                dc.w    $8B90, $7B99
Offset_0x101FEC:
                dc.w    $0003
                dc.w    $7BA1, $5BA9, $5BAF
;===============================================================================
; Script para carga dos Sprites do Sonic      
; <<<-
;===============================================================================
Miles_Mappings:                                                ; Offset_0x101FF4
                dc.w    Offset_0x10210A-Miles_Mappings
                dc.w    Offset_0x10210C-Miles_Mappings
                dc.w    Offset_0x10211A-Miles_Mappings
                dc.w    Offset_0x102128-Miles_Mappings
                dc.w    Offset_0x102136-Miles_Mappings
                dc.w    Offset_0x102144-Miles_Mappings
                dc.w    Offset_0x10214C-Miles_Mappings
                dc.w    Offset_0x102154-Miles_Mappings
                dc.w    Offset_0x102162-Miles_Mappings
                dc.w    Offset_0x102170-Miles_Mappings
                dc.w    Offset_0x102178-Miles_Mappings
                dc.w    Offset_0x102180-Miles_Mappings
                dc.w    Offset_0x102188-Miles_Mappings
                dc.w    Offset_0x102190-Miles_Mappings
                dc.w    Offset_0x102198-Miles_Mappings
                dc.w    Offset_0x1021AC-Miles_Mappings
                dc.w    Offset_0x1021C0-Miles_Mappings
                dc.w    Offset_0x1021D4-Miles_Mappings
                dc.w    Offset_0x1021E8-Miles_Mappings
                dc.w    Offset_0x1021FC-Miles_Mappings
                dc.w    Offset_0x102210-Miles_Mappings
                dc.w    Offset_0x102224-Miles_Mappings
                dc.w    Offset_0x102238-Miles_Mappings
                dc.w    Offset_0x10224C-Miles_Mappings
                dc.w    Offset_0x102260-Miles_Mappings
                dc.w    Offset_0x102274-Miles_Mappings
                dc.w    Offset_0x102288-Miles_Mappings
                dc.w    Offset_0x10229C-Miles_Mappings
                dc.w    Offset_0x1022B0-Miles_Mappings
                dc.w    Offset_0x1022C4-Miles_Mappings
                dc.w    Offset_0x1022D8-Miles_Mappings
                dc.w    Offset_0x1022EC-Miles_Mappings
                dc.w    Offset_0x102300-Miles_Mappings
                dc.w    Offset_0x102314-Miles_Mappings
                dc.w    Offset_0x102328-Miles_Mappings
                dc.w    Offset_0x10233C-Miles_Mappings
                dc.w    Offset_0x102350-Miles_Mappings
                dc.w    Offset_0x102364-Miles_Mappings
                dc.w    Offset_0x102378-Miles_Mappings
                dc.w    Offset_0x102386-Miles_Mappings
                dc.w    Offset_0x10239A-Miles_Mappings
                dc.w    Offset_0x1023A8-Miles_Mappings
                dc.w    Offset_0x1023BC-Miles_Mappings
                dc.w    Offset_0x1023CA-Miles_Mappings
                dc.w    Offset_0x1023DE-Miles_Mappings
                dc.w    Offset_0x1023EC-Miles_Mappings
                dc.w    Offset_0x102400-Miles_Mappings
                dc.w    Offset_0x10240E-Miles_Mappings
                dc.w    Offset_0x10241C-Miles_Mappings
                dc.w    Offset_0x10242A-Miles_Mappings
                dc.w    Offset_0x102438-Miles_Mappings
                dc.w    Offset_0x102446-Miles_Mappings
                dc.w    Offset_0x102454-Miles_Mappings
                dc.w    Offset_0x102468-Miles_Mappings
                dc.w    Offset_0x10247C-Miles_Mappings
                dc.w    Offset_0x102490-Miles_Mappings
                dc.w    Offset_0x1024A4-Miles_Mappings
                dc.w    Offset_0x1024B8-Miles_Mappings
                dc.w    Offset_0x1024CC-Miles_Mappings
                dc.w    Offset_0x1024E0-Miles_Mappings
                dc.w    Offset_0x1024F4-Miles_Mappings
                dc.w    Offset_0x1024E0-Miles_Mappings
                dc.w    Offset_0x102508-Miles_Mappings
                dc.w    Offset_0x10251C-Miles_Mappings
                dc.w    Offset_0x102530-Miles_Mappings
                dc.w    Offset_0x102544-Miles_Mappings
                dc.w    Offset_0x102558-Miles_Mappings
                dc.w    Offset_0x10256C-Miles_Mappings
                dc.w    Offset_0x102580-Miles_Mappings
                dc.w    Offset_0x102594-Miles_Mappings
                dc.w    Offset_0x1025A8-Miles_Mappings
                dc.w    Offset_0x1025B0-Miles_Mappings
                dc.w    Offset_0x1025B8-Miles_Mappings
                dc.w    Offset_0x1025C0-Miles_Mappings
                dc.w    Offset_0x1025C8-Miles_Mappings
                dc.w    Offset_0x1025D0-Miles_Mappings
                dc.w    Offset_0x1025D8-Miles_Mappings
                dc.w    Offset_0x1025E0-Miles_Mappings
                dc.w    Offset_0x1025E8-Miles_Mappings
                dc.w    Offset_0x1025F0-Miles_Mappings
                dc.w    Offset_0x1025F8-Miles_Mappings
                dc.w    Offset_0x102600-Miles_Mappings
                dc.w    Offset_0x102608-Miles_Mappings
                dc.w    Offset_0x102610-Miles_Mappings
                dc.w    Offset_0x102618-Miles_Mappings
                dc.w    Offset_0x102620-Miles_Mappings
                dc.w    Offset_0x102628-Miles_Mappings
                dc.w    Offset_0x102630-Miles_Mappings
                dc.w    Offset_0x102638-Miles_Mappings
                dc.w    Offset_0x102640-Miles_Mappings
                dc.w    Offset_0x10264E-Miles_Mappings
                dc.w    Offset_0x10265C-Miles_Mappings
                dc.w    Offset_0x102664-Miles_Mappings
                dc.w    Offset_0x10266C-Miles_Mappings
                dc.w    Offset_0x102674-Miles_Mappings
                dc.w    Offset_0x102682-Miles_Mappings
                dc.w    Offset_0x102690-Miles_Mappings
                dc.w    Offset_0x102698-Miles_Mappings
                dc.w    Offset_0x1026A0-Miles_Mappings
                dc.w    Offset_0x1026A8-Miles_Mappings
                dc.w    Offset_0x1026B6-Miles_Mappings
                dc.w    Offset_0x1026C4-Miles_Mappings
                dc.w    Offset_0x1026D2-Miles_Mappings
                dc.w    Offset_0x1026E0-Miles_Mappings
                dc.w    Offset_0x1026EE-Miles_Mappings
                dc.w    Offset_0x1026FC-Miles_Mappings
                dc.w    Offset_0x10270A-Miles_Mappings
                dc.w    Offset_0x102718-Miles_Mappings
                dc.w    Offset_0x102720-Miles_Mappings
                dc.w    Offset_0x10272E-Miles_Mappings
                dc.w    Offset_0x10273C-Miles_Mappings
                dc.w    Offset_0x10274A-Miles_Mappings
                dc.w    Offset_0x102758-Miles_Mappings
                dc.w    Offset_0x102766-Miles_Mappings
                dc.w    Offset_0x102774-Miles_Mappings
                dc.w    Offset_0x102782-Miles_Mappings
                dc.w    Offset_0x102790-Miles_Mappings
                dc.w    Offset_0x102798-Miles_Mappings
                dc.w    Offset_0x1027A0-Miles_Mappings
                dc.w    Offset_0x1027AE-Miles_Mappings
                dc.w    Offset_0x1027B6-Miles_Mappings
                dc.w    Offset_0x1027BE-Miles_Mappings
                dc.w    Offset_0x1027C6-Miles_Mappings
                dc.w    Offset_0x1027CE-Miles_Mappings
                dc.w    Offset_0x1027D6-Miles_Mappings
                dc.w    Offset_0x1027DE-Miles_Mappings
                dc.w    Offset_0x1027E6-Miles_Mappings
                dc.w    Offset_0x1027EE-Miles_Mappings
                dc.w    Offset_0x1027FC-Miles_Mappings
                dc.w    Offset_0x10280A-Miles_Mappings
                dc.w    Offset_0x102812-Miles_Mappings
                dc.w    Offset_0x10281A-Miles_Mappings
                dc.w    Offset_0x102822-Miles_Mappings
                dc.w    Offset_0x10282A-Miles_Mappings
                dc.w    Offset_0x102838-Miles_Mappings
                dc.w    Offset_0x102846-Miles_Mappings
                dc.w    Offset_0x10284E-Miles_Mappings
                dc.w    Offset_0x102856-Miles_Mappings
                dc.w    Offset_0x10285E-Miles_Mappings
Offset_0x10210A:
                dc.w    $0000
Offset_0x10210C:
                dc.w    $0002
                dc.w    $F009, $0000, $FFF4
                dc.w    $0009, $0006, $FFF4
Offset_0x10211A:
                dc.w    $0002
                dc.w    $F009, $0000, $FFF4
                dc.w    $0009, $0006, $FFF4
Offset_0x102128:
                dc.w    $0002
                dc.w    $F009, $0000, $FFF4
                dc.w    $0009, $0006, $FFF4
Offset_0x102136:
                dc.w    $0002
                dc.w    $F009, $0000, $FFF4
                dc.w    $0009, $0006, $FFF4
Offset_0x102144:
                dc.w    $0001
                dc.w    $F00B, $0000, $FFF4
Offset_0x10214C:
                dc.w    $0001
                dc.w    $F00B, $0000, $FFF4
Offset_0x102154:
                dc.w    $0002
                dc.w    $F009, $0000, $FFF4
                dc.w    $0009, $0006, $FFF4
Offset_0x102162:
                dc.w    $0002
                dc.w    $F009, $0000, $FFF4
                dc.w    $0009, $0006, $FFF4
Offset_0x102170:
                dc.w    $0001
                dc.w    $F007, $0000, $FFEC
Offset_0x102178:
                dc.w    $0001
                dc.w    $F00B, $0000, $FFE4
Offset_0x102180:
                dc.w    $0001
                dc.w    $F00B, $0000, $FFE4
Offset_0x102188:
                dc.w    $0001
                dc.w    $0009, $0000, $FFE4
Offset_0x102190:
                dc.w    $0001
                dc.w    $F00B, $0000, $FFE4
Offset_0x102198:
                dc.w    $0003
                dc.w    $EC09, $0000, $FFF0
                dc.w    $FC0D, $0006, $FFF0
                dc.w    $FC09, $000E, $FFE2
Offset_0x1021AC:
                dc.w    $0003
                dc.w    $F009, $0000, $FFF3
                dc.w    $000D, $0006, $FFF0
                dc.w    $0009, $000E, $FFE4
Offset_0x1021C0:
                dc.w    $0003
                dc.w    $F009, $0000, $FFF8
                dc.w    $0009, $0006, $FFF3
                dc.w    $FD09, $000C, $FFE4
Offset_0x1021D4:
                dc.w    $0003
                dc.w    $F009, $0000, $FFF2
                dc.w    $0009, $0006, $FFF2
                dc.w    $FD09, $000C, $FFE6
Offset_0x1021E8:
                dc.w    $0003
                dc.w    $EC09, $0000, $FFF0
                dc.w    $FC0D, $0006, $FFF0
                dc.w    $FC09, $000E, $FFE2
Offset_0x1021FC:
                dc.w    $0003
                dc.w    $F009, $0000, $FFF3
                dc.w    $000D, $0006, $FFF0
                dc.w    $0009, $000E, $FFE4
Offset_0x102210:
                dc.w    $0003
                dc.w    $F009, $0000, $FFF8
                dc.w    $0009, $0006, $FFF1
                dc.w    $FD09, $000C, $FFE4
Offset_0x102224:
                dc.w    $0003
                dc.w    $F009, $0000, $FFF2
                dc.w    $0009, $0006, $FFF2
                dc.w    $FD09, $000C, $FFE6
Offset_0x102238:
                dc.w    $0003
                dc.w    $E301, $0000, $FFF3
                dc.w    $F303, $0002, $FFEC
                dc.w    $F30B, $0006, $FFF4
Offset_0x10224C:
                dc.w    $0003
                dc.w    $E705, $0000, $FFF6
                dc.w    $F70B, $0004, $FFEE
                dc.w    $FE05, $0010, $0006
Offset_0x102260:
                dc.w    $0003
                dc.w    $E605, $0000, $FFF8
                dc.w    $F603, $0004, $FFEF
                dc.w    $F60B, $0008, $FFF7
Offset_0x102274:
                dc.w    $0003
                dc.w    $E301, $0000, $FFF7
                dc.w    $F30F, $0002, $FFEC
                dc.w    $FB01, $0012, $000C
Offset_0x102288:
                dc.w    $0003
                dc.w    $E301, $0000, $FFF3
                dc.w    $F303, $0002, $FFEC
                dc.w    $F30B, $0006, $FFF4
Offset_0x10229C:
                dc.w    $0003
                dc.w    $E705, $0000, $FFF6
                dc.w    $F70B, $0004, $FFEE
                dc.w    $FF05, $0010, $0006
Offset_0x1022B0:
                dc.w    $0003
                dc.w    $E605, $0000, $FFF8
                dc.w    $F603, $0004, $FFEF
                dc.w    $F60B, $0008, $FFF7
Offset_0x1022C4:
                dc.w    $0003
                dc.w    $E301, $0000, $FFF7
                dc.w    $F30F, $0002, $FFEC
                dc.w    $0301, $0012, $000C
Offset_0x1022D8:
                dc.w    $0003
                dc.w    $F007, $0000, $FFEC
                dc.w    $F007, $0008, $FFFC
                dc.w    $0607, $0010, $FFFC
Offset_0x1022EC:
                dc.w    $0003
                dc.w    $F007, $0000, $FFF0
                dc.w    $F007, $0008, $0000
                dc.w    $0407, $0010, $0000
Offset_0x102300:
                dc.w    $0003
                dc.w    $F007, $0000, $FFF0
                dc.w    $F007, $0008, $0000
                dc.w    $0407, $0010, $FFFD
Offset_0x102314:
                dc.w    $0003
                dc.w    $F007, $0000, $FFF0
                dc.w    $F007, $0008, $0000
                dc.w    $0407, $0010, $FFFD
Offset_0x102328:
                dc.w    $0003
                dc.w    $F007, $0000, $FFEC
                dc.w    $F007, $0008, $FFFC
                dc.w    $0607, $0010, $FFFC
Offset_0x10233C:
                dc.w    $0003
                dc.w    $F007, $0000, $FFF0
                dc.w    $F007, $0008, $0000
                dc.w    $0407, $0010, $0000
Offset_0x102350:
                dc.w    $0003
                dc.w    $F007, $0000, $FFF0
                dc.w    $F007, $0008, $0000
                dc.w    $0407, $0010, $FFFD
Offset_0x102364:
                dc.w    $0003
                dc.w    $F007, $0000, $FFF0
                dc.w    $F007, $0008, $0000
                dc.w    $0407, $0010, $FFFD
Offset_0x102378:
                dc.w    $0002
                dc.w    $0401, $0000, $FFEB
                dc.w    $F40F, $0002, $FFF3
Offset_0x102386:
                dc.w    $0003
                dc.w    $E205, $0000, $FFF8
                dc.w    $FA01, $0004, $FFF0
                dc.w    $F20F, $0006, $FFF8
Offset_0x10239A:
                dc.w    $0002
                dc.w    $F901, $0000, $FFEC
                dc.w    $F10F, $0002, $FFF4
Offset_0x1023A8:
                dc.w    $0003
                dc.w    $FC01, $0000, $FFEF
                dc.w    $E501, $0002, $FFFF
                dc.w    $F50F, $0004, $FFF7
Offset_0x1023BC:
                dc.w    $0002
                dc.w    $0401, $0000, $FFEB
                dc.w    $F40F, $0002, $FFF3
Offset_0x1023CA:
                dc.w    $0003
                dc.w    $E201, $0000, $0000
                dc.w    $FA01, $0002, $FFF0
                dc.w    $F20F, $0004, $FFF8
Offset_0x1023DE:
                dc.w    $0002
                dc.w    $F901, $0000, $FFEC
                dc.w    $F10F, $0002, $FFF4
Offset_0x1023EC:
                dc.w    $0003
                dc.w    $E401, $0000, $FFFF
                dc.w    $FC01, $0002, $FFEF
                dc.w    $F40F, $0004, $FFF7
Offset_0x102400:
                dc.w    $0002
                dc.w    $F00F, $0000, $FFF0
                dc.w    $F007, $0010, $FFEA
Offset_0x10240E:
                dc.w    $0002
                dc.w    $F00F, $0000, $FFF0
                dc.w    $F805, $0010, $FFEA
Offset_0x10241C:
                dc.w    $0002
                dc.w    $F00F, $0000, $FFF0
                dc.w    $F805, $0010, $FFEA
Offset_0x10242A:
                dc.w    $0002
                dc.w    $F00F, $0000, $FFF0
                dc.w    $F805, $1010, $FFEA
Offset_0x102438:
                dc.w    $0002
                dc.w    $F00F, $0000, $FFF0
                dc.w    $F007, $0010, $FFEA
Offset_0x102446:
                dc.w    $0002
                dc.w    $F00F, $0000, $FFF0
                dc.w    $F007, $1810, $FFE8
Offset_0x102454:
                dc.w    $0003
                dc.w    $E401, $0000, $FFFA
                dc.w    $F40B, $0002, $FFF0
                dc.w    $FE0B, $000E, $FFE8
Offset_0x102468:
                dc.w    $0003
                dc.w    $E405, $0000, $FFF8
                dc.w    $F40B, $0004, $FFF0
                dc.w    $0405, $0010, $FFEF
Offset_0x10247C:
                dc.w    $0003
                dc.w    $E401, $0000, $FFFA
                dc.w    $F40B, $0002, $FFF0
                dc.w    $0405, $000E, $FFEF
Offset_0x102490:
                dc.w    $0003
                dc.w    $E405, $0000, $FFF8
                dc.w    $F40B, $0004, $FFF0
                dc.w    $0405, $0010, $FFEF
Offset_0x1024A4:
                dc.w    $0003
                dc.w    $E401, $0000, $FFFA
                dc.w    $F40B, $0002, $FFF0
                dc.w    $FC0B, $000E, $FFEA
Offset_0x1024B8:
                dc.w    $0003
                dc.w    $E405, $0000, $FFF8
                dc.w    $F40B, $0004, $FFF0
                dc.w    $F70B, $1810, $FFEA
Offset_0x1024CC:
                dc.w    $0003
                dc.w    $F009, $0000, $FFF0
                dc.w    $000D, $0006, $FFF0
                dc.w    $060D, $000E, $FFF0
Offset_0x1024E0:
                dc.w    $0003
                dc.w    $F009, $0000, $FFF0
                dc.w    $000D, $0006, $FFF0
                dc.w    $0605, $000E, $FFF8
Offset_0x1024F4:
                dc.w    $0003
                dc.w    $F009, $0000, $FFF0
                dc.w    $000D, $0006, $FFF0
                dc.w    $0605, $000E, $FFF8
Offset_0x102508:
                dc.w    $0003
                dc.w    $F009, $0000, $FFF0
                dc.w    $000D, $0006, $FFF0
                dc.w    $060D, $000E, $FFF0
Offset_0x10251C:
                dc.w    $0003
                dc.w    $F009, $0000, $FFF0
                dc.w    $000D, $0006, $FFF0
                dc.w    $080D, $180E, $FFF0
Offset_0x102530:
                dc.w    $0003
                dc.w    $F80B, $0000, $FFEC
                dc.w    $F805, $000C, $0004
                dc.w    $FE0B, $0810, $0000
Offset_0x102544:
                dc.w    $0003
                dc.w    $F80B, $0000, $FFEC
                dc.w    $F805, $000C, $0004
                dc.w    $0105, $0810, $0004
Offset_0x102558:
                dc.w    $0003
                dc.w    $F80B, $0000, $FFEC
                dc.w    $F805, $000C, $0004
                dc.w    $0105, $0810, $0004
Offset_0x10256C:
                dc.w    $0003
                dc.w    $F80B, $0000, $FFEC
                dc.w    $F805, $000C, $0004
                dc.w    $0105, $0810, $0004
Offset_0x102580:
                dc.w    $0003
                dc.w    $F80B, $0000, $FFEC
                dc.w    $F805, $000C, $0004
                dc.w    $FC0B, $0810, $FFFE
Offset_0x102594:
                dc.w    $0003
                dc.w    $F80B, $0000, $FFEC
                dc.w    $F805, $000C, $0004
                dc.w    $F70B, $1010, $FFFF
Offset_0x1025A8:
                dc.w    $0001
                dc.w    $F00F, $0000, $FFF0
Offset_0x1025B0:
                dc.w    $0001
                dc.w    $F00F, $0000, $FFF0
Offset_0x1025B8:
                dc.w    $0001
                dc.w    $F00F, $0000, $FFF0
Offset_0x1025C0:
                dc.w    $0001
                dc.w    $F809, $0000, $FFDC
Offset_0x1025C8:
                dc.w    $0001
                dc.w    $F809, $0000, $FFDC
Offset_0x1025D0:
                dc.w    $0001
                dc.w    $F809, $0000, $FFDC
Offset_0x1025D8:
                dc.w    $0001
                dc.w    $F809, $0000, $FFDC
Offset_0x1025E0:
                dc.w    $0001
                dc.w    $0709, $0000, $FFE1
Offset_0x1025E8:
                dc.w    $0001
                dc.w    $0709, $0000, $FFE1
Offset_0x1025F0:
                dc.w    $0001
                dc.w    $0709, $0000, $FFE1
Offset_0x1025F8:
                dc.w    $0001
                dc.w    $0709, $0000, $FFE1
Offset_0x102600:
                dc.w    $0001
                dc.w    $0C07, $0000, $FFF8
Offset_0x102608:
                dc.w    $0001
                dc.w    $0C07, $0000, $FFF8
Offset_0x102610:
                dc.w    $0001
                dc.w    $0C07, $0000, $FFF8
Offset_0x102618:
                dc.w    $0001
                dc.w    $0C07, $0000, $FFF8
Offset_0x102620:
                dc.w    $0001
                dc.w    $0707, $0000, $0007
Offset_0x102628:
                dc.w    $0001
                dc.w    $0707, $0000, $0007
Offset_0x102630:
                dc.w    $0001
                dc.w    $0707, $0000, $0007
Offset_0x102638:
                dc.w    $0001
                dc.w    $0707, $0000, $0007
Offset_0x102640:
                dc.w    $0002
                dc.w    $E805, $0000, $FFF8
                dc.w    $F80B, $0004, $FFF0
Offset_0x10264E:
                dc.w    $0002
                dc.w    $E805, $0000, $FFF8
                dc.w    $F80B, $0004, $FFF0
Offset_0x10265C:
                dc.w    $0001
                dc.w    $F00B, $0000, $FFF9
Offset_0x102664:
                dc.w    $0001
                dc.w    $F00F, $0000, $FFF0
Offset_0x10266C:
                dc.w    $0001
                dc.w    $F00F, $0000, $FFF0
Offset_0x102674:
                dc.w    $0002
                dc.w    $F00F, $0000, $FFF0
                dc.w    $E40D, $0010, $FFEA
Offset_0x102682:
                dc.w    $0002
                dc.w    $F00F, $0000, $FFF0
                dc.w    $E40D, $0810, $FFEA
Offset_0x102690:
                dc.w    $0001
                dc.w    $F40F, $0000, $FFF0
Offset_0x102698:
                dc.w    $0001
                dc.w    $F40F, $0000, $FFF0
Offset_0x1026A0:
                dc.w    $0001
                dc.w    $F40F, $0000, $FFF0
Offset_0x1026A8:
                dc.w    $0002
                dc.w    $F009, $0000, $FFF8
                dc.w    $000D, $0006, $FFF0
Offset_0x1026B6:
                dc.w    $0002
                dc.w    $F009, $0000, $FFF8
                dc.w    $0009, $0006, $FFF8
Offset_0x1026C4:
                dc.w    $0002
                dc.w    $F009, $0000, $FFF8
                dc.w    $0009, $0006, $FFF8
Offset_0x1026D2:
                dc.w    $0002
                dc.w    $F009, $0000, $FFF8
                dc.w    $0009, $0006, $FFF8
Offset_0x1026E0:
                dc.w    $0002
                dc.w    $F009, $0000, $FFF0
                dc.w    $000D, $0006, $FFF0
Offset_0x1026EE:
                dc.w    $0002
                dc.w    $F009, $0000, $FFF0
                dc.w    $000D, $0006, $FFF0
Offset_0x1026FC:
                dc.w    $0002
                dc.w    $F801, $0000, $FFE8
                dc.w    $F00B, $0002, $FFF0
Offset_0x10270A:
                dc.w    $0002
                dc.w    $F009, $0000, $FFF0
                dc.w    $000D, $0006, $FFE8
Offset_0x102718:
                dc.w    $0001
                dc.w    $F00F, $0000, $FFF0
Offset_0x102720:
                dc.w    $0002
                dc.w    $F00F, $0000, $FFEC
                dc.w    $F003, $0010, $000C
Offset_0x10272E:
                dc.w    $0002
                dc.w    $F00F, $0000, $FFEC
                dc.w    $F003, $0010, $000C
Offset_0x10273C:
                dc.w    $0002
                dc.w    $F805, $0000, $FFEC
                dc.w    $F00B, $0004, $FFFC
Offset_0x10274A:
                dc.w    $0002
                dc.w    $F007, $0000, $FFF0
                dc.w    $F007, $0800, $0000
Offset_0x102758:
                dc.w    $0002
                dc.w    $F805, $0800, $0004
                dc.w    $F00B, $0804, $FFEC
Offset_0x102766:
                dc.w    $0002
                dc.w    $F007, $0000, $FFF0
                dc.w    $F805, $0008, $0000
Offset_0x102774:
                dc.w    $0002
                dc.w    $F007, $0800, $0000
                dc.w    $F805, $0808, $FFF0
Offset_0x102782:
                dc.w    $0002
                dc.w    $F805, $0000, $FFEC
                dc.w    $F00B, $0004, $FFFC
Offset_0x102790:
                dc.w    $0001
                dc.w    $F00F, $0000, $FFF0
Offset_0x102798:
                dc.w    $0001
                dc.w    $F00B, $0000, $FFF1
Offset_0x1027A0:
                dc.w    $0002
                dc.w    $E405, $0000, $FFF8
                dc.w    $F40B, $0004, $FFF1
Offset_0x1027AE:
                dc.w    $0001
                dc.w    $F20B, $0000, $FFF2
Offset_0x1027B6:
                dc.w    $0001
                dc.w    $F40B, $0000, $FFF0
Offset_0x1027BE:
                dc.w    $0001
                dc.w    $F30B, $0000, $FFF2
Offset_0x1027C6:
                dc.w    $0001
                dc.w    $F20B, $0000, $FFF2
Offset_0x1027CE:
                dc.w    $0001
                dc.w    $F20B, $0000, $FFF2
Offset_0x1027D6:
                dc.w    $0001
                dc.w    $F00B, $0000, $FFF1
Offset_0x1027DE:
                dc.w    $0001
                dc.w    $ED0B, $0000, $FFF0
Offset_0x1027E6:
                dc.w    $0001
                dc.w    $EC0B, $0000, $FFF1
Offset_0x1027EE:
                dc.w    $0002
                dc.w    $F409, $0000, $FFF3
                dc.w    $0405, $0006, $FFF3
Offset_0x1027FC:
                dc.w    $0002
                dc.w    $F207, $0000, $FFF0
                dc.w    $EC03, $0008, $0000
Offset_0x10280A:
                dc.w    $0001
                dc.w    $F809, $0000, $FFE0
Offset_0x102812:
                dc.w    $0001
                dc.w    $F809, $0000, $FFE0
Offset_0x10281A:
                dc.w    $0001
                dc.w    $F809, $0000, $FFE0
Offset_0x102822:
                dc.w    $0001
                dc.w    $F809, $0000, $FFE0
Offset_0x10282A:
                dc.w    $0002
                dc.w    $E809, $0000, $FFF4
                dc.w    $F80D, $0006, $FFF4
Offset_0x102838:
                dc.w    $0002
                dc.w    $E809, $0000, $FFF4
                dc.w    $F80D, $0006, $FFF4
Offset_0x102846:
                dc.w    $0001
                dc.w    $FD09, $0000, $FFE3
Offset_0x10284E:
                dc.w    $0001
                dc.w    $FD09, $0000, $FFE3
Offset_0x102856:
                dc.w    $0001
                dc.w    $FD09, $0000, $FFE3
Offset_0x10285E:
                dc.w    $0001
                dc.w    $FD09, $0000, $FFE3
;===============================================================================
; Script para carga dos Sprites do Miles      
; ->>>
;===============================================================================
Miles_Dyn_Script:                                              ; Offset_0x102866
                dc.w    Offset_0x10297C-Miles_Dyn_Script
                dc.w    Offset_0x10297E-Miles_Dyn_Script
                dc.w    Offset_0x102984-Miles_Dyn_Script
                dc.w    Offset_0x10298A-Miles_Dyn_Script
                dc.w    Offset_0x102990-Miles_Dyn_Script
                dc.w    Offset_0x102996-Miles_Dyn_Script
                dc.w    Offset_0x10299A-Miles_Dyn_Script
                dc.w    Offset_0x10299E-Miles_Dyn_Script
                dc.w    Offset_0x1029A4-Miles_Dyn_Script
                dc.w    Offset_0x1029AA-Miles_Dyn_Script
                dc.w    Offset_0x1029AE-Miles_Dyn_Script
                dc.w    Offset_0x1029B2-Miles_Dyn_Script
                dc.w    Offset_0x1029B6-Miles_Dyn_Script
                dc.w    Offset_0x1029BA-Miles_Dyn_Script
                dc.w    Offset_0x1029BE-Miles_Dyn_Script
                dc.w    Offset_0x1029C6-Miles_Dyn_Script
                dc.w    Offset_0x1029CE-Miles_Dyn_Script
                dc.w    Offset_0x1029D6-Miles_Dyn_Script
                dc.w    Offset_0x1029DE-Miles_Dyn_Script
                dc.w    Offset_0x1029E6-Miles_Dyn_Script
                dc.w    Offset_0x1029EE-Miles_Dyn_Script
                dc.w    Offset_0x1029F6-Miles_Dyn_Script
                dc.w    Offset_0x1029FE-Miles_Dyn_Script
                dc.w    Offset_0x102A06-Miles_Dyn_Script
                dc.w    Offset_0x102A0E-Miles_Dyn_Script
                dc.w    Offset_0x102A16-Miles_Dyn_Script
                dc.w    Offset_0x102A1E-Miles_Dyn_Script
                dc.w    Offset_0x102A26-Miles_Dyn_Script
                dc.w    Offset_0x102A2E-Miles_Dyn_Script
                dc.w    Offset_0x102A36-Miles_Dyn_Script
                dc.w    Offset_0x102A3E-Miles_Dyn_Script
                dc.w    Offset_0x102A46-Miles_Dyn_Script
                dc.w    Offset_0x102A4E-Miles_Dyn_Script
                dc.w    Offset_0x102A56-Miles_Dyn_Script
                dc.w    Offset_0x102A5E-Miles_Dyn_Script
                dc.w    Offset_0x102A66-Miles_Dyn_Script
                dc.w    Offset_0x102A6E-Miles_Dyn_Script
                dc.w    Offset_0x102A76-Miles_Dyn_Script
                dc.w    Offset_0x102A7E-Miles_Dyn_Script
                dc.w    Offset_0x102A84-Miles_Dyn_Script
                dc.w    Offset_0x102A8C-Miles_Dyn_Script
                dc.w    Offset_0x102A92-Miles_Dyn_Script
                dc.w    Offset_0x102A9A-Miles_Dyn_Script
                dc.w    Offset_0x102AA0-Miles_Dyn_Script
                dc.w    Offset_0x102AA8-Miles_Dyn_Script
                dc.w    Offset_0x102AAE-Miles_Dyn_Script
                dc.w    Offset_0x102AB6-Miles_Dyn_Script
                dc.w    Offset_0x102ABC-Miles_Dyn_Script
                dc.w    Offset_0x102AC2-Miles_Dyn_Script
                dc.w    Offset_0x102ABC-Miles_Dyn_Script
                dc.w    Offset_0x102AC8-Miles_Dyn_Script
                dc.w    Offset_0x102ACE-Miles_Dyn_Script
                dc.w    Offset_0x102AD4-Miles_Dyn_Script
                dc.w    Offset_0x102ADC-Miles_Dyn_Script
                dc.w    Offset_0x102AE4-Miles_Dyn_Script
                dc.w    Offset_0x102AEC-Miles_Dyn_Script
                dc.w    Offset_0x102AF4-Miles_Dyn_Script
                dc.w    Offset_0x102AFC-Miles_Dyn_Script
                dc.w    Offset_0x102B04-Miles_Dyn_Script
                dc.w    Offset_0x102B0C-Miles_Dyn_Script
                dc.w    Offset_0x102B14-Miles_Dyn_Script
                dc.w    Offset_0x102B0C-Miles_Dyn_Script
                dc.w    Offset_0x102B1C-Miles_Dyn_Script
                dc.w    Offset_0x102B24-Miles_Dyn_Script
                dc.w    Offset_0x102B2C-Miles_Dyn_Script
                dc.w    Offset_0x102B34-Miles_Dyn_Script
                dc.w    Offset_0x102B3C-Miles_Dyn_Script
                dc.w    Offset_0x102B44-Miles_Dyn_Script
                dc.w    Offset_0x102B4C-Miles_Dyn_Script
                dc.w    Offset_0x102B54-Miles_Dyn_Script
                dc.w    Offset_0x102B5C-Miles_Dyn_Script
                dc.w    Offset_0x102B60-Miles_Dyn_Script
                dc.w    Offset_0x102B64-Miles_Dyn_Script
                dc.w    Offset_0x102B68-Miles_Dyn_Script
                dc.w    Offset_0x102B6C-Miles_Dyn_Script
                dc.w    Offset_0x102B70-Miles_Dyn_Script
                dc.w    Offset_0x102B74-Miles_Dyn_Script
                dc.w    Offset_0x102B78-Miles_Dyn_Script
                dc.w    Offset_0x102B7C-Miles_Dyn_Script
                dc.w    Offset_0x102B80-Miles_Dyn_Script
                dc.w    Offset_0x102B84-Miles_Dyn_Script
                dc.w    Offset_0x102B88-Miles_Dyn_Script
                dc.w    Offset_0x102B8C-Miles_Dyn_Script
                dc.w    Offset_0x102B90-Miles_Dyn_Script
                dc.w    Offset_0x102B94-Miles_Dyn_Script
                dc.w    Offset_0x102B98-Miles_Dyn_Script
                dc.w    Offset_0x102B9C-Miles_Dyn_Script
                dc.w    Offset_0x102BA0-Miles_Dyn_Script
                dc.w    Offset_0x102BA4-Miles_Dyn_Script
                dc.w    Offset_0x102BA8-Miles_Dyn_Script
                dc.w    Offset_0x102BAE-Miles_Dyn_Script
                dc.w    Offset_0x102BB4-Miles_Dyn_Script
                dc.w    Offset_0x102BB8-Miles_Dyn_Script
                dc.w    Offset_0x102BBC-Miles_Dyn_Script
                dc.w    Offset_0x102BC0-Miles_Dyn_Script
                dc.w    Offset_0x102BC0-Miles_Dyn_Script
                dc.w    Offset_0x102BC6-Miles_Dyn_Script
                dc.w    Offset_0x102BCA-Miles_Dyn_Script
                dc.w    Offset_0x102BCE-Miles_Dyn_Script
                dc.w    Offset_0x102BD2-Miles_Dyn_Script
                dc.w    Offset_0x102BD8-Miles_Dyn_Script
                dc.w    Offset_0x102BDE-Miles_Dyn_Script
                dc.w    Offset_0x102BE4-Miles_Dyn_Script
                dc.w    Offset_0x102BEA-Miles_Dyn_Script
                dc.w    Offset_0x102BF0-Miles_Dyn_Script
                dc.w    Offset_0x102BF6-Miles_Dyn_Script
                dc.w    Offset_0x102BFC-Miles_Dyn_Script
                dc.w    Offset_0x102C02-Miles_Dyn_Script
                dc.w    Offset_0x102C06-Miles_Dyn_Script
                dc.w    Offset_0x102C0C-Miles_Dyn_Script
                dc.w    Offset_0x102C12-Miles_Dyn_Script
                dc.w    Offset_0x102C18-Miles_Dyn_Script
                dc.w    Offset_0x102C12-Miles_Dyn_Script
                dc.w    Offset_0x102C1E-Miles_Dyn_Script
                dc.w    Offset_0x102C1E-Miles_Dyn_Script
                dc.w    Offset_0x102C24-Miles_Dyn_Script
                dc.w    Offset_0x102C2A-Miles_Dyn_Script
                dc.w    Offset_0x102C2E-Miles_Dyn_Script
                dc.w    Offset_0x102C32-Miles_Dyn_Script
                dc.w    Offset_0x102C38-Miles_Dyn_Script
                dc.w    Offset_0x102C3C-Miles_Dyn_Script
                dc.w    Offset_0x102C40-Miles_Dyn_Script
                dc.w    Offset_0x102C44-Miles_Dyn_Script
                dc.w    Offset_0x102C48-Miles_Dyn_Script
                dc.w    Offset_0x102C4C-Miles_Dyn_Script
                dc.w    Offset_0x102C50-Miles_Dyn_Script
                dc.w    Offset_0x102C54-Miles_Dyn_Script
                dc.w    Offset_0x102C58-Miles_Dyn_Script
                dc.w    Offset_0x102C5E-Miles_Dyn_Script
                dc.w    Offset_0x102B68-Miles_Dyn_Script
                dc.w    Offset_0x102B6C-Miles_Dyn_Script
                dc.w    Offset_0x102B70-Miles_Dyn_Script
                dc.w    Offset_0x102B74-Miles_Dyn_Script
                dc.w    Offset_0x102C64-Miles_Dyn_Script
                dc.w    Offset_0x102C6A-Miles_Dyn_Script
                dc.w    Offset_0x102B68-Miles_Dyn_Script
                dc.w    Offset_0x102B6C-Miles_Dyn_Script
                dc.w    Offset_0x102B70-Miles_Dyn_Script
                dc.w    Offset_0x102B74-Miles_Dyn_Script
Offset_0x10297C:
                dc.w    $0000
Offset_0x10297E:
                dc.w    $0002
                dc.w    $5000, $5006
Offset_0x102984:
                dc.w    $0002
                dc.w    $500C, $5006
Offset_0x10298A:
                dc.w    $0002
                dc.w    $5012, $5006
Offset_0x102990:
                dc.w    $0002
                dc.w    $5018, $5006
Offset_0x102996:
                dc.w    $0001
                dc.w    $B01E
Offset_0x10299A:
                dc.w    $0001
                dc.w    $B02A
Offset_0x10299E:
                dc.w    $0002
                dc.w    $5036, $503C
Offset_0x1029A4:
                dc.w    $0002
                dc.w    $5036, $5042
Offset_0x1029AA:
                dc.w    $0001
                dc.w    $7048
Offset_0x1029AE:
                dc.w    $0001
                dc.w    $B050
Offset_0x1029B2:
                dc.w    $0001
                dc.w    $B05C
Offset_0x1029B6:
                dc.w    $0001
                dc.w    $5068
Offset_0x1029BA:
                dc.w    $0001
                dc.w    $B06E
Offset_0x1029BE:
                dc.w    $0003
                dc.w    $507A, $7080, $50CA
Offset_0x1029C6:
                dc.w    $0003
                dc.w    $5088, $708E, $50D0
Offset_0x1029CE:
                dc.w    $0003
                dc.w    $5096, $509C, $50D6
Offset_0x1029D6:
                dc.w    $0003
                dc.w    $50A2, $50A8, $50DC
Offset_0x1029DE:
                dc.w    $0003
                dc.w    $507A, $70AE, $50CA
Offset_0x1029E6:
                dc.w    $0003
                dc.w    $5088, $70B6, $50D0
Offset_0x1029EE:
                dc.w    $0003
                dc.w    $5096, $50BE, $50D6
Offset_0x1029F6:
                dc.w    $0003
                dc.w    $50A2, $50C4, $50DC
Offset_0x1029FE:
                dc.w    $0003
                dc.w    $10E2, $30E4, $B0E8
Offset_0x102A06:
                dc.w    $0003
                dc.w    $30F4, $B0F8, $3104
Offset_0x102A0E:
                dc.w    $0003
                dc.w    $3108, $310C, $B110
Offset_0x102A16:
                dc.w    $0003
                dc.w    $111C, $F11E, $112E
Offset_0x102A1E:
                dc.w    $0003
                dc.w    $10E2, $30E4, $B130
Offset_0x102A26:
                dc.w    $0003
                dc.w    $30F4, $B13C, $3148
Offset_0x102A2E:
                dc.w    $0003
                dc.w    $3108, $310C, $B14C
Offset_0x102A36:
                dc.w    $0003
                dc.w    $111C, $F158, $1168
Offset_0x102A3E:
                dc.w    $0003
                dc.w    $716A, $7172, $71CA
Offset_0x102A46:
                dc.w    $0003
                dc.w    $717A, $7182, $71D2
Offset_0x102A4E:
                dc.w    $0003
                dc.w    $718A, $7192, $71DA
Offset_0x102A56:
                dc.w    $0003
                dc.w    $719A, $71A2, $75BE
Offset_0x102A5E:
                dc.w    $0003
                dc.w    $716A, $71AA, $71CA
Offset_0x102A66:
                dc.w    $0003
                dc.w    $717A, $71B2, $71D2
Offset_0x102A6E:
                dc.w    $0003
                dc.w    $718A, $71BA, $71DA
Offset_0x102A76:
                dc.w    $0003
                dc.w    $719A, $71C2, $75BE
Offset_0x102A7E:
                dc.w    $0002
                dc.w    $11EA, $F1EC
Offset_0x102A84:
                dc.w    $0003
                dc.w    $31FC, $1200, $F202
Offset_0x102A8C:
                dc.w    $0002
                dc.w    $1212, $F214
Offset_0x102A92:
                dc.w    $0003
                dc.w    $1224, $1226, $F228
Offset_0x102A9A:
                dc.w    $0002
                dc.w    $11EA, $F238
Offset_0x102AA0:
                dc.w    $0003
                dc.w    $1248, $1200, $F24A
Offset_0x102AA8:
                dc.w    $0002
                dc.w    $1212, $F25A
Offset_0x102AAE:
                dc.w    $0003
                dc.w    $126A, $1224, $F26C
Offset_0x102AB6:
                dc.w    $0002
                dc.w    $F27C, $729C
Offset_0x102ABC:
                dc.w    $0002
                dc.w    $F28C, $32A4
Offset_0x102AC2:
                dc.w    $0002
                dc.w    $F27C, $32A8
Offset_0x102AC8:
                dc.w    $0002
                dc.w    $F27C, $72AC
Offset_0x102ACE:
                dc.w    $0002
                dc.w    $F28C, $72AC
Offset_0x102AD4:
                dc.w    $0003
                dc.w    $12B4, $B2B6, $B2D2
Offset_0x102ADC:
                dc.w    $0003
                dc.w    $32C2, $B2C6, $32DE
Offset_0x102AE4:
                dc.w    $0003
                dc.w    $12B4, $B2B6, $32E2
Offset_0x102AEC:
                dc.w    $0003
                dc.w    $32C2, $B2C6, $32E6
Offset_0x102AF4:
                dc.w    $0003
                dc.w    $12B4, $B2B6, $B2EA
Offset_0x102AFC:
                dc.w    $0003
                dc.w    $32C2, $B2C6, $B2EA
Offset_0x102B04:
                dc.w    $0003
                dc.w    $52F6, $72FC, $7312
Offset_0x102B0C:
                dc.w    $0003
                dc.w    $5304, $730A, $331E
Offset_0x102B14:
                dc.w    $0003
                dc.w    $52F6, $72FC, $331A
Offset_0x102B1C:
                dc.w    $0003
                dc.w    $52F6, $72FC, $7322
Offset_0x102B24:
                dc.w    $0003
                dc.w    $5304, $730A, $7322
Offset_0x102B2C:
                dc.w    $0003
                dc.w    $B32A, $3336, $B2D2
Offset_0x102B34:
                dc.w    $0003
                dc.w    $B33A, $3346, $32DE
Offset_0x102B3C:
                dc.w    $0003
                dc.w    $B32A, $3336, $32E2
Offset_0x102B44:
                dc.w    $0003
                dc.w    $B33A, $3346, $32E6
Offset_0x102B4C:
                dc.w    $0003
                dc.w    $B32A, $3336, $B2EA
Offset_0x102B54:
                dc.w    $0003
                dc.w    $B33A, $3346, $B2EA
Offset_0x102B5C:
                dc.w    $0001
                dc.w    $F34A
Offset_0x102B60:
                dc.w    $0001
                dc.w    $F35A
Offset_0x102B64:
                dc.w    $0001
                dc.w    $F36A
Offset_0x102B68:
                dc.w    $0001
                dc.w    $50CA
Offset_0x102B6C:
                dc.w    $0001
                dc.w    $50D0
Offset_0x102B70:
                dc.w    $0001
                dc.w    $50D6
Offset_0x102B74:
                dc.w    $0001
                dc.w    $50DC
Offset_0x102B78:
                dc.w    $0001
                dc.w    $537A
Offset_0x102B7C:
                dc.w    $0001
                dc.w    $5380
Offset_0x102B80:
                dc.w    $0001
                dc.w    $5386
Offset_0x102B84:
                dc.w    $0001
                dc.w    $538C
Offset_0x102B88:
                dc.w    $0001
                dc.w    $71CA
Offset_0x102B8C:
                dc.w    $0001
                dc.w    $71D2
Offset_0x102B90:
                dc.w    $0001
                dc.w    $71DA
Offset_0x102B94:
                dc.w    $0001
                dc.w    $75BE
Offset_0x102B98:
                dc.w    $0001
                dc.w    $7392
Offset_0x102B9C:
                dc.w    $0001
                dc.w    $739A
Offset_0x102BA0:
                dc.w    $0001
                dc.w    $73A2
Offset_0x102BA4:
                dc.w    $0001
                dc.w    $73AA
Offset_0x102BA8:
                dc.w    $0002
                dc.w    $33B2, $B3B6
Offset_0x102BAE:
                dc.w    $0002
                dc.w    $33B2, $B3C2
Offset_0x102BB4:
                dc.w    $0001
                dc.w    $B3CE
Offset_0x102BB8:
                dc.w    $0001
                dc.w    $F3DA
Offset_0x102BBC:
                dc.w    $0001
                dc.w    $F3EA
Offset_0x102BC0:
                dc.w    $0002
                dc.w    $F3FA, $740A
Offset_0x102BC6:
                dc.w    $0001
                dc.w    $F412
Offset_0x102BCA:
                dc.w    $0001
                dc.w    $F422
Offset_0x102BCE:
                dc.w    $0001
                dc.w    $F432
Offset_0x102BD2:
                dc.w    $0002
                dc.w    $5442, $7448
Offset_0x102BD8:
                dc.w    $0002
                dc.w    $5442, $5450
Offset_0x102BDE:
                dc.w    $0002
                dc.w    $5442, $5456
Offset_0x102BE4:
                dc.w    $0002
                dc.w    $5442, $545C
Offset_0x102BEA:
                dc.w    $0002
                dc.w    $5462, $7468
Offset_0x102BF0:
                dc.w    $0002
                dc.w    $5470, $7476
Offset_0x102BF6:
                dc.w    $0002
                dc.w    $147E, $B480
Offset_0x102BFC:
                dc.w    $0002
                dc.w    $548C, $7492
Offset_0x102C02:
                dc.w    $0001
                dc.w    $F49A
Offset_0x102C06:
                dc.w    $0002
                dc.w    $F4AA, $34BA
Offset_0x102C0C:
                dc.w    $0002
                dc.w    $F4BE, $34CE
Offset_0x102C12:
                dc.w    $0002
                dc.w    $34D2, $B4D6
Offset_0x102C18:
                dc.w    $0002
                dc.w    $74E2, $74E2
Offset_0x102C1E:
                dc.w    $0002
                dc.w    $74EA, $34F2
Offset_0x102C24:
                dc.w    $0002
                dc.w    $34F6, $B4FA
Offset_0x102C2A:
                dc.w    $0001
                dc.w    $F506
Offset_0x102C2E:
                dc.w    $0001
                dc.w    $B516
Offset_0x102C32:
                dc.w    $0002
                dc.w    $3522, $B526
Offset_0x102C38:
                dc.w    $0001
                dc.w    $B532
Offset_0x102C3C:
                dc.w    $0001
                dc.w    $B53E
Offset_0x102C40:
                dc.w    $0001
                dc.w    $B54A
Offset_0x102C44:
                dc.w    $0001
                dc.w    $B556
Offset_0x102C48:
                dc.w    $0001
                dc.w    $B562
Offset_0x102C4C:
                dc.w    $0001
                dc.w    $B56E
Offset_0x102C50:
                dc.w    $0001
                dc.w    $B57A
Offset_0x102C54:
                dc.w    $0001
                dc.w    $B586
Offset_0x102C58:
                dc.w    $0002
                dc.w    $5592, $3598
Offset_0x102C5E:
                dc.w    $0002
                dc.w    $759C, $35A4
Offset_0x102C64:
                dc.w    $0002
                dc.w    $55A8, $75AE
Offset_0x102C6A:
                dc.w    $0002
                dc.w    $55A8, $75B6
;===============================================================================
; Script para carga dos Sprites do Miles      
; <<<-
;===============================================================================
Sonic_Mappings_2P:                                             ; Offset_0x102C70
                dc.w    Offset_0x102CC8-Sonic_Mappings_2P
                dc.w    Offset_0x102CCA-Sonic_Mappings_2P
                dc.w    Offset_0x102CD2-Sonic_Mappings_2P
                dc.w    Offset_0x102CDA-Sonic_Mappings_2P
                dc.w    Offset_0x102CE2-Sonic_Mappings_2P
                dc.w    Offset_0x102CEA-Sonic_Mappings_2P
                dc.w    Offset_0x102CF2-Sonic_Mappings_2P
                dc.w    Offset_0x102CFA-Sonic_Mappings_2P
                dc.w    Offset_0x102D02-Sonic_Mappings_2P
                dc.w    Offset_0x102D0A-Sonic_Mappings_2P
                dc.w    Offset_0x102D12-Sonic_Mappings_2P
                dc.w    Offset_0x102D1A-Sonic_Mappings_2P
                dc.w    Offset_0x102D22-Sonic_Mappings_2P
                dc.w    Offset_0x102D2A-Sonic_Mappings_2P
                dc.w    Offset_0x102D32-Sonic_Mappings_2P
                dc.w    Offset_0x102D3A-Sonic_Mappings_2P
                dc.w    Offset_0x102D42-Sonic_Mappings_2P
                dc.w    Offset_0x102D4A-Sonic_Mappings_2P
                dc.w    Offset_0x102D52-Sonic_Mappings_2P
                dc.w    Offset_0x102D5A-Sonic_Mappings_2P
                dc.w    Offset_0x102D62-Sonic_Mappings_2P
                dc.w    Offset_0x102D6A-Sonic_Mappings_2P
                dc.w    Offset_0x102D72-Sonic_Mappings_2P
                dc.w    Offset_0x102D7A-Sonic_Mappings_2P
                dc.w    Offset_0x102D82-Sonic_Mappings_2P
                dc.w    Offset_0x102D8A-Sonic_Mappings_2P
                dc.w    Offset_0x102D92-Sonic_Mappings_2P
                dc.w    Offset_0x102D9A-Sonic_Mappings_2P
                dc.w    Offset_0x102DA2-Sonic_Mappings_2P
                dc.w    Offset_0x102DAA-Sonic_Mappings_2P
                dc.w    Offset_0x102DB2-Sonic_Mappings_2P
                dc.w    Offset_0x102DBA-Sonic_Mappings_2P
                dc.w    Offset_0x102DC2-Sonic_Mappings_2P
                dc.w    Offset_0x102DCA-Sonic_Mappings_2P
                dc.w    Offset_0x102DD2-Sonic_Mappings_2P
                dc.w    Offset_0x102DDA-Sonic_Mappings_2P
                dc.w    Offset_0x102DE2-Sonic_Mappings_2P
                dc.w    Offset_0x102DEA-Sonic_Mappings_2P
                dc.w    Offset_0x102DF2-Sonic_Mappings_2P
                dc.w    Offset_0x102DF2-Sonic_Mappings_2P
                dc.w    Offset_0x102DFA-Sonic_Mappings_2P
                dc.w    Offset_0x102E02-Sonic_Mappings_2P
                dc.w    Offset_0x102E0A-Sonic_Mappings_2P
                dc.w    Offset_0x102E12-Sonic_Mappings_2P
Offset_0x102CC8:
                dc.w    $0000
Offset_0x102CCA:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x102CD2:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x102CDA:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x102CE2:
                dc.w    $0001
                dc.w    $F00B, $0000, $FFF4
Offset_0x102CEA:
                dc.w    $0001
                dc.w    $F00B, $0000, $FFF4
Offset_0x102CF2:
                dc.w    $0001
                dc.w    $F00B, $0000, $FFF4
Offset_0x102CFA:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x102D02:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x102D0A:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x102D12:
                dc.w    $0001
                dc.w    $F40E, $0000, $FFF0
Offset_0x102D1A:
                dc.w    $0001
                dc.w    $F40E, $0000, $FFF0
Offset_0x102D22:
                dc.w    $0001
                dc.w    $F40E, $0000, $FFF0
Offset_0x102D2A:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x102D32:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x102D3A:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x102D42:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x102D4A:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x102D52:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x102D5A:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x102D62:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x102D6A:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x102D72:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x102D7A:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x102D82:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x102D8A:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x102D92:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x102D9A:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x102DA2:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x102DAA:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x102DB2:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x102DBA:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x102DC2:
                dc.w    $0001
                dc.w    $F00B, $0000, $FFF4
Offset_0x102DCA:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x102DD2:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x102DDA:
                dc.w    $0001
                dc.w    $FC09, $0000, $FFF4
Offset_0x102DE2:
                dc.w    $0001
                dc.w    $FC09, $0000, $FFF4
Offset_0x102DEA:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x102DF2:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x102DFA:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x102E02:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x102E0A:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x102E12:
                dc.w    $0001
                dc.w    $FC09, $0000, $FFF4
;-------------------------------------------------------------------------------               
Sonic_Dyn_Script_2P:                                           ; Offset_0x102E1A
                dc.w    Offset_0x102E72-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102E74-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102E78-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102E7C-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102E80-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102E84-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102E88-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102E8C-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102E90-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102E94-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102E98-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102E9C-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102EA0-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102EA4-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102EA8-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102EAC-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102EB0-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102EB4-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102EB8-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102EBC-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102EC0-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102EC4-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102EC8-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102ECC-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102ED0-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102ED4-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102ED8-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102EDC-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102EE0-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102EE4-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102EE8-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102EEC-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102EF0-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102EF4-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102EF8-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102EFC-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102F00-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102F04-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102F08-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102F08-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102F0C-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102F10-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102F14-Sonic_Dyn_Script_2P
                dc.w    Offset_0x102F18-Sonic_Dyn_Script_2P
Offset_0x102E72:
                dc.w    $0000
Offset_0x102E74:
                dc.w    $0001
                dc.w    $8000
Offset_0x102E78:
                dc.w    $0001
                dc.w    $8009
Offset_0x102E7C:
                dc.w    $0001
                dc.w    $8012
Offset_0x102E80:
                dc.w    $0001
                dc.w    $B01B
Offset_0x102E84:
                dc.w    $0001
                dc.w    $B027
Offset_0x102E88:
                dc.w    $0001
                dc.w    $B033
Offset_0x102E8C:
                dc.w    $0001
                dc.w    $803F
Offset_0x102E90:
                dc.w    $0001
                dc.w    $8048
Offset_0x102E94:
                dc.w    $0001
                dc.w    $8051
Offset_0x102E98:
                dc.w    $0001
                dc.w    $B05A
Offset_0x102E9C:
                dc.w    $0001
                dc.w    $B066
Offset_0x102EA0:
                dc.w    $0001
                dc.w    $B072
Offset_0x102EA4:
                dc.w    $0001
                dc.w    $807E
Offset_0x102EA8:
                dc.w    $0001
                dc.w    $8087
Offset_0x102EAC:
                dc.w    $0001
                dc.w    $8090
Offset_0x102EB0:
                dc.w    $0001
                dc.w    $8099
Offset_0x102EB4:
                dc.w    $0001
                dc.w    $80A2
Offset_0x102EB8:
                dc.w    $0001
                dc.w    $80AB
Offset_0x102EBC:
                dc.w    $0001
                dc.w    $80B4
Offset_0x102EC0:
                dc.w    $0001
                dc.w    $80BD
Offset_0x102EC4:
                dc.w    $0001
                dc.w    $80C6
Offset_0x102EC8:
                dc.w    $0001
                dc.w    $80CF
Offset_0x102ECC:
                dc.w    $0001
                dc.w    $80D8
Offset_0x102ED0:
                dc.w    $0001
                dc.w    $80E1
Offset_0x102ED4:
                dc.w    $0001
                dc.w    $80EA
Offset_0x102ED8:
                dc.w    $0001
                dc.w    $80F3
Offset_0x102EDC:
                dc.w    $0001
                dc.w    $80FC
Offset_0x102EE0:
                dc.w    $0001
                dc.w    $8105
Offset_0x102EE4:
                dc.w    $0001
                dc.w    $810E
Offset_0x102EE8:
                dc.w    $0001
                dc.w    $8117
Offset_0x102EEC:
                dc.w    $0001
                dc.w    $8120
Offset_0x102EF0:
                dc.w    $0001
                dc.w    $B129
Offset_0x102EF4:
                dc.w    $0001
                dc.w    $8135
Offset_0x102EF8:
                dc.w    $0001
                dc.w    $813E
Offset_0x102EFC:
                dc.w    $0001
                dc.w    $5147
Offset_0x102F00:
                dc.w    $0001
                dc.w    $514D
Offset_0x102F04:
                dc.w    $0001
                dc.w    $8153
Offset_0x102F08:
                dc.w    $0001
                dc.w    $815C
Offset_0x102F0C:
                dc.w    $0001
                dc.w    $8165
Offset_0x102F10:
                dc.w    $0001
                dc.w    $816E
Offset_0x102F14:
                dc.w    $0001
                dc.w    $8177
Offset_0x102F18:
                dc.w    $0001
                dc.w    $5180                
;-------------------------------------------------------------------------------
Miles_2P_Mappings:                                             ; Offset_0x102F1C  
                dc.w    Offset_0x102F78-Miles_2P_Mappings
                dc.w    Offset_0x102F7A-Miles_2P_Mappings
                dc.w    Offset_0x102F82-Miles_2P_Mappings
                dc.w    Offset_0x102F8A-Miles_2P_Mappings
                dc.w    Offset_0x102F92-Miles_2P_Mappings
                dc.w    Offset_0x102F9A-Miles_2P_Mappings
                dc.w    Offset_0x102FA2-Miles_2P_Mappings
                dc.w    Offset_0x102FAA-Miles_2P_Mappings
                dc.w    Offset_0x102FB2-Miles_2P_Mappings
                dc.w    Offset_0x102FBA-Miles_2P_Mappings
                dc.w    Offset_0x102FC2-Miles_2P_Mappings
                dc.w    Offset_0x102FCA-Miles_2P_Mappings
                dc.w    Offset_0x102FD2-Miles_2P_Mappings
                dc.w    Offset_0x102FDA-Miles_2P_Mappings
                dc.w    Offset_0x102FE2-Miles_2P_Mappings
                dc.w    Offset_0x102FEA-Miles_2P_Mappings
                dc.w    Offset_0x102FF2-Miles_2P_Mappings
                dc.w    Offset_0x102FFA-Miles_2P_Mappings
                dc.w    Offset_0x103002-Miles_2P_Mappings
                dc.w    Offset_0x10300A-Miles_2P_Mappings
                dc.w    Offset_0x103012-Miles_2P_Mappings
                dc.w    Offset_0x10301A-Miles_2P_Mappings
                dc.w    Offset_0x103022-Miles_2P_Mappings
                dc.w    Offset_0x10302A-Miles_2P_Mappings
                dc.w    Offset_0x103032-Miles_2P_Mappings
                dc.w    Offset_0x10303A-Miles_2P_Mappings
                dc.w    Offset_0x103042-Miles_2P_Mappings
                dc.w    Offset_0x10304A-Miles_2P_Mappings
                dc.w    Offset_0x103052-Miles_2P_Mappings
                dc.w    Offset_0x10305A-Miles_2P_Mappings
                dc.w    Offset_0x103062-Miles_2P_Mappings
                dc.w    Offset_0x10306A-Miles_2P_Mappings
                dc.w    Offset_0x103072-Miles_2P_Mappings
                dc.w    Offset_0x10307A-Miles_2P_Mappings
                dc.w    Offset_0x103082-Miles_2P_Mappings
                dc.w    Offset_0x10308A-Miles_2P_Mappings
                dc.w    Offset_0x103092-Miles_2P_Mappings
                dc.w    Offset_0x10309A-Miles_2P_Mappings
                dc.w    Offset_0x1030A2-Miles_2P_Mappings
                dc.w    Offset_0x1030A2-Miles_2P_Mappings
                dc.w    Offset_0x1030AA-Miles_2P_Mappings
                dc.w    Offset_0x1030B2-Miles_2P_Mappings
                dc.w    Offset_0x1030BA-Miles_2P_Mappings
                dc.w    Offset_0x1030C2-Miles_2P_Mappings
                dc.w    Offset_0x1030CA-Miles_2P_Mappings
                dc.w    Offset_0x1030D2-Miles_2P_Mappings
Offset_0x102F78:
                dc.w    $0000
Offset_0x102F7A:
                dc.w    $0001
                dc.w    $F40E, $0000, $FFF0
Offset_0x102F82:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF0
Offset_0x102F8A:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF0
Offset_0x102F92:
                dc.w    $0001
                dc.w    $F60A, $0000, $FFF6
Offset_0x102F9A:
                dc.w    $0001
                dc.w    $F60A, $0000, $FFF6
Offset_0x102FA2:
                dc.w    $0001
                dc.w    $F60A, $0000, $FFF6
Offset_0x102FAA:
                dc.w    $0001
                dc.w    $F00B, $0000, $FFF4
Offset_0x102FB2:
                dc.w    $0001
                dc.w    $F80A, $0000, $FFF4
Offset_0x102FBA:
                dc.w    $0001
                dc.w    $F80A, $0000, $FFF4
Offset_0x102FC2:
                dc.w    $0001
                dc.w    $F20A, $0000, $FFF6
Offset_0x102FCA:
                dc.w    $0001
                dc.w    $F20A, $0000, $FFF6
Offset_0x102FD2:
                dc.w    $0001
                dc.w    $F20A, $0000, $FFF6
Offset_0x102FDA:
                dc.w    $0001
                dc.w    $F70A, $0000, $FFF4
Offset_0x102FE2:
                dc.w    $0001
                dc.w    $F70A, $0000, $FFF4
Offset_0x102FEA:
                dc.w    $0001
                dc.w    $F20B, $0000, $FFF2
Offset_0x102FF2:
                dc.w    $0001
                dc.w    $F606, $0000, $FFF8
Offset_0x102FFA:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF7
Offset_0x103002:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF7
Offset_0x10300A:
                dc.w    $0001
                dc.w    $F60E, $0000, $FFF2
Offset_0x103012:
                dc.w    $0001
                dc.w    $F809, $0000, $FFF6
Offset_0x10301A:
                dc.w    $0001
                dc.w    $F406, $0000, $FFF8
Offset_0x103022:
                dc.w    $0001
                dc.w    $F406, $0000, $FFF8
Offset_0x10302A:
                dc.w    $0001
                dc.w    $F406, $0000, $FFF8
Offset_0x103032:
                dc.w    $0001
                dc.w    $F406, $0000, $FFF8
Offset_0x10303A:
                dc.w    $0001
                dc.w    $F406, $0000, $FFF8
Offset_0x103042:
                dc.w    $0001
                dc.w    $F406, $0000, $FFF8
Offset_0x10304A:
                dc.w    $0001
                dc.w    $F406, $0000, $FFF8
Offset_0x103052:
                dc.w    $0001
                dc.w    $F406, $0000, $FFF8
Offset_0x10305A:
                dc.w    $0001
                dc.w    $F406, $0000, $FFF8
Offset_0x103062:
                dc.w    $0001
                dc.w    $F406, $0000, $FFF8
Offset_0x10306A:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x103072:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x10307A:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x103082:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x10308A:
                dc.w    $0001
                dc.w    $FC0D, $0000, $FFEA
Offset_0x103092:
                dc.w    $0001
                dc.w    $FC0D, $0000, $FFEA
Offset_0x10309A:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x1030A2:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x1030AA:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x1030B2:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x1030BA:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x1030C2:
                dc.w    $0001
                dc.w    $FC05, $0000, $FFF8
Offset_0x1030CA:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x1030D2:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4   
;-------------------------------------------------------------------------------
Miles_Tails_2P_Mappings:                                       ; Offset_0x1030DA
                dc.w    Offset_0x1030FA-Miles_Tails_2P_Mappings
                dc.w    Offset_0x1030FC-Miles_Tails_2P_Mappings
                dc.w    Offset_0x103104-Miles_Tails_2P_Mappings
                dc.w    Offset_0x10310C-Miles_Tails_2P_Mappings
                dc.w    Offset_0x103114-Miles_Tails_2P_Mappings
                dc.w    Offset_0x10311C-Miles_Tails_2P_Mappings
                dc.w    Offset_0x103124-Miles_Tails_2P_Mappings
                dc.w    Offset_0x10312C-Miles_Tails_2P_Mappings
                dc.w    Offset_0x103134-Miles_Tails_2P_Mappings
                dc.w    Offset_0x10313C-Miles_Tails_2P_Mappings
                dc.w    Offset_0x103144-Miles_Tails_2P_Mappings
                dc.w    Offset_0x10314C-Miles_Tails_2P_Mappings
                dc.w    Offset_0x103154-Miles_Tails_2P_Mappings
                dc.w    Offset_0x10315C-Miles_Tails_2P_Mappings
                dc.w    Offset_0x103164-Miles_Tails_2P_Mappings
                dc.w    Offset_0x10316C-Miles_Tails_2P_Mappings
Offset_0x1030FA:
                dc.w    $0000
Offset_0x1030FC:
                dc.w    $0001
                dc.w    $FC05, $0000, $FFF0
Offset_0x103104:
                dc.w    $0001
                dc.w    $FC05, $0000, $FFF0
Offset_0x10310C:
                dc.w    $0001
                dc.w    $FC05, $0000, $FFF0
Offset_0x103114:
                dc.w    $0001
                dc.w    $FC04, $0000, $FFEC
Offset_0x10311C:
                dc.w    $0001
                dc.w    $FC04, $0000, $FFEC
Offset_0x103124:
                dc.w    $0001
                dc.w    $FC04, $0000, $FFEC
Offset_0x10312C:
                dc.w    $0001
                dc.w    $0405, $0000, $FFEC
Offset_0x103134:
                dc.w    $0001
                dc.w    $0405, $0000, $FFEC
Offset_0x10313C:
                dc.w    $0001
                dc.w    $0804, $0000, $FFEC
Offset_0x103144:
                dc.w    $0001
                dc.w    $0201, $0000, $FFFC
Offset_0x10314C:
                dc.w    $0001
                dc.w    $0201, $0000, $FFFC
Offset_0x103154:
                dc.w    $0001
                dc.w    $0201, $0000, $FFFC
Offset_0x10315C:
                dc.w    $0001
                dc.w    $0405, $0000, $0004
Offset_0x103164:
                dc.w    $0001
                dc.w    $0405, $0000, $0004
Offset_0x10316C:
                dc.w    $0001
                dc.w    $0401, $0000, $0008                            
;-------------------------------------------------------------------------------
Miles_Dyn_Script_2P:                                           ; Offset_0x103174 
                dc.w    Offset_0x1031D0-Miles_Dyn_Script_2P
                dc.w    Offset_0x1031D2-Miles_Dyn_Script_2P
                dc.w    Offset_0x1031D6-Miles_Dyn_Script_2P
                dc.w    Offset_0x1031DA-Miles_Dyn_Script_2P
                dc.w    Offset_0x1031DE-Miles_Dyn_Script_2P
                dc.w    Offset_0x1031E2-Miles_Dyn_Script_2P
                dc.w    Offset_0x1031E6-Miles_Dyn_Script_2P
                dc.w    Offset_0x1031EA-Miles_Dyn_Script_2P
                dc.w    Offset_0x1031EE-Miles_Dyn_Script_2P
                dc.w    Offset_0x1031F2-Miles_Dyn_Script_2P
                dc.w    Offset_0x1031F6-Miles_Dyn_Script_2P
                dc.w    Offset_0x1031FA-Miles_Dyn_Script_2P
                dc.w    Offset_0x1031FE-Miles_Dyn_Script_2P
                dc.w    Offset_0x103202-Miles_Dyn_Script_2P
                dc.w    Offset_0x103206-Miles_Dyn_Script_2P
                dc.w    Offset_0x10320A-Miles_Dyn_Script_2P
                dc.w    Offset_0x10320E-Miles_Dyn_Script_2P
                dc.w    Offset_0x103212-Miles_Dyn_Script_2P
                dc.w    Offset_0x103216-Miles_Dyn_Script_2P
                dc.w    Offset_0x10321A-Miles_Dyn_Script_2P
                dc.w    Offset_0x10321E-Miles_Dyn_Script_2P
                dc.w    Offset_0x103222-Miles_Dyn_Script_2P
                dc.w    Offset_0x103226-Miles_Dyn_Script_2P
                dc.w    Offset_0x10322A-Miles_Dyn_Script_2P
                dc.w    Offset_0x10322E-Miles_Dyn_Script_2P
                dc.w    Offset_0x103232-Miles_Dyn_Script_2P
                dc.w    Offset_0x103236-Miles_Dyn_Script_2P
                dc.w    Offset_0x10323A-Miles_Dyn_Script_2P
                dc.w    Offset_0x10323E-Miles_Dyn_Script_2P
                dc.w    Offset_0x103242-Miles_Dyn_Script_2P
                dc.w    Offset_0x103246-Miles_Dyn_Script_2P
                dc.w    Offset_0x10324A-Miles_Dyn_Script_2P
                dc.w    Offset_0x10324E-Miles_Dyn_Script_2P
                dc.w    Offset_0x103252-Miles_Dyn_Script_2P
                dc.w    Offset_0x103256-Miles_Dyn_Script_2P
                dc.w    Offset_0x10325A-Miles_Dyn_Script_2P
                dc.w    Offset_0x10325E-Miles_Dyn_Script_2P
                dc.w    Offset_0x103262-Miles_Dyn_Script_2P
                dc.w    Offset_0x103266-Miles_Dyn_Script_2P
                dc.w    Offset_0x103266-Miles_Dyn_Script_2P
                dc.w    Offset_0x10326A-Miles_Dyn_Script_2P
                dc.w    Offset_0x10326E-Miles_Dyn_Script_2P
                dc.w    Offset_0x103272-Miles_Dyn_Script_2P
                dc.w    Offset_0x103276-Miles_Dyn_Script_2P
                dc.w    Offset_0x10327A-Miles_Dyn_Script_2P
                dc.w    Offset_0x10327E-Miles_Dyn_Script_2P
Offset_0x1031D0:
                dc.w    $0000
Offset_0x1031D2:
                dc.w    $0001
                dc.w    $B000
Offset_0x1031D6:
                dc.w    $0001
                dc.w    $800C
Offset_0x1031DA:
                dc.w    $0001
                dc.w    $8015
Offset_0x1031DE:
                dc.w    $0001
                dc.w    $801E
Offset_0x1031E2:
                dc.w    $0001
                dc.w    $8027
Offset_0x1031E6:
                dc.w    $0001
                dc.w    $8030
Offset_0x1031EA:
                dc.w    $0001
                dc.w    $B039
Offset_0x1031EE:
                dc.w    $0001
                dc.w    $8045
Offset_0x1031F2:
                dc.w    $0001
                dc.w    $804E
Offset_0x1031F6:
                dc.w    $0001
                dc.w    $8057
Offset_0x1031FA:
                dc.w    $0001
                dc.w    $8060
Offset_0x1031FE:
                dc.w    $0001
                dc.w    $8069
Offset_0x103202:
                dc.w    $0001
                dc.w    $8072
Offset_0x103206:
                dc.w    $0001
                dc.w    $807B
Offset_0x10320A:
                dc.w    $0001
                dc.w    $B084
Offset_0x10320E:
                dc.w    $0001
                dc.w    $5090
Offset_0x103212:
                dc.w    $0001
                dc.w    $8096
Offset_0x103216:
                dc.w    $0001
                dc.w    $809F
Offset_0x10321A:
                dc.w    $0001
                dc.w    $B0A8
Offset_0x10321E:
                dc.w    $0001
                dc.w    $50B4
Offset_0x103222:
                dc.w    $0001
                dc.w    $50BA
Offset_0x103226:
                dc.w    $0001
                dc.w    $50C0
Offset_0x10322A:
                dc.w    $0001
                dc.w    $50C6
Offset_0x10322E:
                dc.w    $0001
                dc.w    $50CC
Offset_0x103232:
                dc.w    $0001
                dc.w    $50D2
Offset_0x103236:
                dc.w    $0001
                dc.w    $50D8
Offset_0x10323A:
                dc.w    $0001
                dc.w    $50DE
Offset_0x10323E:
                dc.w    $0001
                dc.w    $50E4
Offset_0x103242:
                dc.w    $0001
                dc.w    $50EA
Offset_0x103246:
                dc.w    $0001
                dc.w    $50F0
Offset_0x10324A:
                dc.w    $0001
                dc.w    $80F6
Offset_0x10324E:
                dc.w    $0001
                dc.w    $80FF
Offset_0x103252:
                dc.w    $0001
                dc.w    $8108
Offset_0x103256:
                dc.w    $0001
                dc.w    $8111
Offset_0x10325A:
                dc.w    $0001
                dc.w    $711A
Offset_0x10325E:
                dc.w    $0001
                dc.w    $7122
Offset_0x103262:
                dc.w    $0001
                dc.w    $812A
Offset_0x103266:
                dc.w    $0001
                dc.w    $8133
Offset_0x10326A:
                dc.w    $0001
                dc.w    $813C
Offset_0x10326E:
                dc.w    $0001
                dc.w    $8145
Offset_0x103272:
                dc.w    $0001
                dc.w    $814E
Offset_0x103276:
                dc.w    $0001
                dc.w    $3169
Offset_0x10327A:
                dc.w    $0001
                dc.w    $8157
Offset_0x10327E:
                dc.w    $0001
                dc.w    $8160  
;-------------------------------------------------------------------------------
Miles_Tails_2P_Dyn_Script:                                     ; Offset_0x103282
                dc.w    Offset_0x1032A2-Miles_Tails_2P_Dyn_Script
                dc.w    Offset_0x1032A4-Miles_Tails_2P_Dyn_Script
                dc.w    Offset_0x1032A8-Miles_Tails_2P_Dyn_Script
                dc.w    Offset_0x1032AC-Miles_Tails_2P_Dyn_Script
                dc.w    Offset_0x1032B0-Miles_Tails_2P_Dyn_Script
                dc.w    Offset_0x1032B4-Miles_Tails_2P_Dyn_Script
                dc.w    Offset_0x1032B8-Miles_Tails_2P_Dyn_Script
                dc.w    Offset_0x1032BC-Miles_Tails_2P_Dyn_Script
                dc.w    Offset_0x1032C0-Miles_Tails_2P_Dyn_Script
                dc.w    Offset_0x1032C4-Miles_Tails_2P_Dyn_Script
                dc.w    Offset_0x1032C8-Miles_Tails_2P_Dyn_Script
                dc.w    Offset_0x1032CC-Miles_Tails_2P_Dyn_Script
                dc.w    Offset_0x1032D0-Miles_Tails_2P_Dyn_Script
                dc.w    Offset_0x1032D4-Miles_Tails_2P_Dyn_Script
                dc.w    Offset_0x1032D8-Miles_Tails_2P_Dyn_Script
                dc.w    Offset_0x1032DC-Miles_Tails_2P_Dyn_Script
Offset_0x1032A2:
                dc.w    $0000
Offset_0x1032A4:
                dc.w    $0001
                dc.w    $3000
Offset_0x1032A8:
                dc.w    $0001
                dc.w    $3004
Offset_0x1032AC:
                dc.w    $0001
                dc.w    $3008
Offset_0x1032B0:
                dc.w    $0001
                dc.w    $100C
Offset_0x1032B4:
                dc.w    $0001
                dc.w    $100E
Offset_0x1032B8:
                dc.w    $0001
                dc.w    $1010
Offset_0x1032BC:
                dc.w    $0001
                dc.w    $3012
Offset_0x1032C0:
                dc.w    $0001
                dc.w    $3016
Offset_0x1032C4:
                dc.w    $0001
                dc.w    $101A
Offset_0x1032C8:
                dc.w    $0001
                dc.w    $101C
Offset_0x1032CC:
                dc.w    $0001
                dc.w    $101E
Offset_0x1032D0:
                dc.w    $0001
                dc.w    $1020
Offset_0x1032D4:
                dc.w    $0001
                dc.w    $3022
Offset_0x1032D8:
                dc.w    $0001
                dc.w    $3026
Offset_0x1032DC:
                dc.w    $0001
                dc.w    $102A
;-------------------------------------------------------------------------------
Knuckles_Mappings_2P:                                          ; Offset_0x1032E0
                dc.w    Offset_0x103344-Knuckles_Mappings_2P
                dc.w    Offset_0x103346-Knuckles_Mappings_2P
                dc.w    Offset_0x10334E-Knuckles_Mappings_2P
                dc.w    Offset_0x103356-Knuckles_Mappings_2P
                dc.w    Offset_0x10335E-Knuckles_Mappings_2P
                dc.w    Offset_0x103366-Knuckles_Mappings_2P
                dc.w    Offset_0x10336E-Knuckles_Mappings_2P
                dc.w    Offset_0x103376-Knuckles_Mappings_2P
                dc.w    Offset_0x10337E-Knuckles_Mappings_2P
                dc.w    Offset_0x103386-Knuckles_Mappings_2P
                dc.w    Offset_0x10338E-Knuckles_Mappings_2P
                dc.w    Offset_0x103396-Knuckles_Mappings_2P
                dc.w    Offset_0x10339E-Knuckles_Mappings_2P
                dc.w    Offset_0x1033A6-Knuckles_Mappings_2P
                dc.w    Offset_0x1033AE-Knuckles_Mappings_2P
                dc.w    Offset_0x1033B6-Knuckles_Mappings_2P
                dc.w    Offset_0x1033BE-Knuckles_Mappings_2P
                dc.w    Offset_0x1033C6-Knuckles_Mappings_2P
                dc.w    Offset_0x1033CE-Knuckles_Mappings_2P
                dc.w    Offset_0x1033D6-Knuckles_Mappings_2P
                dc.w    Offset_0x1033DE-Knuckles_Mappings_2P
                dc.w    Offset_0x1033E6-Knuckles_Mappings_2P
                dc.w    Offset_0x1033EE-Knuckles_Mappings_2P
                dc.w    Offset_0x1033F6-Knuckles_Mappings_2P
                dc.w    Offset_0x1033FE-Knuckles_Mappings_2P
                dc.w    Offset_0x103406-Knuckles_Mappings_2P
                dc.w    Offset_0x10340E-Knuckles_Mappings_2P
                dc.w    Offset_0x103416-Knuckles_Mappings_2P
                dc.w    Offset_0x10341E-Knuckles_Mappings_2P
                dc.w    Offset_0x103426-Knuckles_Mappings_2P
                dc.w    Offset_0x10342E-Knuckles_Mappings_2P
                dc.w    Offset_0x103436-Knuckles_Mappings_2P
                dc.w    Offset_0x10343E-Knuckles_Mappings_2P
                dc.w    Offset_0x103446-Knuckles_Mappings_2P
                dc.w    Offset_0x10344E-Knuckles_Mappings_2P
                dc.w    Offset_0x103456-Knuckles_Mappings_2P
                dc.w    Offset_0x10345E-Knuckles_Mappings_2P
                dc.w    Offset_0x103466-Knuckles_Mappings_2P
                dc.w    Offset_0x10346E-Knuckles_Mappings_2P
                dc.w    Offset_0x103476-Knuckles_Mappings_2P
                dc.w    Offset_0x10347E-Knuckles_Mappings_2P
                dc.w    Offset_0x103486-Knuckles_Mappings_2P
                dc.w    Offset_0x10348E-Knuckles_Mappings_2P
                dc.w    Offset_0x103496-Knuckles_Mappings_2P
                dc.w    Offset_0x10349E-Knuckles_Mappings_2P
                dc.w    Offset_0x1034A6-Knuckles_Mappings_2P
                dc.w    Offset_0x1034AE-Knuckles_Mappings_2P
                dc.w    Offset_0x1034B6-Knuckles_Mappings_2P
                dc.w    Offset_0x1034BE-Knuckles_Mappings_2P
                dc.w    Offset_0x1034C6-Knuckles_Mappings_2P
Offset_0x103344:
                dc.w    $0000
Offset_0x103346:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x10334E:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x103356:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x10335E:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x103366:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x10336E:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x103376:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x10337E:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x103386:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x10338E:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x103396:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x10339E:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x1033A6:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x1033AE:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x1033B6:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x1033BE:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x1033C6:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x1033CE:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x1033D6:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x1033DE:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x1033E6:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x1033EE:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x1033F6:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x1033FE:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x103406:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x10340E:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x103416:
                dc.w    $0001
                dc.w    $F406, $0000, $FFF8
Offset_0x10341E:
                dc.w    $0001
                dc.w    $F406, $0000, $FFF8
Offset_0x103426:
                dc.w    $0001
                dc.w    $F406, $0000, $FFF8
Offset_0x10342E:
                dc.w    $0001
                dc.w    $F406, $0000, $FFF8
Offset_0x103436:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x10343E:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x103446:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x10344E:
                dc.w    $0001
                dc.w    $F40E, $0000, $FFF0
Offset_0x103456:
                dc.w    $0001
                dc.w    $FC09, $0000, $FFF4
Offset_0x10345E:
                dc.w    $0001
                dc.w    $FC09, $0000, $FFF4
Offset_0x103466:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x10346E:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x103476:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x10347E:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x103486:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x10348E:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x103496:
                dc.w    $0001
                dc.w    $FC05, $0000, $FFF8
Offset_0x10349E:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x1034A6:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x1034AE:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x1034B6:
                dc.w    $0001
                dc.w    $F80D, $0000, $FFF0
Offset_0x1034BE:
                dc.w    $0001
                dc.w    $F809, $0000, $FFF4
Offset_0x1034C6:
                dc.w    $0001
                dc.w    $F00B, $0000, $FFF4
;-------------------------------------------------------------------------------                
Knuckles_Dyn_Script_2P:                                        ; Offset_0x1034CE
                dc.w    Offset_0x103532-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x103534-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x103538-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x10353C-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x103540-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x103544-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x103548-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x10354C-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x103550-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x103554-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x103558-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x10355C-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x103560-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x103564-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x103568-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x10356C-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x103570-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x103574-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x103578-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x10357C-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x103580-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x103584-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x103588-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x10358C-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x103590-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x103594-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x103598-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x10359C-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x1035A0-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x1035A4-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x1035A8-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x1035AC-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x1035B0-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x1035B4-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x1035B8-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x1035BC-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x1035C0-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x1035C4-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x1035C8-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x1035CC-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x1035D0-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x1035D4-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x1035D8-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x1035DC-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x1035E0-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x1035E4-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x1035E8-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x1035EC-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x1035F0-Knuckles_Dyn_Script_2P
                dc.w    Offset_0x1035F4-Knuckles_Dyn_Script_2P
Offset_0x103532:
                dc.w    $0000
Offset_0x103534:
                dc.w    $0001
                dc.w    $8000
Offset_0x103538:
                dc.w    $0001
                dc.w    $8009
Offset_0x10353C:
                dc.w    $0001
                dc.w    $8012
Offset_0x103540:
                dc.w    $0001
                dc.w    $801B
Offset_0x103544:
                dc.w    $0001
                dc.w    $8024
Offset_0x103548:
                dc.w    $0001
                dc.w    $802D
Offset_0x10354C:
                dc.w    $0001
                dc.w    $8036
Offset_0x103550:
                dc.w    $0001
                dc.w    $803F
Offset_0x103554:
                dc.w    $0001
                dc.w    $8048
Offset_0x103558:
                dc.w    $0001
                dc.w    $8051
Offset_0x10355C:
                dc.w    $0001
                dc.w    $805A
Offset_0x103560:
                dc.w    $0001
                dc.w    $8063
Offset_0x103564:
                dc.w    $0001
                dc.w    $806C
Offset_0x103568:
                dc.w    $0001
                dc.w    $8075
Offset_0x10356C:
                dc.w    $0001
                dc.w    $807E
Offset_0x103570:
                dc.w    $0001
                dc.w    $8087
Offset_0x103574:
                dc.w    $0001
                dc.w    $8090
Offset_0x103578:
                dc.w    $0001
                dc.w    $8099
Offset_0x10357C:
                dc.w    $0001
                dc.w    $80A2
Offset_0x103580:
                dc.w    $0001
                dc.w    $80AB
Offset_0x103584:
                dc.w    $0001
                dc.w    $80B4
Offset_0x103588:
                dc.w    $0001
                dc.w    $80BD
Offset_0x10358C:
                dc.w    $0001
                dc.w    $80C6
Offset_0x103590:
                dc.w    $0001
                dc.w    $80CF
Offset_0x103594:
                dc.w    $0001
                dc.w    $80D8
Offset_0x103598:
                dc.w    $0001
                dc.w    $80E1
Offset_0x10359C:
                dc.w    $0001
                dc.w    $50EA
Offset_0x1035A0:
                dc.w    $0001
                dc.w    $50F0
Offset_0x1035A4:
                dc.w    $0001
                dc.w    $50F6
Offset_0x1035A8:
                dc.w    $0001
                dc.w    $50FC
Offset_0x1035AC:
                dc.w    $0001
                dc.w    $8102
Offset_0x1035B0:
                dc.w    $0001
                dc.w    $810B
Offset_0x1035B4:
                dc.w    $0001
                dc.w    $8114
Offset_0x1035B8:
                dc.w    $0001
                dc.w    $B11D
Offset_0x1035BC:
                dc.w    $0001
                dc.w    $5129
Offset_0x1035C0:
                dc.w    $0001
                dc.w    $512F
Offset_0x1035C4:
                dc.w    $0001
                dc.w    $8135
Offset_0x1035C8:
                dc.w    $0001
                dc.w    $813E
Offset_0x1035CC:
                dc.w    $0001
                dc.w    $8147
Offset_0x1035D0:
                dc.w    $0001
                dc.w    $8150
Offset_0x1035D4:
                dc.w    $0001
                dc.w    $8159
Offset_0x1035D8:
                dc.w    $0001
                dc.w    $8162
Offset_0x1035DC:
                dc.w    $0001
                dc.w    $31A0
Offset_0x1035E0:
                dc.w    $0001
                dc.w    $816B
Offset_0x1035E4:
                dc.w    $0001
                dc.w    $8174
Offset_0x1035E8:
                dc.w    $0001
                dc.w    $817D
Offset_0x1035EC:
                dc.w    $0001
                dc.w    $7186
Offset_0x1035F0:
                dc.w    $0001
                dc.w    $518E
Offset_0x1035F4:
                dc.w    $0001
                dc.w    $B194
;------------------------------------------------------------------------------- 
Art_Intro_Water_Waves:                                         ; Offset_0x1035F8
                incbin  'data\aiz\wtrwaves.nem'
Art_Intro_Small_Water_Waves:                                   ; Offset_0x103B38
                incbin  'data\aiz\smallwav.nem'
Art_Surfboard:                                                 ; Offset_0x103DD0
                incbin  'data\aiz\surfbrd.nem'
Art_SEGA:                                                      ; Offset_0x10417A
                incbin  'data\art\sega.nem'
Art_SEGA_Some_Blocks:                                          ; Offset_0x1045FA
                incbin  'data\art\segablck.nem'
SEGA_Mappings:                                                 ; Offset_0x104612
                incbin  'data\mappings\sega.eni'                
Art_Title_Screen_Sonic_3:                                      ; Offset_0x1046CA
                incbin  'data\art\titlscrn.kos'
                dc.w     $0000, $0000, $0000, $0000, $0000, $0000
Art_Title_Screen_Sonic:                                        ; Offset_0x1051AA
                incbin  'data\art\ts_sonic.kos'                
                dc.w     $0000, $0000, $0000, $0000, $0000
Map_Title_Screen_Sonic_3:                                      ; Offset_0x1065DA
                incbin  'data\mappings\titlscrn.eni'
Map_Title_Screen_Sonic:                                        ; Offset_0x106650
                incbin  'data\mappings\ts_sonic.eni'
Pal_Title_Screen_Sonic_3:                                      ; Offset_0x1066F6
                incbin  'data\all\titlscrn.pal'
Pal_Title_Screen_Sonic:                                        ; Offset_0x106776
                incbin  'data\all\ts_sonic.pal'      
Art_Switch:                                                    ; Offset_0x1067F6
                incbin  'data\art\switch.nem'
Art_Horizontal_Spring:  ; N�o usado ; Left over ???            ; Offset_0x10687E
                incbin  'data\art\h_spring.nem'  
Art_Diagonal_Spring:                                           ; Offset_0x106AC8
                incbin  'data\art\d_spring.nem'    
Art_Head_Up_Display:    ; N�o usado ; Left over ???            ; Offset_0x106CB0
                incbin  'data\art\hud.nem'       
Art_Head_Up_Display_Sonic:                                     ; Offset_0x106DDC
                incbin  'data\art\hudsonic.nem' 
Art_Head_Up_Display_Miles:                                     ; Offset_0x106EF4
                incbin  'data\art\hudmiles.nem'   
Art_Head_Up_Display_Knuckles:                                  ; Offset_0x106FE4
                incbin  'data\art\hud_kte.nem'    
Art_Rings:                                                     ; Offset_0x1070E2
                incbin  'data\art\rings.nem'                                           
Art_Monitors:                                                  ; Offset_0x1071DA
                incbin  'data\art\monitors.nem'    
Art_Vertical_Spikes:                                           ; Offset_0x107634
                incbin  'data\art\v_spikes.nem'  
Art_Horizontal_Spikes:                                         ; Offset_0x107690
                incbin  'data\art\h_spikes.nem'    
Art_Enemy_Points:                                              ; Offset_0x1076F8
                incbin  'data\art\enemypts.nem' 
Art_Star_Post:                                                 ; Offset_0x10779E
                incbin  'data\art\starpost.nem'   
Art_End_Panel:                                                 ; Offset_0x107956
                incbin  'data\art\endpanel.nem'   
Art_Oxygen_Bubbles:                                            ; Offset_0x1080F8
                incbin  'data\art\oxygen.nem'   
Art_Game_Over_Time_Over:                                       ; Offset_0x108396
                incbin  'data\art\gt_over.nem'  
Art_Explosion:                                                 ; Offset_0x108528
                incbin  'data\art\explosn.nem'     
Art_Miles_In_Continue_Screen:                                  ; Offset_0x1088CE
                incbin  'data\art\cntmiles.nem'   
Art_Mini_Sonic_In_Level_Results:                               ; Offset_0x108BBA
                incbin  'data\art\m_sonic.nem' 
Art_Mini_Miles_In_Level_Results:                               ; Offset_0x108D1C
                incbin  'data\art\m_miles.nem' 
Art_Spikes_Springs:                                            ; Offset_0x108E64
                incbin  'data\art\spkspngs.nem'                
Art_Main_Head_Up_Display_Rings:                                ; Offset_0x109154
                incbin  'data\art\hudrings.nem'
Art_Enemy_Points_Star_Post:                                    ; Offset_0x109392
                incbin  'data\art\epntpost.nem'                           
Art_Menu_Font:                                                 ; Offset_0x1095D6
                incbin  'data\menus\menufont.nem' 
Art_Result_Font_2P:     ; N�o usado ; Left over ???            ; Offset_0x109B4A
                incbin  'data\menus\resfnt2p.nem'  
Versus_Menu_Bg_Mappings:                                       ; Offset_0x109D1C
                incbin  'data\menus\vsmenubg.eni'  
Art_Menu_Frame:                                                ; Offset_0x109EC8
                incbin  'data\menus\menu_frm.nem'                
Art_Level_Icons:                                               ; Offset_0x109F48
                incbin  'data\menus\levelico.nem'
Art_Seal:               ; N�o usado ; Left over ???            ; Offset_0x10ADA2
                incbin  'data\art\seal.nem' 
Art_Pig:                ; N�o usado ; Left over ???            ; Offset_0x10AEBE
                incbin  'data\art\pig.nem'                 
Art_Blue_Bird:                                                 ; Offset_0x10B00A
                incbin  'data\art\bluebird.nem' 
Art_Chicken:                                                   ; Offset_0x10B13C
                incbin  'data\art\chicken.nem' 
Art_Penguin:                                                   ; Offset_0x10B28A
                incbin  'data\art\penguin.nem'                                 
Art_Squirrel:                                                  ; Offset_0x10B3DC
                incbin  'data\art\squirrel.nem'       
Art_Rabbit:                                                    ; Offset_0x10B53A
                incbin  'data\art\rabbit.nem'                              
Art_Scaled_Spheres:                                            ; Offset_0x10B68E
                incbin  'data\ss_test\spheres.nem'
Special_Stage_Globe_Mappings:                                  ; Offset_0x10BFEE
                incbin  'data\ss_test\globe.dat'                    
Art_Special_Stage_Globe:                                       ; Offset_0x10C8AE
                incbin  'data\ss_test\globe.nem' 
;-------------------------------------------------------------------------------   
Robotnik_Ship_Mappings:                                        ; Offset_0x10D020  
                dc.w    Offset_0x10D03A-Robotnik_Ship_Mappings
                dc.w    Offset_0x10D042-Robotnik_Ship_Mappings
                dc.w    Offset_0x10D04A-Robotnik_Ship_Mappings
                dc.w    Offset_0x10D058-Robotnik_Ship_Mappings
                dc.w    Offset_0x10D060-Robotnik_Ship_Mappings
                dc.w    Offset_0x10D068-Robotnik_Ship_Mappings
                dc.w    Offset_0x10D0B2-Robotnik_Ship_Mappings
                dc.w    Offset_0x10D0BA-Robotnik_Ship_Mappings
                dc.w    Offset_0x10D0D4-Robotnik_Ship_Mappings
                dc.w    Offset_0x10D106-Robotnik_Ship_Mappings
                dc.w    Offset_0x10D11A-Robotnik_Ship_Mappings
                dc.w    Offset_0x10D146-Robotnik_Ship_Mappings
                dc.w    Offset_0x10D16C-Robotnik_Ship_Mappings
Offset_0x10D03A:
                dc.w    $0001
                dc.w    $F80D, $0000, $FFF0
Offset_0x10D042:
                dc.w    $0001
                dc.w    $F80D, $0008, $FFF0
Offset_0x10D04A:
                dc.w    $0002
                dc.w    $F80D, $0010, $FFEC
                dc.w    $F801, $0018, $000C
Offset_0x10D058:
                dc.w    $0001
                dc.w    $F80D, $001A, $FFF0
Offset_0x10D060:
                dc.w    $0001
                dc.w    $F805, $004E, $0000
Offset_0x10D068:
                dc.w    $000C
                dc.w    $EC0C, $0022, $FFE4
                dc.w    $EC08, $0026, $0004
                dc.w    $F40E, $0029, $FFE4
                dc.w    $F40A, $0035, $0004
                dc.w    $0C08, $003E, $FFEC
                dc.w    $0C04, $0041, $0004
                dc.w    $D405, $0043, $FFF0
                dc.w    $DC01, $0047, $FFE8
                dc.w    $D405, $0843, $0000
                dc.w    $DC01, $0847, $0010
                dc.w    $DA00, $004B, $FFFE
                dc.w    $E404, $0049, $FFEC
Offset_0x10D0B2:
                dc.w    $0001
                dc.w    $FC04, $004C, $FFF8
Offset_0x10D0BA:
                dc.w    $0004
                dc.w    $F405, $0043, $FFF0
                dc.w    $FC01, $0047, $FFE8
                dc.w    $F405, $0843, $0000
                dc.w    $FC01, $0847, $0010
Offset_0x10D0D4:
                dc.w    $0008
                dc.w    $EC0C, $0022, $FFE4
                dc.w    $EC08, $0026, $0004
                dc.w    $D405, $0043, $FFF0
                dc.w    $DC01, $0047, $FFE8
                dc.w    $D405, $0843, $0000
                dc.w    $DC01, $0847, $0010
                dc.w    $DA00, $004B, $FFFE
                dc.w    $E404, $0049, $FFEC
Offset_0x10D106:
                dc.w    $0003
                dc.w    $EC0C, $0022, $FFE4
                dc.w    $EC08, $0026, $0004
                dc.w    $E404, $0049, $FFEC
Offset_0x10D11A:
                dc.w    $0007
                dc.w    $EC0C, $0022, $FFE4
                dc.w    $EC08, $0026, $0004
                dc.w    $F40E, $0029, $FFE4
                dc.w    $F40A, $0035, $0004
                dc.w    $0C08, $003E, $FFEC
                dc.w    $0C04, $0041, $0004
                dc.w    $E404, $0049, $FFEC
Offset_0x10D146:
                dc.w    $0006
                dc.w    $EC0C, $0022, $FFE4
                dc.w    $EC08, $0026, $0004
                dc.w    $D405, $0043, $FFF0
                dc.w    $DC01, $0047, $FFE8
                dc.w    $D405, $0843, $0000
                dc.w    $DC01, $0847, $0010
Offset_0x10D16C:
                dc.w    $0006
                dc.w    $D405, $0043, $FFF0
                dc.w    $DC01, $0047, $FFE8
                dc.w    $D405, $0843, $0000
                dc.w    $DC01, $0847, $0010
                dc.w    $DA00, $004B, $FFFE
                dc.w    $E404, $0049, $FFEC 
;-------------------------------------------------------------------------------   
Ball_Shooter_Mappings:                                         ; Offset_0x10D192
                dc.w    Offset_0x10D1A0-Ball_Shooter_Mappings
                dc.w    Offset_0x10D1C0-Ball_Shooter_Mappings
                dc.w    Offset_0x10D1DA-Ball_Shooter_Mappings
                dc.w    Offset_0x10D1FA-Ball_Shooter_Mappings
                dc.w    Offset_0x10D20E-Ball_Shooter_Mappings
                dc.w    Offset_0x10D22E-Ball_Shooter_Mappings
                dc.w    Offset_0x10D248-Ball_Shooter_Mappings
Offset_0x10D1A0:
                dc.w    $0005
                dc.w    $E80E, $0000, $FFF0
                dc.w    $F004, $000C, $0010
                dc.w    $0805, $000E, $FFE0
                dc.w    $0005, $0012, $FFF0
                dc.w    $000A, $0016, $0000
Offset_0x10D1C0:
                dc.w    $0004
                dc.w    $E80E, $0000, $FFF0
                dc.w    $F004, $000C, $0010
                dc.w    $000D, $001F, $FFF0
                dc.w    $1005, $0027, $FFF8
Offset_0x10D1DA:
                dc.w    $0005
                dc.w    $E80E, $0000, $FFF0
                dc.w    $F004, $000C, $0010
                dc.w    $1005, $002B, $FFE8
                dc.w    $0005, $002F, $FFF0
                dc.w    $0007, $0033, $0000
Offset_0x10D1FA:
                dc.w    $0003
                dc.w    $E80E, $0000, $FFF0
                dc.w    $F004, $000C, $0010
                dc.w    $000E, $003B, $FFF0
Offset_0x10D20E:
                dc.w    $0005
                dc.w    $E80E, $0000, $FFF0
                dc.w    $F004, $000C, $0010
                dc.w    $0805, $000E, $FFE0
                dc.w    $0005, $0012, $FFF0
                dc.w    $000A, $0016, $0000
Offset_0x10D22E:
                dc.w    $0004
                dc.w    $E80E, $0000, $FFF0
                dc.w    $F004, $000C, $0010
                dc.w    $000D, $001F, $FFF0
                dc.w    $1005, $0027, $FFF8
Offset_0x10D248:
                dc.w    $0005
                dc.w    $E80E, $0000, $FFF0
                dc.w    $F004, $000C, $0010
                dc.w    $1005, $002B, $FFE8
                dc.w    $0005, $002F, $FFF0
                dc.w    $0007, $0033, $0000
;-------------------------------------------------------------------------------  
FBz_Robotnik_Head_Mappings:                                    ; Offset_0x10D268
                dc.w    Offset_0x10D270-FBz_Robotnik_Head_Mappings
                dc.w    Offset_0x10D278-FBz_Robotnik_Head_Mappings
                dc.w    Offset_0x10D280-FBz_Robotnik_Head_Mappings
                dc.w    Offset_0x10D288-FBz_Robotnik_Head_Mappings
Offset_0x10D270:
                dc.w    $0001
                dc.w    $F80D, $0000, $FFF0
Offset_0x10D278:
                dc.w    $0001
                dc.w    $F80D, $0008, $FFF0
Offset_0x10D280:
                dc.w    $0001
                dc.w    $F80D, $0010, $FFF0
Offset_0x10D288:
                dc.w    $0001
                dc.w    $F80D, $0018, $FFF0  
;------------------------------------------------------------------------------- 
Twin_Hammer_Mappings:                                          ; Offset_0x10D290
                dc.w    Offset_0x10D2A2-Twin_Hammer_Mappings
                dc.w    Offset_0x10D2B0-Twin_Hammer_Mappings
                dc.w    Offset_0x10D2BE-Twin_Hammer_Mappings
                dc.w    Offset_0x10D2CC-Twin_Hammer_Mappings
                dc.w    Offset_0x10D2E6-Twin_Hammer_Mappings
                dc.w    Offset_0x10D300-Twin_Hammer_Mappings
                dc.w    Offset_0x10D31A-Twin_Hammer_Mappings
                dc.w    Offset_0x10D322-Twin_Hammer_Mappings
                dc.w    Offset_0x10D32A-Twin_Hammer_Mappings
Offset_0x10D2A2:
                dc.w    $0002
                dc.w    $F40A, $0000, $FFE8
                dc.w    $F40A, $0800, $0000
Offset_0x10D2B0:
                dc.w    $0002
                dc.w    $F40E, $0009, $FFE0
                dc.w    $F40E, $1809, $0000
Offset_0x10D2BE:
                dc.w    $0002
                dc.w    $F40E, $1009, $FFE0
                dc.w    $F40E, $0809, $0000
Offset_0x10D2CC:
                dc.w    $0004
                dc.w    $EE05, $0015, $FFEE
                dc.w    $EE05, $0815, $0002
                dc.w    $0205, $1815, $0002
                dc.w    $0205, $1015, $FFEE
Offset_0x10D2E6:
                dc.w    $0004
                dc.w    $ED05, $0015, $FFED
                dc.w    $ED05, $0815, $0003
                dc.w    $0305, $1815, $0003
                dc.w    $0305, $1015, $FFED
Offset_0x10D300:
                dc.w    $0004
                dc.w    $EC05, $0015, $FFEC
                dc.w    $EC05, $0815, $0004
                dc.w    $0405, $1815, $0004
                dc.w    $0405, $1015, $FFEC
Offset_0x10D31A:
                dc.w    $0001
                dc.w    $F40A, $0019, $FFF4
Offset_0x10D322:
                dc.w    $0001
                dc.w    $F805, $0022, $FFF8
Offset_0x10D32A:
                dc.w    $0001
                dc.w    $F805, $0026, $FFF8 
;-------------------------------------------------------------------------------   
Twin_Hammer_Box_Mappings:                                      ; Offset_0x10D332
                dc.w    Offset_0x10D34A-Twin_Hammer_Box_Mappings
                dc.w    Offset_0x10D358-Twin_Hammer_Box_Mappings
                dc.w    Offset_0x10D366-Twin_Hammer_Box_Mappings
                dc.w    Offset_0x10D374-Twin_Hammer_Box_Mappings
                dc.w    Offset_0x10D382-Twin_Hammer_Box_Mappings
                dc.w    Offset_0x10D390-Twin_Hammer_Box_Mappings
                dc.w    Offset_0x10D398-Twin_Hammer_Box_Mappings
                dc.w    Offset_0x10D3A0-Twin_Hammer_Box_Mappings
                dc.w    Offset_0x10D3A8-Twin_Hammer_Box_Mappings
                dc.w    Offset_0x10D3B0-Twin_Hammer_Box_Mappings
                dc.w    Offset_0x10D3B8-Twin_Hammer_Box_Mappings
                dc.w    Offset_0x10D3C0-Twin_Hammer_Box_Mappings
Offset_0x10D34A:
                dc.w    $0002
                dc.w    $F002, $0000, $FFEC
                dc.w    $F00F, $0003, $FFF4
Offset_0x10D358:
                dc.w    $0002
                dc.w    $F40E, $0013, $FFEC
                dc.w    $F402, $001F, $000C
Offset_0x10D366:
                dc.w    $0002
                dc.w    $F80D, $0022, $FFEC
                dc.w    $F801, $002A, $000C
Offset_0x10D374:
                dc.w    $0002
                dc.w    $EC0B, $002C, $FFF4
                dc.w    $0C00, $1034, $0004
Offset_0x10D382:
                dc.w    $0002
                dc.w    $EC0A, $0038, $FFF4
                dc.w    $0400, $0041, $0004
Offset_0x10D390:
                dc.w    $0001
                dc.w    $F409, $0042, $FFF4
Offset_0x10D398:
                dc.w    $0001
                dc.w    $F801, $0048, $FFFC
Offset_0x10D3A0:
                dc.w    $0001
                dc.w    $F800, $1048, $FFFC
Offset_0x10D3A8:
                dc.w    $0001
                dc.w    $F800, $004A, $FFFC
Offset_0x10D3B0:
                dc.w    $0001
                dc.w    $FC04, $004B, $FFF8
Offset_0x10D3B8:
                dc.w    $0001
                dc.w    $FC00, $004B, $FFF8
Offset_0x10D3C0:
                dc.w    $0001
                dc.w    $FC00, $004D, $FFF8                
;-------------------------------------------------------------------------------  
Snale_Blaster_Mappings:                                        ; Offset_0x10D3C8
                dc.w    Offset_0x10D3DE-Snale_Blaster_Mappings
                dc.w    Offset_0x10D3F2-Snale_Blaster_Mappings
                dc.w    Offset_0x10D406-Snale_Blaster_Mappings
                dc.w    Offset_0x10D41A-Snale_Blaster_Mappings
                dc.w    Offset_0x10D42E-Snale_Blaster_Mappings
                dc.w    Offset_0x10D442-Snale_Blaster_Mappings
                dc.w    Offset_0x10D44A-Snale_Blaster_Mappings
                dc.w    Offset_0x10D452-Snale_Blaster_Mappings
                dc.w    Offset_0x10D45A-Snale_Blaster_Mappings
                dc.w    Offset_0x10D462-Snale_Blaster_Mappings
                dc.w    Offset_0x10D46A-Snale_Blaster_Mappings
Offset_0x10D3DE:
                dc.w    $0003
                dc.w    $F005, $0007, $FFFC
                dc.w    $F800, $0000, $FFF4
                dc.w    $0009, $0001, $FFF4
Offset_0x10D3F2:
                dc.w    $0003
                dc.w    $F005, $000B, $FFFC
                dc.w    $F800, $0000, $FFF4
                dc.w    $0009, $0001, $FFF4
Offset_0x10D406:
                dc.w    $0003
                dc.w    $F005, $000F, $FFFC
                dc.w    $F800, $0000, $FFF4
                dc.w    $0009, $0001, $FFF4
Offset_0x10D41A:
                dc.w    $0003
                dc.w    $F005, $0013, $FFFC
                dc.w    $F800, $0000, $FFF4
                dc.w    $0009, $0001, $FFF4
Offset_0x10D42E:
                dc.w    $0003
                dc.w    $F005, $0017, $FFFC
                dc.w    $F800, $0000, $FFF4
                dc.w    $0009, $0001, $FFF4
Offset_0x10D442:
                dc.w    $0001
                dc.w    $F402, $001B, $FFFC
Offset_0x10D44A:
                dc.w    $0001
                dc.w    $FC01, $001E, $FFFC
Offset_0x10D452:
                dc.w    $0001
                dc.w    $FC00, $0021, $FFFC
Offset_0x10D45A:
                dc.w    $0001
                dc.w    $FC00, $0022, $FFFC
Offset_0x10D462:
                dc.w    $0001
                dc.w    $FC00, $0020, $FFFC
Offset_0x10D46A:
                dc.w    $0001
                dc.w    $0000, $FADC, $0000 
;------------------------------------------------------------------------------- 
Orbinaut_Mappings:                                             ; Offset_0x10D472
                dc.w    Offset_0x10D476-Orbinaut_Mappings
                dc.w    Offset_0x10D47E-Orbinaut_Mappings
Offset_0x10D476:
                dc.w    $0001
                dc.w    $F805, $0000, $FFF8
Offset_0x10D47E:
                dc.w    $0001
                dc.w    $F805, $0004, $FFF8 
;-------------------------------------------------------------------------------  
Ribot_Mappings:                                                ; Offset_0x10D486
                dc.w    Offset_0x10D496-Ribot_Mappings
                dc.w    Offset_0x10D4BC-Ribot_Mappings
                dc.w    Offset_0x10D4E2-Ribot_Mappings
                dc.w    Offset_0x10D508-Ribot_Mappings
                dc.w    Offset_0x10D52E-Ribot_Mappings
                dc.w    Offset_0x10D554-Ribot_Mappings
                dc.w    Offset_0x10D57A-Ribot_Mappings
                dc.w    Offset_0x10D582-Ribot_Mappings
Offset_0x10D496:
                dc.w    $0006
                dc.w    $F401, $0000, $FFF8
                dc.w    $0404, $0002, $FFF0
                dc.w    $F401, $0800, $0000
                dc.w    $0404, $0802, $0000
                dc.w    $FC00, $000F, $0008
                dc.w    $FC00, $000F, $FFF0
Offset_0x10D4BC:
                dc.w    $0006
                dc.w    $F401, $0004, $FFF8
                dc.w    $0404, $0006, $FFF0
                dc.w    $F401, $0804, $0000
                dc.w    $0404, $0806, $0000
                dc.w    $FC00, $000F, $0008
                dc.w    $FC00, $000F, $FFF0
Offset_0x10D4E2:
                dc.w    $0006
                dc.w    $F401, $0008, $FFF8
                dc.w    $0404, $000A, $FFF0
                dc.w    $F401, $0808, $0000
                dc.w    $0404, $080A, $0000
                dc.w    $FC00, $000F, $0008
                dc.w    $FC00, $000F, $FFF0
Offset_0x10D508:
                dc.w    $0006
                dc.w    $F401, $0000, $FFF8
                dc.w    $0404, $0002, $FFF0
                dc.w    $F401, $0800, $0000
                dc.w    $0404, $0802, $0000
                dc.w    $EC00, $000F, $FFFC
                dc.w    $F400, $0010, $FFFC
Offset_0x10D52E:
                dc.w    $0006
                dc.w    $F401, $0004, $FFF8
                dc.w    $0404, $0006, $FFF0
                dc.w    $F401, $0804, $0000
                dc.w    $0404, $0806, $0000
                dc.w    $EC00, $000F, $FFFC
                dc.w    $F400, $0010, $FFFC
Offset_0x10D554:
                dc.w    $0006
                dc.w    $F401, $0008, $FFF8
                dc.w    $0404, $000A, $FFF0
                dc.w    $F401, $0808, $0000
                dc.w    $0404, $080A, $0000
                dc.w    $EC00, $000F, $FFFC
                dc.w    $F400, $0010, $FFFC
Offset_0x10D57A:
                dc.w    $0001
                dc.w    $FC00, $000C, $FFFC
Offset_0x10D582:
                dc.w    $0002
                dc.w    $F801, $000D, $FFF8
                dc.w    $F801, $080D, $0000
;-------------------------------------------------------------------------------  
Corkey_Mappings:                                               ; Offset_0x10D590
                dc.w    Offset_0x10D5A0-Corkey_Mappings
                dc.w    Offset_0x10D5AE-Corkey_Mappings
                dc.w    Offset_0x10D5B6-Corkey_Mappings
                dc.w    Offset_0x10D5BE-Corkey_Mappings
                dc.w    Offset_0x10D5C6-Corkey_Mappings
                dc.w    Offset_0x10D5E6-Corkey_Mappings
                dc.w    Offset_0x10D606-Corkey_Mappings
                dc.w    Offset_0x10D626-Corkey_Mappings
Offset_0x10D5A0:
                dc.w    $0002
                dc.w    $F805, $0000, $FFF0
                dc.w    $F805, $0800, $0000
Offset_0x10D5AE:
                dc.w    $0001
                dc.w    $FC04, $0004, $FFF8
Offset_0x10D5B6:
                dc.w    $0001
                dc.w    $FC04, $0006, $FFF8
Offset_0x10D5BE:
                dc.w    $0001
                dc.w    $FC04, $0008, $FFF8
Offset_0x10D5C6:
                dc.w    $0005
                dc.w    $B003, $000A, $FFFC
                dc.w    $D003, $000A, $FFFC
                dc.w    $F003, $000A, $FFFC
                dc.w    $1003, $000A, $FFFC
                dc.w    $3003, $000A, $FFFC
Offset_0x10D5E6:
                dc.w    $0005
                dc.w    $B003, $000E, $FFFC
                dc.w    $D003, $000E, $FFFC
                dc.w    $F003, $000E, $FFFC
                dc.w    $1003, $000E, $FFFC
                dc.w    $3003, $000E, $FFFC
Offset_0x10D606:
                dc.w    $0005
                dc.w    $B003, $0012, $FFFC
                dc.w    $D003, $0012, $FFFC
                dc.w    $F003, $0012, $FFFC
                dc.w    $1003, $0012, $FFFC
                dc.w    $3003, $0012, $FFFC
Offset_0x10D626:
                dc.w    $0001
                dc.w    $0000, $FAA8, $0000
;-------------------------------------------------------------------------------  
Flybot_767_Mappings:                                           ; Offset_0x10D62E
                dc.w    Offset_0x10D658-Flybot_767_Mappings
                dc.w    Offset_0x10D66C-Flybot_767_Mappings
                dc.w    Offset_0x10D680-Flybot_767_Mappings
                dc.w    Offset_0x10D694-Flybot_767_Mappings
                dc.w    Offset_0x10D6A8-Flybot_767_Mappings
                dc.w    Offset_0x10D6BC-Flybot_767_Mappings
                dc.w    Offset_0x10D6D0-Flybot_767_Mappings
                dc.w    Offset_0x10D6E4-Flybot_767_Mappings
                dc.w    Offset_0x10D6F8-Flybot_767_Mappings
                dc.w    Offset_0x10D70C-Flybot_767_Mappings
                dc.w    Offset_0x10D720-Flybot_767_Mappings
                dc.w    Offset_0x10D72E-Flybot_767_Mappings
                dc.w    Offset_0x10D73C-Flybot_767_Mappings
                dc.w    Offset_0x10D750-Flybot_767_Mappings
                dc.w    Offset_0x10D75E-Flybot_767_Mappings
                dc.w    Offset_0x10D766-Flybot_767_Mappings
                dc.w    Offset_0x10D774-Flybot_767_Mappings
                dc.w    Offset_0x10D782-Flybot_767_Mappings
                dc.w    Offset_0x10D790-Flybot_767_Mappings
                dc.w    Offset_0x10D79E-Flybot_767_Mappings
                dc.w    Offset_0x10D7AC-Flybot_767_Mappings
Offset_0x10D658:
                dc.w    $0003
                dc.w    $0105, $0000, $0007
                dc.w    $F80D, $0004, $FFF0
                dc.w    $0105, $0800, $FFF8
Offset_0x10D66C:
                dc.w    $0003
                dc.w    $0105, $0000, $0007
                dc.w    $F80D, $0004, $FFF0
                dc.w    $0105, $0800, $FFF8
Offset_0x10D680:
                dc.w    $0003
                dc.w    $F905, $0000, $0007
                dc.w    $F80D, $0004, $FFF0
                dc.w    $F905, $0800, $FFF8
Offset_0x10D694:
                dc.w    $0003
                dc.w    $F905, $0000, $0007
                dc.w    $F80D, $0004, $FFF0
                dc.w    $F905, $0800, $FFF8
Offset_0x10D6A8:
                dc.w    $0003
                dc.w    $F305, $0000, $0007
                dc.w    $F80D, $0004, $FFF0
                dc.w    $F305, $0800, $FFF8
Offset_0x10D6BC:
                dc.w    $0003
                dc.w    $F305, $0000, $0007
                dc.w    $F80D, $0004, $FFF0
                dc.w    $F305, $0800, $FFF8
Offset_0x10D6D0:
                dc.w    $0003
                dc.w    $0108, $0000, $0007
                dc.w    $F80D, $0003, $FFF0
                dc.w    $0108, $0800, $FFF8
Offset_0x10D6E4:
                dc.w    $0003
                dc.w    $0108, $0000, $0007
                dc.w    $F80D, $0003, $FFF0
                dc.w    $0108, $0800, $FFF8
Offset_0x10D6F8:
                dc.w    $0003
                dc.w    $0105, $0000, $0007
                dc.w    $F80D, $0004, $FFF0
                dc.w    $0105, $0800, $FFF8
Offset_0x10D70C:
                dc.w    $0003
                dc.w    $0105, $0000, $0007
                dc.w    $F80D, $0004, $FFF0
                dc.w    $0105, $0800, $FFF8
Offset_0x10D720:
                dc.w    $0002
                dc.w    $F80D, $0000, $FFF0
                dc.w    $0000, $0008, $0010
Offset_0x10D72E:
                dc.w    $0002
                dc.w    $F40D, $0000, $FFF4
                dc.w    $0400, $0008, $000C
Offset_0x10D73C:
                dc.w    $0003
                dc.w    $F40D, $0000, $FFF0
                dc.w    $F400, $0008, $0010
                dc.w    $0400, $0009, $0008
Offset_0x10D750:
                dc.w    $0002
                dc.w    $F80D, $0000, $FFF0
                dc.w    $F801, $0008, $0010
Offset_0x10D75E:
                dc.w    $0001
                dc.w    $F80D, $0000, $FFF0
Offset_0x10D766:
                dc.w    $0002
                dc.w    $F404, $0000, $0004
                dc.w    $FC0D, $0002, $FFF4
Offset_0x10D774:
                dc.w    $0002
                dc.w    $F409, $0000, $FFFF
                dc.w    $0408, $0006, $FFF7
Offset_0x10D782:
                dc.w    $0002
                dc.w    $F404, $0000, $0000
                dc.w    $FC0A, $0002, $FFF8
Offset_0x10D790:
                dc.w    $0002
                dc.w    $F40A, $0000, $FFF8
                dc.w    $0C00, $0009, $FFF8
Offset_0x10D79E:
                dc.w    $0002
                dc.w    $F40A, $0000, $FFF8
                dc.w    $0C00, $0009, $FFF8
Offset_0x10D7AC:
                dc.w    $0003
                dc.w    $F800, $0000, $FFF0
                dc.w    $F80A, $0001, $FFF8
                dc.w    $1000, $000A, $0008
;-------------------------------------------------------------------------------  
Flybot_767_Dyn_Script:                                         ; Offset_0x10D7C0
                dc.w    Offset_0x10D7EA-Flybot_767_Dyn_Script
                dc.w    Offset_0x10D7F0-Flybot_767_Dyn_Script
                dc.w    Offset_0x10D7F6-Flybot_767_Dyn_Script
                dc.w    Offset_0x10D7FC-Flybot_767_Dyn_Script
                dc.w    Offset_0x10D802-Flybot_767_Dyn_Script
                dc.w    Offset_0x10D808-Flybot_767_Dyn_Script
                dc.w    Offset_0x10D80E-Flybot_767_Dyn_Script
                dc.w    Offset_0x10D814-Flybot_767_Dyn_Script
                dc.w    Offset_0x10D81A-Flybot_767_Dyn_Script
                dc.w    Offset_0x10D820-Flybot_767_Dyn_Script
                dc.w    Offset_0x10D826-Flybot_767_Dyn_Script
                dc.w    Offset_0x10D82C-Flybot_767_Dyn_Script
                dc.w    Offset_0x10D832-Flybot_767_Dyn_Script
                dc.w    Offset_0x10D83A-Flybot_767_Dyn_Script
                dc.w    Offset_0x10D840-Flybot_767_Dyn_Script
                dc.w    Offset_0x10D844-Flybot_767_Dyn_Script
                dc.w    Offset_0x10D84A-Flybot_767_Dyn_Script
                dc.w    Offset_0x10D850-Flybot_767_Dyn_Script
                dc.w    Offset_0x10D856-Flybot_767_Dyn_Script
                dc.w    Offset_0x10D85C-Flybot_767_Dyn_Script
                dc.w    Offset_0x10D862-Flybot_767_Dyn_Script
Offset_0x10D7EA:
                dc.w    $0001
                dc.w    $0083, $0007
Offset_0x10D7F0:
                dc.w    $0001
                dc.w    $00C3, $0007
Offset_0x10D7F6:
                dc.w    $0001
                dc.w    $0103, $0007
Offset_0x10D7FC:
                dc.w    $0001
                dc.w    $0143, $0007
Offset_0x10D802:
                dc.w    $0001
                dc.w    $0183, $0007
Offset_0x10D808:
                dc.w    $0001
                dc.w    $01C3, $0007
Offset_0x10D80E:
                dc.w    $0001
                dc.w    $0202, $0007
Offset_0x10D814:
                dc.w    $0001
                dc.w    $0232, $0007
Offset_0x10D81A:
                dc.w    $0001
                dc.w    $0263, $0007
Offset_0x10D820:
                dc.w    $0001
                dc.w    $02A3, $0007
Offset_0x10D826:
                dc.w    $0001
                dc.w    $02E7, $0360
Offset_0x10D82C:
                dc.w    $0001
                dc.w    $0377, $03F0
Offset_0x10D832:
                dc.w    $0002
                dc.w    $0407, $0480, $0490
Offset_0x10D83A:
                dc.w    $0001
                dc.w    $04A7, $0521
Offset_0x10D840:
                dc.w    $0000
                dc.w    $0547
Offset_0x10D844:
                dc.w    $0001
                dc.w    $05C1, $05E7
Offset_0x10D84A:
                dc.w    $0001
                dc.w    $0665, $06C2
Offset_0x10D850:
                dc.w    $0001
                dc.w    $06F1, $0718
Offset_0x10D856:
                dc.w    $0001
                dc.w    $07A8, $0830
Offset_0x10D85C:
                dc.w    $0001
                dc.w    $0848, $08D0
Offset_0x10D862:
                dc.w    $0002
                dc.w    $08E0, $08F8, $0980
;------------------------------------------------------------------------------- 
Knuckles_LBz_Pillar_Mappings:                                  ; Offset_0x10D86A
                dc.w    Offset_0x10D888-Knuckles_LBz_Pillar_Mappings
                dc.w    Offset_0x10D8AE-Knuckles_LBz_Pillar_Mappings
                dc.w    Offset_0x10D8B6-Knuckles_LBz_Pillar_Mappings
                dc.w    Offset_0x10D8CA-Knuckles_LBz_Pillar_Mappings
                dc.w    Offset_0x10D8DE-Knuckles_LBz_Pillar_Mappings
                dc.w    Offset_0x10D8F2-Knuckles_LBz_Pillar_Mappings
                dc.w    Offset_0x10D918-Knuckles_LBz_Pillar_Mappings
                dc.w    Offset_0x10D93E-Knuckles_LBz_Pillar_Mappings
                dc.w    Offset_0x10D946-Knuckles_LBz_Pillar_Mappings
                dc.w    Offset_0x10D94E-Knuckles_LBz_Pillar_Mappings
                dc.w    Offset_0x10D956-Knuckles_LBz_Pillar_Mappings
                dc.w    Offset_0x10D95E-Knuckles_LBz_Pillar_Mappings
                dc.w    Offset_0x10D966-Knuckles_LBz_Pillar_Mappings
                dc.w    Offset_0x10D968-Knuckles_LBz_Pillar_Mappings
                dc.w    Offset_0x10D970-Knuckles_LBz_Pillar_Mappings
Offset_0x10D888:
                dc.w    $0006
                dc.w    $F008, $0000, $FFE8
                dc.w    $F80E, $0003, $FFE0
                dc.w    $F008, $0800, $0000
                dc.w    $F80E, $0803, $0000
                dc.w    $E800, $000F, $FFF0
                dc.w    $E800, $000F, $0008
Offset_0x10D8AE:
                dc.w    $0001
                dc.w    $FC00, $000F, $FFFC
Offset_0x10D8B6:
                dc.w    $0003
                dc.w    $E805, $0010, $FFF8
                dc.w    $F805, $0010, $FFF8
                dc.w    $0805, $0010, $FFF8
Offset_0x10D8CA:
                dc.w    $0003
                dc.w    $E805, $0810, $FFF8
                dc.w    $F805, $0810, $FFF8
                dc.w    $0805, $0810, $FFF8
Offset_0x10D8DE:
                dc.w    $0003
                dc.w    $E805, $0014, $FFF8
                dc.w    $F805, $0014, $FFF8
                dc.w    $0805, $0014, $FFF8
Offset_0x10D8F2:
                dc.w    $0006
                dc.w    $F204, $001C, $FFF8
                dc.w    $0804, $001E, $FFF8
                dc.w    $F005, $0018, $FFF0
                dc.w    $F005, $0818, $0000
                dc.w    $0005, $1018, $FFF0
                dc.w    $0005, $1818, $0000
Offset_0x10D918:
                dc.w    $0006
                dc.w    $F204, $001C, $FFF9
                dc.w    $0804, $001E, $FFF9
                dc.w    $F005, $0018, $FFF0
                dc.w    $F005, $0818, $0000
                dc.w    $0005, $1018, $FFF0
                dc.w    $0005, $1818, $0000
Offset_0x10D93E:
                dc.w    $0001
                dc.w    $F805, $0020, $FFF8
Offset_0x10D946:
                dc.w    $0001
                dc.w    $F805, $0024, $FFF8
Offset_0x10D94E:
                dc.w    $0001
                dc.w    $F805, $0028, $FFF8
Offset_0x10D956:
                dc.w    $0001
                dc.w    $F805, $002C, $FFF8
Offset_0x10D95E:
                dc.w    $0001
                dc.w    $FC00, $0030, $FFFC
Offset_0x10D966:
                dc.w    $0000
Offset_0x10D968:
                dc.w    $0001
                dc.w    $F805, $0014, $FFF8
Offset_0x10D970:
                dc.w    $0002
                dc.w    $F801, $0031, $FFF8
                dc.w    $F801, $0831, $0000                 
;-------------------------------------------------------------------------------  
Graviton_Mobile_Mappings:                                      ; Offset_0x10D97E
                dc.w    Offset_0x10D998-Graviton_Mobile_Mappings
                dc.w    Offset_0x10D9BE-Graviton_Mobile_Mappings
                dc.w    Offset_0x10D9CC-Graviton_Mobile_Mappings
                dc.w    Offset_0x10D9DA-Graviton_Mobile_Mappings
                dc.w    Offset_0x10D9E8-Graviton_Mobile_Mappings
                dc.w    Offset_0x10D9F6-Graviton_Mobile_Mappings
                dc.w    Offset_0x10DA10-Graviton_Mobile_Mappings
                dc.w    Offset_0x10DA36-Graviton_Mobile_Mappings
                dc.w    Offset_0x10DA5C-Graviton_Mobile_Mappings
                dc.w    Offset_0x10DA6A-Graviton_Mobile_Mappings
                dc.w    Offset_0x10DA72-Graviton_Mobile_Mappings
                dc.w    Offset_0x10DA7A-Graviton_Mobile_Mappings
                dc.w    Offset_0x10DA8E-Graviton_Mobile_Mappings
Offset_0x10D998:
                dc.w    $0006
                dc.w    $EC0F, $0000, $FFE0
                dc.w    $F402, $0010, $FFD8
                dc.w    $0C08, $0013, $FFE8
                dc.w    $EC0F, $0800, $0000
                dc.w    $F402, $0810, $0020
                dc.w    $0C08, $0813, $0000
Offset_0x10D9BE:
                dc.w    $0002
                dc.w    $F003, $0016, $FFF8
                dc.w    $F003, $0816, $0000
Offset_0x10D9CC:
                dc.w    $0002
                dc.w    $F003, $001A, $FFF8
                dc.w    $F003, $081A, $0000
Offset_0x10D9DA:
                dc.w    $0002
                dc.w    $F003, $001E, $FFF8
                dc.w    $F003, $081E, $0000
Offset_0x10D9E8:
                dc.w    $0002
                dc.w    $F007, $0022, $FFF0
                dc.w    $F007, $0822, $0000
Offset_0x10D9F6:
                dc.w    $0004
                dc.w    $F005, $002A, $FFF0
                dc.w    $F005, $082A, $0000
                dc.w    $0005, $102A, $FFF0
                dc.w    $0005, $182A, $0000
Offset_0x10DA10:
                dc.w    $0006
                dc.w    $C00E, $002E, $FFF0
                dc.w    $D808, $003A, $FFF8
                dc.w    $E007, $003D, $FFF8
                dc.w    $000E, $002E, $FFF0
                dc.w    $1808, $003A, $FFF8
                dc.w    $2007, $003D, $FFF8
Offset_0x10DA36:
                dc.w    $0006
                dc.w    $C007, $003D, $FFF8
                dc.w    $E00E, $002E, $FFF0
                dc.w    $F808, $003A, $FFF8
                dc.w    $0007, $003D, $FFF8
                dc.w    $200E, $002E, $FFF0
                dc.w    $3808, $003A, $FFF8
Offset_0x10DA5C:
                dc.w    $0002
                dc.w    $F003, $0045, $FFF8
                dc.w    $F003, $0845, $0000
Offset_0x10DA6A:
                dc.w    $0001
                dc.w    $0000, $FBD0, $0000
Offset_0x10DA72:
                dc.w    $0001
                dc.w    $F007, $0022, $FFF0
Offset_0x10DA7A:
                dc.w    $0003
                dc.w    $EC0F, $0000, $FFF4
                dc.w    $F402, $0010, $FFEC
                dc.w    $0C08, $0013, $FFFC
Offset_0x10DA8E:
                dc.w    $0003
                dc.w    $EC0F, $0800, $FFEC
                dc.w    $F402, $0810, $000C
                dc.w    $0C08, $0813, $FFEC
;-------------------------------------------------------------------------------  
Graviton_Mobile_Magnetic_Angle_X_Lookup_Data:                  ; Offset_0x10DAA2
                dc.b    $00, $01, $02, $03, $04, $05, $06, $08
                dc.b    $09, $0A, $0B, $0C, $0D, $0E, $0F, $10
                dc.b    $11, $12, $13, $14, $15, $16, $17, $18
                dc.b    $18, $19, $1A, $1B, $1C, $1D, $1E, $1E
                dc.b    $1F, $20, $21, $21, $22, $23, $23, $24
                dc.b    $25, $25, $26, $26, $27, $27, $28, $28
                dc.b    $29, $29, $29, $2A, $2A, $2A, $2B, $2B
                dc.b    $2B, $2B, $2C, $2C, $2C, $2C, $2C, $2C 
;-------------------------------------------------------------------------------  
Gapsule_Mappings:                                              ; Offset_0x10DAE2
                dc.w    Offset_0x10DB06-Gapsule_Mappings
                dc.w    Offset_0x10DB20-Gapsule_Mappings
                dc.w    Offset_0x10DB28-Gapsule_Mappings
                dc.w    Offset_0x10DB30-Gapsule_Mappings
                dc.w    Offset_0x10DB3E-Gapsule_Mappings
                dc.w    Offset_0x10DB4C-Gapsule_Mappings
                dc.w    Offset_0x10DB5A-Gapsule_Mappings
                dc.w    Offset_0x10DB68-Gapsule_Mappings
                dc.w    Offset_0x10DB82-Gapsule_Mappings
                dc.w    Offset_0x10DBA8-Gapsule_Mappings
                dc.w    Offset_0x10DBCE-Gapsule_Mappings
                dc.w    Offset_0x10DBF4-Gapsule_Mappings
                dc.w    Offset_0x10DC1A-Gapsule_Mappings
                dc.w    Offset_0x10DC40-Gapsule_Mappings
                dc.w    Offset_0x10DC66-Gapsule_Mappings
                dc.w    Offset_0x10DC8C-Gapsule_Mappings
                dc.w    Offset_0x10DCB2-Gapsule_Mappings
                dc.w    Offset_0x10DCD8-Gapsule_Mappings
Offset_0x10DB06:
                dc.w    $0004
                dc.w    $E00F, $0000, $FFE0
                dc.w    $000F, $0010, $FFE0
                dc.w    $E00F, $0800, $0000
                dc.w    $000F, $0810, $0000
Offset_0x10DB20:
                dc.w    $0001
                dc.w    $F805, $0020, $FFF8
Offset_0x10DB28:
                dc.w    $0001
                dc.w    $F805, $0820, $FFF8
Offset_0x10DB30:
                dc.w    $0002
                dc.w    $F801, $0024, $FFF8
                dc.w    $F801, $0824, $0000
Offset_0x10DB3E:
                dc.w    $0002
                dc.w    $F805, $0026, $FFF0
                dc.w    $F805, $0826, $0000
Offset_0x10DB4C:
                dc.w    $0002
                dc.w    $F80C, $002A, $FFF8
                dc.w    $0009, $002E, $FFF8
Offset_0x10DB5A:
                dc.w    $0002
                dc.w    $F801, $0034, $FFF8
                dc.w    $F801, $0834, $0000
Offset_0x10DB68:
                dc.w    $0004
                dc.w    $E80A, $0036, $FFE8
                dc.w    $000A, $003F, $FFE8
                dc.w    $E80A, $0836, $0000
                dc.w    $000A, $083F, $0000
Offset_0x10DB82:
                dc.w    $0006
                dc.w    $F805, $0048, $FFF0
                dc.w    $F805, $0848, $0000
                dc.w    $FC00, $0051, $FFF4
                dc.w    $FC00, $0051, $0004
                dc.w    $FC00, $0050, $FFF4
                dc.w    $FC00, $0050, $0004
Offset_0x10DBA8:
                dc.w    $0006
                dc.w    $F805, $0048, $FFF0
                dc.w    $F805, $0848, $0000
                dc.w    $F900, $0051, $FFF4
                dc.w    $F900, $0051, $0004
                dc.w    $FA00, $0050, $FFF4
                dc.w    $FA00, $0050, $0004
Offset_0x10DBCE:
                dc.w    $0006
                dc.w    $F805, $0048, $FFF0
                dc.w    $F805, $0848, $0000
                dc.w    $F900, $0051, $FFF6
                dc.w    $F900, $0051, $0007
                dc.w    $FA00, $0050, $FFF5
                dc.w    $FA00, $0050, $0006
Offset_0x10DBF4:
                dc.w    $0006
                dc.w    $F805, $0048, $FFF0
                dc.w    $F805, $0848, $0000
                dc.w    $FC00, $0051, $FFF7
                dc.w    $FC00, $0051, $0008
                dc.w    $FC00, $0050, $FFF6
                dc.w    $FC00, $0050, $0007
Offset_0x10DC1A:
                dc.w    $0006
                dc.w    $F805, $0048, $FFF0
                dc.w    $F805, $0848, $0000
                dc.w    $FF00, $0051, $FFF7
                dc.w    $FF00, $0051, $0007
                dc.w    $FE00, $0050, $FFF6
                dc.w    $FE00, $0050, $0006
Offset_0x10DC40:
                dc.w    $0006
                dc.w    $F805, $0048, $FFF0
                dc.w    $F805, $0848, $0000
                dc.w    $FF00, $0051, $FFF4
                dc.w    $FF00, $0051, $0004
                dc.w    $FE00, $0050, $FFF4
                dc.w    $FE00, $0050, $0004
Offset_0x10DC66:
                dc.w    $0006
                dc.w    $F805, $0048, $FFF0
                dc.w    $F805, $0848, $0000
                dc.w    $FF00, $0051, $FFF1
                dc.w    $FF00, $0051, $0002
                dc.w    $FE00, $0050, $FFF2
                dc.w    $FE00, $0050, $0003
Offset_0x10DC8C:
                dc.w    $0006
                dc.w    $F805, $0048, $FFF0
                dc.w    $F805, $0848, $0000
                dc.w    $FC00, $0051, $FFF0
                dc.w    $FC00, $0051, $0001
                dc.w    $FC00, $0050, $FFF1
                dc.w    $FC00, $0050, $0002
Offset_0x10DCB2:
                dc.w    $0006
                dc.w    $F805, $0048, $FFF0
                dc.w    $F805, $0848, $0000
                dc.w    $F900, $0051, $FFF1
                dc.w    $F900, $0051, $0002
                dc.w    $FA00, $0050, $FFF2
                dc.w    $FA00, $0050, $0003
Offset_0x10DCD8:
                dc.w    $0002
                dc.w    $F805, $004C, $FFF0
                dc.w    $F805, $084C, $0000
;-------------------------------------------------------------------------------  
Unreferenced_Mappings:                                         ; Offset_0x10DCE6
                dc.w    Offset_0x10DCF6-Unreferenced_Mappings
                dc.w    Offset_0x10DD1C-Unreferenced_Mappings
                dc.w    Offset_0x10DD42-Unreferenced_Mappings
                dc.w    Offset_0x10DD4A-Unreferenced_Mappings
                dc.w    Offset_0x10DD52-Unreferenced_Mappings
                dc.w    Offset_0x10DD5A-Unreferenced_Mappings
                dc.w    Offset_0x10DD62-Unreferenced_Mappings
                dc.w    Offset_0x10DD62-Unreferenced_Mappings
Offset_0x10DCF6:
                dc.w    $0006
                dc.w    $E008, $0000, $FFE8
                dc.w    $E008, $0800, $0000
                dc.w    $E80F, $0003, $FFE0
                dc.w    $E80F, $0803, $0000
                dc.w    $080E, $0013, $FFE0
                dc.w    $080E, $0813, $0000
Offset_0x10DD1C:
                dc.w    $0006
                dc.w    $E00D, $001F, $FFE0
                dc.w    $E00D, $081F, $0000
                dc.w    $F00E, $0027, $FFE0
                dc.w    $F00E, $0827, $0000
                dc.w    $080E, $0013, $FFE0
                dc.w    $080E, $0813, $0000
Offset_0x10DD42:
                dc.w    $0001
                dc.w    $F80D, $0033, $FFF0
Offset_0x10DD4A:
                dc.w    $0001
                dc.w    $F805, $003F, $FFF8
Offset_0x10DD52:
                dc.w    $0001
                dc.w    $F805, $083F, $FFF8
Offset_0x10DD5A:
                dc.w    $0001
                dc.w    $F805, $003B, $FFF8
Offset_0x10DD62:
                dc.w    $0001
                dc.w    $F801, $0004, $FFFC
;------------------------------------------------------------------------------- 
Blastoid_Mappings:                                             ; Offset_0x10DD6A
                dc.w    Offset_0x10DD72-Blastoid_Mappings
                dc.w    Offset_0x10DD86-Blastoid_Mappings
                dc.w    Offset_0x10DD9A-Blastoid_Mappings
                dc.w    Offset_0x10DDA2-Blastoid_Mappings
Offset_0x10DD72:
                dc.w    $0003
                dc.w    $F405, $000A, $FFE8
                dc.w    $F409, $0000, $FFF8
                dc.w    $040C, $0006, $FFF0
Offset_0x10DD86:
                dc.w    $0003
                dc.w    $F405, $000E, $FFE8
                dc.w    $F409, $0000, $FFF8
                dc.w    $040C, $0006, $FFF0
Offset_0x10DD9A:
                dc.w    $0001
                dc.w    $FC00, $0012, $FFFC
Offset_0x10DDA2:
                dc.w    $0001
                dc.w    $FC00, $0013, $FFFC
;-------------------------------------------------------------------------------  
Toxomister_Mappings:                                           ; Offset_0x10DDAA
                dc.w    Offset_0x10DDBA-Toxomister_Mappings
                dc.w    Offset_0x10DDC2-Toxomister_Mappings
                dc.w    Offset_0x10DDDC-Toxomister_Mappings
                dc.w    Offset_0x10DDE4-Toxomister_Mappings
                dc.w    Offset_0x10DDEC-Toxomister_Mappings
                dc.w    Offset_0x10DDF4-Toxomister_Mappings
                dc.w    Offset_0x10DDFC-Toxomister_Mappings
                dc.w    Offset_0x10DE04-Toxomister_Mappings
Offset_0x10DDBA:
                dc.w    $0001
                dc.w    $F805, $0000, $FFF8
Offset_0x10DDC2:
                dc.w    $0004
                dc.w    $F001, $0004, $FFF8
                dc.w    $F001, $0804, $0000
                dc.w    $0001, $0004, $FFF8
                dc.w    $0001, $0804, $0000
Offset_0x10DDDC:
                dc.w    $0001
                dc.w    $FC00, $0006, $FFFC
Offset_0x10DDE4:
                dc.w    $0001
                dc.w    $FC00, $0007, $FFFC
Offset_0x10DDEC:
                dc.w    $0001
                dc.w    $F805, $0008, $FFF8
Offset_0x10DDF4:
                dc.w    $0001
                dc.w    $F805, $000C, $FFF8
Offset_0x10DDFC:
                dc.w    $0001
                dc.w    $F805, $0010, $FFF8
Offset_0x10DE04:
                dc.w    $0001
                dc.w    $F805, $0014, $FFF8
;------------------------------------------------------------------------------- 
Pointdexter_Mappings:                                          ; Offset_0x10DE0C
                dc.w    Offset_0x10DE12-Pointdexter_Mappings
                dc.w    Offset_0x10DE26-Pointdexter_Mappings
                dc.w    Offset_0x10DE3A-Pointdexter_Mappings
Offset_0x10DE12:
                dc.w    $0003
                dc.w    $F801, $0000, $FFEC
                dc.w    $F809, $0002, $FFF4
                dc.w    $F801, $0008, $000C
Offset_0x10DE26:
                dc.w    $0003
                dc.w    $F401, $0000, $FFEC
                dc.w    $F40A, $000A, $FFF4
                dc.w    $F401, $0008, $000C
Offset_0x10DE3A:
                dc.w    $0003
                dc.w    $F801, $0000, $FFEC
                dc.w    $F00B, $0013, $FFF4
                dc.w    $F801, $0008, $000C
;-------------------------------------------------------------------------------  
Buggernaut_Mappings:                                           ; Offset_0x10DE4E
                dc.w    Offset_0x10DE5A-Buggernaut_Mappings
                dc.w    Offset_0x10DE62-Buggernaut_Mappings
                dc.w    Offset_0x10DE76-Buggernaut_Mappings
                dc.w    Offset_0x10DE8A-Buggernaut_Mappings
                dc.w    Offset_0x10DE92-Buggernaut_Mappings
                dc.w    Offset_0x10DEA6-Buggernaut_Mappings
Offset_0x10DE5A:
                dc.w    $0001
                dc.w    $F805, $0000, $FFF8
Offset_0x10DE62:
                dc.w    $0003
                dc.w    $F805, $0000, $FFF8
                dc.w    $F404, $0004, $0000
                dc.w    $F404, $0804, $FFF7
Offset_0x10DE76:
                dc.w    $0003
                dc.w    $F805, $0000, $FFF8
                dc.w    $FC04, $1004, $0000
                dc.w    $FC04, $1804, $FFF7
Offset_0x10DE8A:
                dc.w    $0001
                dc.w    $FC04, $0006, $FFF8
Offset_0x10DE92:
                dc.w    $0003
                dc.w    $FC04, $0006, $FFF8
                dc.w    $F500, $0008, $0000
                dc.w    $F500, $0008, $FFF4
Offset_0x10DEA6:
                dc.w    $0003
                dc.w    $FC04, $0006, $FFF8
                dc.w    $FD00, $0008, $0000
                dc.w    $FD00, $0008, $FFF4  
;-------------------------------------------------------------------------------  
Mega_Chopper_Mappings:                                         ; Offset_0x10DEBA
                dc.w    Offset_0x10DEC2-Mega_Chopper_Mappings
                dc.w    Offset_0x10DED0-Mega_Chopper_Mappings
                dc.w    Offset_0x10DEDE-Mega_Chopper_Mappings
                dc.w    Offset_0x10DEEC-Mega_Chopper_Mappings
Offset_0x10DEC2:
                dc.w    $0002
                dc.w    $F805, $0000, $FFF4
                dc.w    $F801, $0008, $0004
Offset_0x10DED0:
                dc.w    $0002
                dc.w    $F805, $0000, $FFF4
                dc.w    $F801, $000A, $0004
Offset_0x10DEDE:
                dc.w    $0002
                dc.w    $F805, $0004, $FFF4
                dc.w    $F801, $0008, $0004
Offset_0x10DEEC:
                dc.w    $0002
                dc.w    $F805, $0004, $FFF4
                dc.w    $F801, $000A, $0004
;-------------------------------------------------------------------------------  
Dragonfly_Mappings:                                            ; Offset_0x10DEFA
                dc.w    Offset_0x10DF0E-Dragonfly_Mappings
                dc.w    Offset_0x10DF28-Dragonfly_Mappings
                dc.w    Offset_0x10DF42-Dragonfly_Mappings
                dc.w    Offset_0x10DF5C-Dragonfly_Mappings
                dc.w    Offset_0x10DF76-Dragonfly_Mappings
                dc.w    Offset_0x10DF90-Dragonfly_Mappings
                dc.w    Offset_0x10DF98-Dragonfly_Mappings
                dc.w    Offset_0x10DFA0-Dragonfly_Mappings
                dc.w    Offset_0x10DFAE-Dragonfly_Mappings
                dc.w    Offset_0x10DFBC-Dragonfly_Mappings
Offset_0x10DF0E:
                dc.w    $0004
                dc.w    $FA04, $0004, $FFF8
                dc.w    $FC00, $0006, $FFF0
                dc.w    $FC00, $0006, $0008
                dc.w    $F805, $0000, $FFF8
Offset_0x10DF28:
                dc.w    $0004
                dc.w    $FB04, $0004, $FFF8
                dc.w    $FC00, $0006, $FFF0
                dc.w    $FC00, $0006, $0008
                dc.w    $F805, $0000, $FFF8
Offset_0x10DF42:
                dc.w    $0004
                dc.w    $FC04, $0004, $FFF8
                dc.w    $FC00, $0006, $FFF0
                dc.w    $FC00, $0006, $0008
                dc.w    $F805, $0000, $FFF8
Offset_0x10DF5C:
                dc.w    $0004
                dc.w    $FD04, $0004, $FFF8
                dc.w    $FC00, $0006, $FFF0
                dc.w    $FC00, $0006, $0008
                dc.w    $F805, $0000, $FFF8
Offset_0x10DF76:
                dc.w    $0004
                dc.w    $FE04, $0004, $FFF8
                dc.w    $FC00, $0006, $FFF0
                dc.w    $FC00, $0006, $0008
                dc.w    $F805, $0000, $FFF8
Offset_0x10DF90:
                dc.w    $0001
                dc.w    $FC04, $0007, $FFF8
Offset_0x10DF98:
                dc.w    $0001
                dc.w    $FC00, $0009, $FFFC
Offset_0x10DFA0:
                dc.w    $0002
                dc.w    $F808, $000A, $FFD8
                dc.w    $F808, $080A, $0010
Offset_0x10DFAE:
                dc.w    $0002
                dc.w    $0008, $100A, $FFD8
                dc.w    $0008, $180A, $0010
Offset_0x10DFBC:
                dc.w    $0001
                dc.w    $0000, $FA93, $0000
;-------------------------------------------------------------------------------  
Cluckoid_Dyn_Script:                                           ; Offset_0x10DFC4
                dc.w    Offset_0x10DFE0-Cluckoid_Dyn_Script
                dc.w    Offset_0x10DFE8-Cluckoid_Dyn_Script
                dc.w    Offset_0x10DFF0-Cluckoid_Dyn_Script
                dc.w    Offset_0x10DFF8-Cluckoid_Dyn_Script
                dc.w    Offset_0x10DFFE-Cluckoid_Dyn_Script
                dc.w    Offset_0x10E004-Cluckoid_Dyn_Script
                dc.w    Offset_0x10E00A-Cluckoid_Dyn_Script
                dc.w    Offset_0x10E012-Cluckoid_Dyn_Script
                dc.w    Offset_0x10E01A-Cluckoid_Dyn_Script
                dc.w    Offset_0x10E022-Cluckoid_Dyn_Script
                dc.w    Offset_0x10E028-Cluckoid_Dyn_Script
                dc.w    Offset_0x10E02E-Cluckoid_Dyn_Script
                dc.w    Offset_0x10E034-Cluckoid_Dyn_Script
                dc.w    Offset_0x10E03A-Cluckoid_Dyn_Script
Offset_0x10DFE0:
                dc.w    $0002
                dc.w    $0008, $0091, $00B1
Offset_0x10DFE8:
                dc.w    $0002
                dc.w    $00D8, $0091, $00B1
Offset_0x10DFF0:
                dc.w    $0002
                dc.w    $0168, $0091, $00B1
Offset_0x10DFF8:
                dc.w    $0001
                dc.w    $01FB, $00B1
Offset_0x10DFFE:
                dc.w    $0001
                dc.w    $02BB, $0372
Offset_0x10E004:
                dc.w    $0001
                dc.w    $03AB, $0462
Offset_0x10E00A:
                dc.w    $0002
                dc.w    $0492, $04CB, $0581
Offset_0x10E012:
                dc.w    $0002
                dc.w    $05A2, $05DB, $0581
Offset_0x10E01A:
                dc.w    $0002
                dc.w    $0691, $06BB, $0581
Offset_0x10E022:
                dc.w    $0001
                dc.w    $077B, $0831
Offset_0x10E028:
                dc.w    $0001
                dc.w    $085B, $0581
Offset_0x10E02E:
                dc.w    $0001
                dc.w    $09DB, $0441
Offset_0x10E034:
                dc.w    $0001
                dc.w    $091B, $0091
Offset_0x10E03A:
                dc.w    $0002
                dc.w    $0A98, $00B1, $0091
;------------------------------------------------------------------------------- 
Cluckoid_Arrow_Mappings:                                       ; Offset_0x10E042
                dc.w    Offset_0x10E044-Cluckoid_Arrow_Mappings
Offset_0x10E044:
                dc.w    $0002
                dc.w    $F40C, $0000, $FFF0
                dc.w    $FC01, $0004, $FFF8
;-------------------------------------------------------------------------------  
Cluckoid_Mappings:                                             ; Offset_0x10E052
                dc.w    Offset_0x10E06E-Cluckoid_Mappings
                dc.w    Offset_0x10E082-Cluckoid_Mappings
                dc.w    Offset_0x10E096-Cluckoid_Mappings
                dc.w    Offset_0x10E0AA-Cluckoid_Mappings
                dc.w    Offset_0x10E0B8-Cluckoid_Mappings
                dc.w    Offset_0x10E0C6-Cluckoid_Mappings
                dc.w    Offset_0x10E0D4-Cluckoid_Mappings
                dc.w    Offset_0x10E0E8-Cluckoid_Mappings
                dc.w    Offset_0x10E0FC-Cluckoid_Mappings
                dc.w    Offset_0x10E110-Cluckoid_Mappings
                dc.w    Offset_0x10E11E-Cluckoid_Mappings
                dc.w    Offset_0x10E12C-Cluckoid_Mappings
                dc.w    Offset_0x10E13A-Cluckoid_Mappings
                dc.w    Offset_0x10E148-Cluckoid_Mappings
Offset_0x10E06E:
                dc.w    $0003
                dc.w    $F00A, $0000, $FFF0
                dc.w    $F801, $0009, $0008
                dc.w    $0804, $000B, $FFF8
Offset_0x10E082:
                dc.w    $0003
                dc.w    $F00A, $0000, $FFF0
                dc.w    $F801, $0009, $0008
                dc.w    $0804, $000B, $FFF8
Offset_0x10E096:
                dc.w    $0003
                dc.w    $F00A, $0000, $FFF0
                dc.w    $F801, $0009, $0008
                dc.w    $0804, $000B, $FFF8
Offset_0x10E0AA:
                dc.w    $0002
                dc.w    $F00E, $0000, $FFF0
                dc.w    $0804, $000C, $FFF8
Offset_0x10E0B8:
                dc.w    $0002
                dc.w    $F00E, $0000, $FFF0
                dc.w    $0808, $000C, $FFF0
Offset_0x10E0C6:
                dc.w    $0002
                dc.w    $F00E, $0000, $FFF0
                dc.w    $0808, $000C, $FFF0
Offset_0x10E0D4:
                dc.w    $0003
                dc.w    $F008, $0000, $FFF0
                dc.w    $F80E, $0003, $FFE8
                dc.w    $F801, $000F, $0008
Offset_0x10E0E8:
                dc.w    $0003
                dc.w    $F008, $0000, $FFF0
                dc.w    $F80E, $0003, $FFE8
                dc.w    $F801, $000F, $0008
Offset_0x10E0FC:
                dc.w    $0003
                dc.w    $0001, $0000, $FFE8
                dc.w    $F00B, $0002, $FFF0
                dc.w    $F801, $000E, $0008
Offset_0x10E110:
                dc.w    $0002
                dc.w    $F00B, $0000, $FFED
                dc.w    $F801, $000C, $0005
Offset_0x10E11E:
                dc.w    $0002
                dc.w    $F00B, $0000, $FFF0
                dc.w    $F801, $000C, $0008
Offset_0x10E12C:
                dc.w    $0002
                dc.w    $F00B, $0000, $FFF0
                dc.w    $F801, $000C, $0008
Offset_0x10E13A:
                dc.w    $0002
                dc.w    $F00B, $0000, $FFF0
                dc.w    $F801, $000C, $0008
Offset_0x10E148:
                dc.w    $0003
                dc.w    $F00A, $0000, $FFF0
                dc.w    $0804, $0009, $FFF8
                dc.w    $F801, $000B, $0008 
;------------------------------------------------------------------------------- 
Butterdroid_Mappings:                                          ; Offset_0x10E15C
                dc.w    Offset_0x10E166-Butterdroid_Mappings
                dc.w    Offset_0x10E16E-Butterdroid_Mappings
                dc.w    Offset_0x10E176-Butterdroid_Mappings
                dc.w    Offset_0x10E17E-Butterdroid_Mappings
                dc.w    Offset_0x10E186-Butterdroid_Mappings
Offset_0x10E166:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x10E16E:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x10E176:
                dc.w    $0001
                dc.w    $FC0D, $0000, $FFEF
Offset_0x10E17E:
                dc.w    $0001
                dc.w    $000D, $0000, $FFEC
Offset_0x10E186:
                dc.w    $0001
                dc.w    $000A, $0000, $FFF4
;-------------------------------------------------------------------------------
Butterdroid_Dyn_Script:                                        ; Offset_0x10E18E
                dc.w    Offset_0x10E198-Butterdroid_Dyn_Script
                dc.w    Offset_0x10E19C-Butterdroid_Dyn_Script
                dc.w    Offset_0x10E1A0-Butterdroid_Dyn_Script
                dc.w    Offset_0x10E1A4-Butterdroid_Dyn_Script
                dc.w    Offset_0x10E1A8-Butterdroid_Dyn_Script
Offset_0x10E198:
                dc.w    $0000
                dc.w    $0008
Offset_0x10E19C:
                dc.w    $0000
                dc.w    $0098
Offset_0x10E1A0:
                dc.w    $0000
                dc.w    $0127
Offset_0x10E1A4:
                dc.w    $0000
                dc.w    $01A7
Offset_0x10E1A8:
                dc.w    $0000
                dc.w    $0228                                                                            
;-------------------------------------------------------------------------------
Turbo_Spiker_Mappings:                                         ; Offset_0x10E1AC
                dc.w    Offset_0x10E1C8-Turbo_Spiker_Mappings
                dc.w    Offset_0x10E1E2-Turbo_Spiker_Mappings
                dc.w    Offset_0x10E1FC-Turbo_Spiker_Mappings
                dc.w    Offset_0x10E216-Turbo_Spiker_Mappings
                dc.w    Offset_0x10E224-Turbo_Spiker_Mappings
                dc.w    Offset_0x10E22C-Turbo_Spiker_Mappings
                dc.w    Offset_0x10E234-Turbo_Spiker_Mappings
                dc.w    Offset_0x10E23C-Turbo_Spiker_Mappings
                dc.w    Offset_0x10E244-Turbo_Spiker_Mappings
                dc.w    Offset_0x10E24C-Turbo_Spiker_Mappings
                dc.w    Offset_0x10E254-Turbo_Spiker_Mappings
                dc.w    Offset_0x10E25C-Turbo_Spiker_Mappings
                dc.w    Offset_0x10E264-Turbo_Spiker_Mappings
                dc.w    Offset_0x10E26C-Turbo_Spiker_Mappings
Offset_0x10E1C8:
                dc.w    $0004
                dc.w    $F006, $0000, $FFF0
                dc.w    $0008, $0006, $0000
                dc.w    $0800, $0009, $FFF0
                dc.w    $080C, $000A, $FFF8
Offset_0x10E1E2:
                dc.w    $0004
                dc.w    $F006, $0000, $FFF0
                dc.w    $0008, $0006, $0000
                dc.w    $0800, $000E, $FFF0
                dc.w    $080C, $000F, $FFF8
Offset_0x10E1FC:
                dc.w    $0004
                dc.w    $F006, $0000, $FFF0
                dc.w    $0008, $0006, $0000
                dc.w    $0800, $0013, $FFF0
                dc.w    $080C, $0014, $FFF8
Offset_0x10E216:
                dc.w    $0002
                dc.w    $E80B, $0018, $FFF4
                dc.w    $0809, $0024, $FFF4
Offset_0x10E224:
                dc.w    $0001
                dc.w    $F801, $002A, $FFFC
Offset_0x10E22C:
                dc.w    $0001
                dc.w    $FC00, $002C, $FFFC
Offset_0x10E234:
                dc.w    $0001
                dc.w    $FC00, $002D, $FFFC
Offset_0x10E23C:
                dc.w    $0001
                dc.w    $FC00, $002E, $FFFC
Offset_0x10E244:
                dc.w    $0001
                dc.w    $F805, $002F, $FFF8
Offset_0x10E24C:
                dc.w    $0001
                dc.w    $F805, $082F, $FFF8
Offset_0x10E254:
                dc.w    $0001
                dc.w    $F805, $0033, $FFF8
Offset_0x10E25C:
                dc.w    $0001
                dc.w    $F805, $0833, $FFF8
Offset_0x10E264:
                dc.w    $0001
                dc.w    $FC04, $0037, $FFF8
Offset_0x10E26C:
                dc.w    $0001
                dc.w    $FC04, $0837, $FFF8  
;-------------------------------------------------------------------------------   
Fireworm_Segments_Mappings:                                    ; Offset_0x10E274
                dc.w    Offset_0x10E2B4-Fireworm_Segments_Mappings
                dc.w    Offset_0x10E284-Fireworm_Segments_Mappings
                dc.w    Offset_0x10E28C-Fireworm_Segments_Mappings
                dc.w    Offset_0x10E294-Fireworm_Segments_Mappings
                dc.w    Offset_0x10E29C-Fireworm_Segments_Mappings
                dc.w    Offset_0x10E2A4-Fireworm_Segments_Mappings
                dc.w    Offset_0x10E2AC-Fireworm_Segments_Mappings
                dc.w    Offset_0x10E2BC-Fireworm_Segments_Mappings
Offset_0x10E284:
                dc.w    $0001
                dc.w    $F805, $0000, $FFF8
Offset_0x10E28C:
                dc.w    $0001
                dc.w    $F805, $0004, $FFF8
Offset_0x10E294:
                dc.w    $0001
                dc.w    $F805, $0008, $FFF8
Offset_0x10E29C:
                dc.w    $0001
                dc.w    $F805, $000C, $FFF8
Offset_0x10E2A4:
                dc.w    $0001
                dc.w    $F805, $0010, $FFF8
Offset_0x10E2AC:
                dc.w    $0001
                dc.w    $FC00, $0014, $FFFC
Offset_0x10E2B4:
                dc.w    $0001
                dc.w    $EC0A, $0015, $FFF4
Offset_0x10E2BC:
                dc.w    $0001
                dc.w    $0000, $FAE8, $0000
;-------------------------------------------------------------------------------
Fireworm_Dyn_Script:                                           ; Offset_0x10E2C4
                dc.w    Offset_0x10E2CC-Fireworm_Dyn_Script
                dc.w    Offset_0x10E2D0-Fireworm_Dyn_Script
                dc.w    Offset_0x10E2D4-Fireworm_Dyn_Script
                dc.w    Offset_0x10E2D8-Fireworm_Dyn_Script
Offset_0x10E2CC:
                dc.w    $0000
                dc.w    $0003
Offset_0x10E2D0:
                dc.w    $0000
                dc.w    $0045
Offset_0x10E2D4:
                dc.w    $0000
                dc.w    $00A8
Offset_0x10E2D8:
                dc.w    $0000
                dc.w    $0138  
;------------------------------------------------------------------------------- 
Fireworm_Mappings:                                             ; Offset_0x10E2DC
                dc.w    Offset_0x10E2E4-Fireworm_Mappings
                dc.w    Offset_0x10E2EC-Fireworm_Mappings
                dc.w    Offset_0x10E2F4-Fireworm_Mappings
                dc.w    Offset_0x10E2FC-Fireworm_Mappings
Offset_0x10E2E4:
                dc.w    $0001
                dc.w    $F805, $0000, $FFF8
Offset_0x10E2EC:
                dc.w    $0001
                dc.w    $F406, $0000, $FFF8
Offset_0x10E2F4:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x10E2FC:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
;------------------------------------------------------------------------------- 
Jawz_Mappings:                                                 ; Offset_0x10E304
                dc.w    Offset_0x10E308-Jawz_Mappings
                dc.w    Offset_0x10E31C-Jawz_Mappings
Offset_0x10E308:
                dc.w    $0003
                dc.w    $FC0D, $0000, $FFE8
                dc.w    $F406, $0008, $0008
                dc.w    $F402, $000E, $0018
Offset_0x10E31C:
                dc.w    $0003
                dc.w    $FC0D, $0000, $FFE8
                dc.w    $F406, $0008, $0008
                dc.w    $F402, $0011, $0018
;-------------------------------------------------------------------------------   
Mushmeanie_Mappings:                                           ; Offset_0x10E330
                dc.w    Offset_0x10E338-Mushmeanie_Mappings
                dc.w    Offset_0x10E340-Mushmeanie_Mappings
                dc.w    Offset_0x10E34E-Mushmeanie_Mappings
                dc.w    Offset_0x10E35C-Mushmeanie_Mappings
Offset_0x10E338:
                dc.w    $0001
                dc.w    $F809, $0000, $FFF4
Offset_0x10E340:
                dc.w    $0002
                dc.w    $F805, $0006, $FFF8
                dc.w    $0700, $000A, $FFFC
Offset_0x10E34E:
                dc.w    $0002
                dc.w    $F805, $0006, $FFF8
                dc.w    $0201, $000B, $FFFC
Offset_0x10E35C:
                dc.w    $0002
                dc.w    $F805, $0006, $FFF8
                dc.w    $0501, $000D, $FFFC
;------------------------------------------------------------------------------- 
Madmole_Mappings:                                              ; Offset_0x10E36A
                dc.w    Offset_0x10E386-Madmole_Mappings
                dc.w    Offset_0x10E3A6-Madmole_Mappings
                dc.w    Offset_0x10E3C6-Madmole_Mappings
                dc.w    Offset_0x10E3E6-Madmole_Mappings
                dc.w    Offset_0x10E3FA-Madmole_Mappings
                dc.w    Offset_0x10E408-Madmole_Mappings
                dc.w    Offset_0x10E416-Madmole_Mappings
                dc.w    Offset_0x10E41E-Madmole_Mappings
                dc.w    Offset_0x10E42C-Madmole_Mappings
                dc.w    Offset_0x10E434-Madmole_Mappings
                dc.w    Offset_0x10E442-Madmole_Mappings
                dc.w    Offset_0x10E44A-Madmole_Mappings
                dc.w    Offset_0x10E458-Madmole_Mappings
                dc.w    Offset_0x10E460-Madmole_Mappings
Offset_0x10E386:
                dc.w    $0005
                dc.w    $F40A, $2000, $FFFA
                dc.w    $FC00, $2009, $FFF2
                dc.w    $E809, $400E, $FFFD
                dc.w    $F800, $4014, $0005
                dc.w    $0401, $200A, $000A
Offset_0x10E3A6:
                dc.w    $0005
                dc.w    $F40A, $2000, $FFFA
                dc.w    $FC00, $2009, $FFF2
                dc.w    $E809, $400E, $FFF5
                dc.w    $F800, $4014, $FFFD
                dc.w    $0401, $200A, $0002
Offset_0x10E3C6:
                dc.w    $0005
                dc.w    $F40A, $2000, $FFFA
                dc.w    $FC00, $2009, $FFF2
                dc.w    $E809, $400E, $FFED
                dc.w    $F800, $4014, $FFF5
                dc.w    $0401, $200A, $FFFA
Offset_0x10E3E6:
                dc.w    $0003
                dc.w    $F40A, $2000, $FFFA
                dc.w    $FC00, $2009, $FFF2
                dc.w    $F801, $200C, $FFF2
Offset_0x10E3FA:
                dc.w    $0002
                dc.w    $F40A, $2000, $FFFA
                dc.w    $FC00, $2009, $FFF2
Offset_0x10E408:
                dc.w    $0002
                dc.w    $F409, $400E, $FFF4
                dc.w    $0400, $4014, $FFFC
Offset_0x10E416:
                dc.w    $0001
                dc.w    $F40A, $4015, $FFF4
Offset_0x10E41E:
                dc.w    $0002
                dc.w    $FC00, $401E, $FFF4
                dc.w    $F406, $401F, $FFFC
Offset_0x10E42C:
                dc.w    $0001
                dc.w    $F40A, $5015, $FFF4
Offset_0x10E434:
                dc.w    $0002
                dc.w    $FC09, $500E, $FFF4
                dc.w    $F400, $5014, $FFFC
Offset_0x10E442:
                dc.w    $0001
                dc.w    $F40A, $5815, $FFF4
Offset_0x10E44A:
                dc.w    $0002
                dc.w    $FC00, $481E, $0004
                dc.w    $F406, $481F, $FFF4
Offset_0x10E458:
                dc.w    $0001
                dc.w    $F40A, $4815, $FFF4
Offset_0x10E460:
                dc.w    $0002
                dc.w    $FC08, $2025, $FFE8
                dc.w    $FC08, $2825, $0000
;------------------------------------------------------------------------------- 
Iwamodock_Mappings:                                            ; Offset_0x10E46E
                dc.w    Offset_0x10E482-Iwamodock_Mappings
                dc.w    Offset_0x10E48A-Iwamodock_Mappings
                dc.w    Offset_0x10E49E-Iwamodock_Mappings
                dc.w    Offset_0x10E4B2-Iwamodock_Mappings
                dc.w    Offset_0x10E4C6-Iwamodock_Mappings
                dc.w    Offset_0x10E4DA-Iwamodock_Mappings
                dc.w    Offset_0x10E4EE-Iwamodock_Mappings
                dc.w    Offset_0x10E4F6-Iwamodock_Mappings
                dc.w    Offset_0x10E4FE-Iwamodock_Mappings
                dc.w    Offset_0x10E506-Iwamodock_Mappings
Offset_0x10E482:
                dc.w    $0001
                dc.w    $F40A, $6000, $FFF4
Offset_0x10E48A:
                dc.w    $0003
                dc.w    $0400, $201B, $FFF8
                dc.w    $0400, $281B, $0000
                dc.w    $F40A, $6009, $FFF4
Offset_0x10E49E:
                dc.w    $0003
                dc.w    $FD05, $201C, $FFF0
                dc.w    $FD05, $281C, $0000
                dc.w    $F40A, $6012, $FFF4
Offset_0x10E4B2:
                dc.w    $0003
                dc.w    $FD05, $2020, $FFF0
                dc.w    $FD05, $2820, $0000
                dc.w    $F40A, $6012, $FFF4
Offset_0x10E4C6:
                dc.w    $0003
                dc.w    $FD05, $2024, $FFF0
                dc.w    $FD05, $2824, $0000
                dc.w    $F40A, $6012, $FFF4
Offset_0x10E4DA:
                dc.w    $0003
                dc.w    $FD05, $2028, $FFF0
                dc.w    $FD05, $2828, $0000
                dc.w    $F40A, $6012, $FFF4
Offset_0x10E4EE:
                dc.w    $0001
                dc.w    $FC04, $602C, $FFF8
Offset_0x10E4F6:
                dc.w    $0001
                dc.w    $FC00, $602E, $FFFC
Offset_0x10E4FE:
                dc.w    $0001
                dc.w    $FC04, $002F, $FFF8
Offset_0x10E506:
                dc.w    $0001
                dc.w    $FC00, $0031, $FFFC
;-------------------------------------------------------------------------------
Rhinobot_Dyn_Script:                                           ; Offset_0x10E50E
                dc.w    Offset_0x10E51E-Rhinobot_Dyn_Script
                dc.w    Offset_0x10E526-Rhinobot_Dyn_Script
                dc.w    Offset_0x10E52E-Rhinobot_Dyn_Script
                dc.w    Offset_0x10E532-Rhinobot_Dyn_Script
                dc.w    Offset_0x10E538-Rhinobot_Dyn_Script
                dc.w    Offset_0x10E53C-Rhinobot_Dyn_Script
                dc.w    Offset_0x10E540-Rhinobot_Dyn_Script
                dc.w    Offset_0x10E544-Rhinobot_Dyn_Script
Offset_0x10E51E:
                dc.w    $0002
                dc.w    $0001, $002F, $0122
Offset_0x10E526:
                dc.w    $0002
                dc.w    $0151, $0171, $019B
Offset_0x10E52E:
                dc.w    $0000
                dc.w    $025B
Offset_0x10E532:
                dc.w    $0001
                dc.w    $031F, $0411
Offset_0x10E538:
                dc.w    $0000
                dc.w    $0432
Offset_0x10E53C:
                dc.w    $0000
                dc.w    $0465
Offset_0x10E540:
                dc.w    $0000
                dc.w    $04C5
Offset_0x10E544:
                dc.w    $0000
                dc.w    $0522
;-------------------------------------------------------------------------------  
Rhinobot_Mappings:                                             ; Offset_0x10E548
                dc.w    Offset_0x10E558-Rhinobot_Mappings
                dc.w    Offset_0x10E56C-Rhinobot_Mappings
                dc.w    Offset_0x10E580-Rhinobot_Mappings
                dc.w    Offset_0x10E588-Rhinobot_Mappings
                dc.w    Offset_0x10E596-Rhinobot_Mappings
                dc.w    Offset_0x10E59E-Rhinobot_Mappings
                dc.w    Offset_0x10E5A6-Rhinobot_Mappings
                dc.w    Offset_0x10E5AE-Rhinobot_Mappings
Offset_0x10E558:
                dc.w    $0003
                dc.w    $0001, $0000, $FFE8
                dc.w    $F00F, $0002, $FFF0
                dc.w    $F802, $0012, $0010
Offset_0x10E56C:
                dc.w    $0003
                dc.w    $0001, $0000, $FFEC
                dc.w    $F004, $0002, $FFF4
                dc.w    $F80E, $0004, $FFF4
Offset_0x10E580:
                dc.w    $0001
                dc.w    $F00B, $0000, $FFF4
Offset_0x10E588:
                dc.w    $0002
                dc.w    $F00F, $0000, $FFEC
                dc.w    $F801, $0010, $000C
Offset_0x10E596:
                dc.w    $0001
                dc.w    $0008, $0000, $FFF4
Offset_0x10E59E:
                dc.w    $0001
                dc.w    $F809, $0000, $FFF4
Offset_0x10E5A6:
                dc.w    $0001
                dc.w    $F809, $0000, $FFF4
Offset_0x10E5AE:
                dc.w    $0001
                dc.w    $0008, $0000, $FFF4
;-------------------------------------------------------------------------------
; Offset_0x10E5B6:
                dc.w    ((Offset_0x10E5CC-Boss_Explosion_Mappings)-$02)
                dc.w    Offset_0x10E5DC-Boss_Explosion_Mappings
                dc.w    Offset_0x10E5E4-Boss_Explosion_Mappings
                dc.w    Offset_0x10E5EC-Boss_Explosion_Mappings
                dc.w    Offset_0x10E5F4-Boss_Explosion_Mappings
Boss_Explosion_Mappings:                                       ; Offset_0x10E5C0  
                dc.w    Offset_0x10E5CC-Boss_Explosion_Mappings
                dc.w    Offset_0x10E5D4-Boss_Explosion_Mappings
                dc.w    Offset_0x10E5DC-Boss_Explosion_Mappings
                dc.w    Offset_0x10E5E4-Boss_Explosion_Mappings
                dc.w    Offset_0x10E5EC-Boss_Explosion_Mappings
                dc.w    Offset_0x10E5F4-Boss_Explosion_Mappings
Offset_0x10E5CC:
                dc.w    $0001
                dc.w    $F805, $0000, $FFF8
Offset_0x10E5D4:
                dc.w    $0001
                dc.w    $F40A, $0004, $FFF4
Offset_0x10E5DC:
                dc.w    $0001
                dc.w    $F40A, $000D, $FFF4
Offset_0x10E5E4:
                dc.w    $0001
                dc.w    $F40A, $0016, $FFF4
Offset_0x10E5EC:
                dc.w    $0001
                dc.w    $F30A, $001F, $FFF4
Offset_0x10E5F4:
                dc.w    $0001
                dc.w    $F609, $0028, $FFF4        
;-------------------------------------------------------------------------------
Fire_Breath_Flame_Mappings:                                    ; Offset_0x10E5FC      
                dc.w    Offset_0x10E606-Fire_Breath_Flame_Mappings
                dc.w    Offset_0x10E60E-Fire_Breath_Flame_Mappings
                dc.w    Offset_0x10E616-Fire_Breath_Flame_Mappings
                dc.w    Offset_0x10E61E-Fire_Breath_Flame_Mappings
                dc.w    Offset_0x10E626-Fire_Breath_Flame_Mappings
Offset_0x10E606:
                dc.w    $0001
                dc.w    $EC0F, $0000, $FFEC
Offset_0x10E60E:
                dc.w    $0001
                dc.w    $F00F, $0010, $FFF0
Offset_0x10E616:
                dc.w    $0001
                dc.w    $F00F, $0020, $FFF0
Offset_0x10E61E:
                dc.w    $0001
                dc.w    $F00F, $0030, $FFF0
Offset_0x10E626:
                dc.w    $0001
                dc.w    $EB0F, $0040, $FFF0     
;------------------------------------------------------------------------------- 
Hang_Mobile_Flame_Mappings:                                    ; Offset_0x10E62E
                dc.w    Offset_0x10E638-Hang_Mobile_Flame_Mappings
                dc.w    Offset_0x10E640-Hang_Mobile_Flame_Mappings
                dc.w    Offset_0x10E648-Hang_Mobile_Flame_Mappings
                dc.w    Offset_0x10E650-Hang_Mobile_Flame_Mappings
                dc.w    Offset_0x10E658-Hang_Mobile_Flame_Mappings
Offset_0x10E638:
                dc.w    $0001
                dc.w    $F40E, $0000, $FFF0
Offset_0x10E640:
                dc.w    $0001
                dc.w    $EC0F, $000C, $FFF0
Offset_0x10E648:
                dc.w    $0001
                dc.w    $EC0F, $001C, $FFF0
Offset_0x10E650:
                dc.w    $0001
                dc.w    $EC0E, $002C, $FFF0
Offset_0x10E658:
                dc.w    $0001
                dc.w    $EC0E, $0038, $FFF0                  
;-------------------------------------------------------------------------------  
Bloominator_Mappings:                                          ; Offset_0x10E660
                dc.w    Offset_0x10E66A-Bloominator_Mappings
                dc.w    Offset_0x10E690-Bloominator_Mappings
                dc.w    Offset_0x10E6B6-Bloominator_Mappings
                dc.w    Offset_0x10E6E8-Bloominator_Mappings
                dc.w    Offset_0x10E70E-Bloominator_Mappings
Offset_0x10E66A:
                dc.w    $0006
                dc.w    $EA06, $0007, $FFF0
                dc.w    $EA06, $0807, $0000
                dc.w    $0800, $0000, $FFE8
                dc.w    $0006, $0001, $FFF0
                dc.w    $0006, $0801, $0000
                dc.w    $0800, $0800, $0010
Offset_0x10E690:
                dc.w    $0006
                dc.w    $EA06, $000D, $FFF0
                dc.w    $EA06, $080D, $0000
                dc.w    $0800, $0000, $FFE8
                dc.w    $0006, $0001, $FFF0
                dc.w    $0006, $0801, $0000
                dc.w    $0800, $0800, $0010
Offset_0x10E6B6:
                dc.w    $0008
                dc.w    $E200, $0013, $FFF8
                dc.w    $EA06, $0014, $FFF0
                dc.w    $E200, $0813, $0000
                dc.w    $EA06, $0814, $0000
                dc.w    $0800, $0000, $FFE8
                dc.w    $0006, $0001, $FFF0
                dc.w    $0006, $0801, $0000
                dc.w    $0800, $0800, $0010
Offset_0x10E6E8:
                dc.w    $0006
                dc.w    $EC06, $0007, $FFF0
                dc.w    $EC06, $0807, $0000
                dc.w    $0800, $0000, $FFE8
                dc.w    $0006, $0001, $FFF0
                dc.w    $0006, $0801, $0000
                dc.w    $0800, $0800, $0010
Offset_0x10E70E:
                dc.w    $0001
                dc.w    $F805, $001A, $FFF8  
;-------------------------------------------------------------------------------  
Monkey_Dude_Mappings:                                          ; Offset_0x10E716
                dc.w    Offset_0x10E724-Monkey_Dude_Mappings
                dc.w    Offset_0x10E73E-Monkey_Dude_Mappings
                dc.w    Offset_0x10E758-Monkey_Dude_Mappings
                dc.w    Offset_0x10E772-Monkey_Dude_Mappings
                dc.w    Offset_0x10E77A-Monkey_Dude_Mappings
                dc.w    Offset_0x10E782-Monkey_Dude_Mappings
                dc.w    Offset_0x10E78A-Monkey_Dude_Mappings
Offset_0x10E724:
                dc.w    $0004
                dc.w    $FE00, $000D, $FFF7
                dc.w    $EB0A, $0000, $FFF0
                dc.w    $F805, $0009, $FFF8
                dc.w    $0004, $800E, $0010
Offset_0x10E73E:
                dc.w    $0004
                dc.w    $FD00, $000D, $FFF7
                dc.w    $E90A, $0000, $FFF0
                dc.w    $F805, $0009, $FFF8
                dc.w    $0004, $800E, $0010
Offset_0x10E758:
                dc.w    $0004
                dc.w    $FE00, $000D, $FFF7
                dc.w    $EB0A, $0000, $FFF0
                dc.w    $F805, $0009, $FFF8
                dc.w    $0804, $800E, $0010
Offset_0x10E772:
                dc.w    $0001
                dc.w    $FC00, $0010, $FFFC
Offset_0x10E77A:
                dc.w    $0001
                dc.w    $FC00, $1011, $FFFC
Offset_0x10E782:
                dc.w    $0001
                dc.w    $FC00, $0012, $FFFC
Offset_0x10E78A:
                dc.w    $0001
                dc.w    $F805, $0013, $FFF8 
;-------------------------------------------------------------------------------  
Guardian_Mappings:                                             ; Offset_0x10E792
                dc.w    Offset_0x10E7C8-Guardian_Mappings
                dc.w    Offset_0x10E7E2-Guardian_Mappings
                dc.w    Offset_0x10E7FC-Guardian_Mappings
                dc.w    Offset_0x10E816-Guardian_Mappings
                dc.w    Offset_0x10E81E-Guardian_Mappings
                dc.w    Offset_0x10E826-Guardian_Mappings
                dc.w    Offset_0x10E82E-Guardian_Mappings
                dc.w    Offset_0x10E836-Guardian_Mappings
                dc.w    Offset_0x10E844-Guardian_Mappings
                dc.w    Offset_0x10E852-Guardian_Mappings
                dc.w    Offset_0x10E85A-Guardian_Mappings
                dc.w    Offset_0x10E868-Guardian_Mappings
                dc.w    Offset_0x10E876-Guardian_Mappings
                dc.w    Offset_0x10E87E-Guardian_Mappings
                dc.w    Offset_0x10E886-Guardian_Mappings
                dc.w    Offset_0x10E88E-Guardian_Mappings
                dc.w    Offset_0x10E896-Guardian_Mappings
                dc.w    Offset_0x10E8A4-Guardian_Mappings
                dc.w    Offset_0x10E8B2-Guardian_Mappings
                dc.w    Offset_0x10E8BA-Guardian_Mappings
                dc.w    Offset_0x10E8C2-Guardian_Mappings
                dc.w    Offset_0x10E8CA-Guardian_Mappings
                dc.w    Offset_0x10E8D2-Guardian_Mappings
                dc.w    Offset_0x10E8DA-Guardian_Mappings
                dc.w    Offset_0x10E8E2-Guardian_Mappings
                dc.w    Offset_0x10E8F6-Guardian_Mappings
                dc.w    Offset_0x10E910-Guardian_Mappings
Offset_0x10E7C8:
                dc.w    $0004
                dc.w    $F40E, $0000, $FFE8
                dc.w    $F406, $000C, $0008
                dc.w    $DC0A, $004D, $FFE8
                dc.w    $DC0A, $084D, $0000
Offset_0x10E7E2:
                dc.w    $0004
                dc.w    $F40E, $0000, $FFE8
                dc.w    $F406, $000C, $0008
                dc.w    $D40B, $002C, $FFE8
                dc.w    $DC0A, $084D, $0000
Offset_0x10E7FC:
                dc.w    $0004
                dc.w    $F40E, $0012, $FFE8
                dc.w    $F406, $001E, $0008
                dc.w    $D40B, $0038, $FFE8
                dc.w    $DC0A, $0844, $0000
Offset_0x10E816:
                dc.w    $0001
                dc.w    $F80D, $0024, $FFF0
Offset_0x10E81E:
                dc.w    $0001
                dc.w    $F00B, $002C, $FFF4
Offset_0x10E826:
                dc.w    $0001
                dc.w    $F00B, $0038, $FFF4
Offset_0x10E82E:
                dc.w    $0001
                dc.w    $F00F, $0056, $FFF0
Offset_0x10E836:
                dc.w    $0002
                dc.w    $F00B, $0066, $FFEC
                dc.w    $F006, $0072, $0004
Offset_0x10E844:
                dc.w    $0002
                dc.w    $F40E, $0078, $FFEC
                dc.w    $F402, $0084, $000C
Offset_0x10E852:
                dc.w    $0001
                dc.w    $F00F, $0087, $FFF0
Offset_0x10E85A:
                dc.w    $0002
                dc.w    $EC0E, $0097, $FFF0
                dc.w    $0409, $00A3, $FFF8
Offset_0x10E868:
                dc.w    $0002
                dc.w    $F801, $00A9, $FFEC
                dc.w    $F00F, $00AB, $FFF4
Offset_0x10E876:
                dc.w    $0001
                dc.w    $F40A, $00BB, $FFF4
Offset_0x10E87E:
                dc.w    $0001
                dc.w    $F40E, $00C4, $FFF0
Offset_0x10E886:
                dc.w    $0001
                dc.w    $F40A, $00D0, $FFF4
Offset_0x10E88E:
                dc.w    $0001
                dc.w    $F40A, $00D9, $FFF4
Offset_0x10E896:
                dc.w    $0002
                dc.w    $F80D, $00E2, $FFEC
                dc.w    $F801, $00EA, $000C
Offset_0x10E8A4:
                dc.w    $0002
                dc.w    $F80D, $00EC, $FFEC
                dc.w    $F801, $00F4, $000C
Offset_0x10E8B2:
                dc.w    $0001
                dc.w    $F00B, $00F6, $FFF4
Offset_0x10E8BA:
                dc.w    $0001
                dc.w    $F00B, $0102, $FFF8
Offset_0x10E8C2:
                dc.w    $0001
                dc.w    $F00B, $010E, $FFFC
Offset_0x10E8CA:
                dc.w    $0001
                dc.w    $F00F, $011A, $FFF0
Offset_0x10E8D2:
                dc.w    $0001
                dc.w    $F00F, $012A, $FFF0
Offset_0x10E8DA:
                dc.w    $0001
                dc.w    $F805, $013A, $FFF8
Offset_0x10E8E2:
                dc.w    $0003
                dc.w    $E80F, $011A, $FFF0
                dc.w    $040F, $0056, $FFE4
                dc.w    $FC05, $013A, $FFF8
Offset_0x10E8F6:
                dc.w    $0004
                dc.w    $F40E, $0000, $FFE8
                dc.w    $F406, $000C, $0008
                dc.w    $D40B, $0038, $FFE8
                dc.w    $DC0A, $084D, $0000
Offset_0x10E910:
                dc.w    $0001
                dc.w    $0000, $FC00, $0000
;-------------------------------------------------------------------------------  
Tunnelbot_Mappings:                                            ; Offset_0x10E918
                dc.w    Offset_0x10E926-Tunnelbot_Mappings
                dc.w    Offset_0x10E94C-Tunnelbot_Mappings
                dc.w    Offset_0x10E972-Tunnelbot_Mappings
                dc.w    Offset_0x10E998-Tunnelbot_Mappings
                dc.w    Offset_0x10E9A0-Tunnelbot_Mappings
                dc.w    Offset_0x10E9AE-Tunnelbot_Mappings
                dc.w    Offset_0x10E9B6-Tunnelbot_Mappings
Offset_0x10E926:
                dc.w    $0006
                dc.w    $F40A, $0000, $FFD8
                dc.w    $F406, $0009, $FFF0
                dc.w    $F406, $0809, $0000
                dc.w    $F40A, $0800, $0010
                dc.w    $DE06, $000F, $FFDC
                dc.w    $DE06, $000F, $0014
Offset_0x10E94C:
                dc.w    $0006
                dc.w    $F40A, $0000, $FFD8
                dc.w    $F406, $0009, $FFF0
                dc.w    $F406, $0809, $0000
                dc.w    $F40A, $0800, $0010
                dc.w    $DE06, $0015, $FFDC
                dc.w    $DE06, $0015, $0014
Offset_0x10E972:
                dc.w    $0006
                dc.w    $F40A, $0000, $FFD8
                dc.w    $F406, $0009, $FFF0
                dc.w    $F406, $0809, $0000
                dc.w    $F40A, $0800, $0010
                dc.w    $DE06, $001B, $FFDC
                dc.w    $DE06, $001B, $0014
Offset_0x10E998:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x10E9A0:
                dc.w    $0002
                dc.w    $F406, $0009, $FFF0
                dc.w    $F406, $0809, $0000
Offset_0x10E9AE:
                dc.w    $0001
                dc.w    $F40A, $0800, $FFF4
Offset_0x10E9B6:
                dc.w    $0001
                dc.w    $F406, $000F, $FFF8                
;-------------------------------------------------------------------------------   
Catakiller_Jr_Mappings:                                        ; Offset_0x10E9BE
                dc.w    Offset_0x10E9CA-Catakiller_Jr_Mappings
                dc.w    Offset_0x10E9D2-Catakiller_Jr_Mappings
                dc.w    Offset_0x10E9DA-Catakiller_Jr_Mappings
                dc.w    Offset_0x10E9E2-Catakiller_Jr_Mappings
                dc.w    Offset_0x10E9F6-Catakiller_Jr_Mappings
                dc.w    Offset_0x10EA0A-Catakiller_Jr_Mappings
Offset_0x10E9CA:
                dc.w    $0001
                dc.w    $F805, $0000, $FFF8
Offset_0x10E9D2:
                dc.w    $0001
                dc.w    $F406, $0004, $FFF8
Offset_0x10E9DA:
                dc.w    $0001
                dc.w    $F805, $000A, $FFF8
Offset_0x10E9E2:
                dc.w    $0003
                dc.w    $EC05, $000E, $0000
                dc.w    $FC08, $0017, $0000
                dc.w    $0405, $100E, $0000
Offset_0x10E9F6:
                dc.w    $0003
                dc.w    $EC05, $0012, $0000
                dc.w    $FC04, $001A, $0005
                dc.w    $0405, $1012, $0000
Offset_0x10EA0A:
                dc.w    $0003
                dc.w    $F400, $0016, $0008
                dc.w    $FC00, $001C, $0010
                dc.w    $0400, $1016, $0008
;------------------------------------------------------------------------------- 
Clamer_Dyn_Script:                                             ; Offset_0x10EA1E
                dc.w    Offset_0x10EA34-Clamer_Dyn_Script
                dc.w    Offset_0x10EA38-Clamer_Dyn_Script
                dc.w    Offset_0x10EA3C-Clamer_Dyn_Script
                dc.w    Offset_0x10EA40-Clamer_Dyn_Script
                dc.w    Offset_0x10EA44-Clamer_Dyn_Script
                dc.w    Offset_0x10EA48-Clamer_Dyn_Script
                dc.w    Offset_0x10EA4C-Clamer_Dyn_Script
                dc.w    Offset_0x10EA50-Clamer_Dyn_Script
                dc.w    Offset_0x10EA56-Clamer_Dyn_Script
                dc.w    Offset_0x10EA5A-Clamer_Dyn_Script
                dc.w    Offset_0x10EA5E-Clamer_Dyn_Script
Offset_0x10EA34:
                dc.w    $0000
                dc.w    $000F
Offset_0x10EA38:
                dc.w    $0000
                dc.w    $010F
Offset_0x10EA3C:
                dc.w    $0000
                dc.w    $020B
Offset_0x10EA40:
                dc.w    $0000
                dc.w    $02CB
Offset_0x10EA44:
                dc.w    $0000
                dc.w    $038B
Offset_0x10EA48:
                dc.w    $0000
                dc.w    $044F
Offset_0x10EA4C:
                dc.w    $0000
                dc.w    $054F
Offset_0x10EA50:
                dc.w    $0001
                dc.w    $0641, $066F
Offset_0x10EA56:
                dc.w    $0000
                dc.w    $076F
Offset_0x10EA5A:
                dc.w    $0000
                dc.w    $0863
Offset_0x10EA5E:
                dc.w    $0000
                dc.w    $000F
;-------------------------------------------------------------------------------   
Clamer_Mappings:                                               ; Offset_0x10EA62
                dc.w    Offset_0x10EA7A-Clamer_Mappings
                dc.w    Offset_0x10EA82-Clamer_Mappings
                dc.w    Offset_0x10EA8A-Clamer_Mappings
                dc.w    Offset_0x10EA92-Clamer_Mappings
                dc.w    Offset_0x10EA9A-Clamer_Mappings
                dc.w    Offset_0x10EAA2-Clamer_Mappings
                dc.w    Offset_0x10EAAA-Clamer_Mappings
                dc.w    Offset_0x10EAB2-Clamer_Mappings
                dc.w    Offset_0x10EAC0-Clamer_Mappings
                dc.w    Offset_0x10EAC8-Clamer_Mappings
                dc.w    Offset_0x10EAD0-Clamer_Mappings
                dc.w    Offset_0x10EAD8-Clamer_Mappings
Offset_0x10EA7A:
                dc.w    $0001
                dc.w    $F00F, $0000, $FFF0
Offset_0x10EA82:
                dc.w    $0001
                dc.w    $F00F, $0000, $FFF0
Offset_0x10EA8A:
                dc.w    $0001
                dc.w    $F80E, $0000, $FFF0
Offset_0x10EA92:
                dc.w    $0001
                dc.w    $F80E, $0000, $FFF0
Offset_0x10EA9A:
                dc.w    $0001
                dc.w    $F80E, $0000, $FFF0
Offset_0x10EAA2:
                dc.w    $0001
                dc.w    $F00F, $0000, $FFF0
Offset_0x10EAAA:
                dc.w    $0001
                dc.w    $F00F, $0000, $FFF0
Offset_0x10EAB2:
                dc.w    $0002
                dc.w    $F801, $0000, $FFE8
                dc.w    $F00F, $0002, $FFF0
Offset_0x10EAC0:
                dc.w    $0001
                dc.w    $F00F, $0000, $FFF0
Offset_0x10EAC8:
                dc.w    $0001
                dc.w    $F805, $0000, $FFF8
Offset_0x10EAD0:
                dc.w    $0001
                dc.w    $EF0F, $0000, $FFF0
Offset_0x10EAD8:
                dc.w    $0001
                dc.w    $0000, $0000, $0000   
;-------------------------------------------------------------------------------  
Sparkle_Mappings:                                              ; Offset_0x10EAE0
                dc.w    Offset_0x10EAF2-Sparkle_Mappings
                dc.w    Offset_0x10EAFA-Sparkle_Mappings
                dc.w    Offset_0x10EB02-Sparkle_Mappings
                dc.w    Offset_0x10EB1C-Sparkle_Mappings
                dc.w    Offset_0x10EB36-Sparkle_Mappings
                dc.w    Offset_0x10EB50-Sparkle_Mappings
                dc.w    Offset_0x10EB6A-Sparkle_Mappings
                dc.w    Offset_0x10EB72-Sparkle_Mappings
                dc.w    Offset_0x10EB7A-Sparkle_Mappings
Offset_0x10EAF2:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x10EAFA:
                dc.w    $0001
                dc.w    $F40A, $0009, $FFF4
Offset_0x10EB02:
                dc.w    $0004
                dc.w    $C007, $001E, $FFF8
                dc.w    $E007, $001E, $FFF8
                dc.w    $0007, $001E, $FFF8
                dc.w    $2007, $001E, $FFF8
Offset_0x10EB1C:
                dc.w    $0004
                dc.w    $C00B, $0012, $FFF4
                dc.w    $E00B, $0012, $FFF4
                dc.w    $000B, $0012, $FFF4
                dc.w    $200B, $0012, $FFF4
Offset_0x10EB36:
                dc.w    $0004
                dc.w    $C00B, $0812, $FFF4
                dc.w    $E00B, $0812, $FFF4
                dc.w    $000B, $0812, $FFF4
                dc.w    $200B, $0812, $FFF4
Offset_0x10EB50:
                dc.w    $0004
                dc.w    $C00B, $1012, $FFF4
                dc.w    $E00B, $1012, $FFF4
                dc.w    $000B, $1012, $FFF4
                dc.w    $200B, $1012, $FFF4
Offset_0x10EB6A:
                dc.w    $0001
                dc.w    $F805, $0026, $FFF8
Offset_0x10EB72:
                dc.w    $0001
                dc.w    $F805, $002A, $FFF8
Offset_0x10EB7A:
                dc.w    $0001
                dc.w    $0000, $FADC, $0000 
;-------------------------------------------------------------------------------  
Batbot_Mappings:                                               ; Offset_0x10EB82
                dc.w    Offset_0x10EB90-Batbot_Mappings
                dc.w    Offset_0x10EB9E-Batbot_Mappings
                dc.w    Offset_0x10EBAC-Batbot_Mappings
                dc.w    Offset_0x10EBC6-Batbot_Mappings
                dc.w    Offset_0x10EBD4-Batbot_Mappings
                dc.w    Offset_0x10EBE2-Batbot_Mappings
                dc.w    Offset_0x10EBEA-Batbot_Mappings
Offset_0x10EB90:
                dc.w    $0002
                dc.w    $F80D, $0000, $FFE0
                dc.w    $F80D, $0800, $0000
Offset_0x10EB9E:
                dc.w    $0002
                dc.w    $F80D, $0008, $FFE0
                dc.w    $F80D, $0808, $0000
Offset_0x10EBAC:
                dc.w    $0004
                dc.w    $0009, $0010, $FFE0
                dc.w    $F801, $0016, $FFF8
                dc.w    $F801, $0816, $0000
                dc.w    $0009, $0810, $0008
Offset_0x10EBC6:
                dc.w    $0002
                dc.w    $F801, $0018, $FFF8
                dc.w    $F801, $0818, $0000
Offset_0x10EBD4:
                dc.w    $0002
                dc.w    $F801, $001A, $FFF8
                dc.w    $F801, $081A, $0000
Offset_0x10EBE2:
                dc.w    $0001
                dc.w    $FC00, $001C, $FFFC
Offset_0x10EBEA:
                dc.w    $0001
                dc.w    $FC00, $001D, $FFFC                 
;-------------------------------------------------------------------------------  
Bubbles_Dyn_Script:                                            ; Offset_0x10EBF2
                dc.w    Offset_0x10EBFC-Bubbles_Dyn_Script
                dc.w    Offset_0x10EC02-Bubbles_Dyn_Script
                dc.w    Offset_0x10EC06-Bubbles_Dyn_Script
                dc.w    Offset_0x10EC0A-Bubbles_Dyn_Script
                dc.w    Offset_0x10EC10-Bubbles_Dyn_Script
Offset_0x10EBFC:
                dc.w    $0001
                dc.w    $000B, $00C2
Offset_0x10EC02:
                dc.w    $0000
                dc.w    $00FB
Offset_0x10EC06:
                dc.w    $0000
                dc.w    $01BB
Offset_0x10EC0A:
                dc.w    $0001
                dc.w    $027F, $0371
Offset_0x10EC10:
                dc.w    $0003
                dc.w    $0391, $03BF, $04B3, $04F1
;-------------------------------------------------------------------------------  
Bubbles_Mappings:                                              ; Offset_0x10EC1A
                dc.w    Offset_0x10EC24-Bubbles_Mappings
                dc.w    Offset_0x10EC32-Bubbles_Mappings
                dc.w    Offset_0x10EC3A-Bubbles_Mappings
                dc.w    Offset_0x10EC42-Bubbles_Mappings
                dc.w    Offset_0x10EC50-Bubbles_Mappings
Offset_0x10EC24:
                dc.w    $0002
                dc.w    $F40E, $0000, $FFEC
                dc.w    $F402, $000C, $000C
Offset_0x10EC32:
                dc.w    $0001
                dc.w    $F40E, $0000, $FFF0
Offset_0x10EC3A:
                dc.w    $0001
                dc.w    $F40E, $0000, $FFF0
Offset_0x10EC42:
                dc.w    $0002
                dc.w    $F00F, $0000, $FFEC
                dc.w    $F801, $0010, $000C
Offset_0x10EC50:
                dc.w    $0004
                dc.w    $E804, $0000, $FFFC
                dc.w    $F00F, $0002, $FFEC
                dc.w    $F003, $0012, $000C
                dc.w    $1004, $0016, $FFFC 
;------------------------------------------------------------------------------- 
Spiker_Mappings:                                               ; Offset_0x10EC6A
                dc.w    Offset_0x10EC7A-Spiker_Mappings
                dc.w    Offset_0x10EC8E-Spiker_Mappings
                dc.w    Offset_0x10ECA2-Spiker_Mappings
                dc.w    Offset_0x10ECB6-Spiker_Mappings
                dc.w    Offset_0x10ECBE-Spiker_Mappings
                dc.w    Offset_0x10ECC6-Spiker_Mappings
                dc.w    Offset_0x10ECCE-Spiker_Mappings
                dc.w    Offset_0x10ECD6-Spiker_Mappings
Offset_0x10EC7A:
                dc.w    $0003
                dc.w    $E807, $0000, $FFF0
                dc.w    $E807, $0000, $0000
                dc.w    $0804, $0017, $FFF8
Offset_0x10EC8E:
                dc.w    $0003
                dc.w    $F00A, $0008, $FFE8
                dc.w    $F00A, $0808, $0000
                dc.w    $0804, $0017, $FFF8
Offset_0x10ECA2:
                dc.w    $0003
                dc.w    $F809, $0011, $FFE8
                dc.w    $F809, $0811, $0000
                dc.w    $0804, $0017, $FFF8
Offset_0x10ECB6:
                dc.w    $0001
                dc.w    $FC04, $0019, $FFF8
Offset_0x10ECBE:
                dc.w    $0001
                dc.w    $FC04, $001B, $FFF8
Offset_0x10ECC6:
                dc.w    $0001
                dc.w    $FC00, $001D, $FFFC
Offset_0x10ECCE:
                dc.w    $0001
                dc.w    $FC00, $001E, $FFFC
Offset_0x10ECD6:
                dc.w    $0001
                dc.w    $0000, $FAD0, $0000
;------------------------------------------------------------------------------- 
Mantis_Mappings:                                               ; Offset_0x10ECDE
                dc.w    Offset_0x10ECEA-Mantis_Mappings
                dc.w    Offset_0x10ECFE-Mantis_Mappings
                dc.w    Offset_0x10ED12-Mantis_Mappings
                dc.w    Offset_0x10ED3E-Mantis_Mappings
                dc.w    Offset_0x10ED52-Mantis_Mappings
                dc.w    Offset_0x10ED5A-Mantis_Mappings
Offset_0x10ECEA:
                dc.w    $0003
                dc.w    $FA0A, $0009, $0000
                dc.w    $F40A, $0000, $FFF4
                dc.w    $FA0A, $0009, $FFF8
Offset_0x10ECFE:
                dc.w    $0003
                dc.w    $000A, $0012, $0002
                dc.w    $F40A, $0000, $FFF4
                dc.w    $000A, $0012, $FFFA
Offset_0x10ED12:
                dc.w    $0007
                dc.w    $0205, $001B, $0007
                dc.w    $1201, $001F, $000F
                dc.w    $2204, $0021, $0007
                dc.w    $F40A, $0000, $FFF4
                dc.w    $0205, $001B, $FFFF
                dc.w    $1201, $001F, $0007
                dc.w    $2204, $0021, $FFFF
Offset_0x10ED3E:
                dc.w    $0003
                dc.w    $F90A, $0009, $0000
                dc.w    $F40A, $0000, $FFF4
                dc.w    $F90A, $0009, $FFF8
Offset_0x10ED52:
                dc.w    $0001
                dc.w    $FC00, $0023, $FFFC
Offset_0x10ED5A:
                dc.w    $0001
                dc.w    $FC00, $0024, $FFFC
;-------------------------------------------------------------------------------   
Blaster_Mappings:                                              ; Offset_0x10ED62
                dc.w    Offset_0x10ED78-Blaster_Mappings
                dc.w    Offset_0x10ED92-Blaster_Mappings
                dc.w    Offset_0x10EDAC-Blaster_Mappings
                dc.w    Offset_0x10EDC6-Blaster_Mappings
                dc.w    Offset_0x10EDCE-Blaster_Mappings
                dc.w    Offset_0x10EDD6-Blaster_Mappings
                dc.w    Offset_0x10EDDE-Blaster_Mappings
                dc.w    Offset_0x10EDE6-Blaster_Mappings
                dc.w    Offset_0x10EDEE-Blaster_Mappings
                dc.w    Offset_0x10EDF6-Blaster_Mappings
                dc.w    Offset_0x10EDFE-Blaster_Mappings
Offset_0x10ED78:
                dc.w    $0004
                dc.w    $0400, $0000, $FFEC
                dc.w    $F40E, $0001, $FFF4
                dc.w    $070C, $000D, $FFF0
                dc.w    $EC06, $0011, $FFE4
Offset_0x10ED92:
                dc.w    $0004
                dc.w    $0300, $0000, $FFEC
                dc.w    $F30E, $0001, $FFF4
                dc.w    $070C, $000D, $FFF0
                dc.w    $EB06, $0011, $FFE4
Offset_0x10EDAC:
                dc.w    $0004
                dc.w    $0400, $0000, $FFEC
                dc.w    $F40E, $0001, $FFF4
                dc.w    $070C, $000D, $FFF0
                dc.w    $EC06, $0017, $FFE4
Offset_0x10EDC6:
                dc.w    $0001
                dc.w    $F805, $001D, $FFF8
Offset_0x10EDCE:
                dc.w    $0001
                dc.w    $F805, $0021, $FFF8
Offset_0x10EDD6:
                dc.w    $0001
                dc.w    $FC00, $0025, $FFFC
Offset_0x10EDDE:
                dc.w    $0001
                dc.w    $FC00, $0026, $FFFC
Offset_0x10EDE6:
                dc.w    $0001
                dc.w    $FC00, $0027, $FFFC
Offset_0x10EDEE:
                dc.w    $0001
                dc.w    $FC00, $0827, $FFFC
Offset_0x10EDF6:
                dc.w    $0001
                dc.w    $FC00, $1827, $FFFC
Offset_0x10EDFE:
                dc.w    $0001
                dc.w    $FC00, $1027, $FFFC 
;-------------------------------------------------------------------------------  
Penguinator_Dyn_Script:                                        ; Offset_0x10EE06
                dc.w    Offset_0x10EE18-Penguinator_Dyn_Script
                dc.w    Offset_0x10EE1C-Penguinator_Dyn_Script
                dc.w    Offset_0x10EE20-Penguinator_Dyn_Script
                dc.w    Offset_0x10EE24-Penguinator_Dyn_Script
                dc.w    Offset_0x10EE2A-Penguinator_Dyn_Script
                dc.w    Offset_0x10EE30-Penguinator_Dyn_Script
                dc.w    Offset_0x10EE36-Penguinator_Dyn_Script
                dc.w    Offset_0x10EE3C-Penguinator_Dyn_Script
                dc.w    Offset_0x10EE42-Penguinator_Dyn_Script
Offset_0x10EE18:
                dc.w    $0000
                dc.w    $000B
Offset_0x10EE1C:
                dc.w    $0000
                dc.w    $00CB
Offset_0x10EE20:
                dc.w    $0000
                dc.w    $018B
Offset_0x10EE24:
                dc.w    $0001
                dc.w    $0241, $026F
Offset_0x10EE2A:
                dc.w    $0001
                dc.w    $036B, $0421
Offset_0x10EE30:
                dc.w    $0001
                dc.w    $044B, $0502
Offset_0x10EE36:
                dc.w    $0001
                dc.w    $053B, $05F1
Offset_0x10EE3C:
                dc.w    $0001
                dc.w    $061B, $06D2
Offset_0x10EE42:
                dc.w    $0001
                dc.w    $070B, $07C2
;-------------------------------------------------------------------------------   
Penguinator_Mappings:                                          ; Offset_0x10EE48
                dc.w    Offset_0x10EE5A-Penguinator_Mappings
                dc.w    Offset_0x10EE62-Penguinator_Mappings
                dc.w    Offset_0x10EE6A-Penguinator_Mappings
                dc.w    Offset_0x10EE72-Penguinator_Mappings
                dc.w    Offset_0x10EE80-Penguinator_Mappings
                dc.w    Offset_0x10EE8E-Penguinator_Mappings
                dc.w    Offset_0x10EE9C-Penguinator_Mappings
                dc.w    Offset_0x10EEAA-Penguinator_Mappings
                dc.w    Offset_0x10EEB8-Penguinator_Mappings
Offset_0x10EE5A:
                dc.w    $0001
                dc.w    $F00B, $0000, $FFF4
Offset_0x10EE62:
                dc.w    $0001
                dc.w    $F00B, $0000, $FFF4
Offset_0x10EE6A:
                dc.w    $0001
                dc.w    $F00B, $0000, $FFF4
Offset_0x10EE72:
                dc.w    $0002
                dc.w    $F001, $0000, $FFEC
                dc.w    $F00F, $0002, $FFF4
Offset_0x10EE80:
                dc.w    $0002
                dc.w    $F40E, $0000, $FFEC
                dc.w    $FC01, $000C, $000C
Offset_0x10EE8E:
                dc.w    $0002
                dc.w    $F40E, $0000, $FFEC
                dc.w    $F402, $000C, $000C
Offset_0x10EE9C:
                dc.w    $0002
                dc.w    $F40E, $0000, $FFEC
                dc.w    $F401, $000C, $000C
Offset_0x10EEAA:
                dc.w    $0002
                dc.w    $F00E, $0000, $FFF0
                dc.w    $0808, $000C, $FFF0
Offset_0x10EEB8:
                dc.w    $0002
                dc.w    $EC0B, $0000, $FFF4
                dc.w    $0C08, $000C, $FFF4
;------------------------------------------------------------------------------- 
Snow_Dust_Mappings:                                            ; Offset_0x10EEC6
                dc.w    Offset_0x10EED2-Snow_Dust_Mappings
                dc.w    Offset_0x10EEDA-Snow_Dust_Mappings
                dc.w    Offset_0x10EEE2-Snow_Dust_Mappings
                dc.w    Offset_0x10EEEA-Snow_Dust_Mappings
                dc.w    Offset_0x10EEF2-Snow_Dust_Mappings
                dc.w    Offset_0x10EEFA-Snow_Dust_Mappings
Offset_0x10EED2:
                dc.w    $0001
                dc.w    $F800, $0000, $FFFC
Offset_0x10EEDA:
                dc.w    $0001
                dc.w    $F800, $0800, $FFFC
Offset_0x10EEE2:
                dc.w    $0001
                dc.w    $F001, $0001, $FFFC
Offset_0x10EEEA:
                dc.w    $0001
                dc.w    $F001, $0801, $FFFC
Offset_0x10EEF2:
                dc.w    $0001
                dc.w    $E802, $0003, $FFFC
Offset_0x10EEFA:
                dc.w    $0001
                dc.w    $E802, $0803, $FFFC  
;-------------------------------------------------------------------------------
Techno_Squeek_Mappings:                                        ; Offset_0x10EF02
                dc.w    Offset_0x10EF16-Techno_Squeek_Mappings
                dc.w    Offset_0x10EF1E-Techno_Squeek_Mappings
                dc.w    Offset_0x10EF26-Techno_Squeek_Mappings
                dc.w    Offset_0x10EF2E-Techno_Squeek_Mappings
                dc.w    Offset_0x10EF36-Techno_Squeek_Mappings
                dc.w    Offset_0x10EF3E-Techno_Squeek_Mappings
                dc.w    Offset_0x10EF46-Techno_Squeek_Mappings
                dc.w    Offset_0x10EF4E-Techno_Squeek_Mappings
                dc.w    Offset_0x10EF56-Techno_Squeek_Mappings
                dc.w    Offset_0x10EF5E-Techno_Squeek_Mappings
Offset_0x10EF16:
                dc.w    $0001
                dc.w    $F809, $0000, $FFF4
Offset_0x10EF1E:
                dc.w    $0001
                dc.w    $F809, $0006, $FFF4
Offset_0x10EF26:
                dc.w    $0001
                dc.w    $FC04, $000C, $FFF8
Offset_0x10EF2E:
                dc.w    $0001
                dc.w    $FC04, $000E, $FFF8
Offset_0x10EF36:
                dc.w    $0001
                dc.w    $FC04, $0010, $FFF8
Offset_0x10EF3E:
                dc.w    $0001
                dc.w    $F406, $0012, $FFF8
Offset_0x10EF46:
                dc.w    $0001
                dc.w    $F406, $0018, $FFF8
Offset_0x10EF4E:
                dc.w    $0001
                dc.w    $F801, $001E, $FFFC
Offset_0x10EF56:
                dc.w    $0001
                dc.w    $F801, $0020, $FFFC
Offset_0x10EF5E:
                dc.w    $0001
                dc.w    $F801, $0022, $FFFC
;------------------------------------------------------------------------------- 
Star_Pointer_Mappings:                                         ; Offset_0x10EF66
                dc.w    Offset_0x10EF6E-Star_Pointer_Mappings
                dc.w    Offset_0x10EF76-Star_Pointer_Mappings
                dc.w    Offset_0x10EF7E-Star_Pointer_Mappings
                dc.w    Offset_0x10EF86-Star_Pointer_Mappings
Offset_0x10EF6E:
                dc.w    $0001
                dc.w    $F805, $0000, $FFF8
Offset_0x10EF76:
                dc.w    $0001
                dc.w    $F805, $0004, $FFF8
Offset_0x10EF7E:
                dc.w    $0001
                dc.w    $F805, $0008, $FFF8
Offset_0x10EF86:
                dc.w    $0001
                dc.w    $F805, $000C, $FFF8
;------------------------------------------------------------------------------- 
Flame_Mobile_Mappings:                                         ; Offset_0x10EF8E
                dc.w    Offset_0x10EFFE-Flame_Mobile_Mappings
                dc.w    Offset_0x10F030-Flame_Mobile_Mappings
                dc.w    Offset_0x10F050-Flame_Mobile_Mappings
                dc.w    Offset_0x10F05E-Flame_Mobile_Mappings
                dc.w    Offset_0x10F066-Flame_Mobile_Mappings
                dc.w    Offset_0x10F06E-Flame_Mobile_Mappings
                dc.w    Offset_0x10F076-Flame_Mobile_Mappings
                dc.w    Offset_0x10F084-Flame_Mobile_Mappings
                dc.w    Offset_0x10F08C-Flame_Mobile_Mappings
                dc.w    Offset_0x10F094-Flame_Mobile_Mappings
                dc.w    Offset_0x10F09C-Flame_Mobile_Mappings
                dc.w    Offset_0x10F0A4-Flame_Mobile_Mappings
                dc.w    Offset_0x10F0B2-Flame_Mobile_Mappings
                dc.w    Offset_0x10F0C0-Flame_Mobile_Mappings
                dc.w    Offset_0x10F0CE-Flame_Mobile_Mappings
                dc.w    Offset_0x10F0DC-Flame_Mobile_Mappings
                dc.w    Offset_0x10F0DC-Flame_Mobile_Mappings
                dc.w    Offset_0x10F0EA-Flame_Mobile_Mappings
                dc.w    Offset_0x10F0F8-Flame_Mobile_Mappings
                dc.w    Offset_0x10F100-Flame_Mobile_Mappings
                dc.w    Offset_0x10F108-Flame_Mobile_Mappings
                dc.w    Offset_0x10F110-Flame_Mobile_Mappings
                dc.w    Offset_0x10F110-Flame_Mobile_Mappings
                dc.w    Offset_0x10F11E-Flame_Mobile_Mappings
                dc.w    Offset_0x10F12C-Flame_Mobile_Mappings
                dc.w    Offset_0x10F134-Flame_Mobile_Mappings
                dc.w    Offset_0x10F13C-Flame_Mobile_Mappings
                dc.w    Offset_0x10F144-Flame_Mobile_Mappings
                dc.w    Offset_0x10F176-Flame_Mobile_Mappings
                dc.w    Offset_0x10F1A8-Flame_Mobile_Mappings
                dc.w    Offset_0x10F1DA-Flame_Mobile_Mappings
                dc.w    Offset_0x10F1FA-Flame_Mobile_Mappings
                dc.w    Offset_0x10F21A-Flame_Mobile_Mappings
                dc.w    Offset_0x10F23A-Flame_Mobile_Mappings
                dc.w    Offset_0x10F248-Flame_Mobile_Mappings
                dc.w    Offset_0x10F256-Flame_Mobile_Mappings
                dc.w    Offset_0x10F264-Flame_Mobile_Mappings
                dc.w    Offset_0x10F2DE-Flame_Mobile_Mappings
                dc.w    Offset_0x10F2DE-Flame_Mobile_Mappings
                dc.w    Offset_0x10F2F2-Flame_Mobile_Mappings
                dc.w    Offset_0x10F306-Flame_Mobile_Mappings
                dc.w    Offset_0x10F31A-Flame_Mobile_Mappings
                dc.w    Offset_0x10F32E-Flame_Mobile_Mappings
                dc.w    Offset_0x10F342-Flame_Mobile_Mappings
                dc.w    Offset_0x10F344-Flame_Mobile_Mappings
                dc.w    Offset_0x10F3A6-Flame_Mobile_Mappings
                dc.w    Offset_0x10F3B4-Flame_Mobile_Mappings
                dc.w    Offset_0x10F3C2-Flame_Mobile_Mappings
                dc.w    Offset_0x10F3D0-Flame_Mobile_Mappings
                dc.w    Offset_0x10F3DE-Flame_Mobile_Mappings
                dc.w    Offset_0x10F458-Flame_Mobile_Mappings
                dc.w    Offset_0x10F460-Flame_Mobile_Mappings
                dc.w    Offset_0x10F468-Flame_Mobile_Mappings
                dc.w    Offset_0x10F470-Flame_Mobile_Mappings
                dc.w    Offset_0x10F478-Flame_Mobile_Mappings
                dc.w    Offset_0x10F480-Flame_Mobile_Mappings
Offset_0x10EFFE:
                dc.w    $0008
                dc.w    $E00F, $0000, $FFE0
                dc.w    $E802, $0010, $FFD8
                dc.w    $000D, $0013, $FFE0
                dc.w    $1009, $001B, $FFE8
                dc.w    $E00F, $0800, $0000
                dc.w    $E802, $0810, $0020
                dc.w    $000D, $0813, $0000
                dc.w    $1009, $081B, $0000
Offset_0x10F030:
                dc.w    $0005
                dc.w    $F402, $0021, $FFDC
                dc.w    $EC0F, $0024, $FFE4
                dc.w    $0C0C, $0034, $FFE4
                dc.w    $EC0F, $0038, $0004
                dc.w    $0C0C, $0048, $0004
Offset_0x10F050:
                dc.w    $0002
                dc.w    $FC04, $004C, $FFF0
                dc.w    $FC04, $084C, $0000
Offset_0x10F05E:
                dc.w    $0001
                dc.w    $F40A, $004E, $FFF4
Offset_0x10F066:
                dc.w    $0001
                dc.w    $F406, $0057, $FFF8
Offset_0x10F06E:
                dc.w    $0001
                dc.w    $F40A, $005D, $FFF4
Offset_0x10F076:
                dc.w    $0002
                dc.w    $FC04, $0066, $FFF0
                dc.w    $FC04, $0866, $0000
Offset_0x10F084:
                dc.w    $0001
                dc.w    $F805, $0068, $FFF8
Offset_0x10F08C:
                dc.w    $0001
                dc.w    $F805, $006C, $FFF8
Offset_0x10F094:
                dc.w    $0001
                dc.w    $F805, $0070, $FFF8
Offset_0x10F09C:
                dc.w    $0001
                dc.w    $F805, $0074, $FFF8
Offset_0x10F0A4:
                dc.w    $0002
                dc.w    $FC04, $1078, $FFF0
                dc.w    $FC04, $1878, $0000
Offset_0x10F0B2:
                dc.w    $0002
                dc.w    $FC04, $107A, $FFF0
                dc.w    $FC04, $187A, $0000
Offset_0x10F0C0:
                dc.w    $0002
                dc.w    $FC04, $107C, $FFF0
                dc.w    $FC04, $187C, $0000
Offset_0x10F0CE:
                dc.w    $0002
                dc.w    $FC04, $107E, $FFF0
                dc.w    $FC04, $187E, $0000
Offset_0x10F0DC:
                dc.w    $0002
                dc.w    $F40A, $0080, $FFF4
                dc.w    $F40A, $0089, $000C
Offset_0x10F0EA:
                dc.w    $0002
                dc.w    $F40A, $0080, $FFF4
                dc.w    $F40A, $0092, $000C
Offset_0x10F0F8:
                dc.w    $0001
                dc.w    $F805, $009B, $FFF8
Offset_0x10F100:
                dc.w    $0001
                dc.w    $F801, $009F, $FFFC
Offset_0x10F108:
                dc.w    $0001
                dc.w    $FC00, $00A1, $FFFC
Offset_0x10F110:
                dc.w    $0002
                dc.w    $F40A, $00A2, $FFF4
                dc.w    $DC0A, $00AB, $FFF4
Offset_0x10F11E:
                dc.w    $0002
                dc.w    $F40A, $00A2, $FFF4
                dc.w    $DC0A, $00B4, $FFF4
Offset_0x10F12C:
                dc.w    $0001
                dc.w    $F805, $00BD, $FFF8
Offset_0x10F134:
                dc.w    $0001
                dc.w    $FC04, $00C1, $FFF8
Offset_0x10F13C:
                dc.w    $0001
                dc.w    $FC00, $00C3, $FFFC
Offset_0x10F144:
                dc.w    $0008
                dc.w    $E00F, $00C4, $FFE0
                dc.w    $E802, $00D4, $FFD8
                dc.w    $000D, $0013, $FFE0
                dc.w    $1009, $001B, $FFE8
                dc.w    $E00F, $08C4, $0000
                dc.w    $E802, $08D4, $0020
                dc.w    $000D, $0813, $0000
                dc.w    $1009, $081B, $0000
Offset_0x10F176:
                dc.w    $0008
                dc.w    $E00F, $00D7, $FFE0
                dc.w    $E802, $00E7, $FFD8
                dc.w    $000D, $0013, $FFE0
                dc.w    $1009, $001B, $FFE8
                dc.w    $E00F, $08D7, $0000
                dc.w    $E802, $08E7, $0020
                dc.w    $000D, $0813, $0000
                dc.w    $1009, $081B, $0000
Offset_0x10F1A8:
                dc.w    $0008
                dc.w    $E00F, $00EA, $FFE0
                dc.w    $E802, $00FA, $FFD8
                dc.w    $000D, $0013, $FFE0
                dc.w    $1009, $001B, $FFE8
                dc.w    $E00F, $08EA, $0000
                dc.w    $E802, $08FA, $0020
                dc.w    $000D, $0813, $0000
                dc.w    $1009, $081B, $0000
Offset_0x10F1DA:
                dc.w    $0005
                dc.w    $F402, $00FD, $FFDC
                dc.w    $EC0F, $0100, $FFE4
                dc.w    $EC0F, $0110, $0004
                dc.w    $0C0C, $0034, $FFE4
                dc.w    $0C0C, $0048, $0004
Offset_0x10F1FA:
                dc.w    $0005
                dc.w    $F402, $0120, $FFDC
                dc.w    $EC0F, $0123, $FFE4
                dc.w    $EC0F, $0133, $0004
                dc.w    $0C0C, $0034, $FFE4
                dc.w    $0C0C, $0048, $0004
Offset_0x10F21A:
                dc.w    $0005
                dc.w    $F402, $0143, $FFDC
                dc.w    $EC0F, $0146, $FFE4
                dc.w    $EC0F, $0156, $0004
                dc.w    $0C0C, $0034, $FFE4
                dc.w    $0C0C, $0048, $0004
Offset_0x10F23A:
                dc.w    $0002
                dc.w    $F00B, $0166, $FFE8
                dc.w    $F00B, $0966, $0000
Offset_0x10F248:
                dc.w    $0002
                dc.w    $F00B, $0172, $FFE8
                dc.w    $F00B, $0972, $0000
Offset_0x10F256:
                dc.w    $0002
                dc.w    $F00A, $017E, $FFE8
                dc.w    $F00A, $097E, $0000
Offset_0x10F264:
                dc.w    $0014
                dc.w    $B80F, $0187, $FFEC
                dc.w    $B803, $0197, $000C
                dc.w    $D80C, $019B, $FFEC
                dc.w    $D800, $019F, $000C
                dc.w    $C00F, $0187, $FFE0
                dc.w    $C003, $0197, $0000
                dc.w    $E00C, $019B, $FFE0
                dc.w    $E000, $019F, $0000
                dc.w    $C00F, $0187, $FFF8
                dc.w    $C003, $0197, $0018
                dc.w    $E00C, $019B, $FFF8
                dc.w    $E000, $019F, $0018
                dc.w    $D80F, $0187, $FFD0
                dc.w    $D803, $0197, $FFF0
                dc.w    $F80C, $019B, $FFD0
                dc.w    $F800, $019F, $FFF0
                dc.w    $D80F, $0187, $0008
                dc.w    $D803, $0197, $0028
                dc.w    $F80C, $019B, $0008
                dc.w    $F800, $019F, $0028
Offset_0x10F2DE:
                dc.w    $0003
                dc.w    $F40E, $01A0, $FFF0
                dc.w    $E70D, $01AC, $FFF8
                dc.w    $F700, $01B4, $0008
Offset_0x10F2F2:
                dc.w    $0003
                dc.w    $F40E, $01A0, $FFF0
                dc.w    $E70D, $01B5, $FFF8
                dc.w    $F700, $01BD, $0008
Offset_0x10F306:
                dc.w    $0003
                dc.w    $F40E, $01A0, $FFF0
                dc.w    $E70D, $01BE, $FFF8
                dc.w    $F704, $01C6, $0008
Offset_0x10F31A:
                dc.w    $0003
                dc.w    $F40E, $01A0, $FFF0
                dc.w    $E70D, $01C8, $FFF8
                dc.w    $F704, $01D0, $0008
Offset_0x10F32E:
                dc.w    $0003
                dc.w    $F402, $0021, $FFDC
                dc.w    $EC0F, $0024, $FFE4
                dc.w    $0C0C, $0034, $FFE4
Offset_0x10F342:
                dc.w    $0000
Offset_0x10F344:
                dc.w    $0010
                dc.w    $C80F, $0187, $FFE0
                dc.w    $C803, $0197, $0000
                dc.w    $E80C, $019B, $FFE0
                dc.w    $E800, $019F, $0000
                dc.w    $C80F, $0187, $FFF8
                dc.w    $C803, $0197, $0018
                dc.w    $E80C, $019B, $FFF8
                dc.w    $E800, $019F, $0018
                dc.w    $E00F, $0187, $FFD0
                dc.w    $E003, $0197, $FFF0
                dc.w    $000C, $019B, $FFD0
                dc.w    $0000, $019F, $FFF0
                dc.w    $E00F, $0187, $0008
                dc.w    $E003, $0197, $0028
                dc.w    $000C, $019B, $0008
                dc.w    $0000, $019F, $0028
Offset_0x10F3A6:
                dc.w    $0002
                dc.w    $F40A, $1080, $FFF4
                dc.w    $F40A, $1089, $000C
Offset_0x10F3B4:
                dc.w    $0002
                dc.w    $F40A, $1080, $FFF4
                dc.w    $F40A, $1092, $000C
Offset_0x10F3C2:
                dc.w    $0002
                dc.w    $F40A, $00A2, $FFF4
                dc.w    $DC0A, $00AB, $FFF4
Offset_0x10F3D0:
                dc.w    $0002
                dc.w    $F40A, $00A2, $FFF4
                dc.w    $DC0A, $00B4, $FFF4
Offset_0x10F3DE:
                dc.w    $0014
                dc.w    $B80F, $01D2, $FFEC
                dc.w    $B803, $01E2, $000C
                dc.w    $D80C, $01E6, $FFEC
                dc.w    $D800, $01EA, $000C
                dc.w    $C00F, $01D2, $FFE0
                dc.w    $C003, $01E2, $0000
                dc.w    $E00C, $01E6, $FFE0
                dc.w    $E000, $01EA, $0000
                dc.w    $C00F, $01D2, $FFF8
                dc.w    $C003, $01E2, $0018
                dc.w    $E00C, $01E6, $FFF8
                dc.w    $E000, $01EA, $0018
                dc.w    $D80F, $01D2, $FFD8
                dc.w    $D803, $01E2, $FFF8
                dc.w    $F80C, $01E6, $FFD8
                dc.w    $F800, $01EA, $FFF8
                dc.w    $D80F, $01D2, $0000
                dc.w    $D803, $01E2, $0020
                dc.w    $F80C, $01E6, $0000
                dc.w    $F800, $01EA, $0020
Offset_0x10F458:
                dc.w    $0001
                dc.w    $F00F, $0000, $FFF0
Offset_0x10F460:
                dc.w    $0001
                dc.w    $F00F, $0800, $FFF0
Offset_0x10F468:
                dc.w    $0001
                dc.w    $F80D, $0013, $FFF0
Offset_0x10F470:
                dc.w    $0001
                dc.w    $F80D, $0813, $FFF0
Offset_0x10F478:
                dc.w    $0001
                dc.w    $F809, $001B, $FFF4
Offset_0x10F480:
                dc.w    $0001
                dc.w    $F809, $081B, $FFF4 
;-------------------------------------------------------------------------------    
Fire_Breath_Mappings:                                          ; Offset_0x10F488
                dc.w    Offset_0x10F4AC-Fire_Breath_Mappings
                dc.w    Offset_0x10F4D2-Fire_Breath_Mappings
                dc.w    Offset_0x10F4E6-Fire_Breath_Mappings
                dc.w    Offset_0x10F4FA-Fire_Breath_Mappings
                dc.w    Offset_0x10F502-Fire_Breath_Mappings
                dc.w    Offset_0x10F50A-Fire_Breath_Mappings
                dc.w    Offset_0x10F512-Fire_Breath_Mappings
                dc.w    Offset_0x10F51A-Fire_Breath_Mappings
                dc.w    Offset_0x10F528-Fire_Breath_Mappings
                dc.w    Offset_0x10F536-Fire_Breath_Mappings
                dc.w    Offset_0x10F544-Fire_Breath_Mappings
                dc.w    Offset_0x10F54C-Fire_Breath_Mappings
                dc.w    Offset_0x10F554-Fire_Breath_Mappings
                dc.w    Offset_0x10F568-Fire_Breath_Mappings
                dc.w    Offset_0x10F57C-Fire_Breath_Mappings
                dc.w    Offset_0x10F584-Fire_Breath_Mappings
                dc.w    Offset_0x10F58C-Fire_Breath_Mappings
                dc.w    Offset_0x10F594-Fire_Breath_Mappings
Offset_0x10F4AC:
                dc.w    $0006
                dc.w    $E004, $0000, $FFF8
                dc.w    $E80F, $0002, $FFE0
                dc.w    $080E, $0012, $FFE0
                dc.w    $E809, $001E, $0000
                dc.w    $F80F, $0024, $0000
                dc.w    $180C, $0034, $0000
Offset_0x10F4D2:
                dc.w    $0003
                dc.w    $F805, $0050, $FFD8
                dc.w    $F805, $0850, $001B
                dc.w    $F805, $0055, $FFF4
Offset_0x10F4E6:
                dc.w    $0003
                dc.w    $F800, $0054, $FFE0
                dc.w    $F800, $0854, $001B
                dc.w    $FA00, $0059, $FFF8
Offset_0x10F4FA:
                dc.w    $0001
                dc.w    $0004, $003E, $FFF8
Offset_0x10F502:
                dc.w    $0001
                dc.w    $F805, $0040, $FFF8
Offset_0x10F50A:
                dc.w    $0001
                dc.w    $F805, $0044, $FFF8
Offset_0x10F512:
                dc.w    $0001
                dc.w    $F801, $0038, $FFFC
Offset_0x10F51A:
                dc.w    $0002
                dc.w    $FC00, $0048, $FFF8
                dc.w    $FC00, $0848, $0000
Offset_0x10F528:
                dc.w    $0002
                dc.w    $F401, $0049, $FFF8
                dc.w    $F401, $0849, $0000
Offset_0x10F536:
                dc.w    $0002
                dc.w    $F400, $004B, $FFF8
                dc.w    $F400, $084B, $0000
Offset_0x10F544:
                dc.w    $0001
                dc.w    $F404, $004C, $FFF8
Offset_0x10F54C:
                dc.w    $0001
                dc.w    $F404, $004E, $FFF8
Offset_0x10F554:
                dc.w    $0003
                dc.w    $F805, $203A, $FFF8
                dc.w    $0800, $1048, $FFF8
                dc.w    $0800, $1848, $0000
Offset_0x10F568:
                dc.w    $0003
                dc.w    $F805, $203A, $FFF8
                dc.w    $0801, $1049, $FFF8
                dc.w    $0801, $1849, $0000
Offset_0x10F57C:
                dc.w    $0001
                dc.w    $F00F, $0002, $FFF0
Offset_0x10F584:
                dc.w    $0001
                dc.w    $F809, $001E, $FFF4
Offset_0x10F58C:
                dc.w    $0001
                dc.w    $F40E, $0012, $FFF0
Offset_0x10F594:
                dc.w    $0002
                dc.w    $EC0F, $0024, $FFF0
                dc.w    $0C0C, $0034, $FFF0    
;-------------------------------------------------------------------------------    
Small_Fire_Breath_Mappings:                                    ; Offset_0x10F5A2  
                dc.w    Offset_0x10F5A8-Small_Fire_Breath_Mappings
                dc.w    Offset_0x10F5B0-Small_Fire_Breath_Mappings
                dc.w    Offset_0x10F5B8-Small_Fire_Breath_Mappings
Offset_0x10F5A8:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x10F5B0:
                dc.w    $0001
                dc.w    $F805, $0009, $FFF8
Offset_0x10F5B8:
                dc.w    $0001
                dc.w    $FC00, $000D, $FFFC
;-------------------------------------------------------------------------------  
Drill_Mobile_Mappings:                                         ; Offset_0x10F5C0
                dc.w    Offset_0x10F622-Drill_Mobile_Mappings
                dc.w    Offset_0x10F642-Drill_Mobile_Mappings
                dc.w    Offset_0x10F650-Drill_Mobile_Mappings
                dc.w    Offset_0x10F65E-Drill_Mobile_Mappings
                dc.w    Offset_0x10F678-Drill_Mobile_Mappings
                dc.w    Offset_0x10F68C-Drill_Mobile_Mappings
                dc.w    Offset_0x10F694-Drill_Mobile_Mappings
                dc.w    Offset_0x10F69C-Drill_Mobile_Mappings
                dc.w    Offset_0x10F6A4-Drill_Mobile_Mappings
                dc.w    Offset_0x10F6B2-Drill_Mobile_Mappings
                dc.w    Offset_0x10F6BA-Drill_Mobile_Mappings
                dc.w    Offset_0x10F6C2-Drill_Mobile_Mappings
                dc.w    Offset_0x10F6CA-Drill_Mobile_Mappings
                dc.w    Offset_0x10F6D2-Drill_Mobile_Mappings
                dc.w    Offset_0x10F6DA-Drill_Mobile_Mappings
                dc.w    Offset_0x10F6E2-Drill_Mobile_Mappings
                dc.w    Offset_0x10F6F0-Drill_Mobile_Mappings
                dc.w    Offset_0x10F6FE-Drill_Mobile_Mappings
                dc.w    Offset_0x10F70C-Drill_Mobile_Mappings
                dc.w    Offset_0x10F714-Drill_Mobile_Mappings
                dc.w    Offset_0x10F722-Drill_Mobile_Mappings
                dc.w    Offset_0x10F72A-Drill_Mobile_Mappings
                dc.w    Offset_0x10F732-Drill_Mobile_Mappings
                dc.w    Offset_0x10F73A-Drill_Mobile_Mappings
                dc.w    Offset_0x10F742-Drill_Mobile_Mappings
                dc.w    Offset_0x10F74A-Drill_Mobile_Mappings
                dc.w    Offset_0x10F752-Drill_Mobile_Mappings
                dc.w    Offset_0x10F75A-Drill_Mobile_Mappings
                dc.w    Offset_0x10F762-Drill_Mobile_Mappings
                dc.w    Offset_0x10F76A-Drill_Mobile_Mappings
                dc.w    Offset_0x10F784-Drill_Mobile_Mappings
                dc.w    Offset_0x10F798-Drill_Mobile_Mappings
                dc.w    Offset_0x10F7B2-Drill_Mobile_Mappings
                dc.w    Offset_0x10F7C0-Drill_Mobile_Mappings
                dc.w    Offset_0x10F7CE-Drill_Mobile_Mappings
                dc.w    Offset_0x10F7DC-Drill_Mobile_Mappings
                dc.w    Offset_0x10F7EA-Drill_Mobile_Mappings
                dc.w    Offset_0x10F7F2-Drill_Mobile_Mappings
                dc.w    Offset_0x10F7FA-Drill_Mobile_Mappings
                dc.w    Offset_0x10F802-Drill_Mobile_Mappings
                dc.w    Offset_0x10F80A-Drill_Mobile_Mappings
                dc.w    Offset_0x10F812-Drill_Mobile_Mappings
                dc.w    Offset_0x10F81A-Drill_Mobile_Mappings
                dc.w    Offset_0x10F822-Drill_Mobile_Mappings
                dc.w    Offset_0x10F82A-Drill_Mobile_Mappings
                dc.w    Offset_0x10F832-Drill_Mobile_Mappings
                dc.w    Offset_0x10F83A-Drill_Mobile_Mappings
                dc.w    Offset_0x10F842-Drill_Mobile_Mappings
                dc.w    Offset_0x10F850-Drill_Mobile_Mappings
Offset_0x10F622:
                dc.w    $0005
                dc.w    $E00E, $0000, $FFFC
                dc.w    $F801, $000C, $FFDC
                dc.w    $F80F, $000E, $FFE4
                dc.w    $F80F, $001E, $0004
                dc.w    $180C, $002E, $FFF4
Offset_0x10F642:
                dc.w    $0002
                dc.w    $F006, $0032, $FFF0
                dc.w    $080C, $0038, $FFF0
Offset_0x10F650:
                dc.w    $0002
                dc.w    $F40E, $003C, $FFE8
                dc.w    $0404, $0048, $0008
Offset_0x10F65E:
                dc.w    $0004
                dc.w    $E80A, $004A, $0000
                dc.w    $F005, $0053, $FFF0
                dc.w    $000A, $0057, $FFE8
                dc.w    $0005, $0060, $0000
Offset_0x10F678:
                dc.w    $0003
                dc.w    $EC0C, $0064, $FFF0
                dc.w    $F40D, $0068, $FFF0
                dc.w    $040D, $0068, $FFF0
Offset_0x10F68C:
                dc.w    $0001
                dc.w    $F00F, $0070, $FFF0
Offset_0x10F694:
                dc.w    $0001
                dc.w    $F805, $0080, $FFF8
Offset_0x10F69C:
                dc.w    $0001
                dc.w    $F40A, $0084, $FFF4
Offset_0x10F6A4:
                dc.w    $0002
                dc.w    $F406, $008D, $FFF4
                dc.w    $FC00, $0093, $0004
Offset_0x10F6B2:
                dc.w    $0001
                dc.w    $F40A, $0094, $FFF4
Offset_0x10F6BA:
                dc.w    $0001
                dc.w    $F40A, $009D, $FFF4
Offset_0x10F6C2:
                dc.w    $0001
                dc.w    $F40A, $00A6, $FFF4
Offset_0x10F6CA:
                dc.w    $0001
                dc.w    $F40A, $00AF, $FFF4
Offset_0x10F6D2:
                dc.w    $0001
                dc.w    $F40A, $00B8, $FFF4
Offset_0x10F6DA:
                dc.w    $0001
                dc.w    $F40A, $00C1, $FFF4
Offset_0x10F6E2:
                dc.w    $0002
                dc.w    $F400, $00CA, $FFFC
                dc.w    $FC09, $00CB, $FFF4
Offset_0x10F6F0:
                dc.w    $0002
                dc.w    $F400, $00D1, $FFFC
                dc.w    $FC09, $00D2, $FFF4
Offset_0x10F6FE:
                dc.w    $0002
                dc.w    $F400, $00D8, $FFFC
                dc.w    $FC09, $00D9, $FFF4
Offset_0x10F70C:
                dc.w    $0001
                dc.w    $F40A, $00DF, $FFF4
Offset_0x10F714:
                dc.w    $0002
                dc.w    $F406, $00E8, $FFF4
                dc.w    $FC00, $00EE, $0004
Offset_0x10F722:
                dc.w    $0001
                dc.w    $F40A, $00EF, $FFF4
Offset_0x10F72A:
                dc.w    $0001
                dc.w    $F805, $00F8, $FFF8
Offset_0x10F732:
                dc.w    $0001
                dc.w    $F805, $00FC, $FFF8
Offset_0x10F73A:
                dc.w    $0001
                dc.w    $F805, $0100, $FFF8
Offset_0x10F742:
                dc.w    $0001
                dc.w    $F805, $0104, $FFF8
Offset_0x10F74A:
                dc.w    $0001
                dc.w    $F805, $0108, $FFF8
Offset_0x10F752:
                dc.w    $0001
                dc.w    $F40A, $010C, $FFF4
Offset_0x10F75A:
                dc.w    $0001
                dc.w    $F805, $0115, $FFF8
Offset_0x10F762:
                dc.w    $0001
                dc.w    $F402, $0119, $FFFC
Offset_0x10F76A:
                dc.w    $0004
                dc.w    $E00F, $0116, $FFE0
                dc.w    $E00F, $0126, $0000
                dc.w    $000F, $0136, $FFE0
                dc.w    $000F, $0146, $0000
Offset_0x10F784:
                dc.w    $0003
                dc.w    $0C0C, $1064, $FFF0
                dc.w    $FC0D, $1068, $FFF0
                dc.w    $EC0D, $1068, $FFF0
Offset_0x10F798:
                dc.w    $0004
                dc.w    $000A, $104A, $0000
                dc.w    $0005, $1053, $FFF0
                dc.w    $E80A, $1057, $FFE8
                dc.w    $F005, $1060, $0000
Offset_0x10F7B2:
                dc.w    $0002
                dc.w    $0400, $10CA, $FFFC
                dc.w    $F409, $10CB, $FFF4
Offset_0x10F7C0:
                dc.w    $0002
                dc.w    $0400, $10D1, $FFFC
                dc.w    $F409, $10D2, $FFF4
Offset_0x10F7CE:
                dc.w    $0002
                dc.w    $0400, $10D8, $FFFC
                dc.w    $F409, $10D9, $FFF4
Offset_0x10F7DC:
                dc.w    $0002
                dc.w    $F406, $108D, $FFF4
                dc.w    $FC00, $1093, $0004
Offset_0x10F7EA:
                dc.w    $0001
                dc.w    $F40A, $090C, $FFF4
Offset_0x10F7F2:
                dc.w    $0001
                dc.w    $F40A, $190C, $FFF4
Offset_0x10F7FA:
                dc.w    $0001
                dc.w    $F40A, $18AF, $FFF4
Offset_0x10F802:
                dc.w    $0001
                dc.w    $F40A, $18B8, $FFF4
Offset_0x10F80A:
                dc.w    $0001
                dc.w    $F40A, $18C1, $FFF4
Offset_0x10F812:
                dc.w    $0001
                dc.w    $FC08, $011C, $FFF4
Offset_0x10F81A:
                dc.w    $0001
                dc.w    $F805, $08F8, $FFF8
Offset_0x10F822:
                dc.w    $0001
                dc.w    $F805, $18F8, $FFF8
Offset_0x10F82A:
                dc.w    $0001
                dc.w    $FC08, $111C, $FFF4
Offset_0x10F832:
                dc.w    $0001
                dc.w    $F402, $0919, $FFFC
Offset_0x10F83A:
                dc.w    $0001
                dc.w    $F40E, $0000, $FFF0
Offset_0x10F842:
                dc.w    $0002
                dc.w    $F001, $000C, $FFEC
                dc.w    $F00F, $000E, $FFF4
Offset_0x10F850:
                dc.w    $0001
                dc.w    $F00F, $001E, $FFF0 
;------------------------------------------------------------------------------- 
Big_Shaker_Rocket_Twist_Lookup:                                ; Offset_0x10F858
                dc.b    $18, $18, $18, $18, $18, $18, $18, $18
                dc.b    $18, $17, $17, $17, $17, $17, $17, $16
                dc.b    $16, $16, $16, $15, $15, $15, $15, $14
                dc.b    $14, $14, $13, $13, $13, $12, $12, $11
                dc.b    $11, $11, $10, $10, $0F, $0F, $0E, $0E
                dc.b    $0D, $0D, $0C, $0C, $0B, $0B, $0A, $0A
                dc.b    $09, $09, $08, $08, $07, $06, $06, $05
                dc.b    $05, $04, $04, $03, $02, $02, $01, $01
                dc.b    $00, $FF, $FF, $FE, $FE, $FD, $FC, $FC
                dc.b    $FB, $FB, $FA, $FA, $F9, $F8, $F8, $F7
                dc.b    $F7, $F6, $F6, $F5, $F5, $F4, $F4, $F3
                dc.b    $F3, $F2, $F2, $F1, $F1, $F0, $F0, $EF
                dc.b    $EF, $EF, $EE, $EE, $ED, $ED, $ED, $EC
                dc.b    $EC, $EC, $EB, $EB, $EB, $EB, $EA, $EA
                dc.b    $EA, $EA, $E9, $E9, $E9, $E9, $E9, $E9
                dc.b    $E8, $E8, $E8, $E8, $E8, $E8, $E8, $E8  
;-------------------------------------------------------------------------------  
Hang_Mobile_Angle_Y_Lookup_Data:                               ; Offset_0x10F8D8
                dc.b    $00, $02, $04, $05, $07, $09, $0B, $0C
                dc.b    $0E, $10, $11, $13, $15, $17, $18, $1A
                dc.b    $1C, $1D, $1F, $20, $22, $23, $25, $27
                dc.b    $28, $29, $2B, $2C, $2E, $2F, $30, $32
                dc.b    $33, $34, $35, $37, $38, $39, $3A, $3B
                dc.b    $3C, $3D, $3E, $3F, $3F, $40, $41, $42
                dc.b    $43, $43, $44, $44, $45, $45, $46, $46
                dc.b    $47, $47, $47, $47, $48, $48, $48, $48  
;-------------------------------------------------------------------------------   
Hang_Mobile_Angle_Y_Lookup_Data_2:                             ; Offset_0x10F918
                dc.b    $00, $01, $02, $02, $03, $04, $05, $05
                dc.b    $06, $07, $08, $09, $09, $0A, $0B, $0C
                dc.b    $0C, $0D, $0E, $0E, $0F, $10, $10, $11
                dc.b    $12, $12, $13, $14, $14, $15, $15, $16
                dc.b    $17, $17, $18, $18, $19, $19, $1A, $1A
                dc.b    $1B, $1B, $1B, $1C, $1C, $1D, $1D, $1D
                dc.b    $1E, $1E, $1E, $1E, $1F, $1F, $1F, $1F
                dc.b    $1F, $20, $20, $20, $20, $20, $20, $20  
;-------------------------------------------------------------------------------   
Big_Shaker_Mappings:                                           ; Offset_0x10F958
                dc.w    Offset_0x10F9A0-Big_Shaker_Mappings
                dc.w    Offset_0x10F9BA-Big_Shaker_Mappings
                dc.w    Offset_0x10F9C2-Big_Shaker_Mappings
                dc.w    Offset_0x10F9CA-Big_Shaker_Mappings
                dc.w    Offset_0x10F9D2-Big_Shaker_Mappings
                dc.w    Offset_0x10F9E0-Big_Shaker_Mappings
                dc.w    Offset_0x10F9E8-Big_Shaker_Mappings
                dc.w    Offset_0x10F9F0-Big_Shaker_Mappings
                dc.w    Offset_0x10F9F8-Big_Shaker_Mappings
                dc.w    Offset_0x10FA00-Big_Shaker_Mappings
                dc.w    Offset_0x10FA08-Big_Shaker_Mappings
                dc.w    Offset_0x10FA10-Big_Shaker_Mappings
                dc.w    Offset_0x10FA18-Big_Shaker_Mappings
                dc.w    Offset_0x10FA20-Big_Shaker_Mappings
                dc.w    Offset_0x10FA28-Big_Shaker_Mappings
                dc.w    Offset_0x10FA30-Big_Shaker_Mappings
                dc.w    Offset_0x10FA38-Big_Shaker_Mappings
                dc.w    Offset_0x10FA40-Big_Shaker_Mappings
                dc.w    Offset_0x10FA48-Big_Shaker_Mappings
                dc.w    Offset_0x10FA56-Big_Shaker_Mappings
                dc.w    Offset_0x10FA5E-Big_Shaker_Mappings
                dc.w    Offset_0x10FA66-Big_Shaker_Mappings
                dc.w    Offset_0x10FA6E-Big_Shaker_Mappings
                dc.w    Offset_0x10FAB8-Big_Shaker_Mappings
                dc.w    Offset_0x10FAF0-Big_Shaker_Mappings
                dc.w    Offset_0x10FB28-Big_Shaker_Mappings
                dc.w    Offset_0x10FB28-Big_Shaker_Mappings
                dc.w    Offset_0x10FB2A-Big_Shaker_Mappings
                dc.w    Offset_0x10FB32-Big_Shaker_Mappings
                dc.w    Offset_0x10FB3A-Big_Shaker_Mappings
                dc.w    Offset_0x10FB42-Big_Shaker_Mappings
                dc.w    Offset_0x10FB4A-Big_Shaker_Mappings
                dc.w    Offset_0x10FB58-Big_Shaker_Mappings
                dc.w    Offset_0x10FB6C-Big_Shaker_Mappings
                dc.w    Offset_0x10FB80-Big_Shaker_Mappings
                dc.w    Offset_0x10FB8E-Big_Shaker_Mappings
Offset_0x10F9A0:
                dc.w    $0004
                dc.w    $E80A, $0000, $FFE8
                dc.w    $000A, $0009, $FFE8
                dc.w    $E80A, $0800, $0000
                dc.w    $000A, $0809, $0000
Offset_0x10F9BA:
                dc.w    $0001
                dc.w    $F805, $0012, $FFF8
Offset_0x10F9C2:
                dc.w    $0001
                dc.w    $F40A, $0016, $FFF4
Offset_0x10F9CA:
                dc.w    $0001
                dc.w    $F40A, $001F, $FFF4
Offset_0x10F9D2:
                dc.w    $0002
                dc.w    $F209, $0028, $FFF0
                dc.w    $000D, $002E, $FFF2
Offset_0x10F9E0:
                dc.w    $0001
                dc.w    $F00F, $0036, $FFF0
Offset_0x10F9E8:
                dc.w    $0001
                dc.w    $F00F, $0046, $FFF0
Offset_0x10F9F0:
                dc.w    $0001
                dc.w    $F40A, $0056, $FFF4
Offset_0x10F9F8:
                dc.w    $0001
                dc.w    $F40A, $005F, $FFF4
Offset_0x10FA00:
                dc.w    $0001
                dc.w    $F805, $0068, $FFF8
Offset_0x10FA08:
                dc.w    $0001
                dc.w    $F70A, $006C, $FFF7
Offset_0x10FA10:
                dc.w    $0001
                dc.w    $F70A, $0075, $FFF7
Offset_0x10FA18:
                dc.w    $0001
                dc.w    $F40A, $007E, $FFF4
Offset_0x10FA20:
                dc.w    $0001
                dc.w    $F60A, $0087, $FFF6
Offset_0x10FA28:
                dc.w    $0001
                dc.w    $F40A, $0090, $FFF4
Offset_0x10FA30:
                dc.w    $0001
                dc.w    $F40A, $0099, $FFF4
Offset_0x10FA38:
                dc.w    $0001
                dc.w    $F40A, $00A2, $FFF4
Offset_0x10FA40:
                dc.w    $0001
                dc.w    $F40A, $00AB, $FFF4
Offset_0x10FA48:
                dc.w    $0002
                dc.w    $F004, $00B4, $FFF8
                dc.w    $F80E, $00B6, $FFF0
Offset_0x10FA56:
                dc.w    $0001
                dc.w    $F40A, $00C2, $FFF4
Offset_0x10FA5E:
                dc.w    $0001
                dc.w    $F40A, $00CB, $FFF4
Offset_0x10FA66:
                dc.w    $0001
                dc.w    $F40A, $00D4, $FFF4
Offset_0x10FA6E:
                dc.w    $000C
                dc.w    $D804, $00DD, $FFF0
                dc.w    $D804, $08DD, $0000
                dc.w    $E006, $00DF, $FFF0
                dc.w    $E006, $08DF, $0000
                dc.w    $F806, $00DF, $FFF0
                dc.w    $F806, $08DF, $0000
                dc.w    $1006, $00DF, $FFF0
                dc.w    $1006, $08DF, $0000
                dc.w    $2804, $00EE, $FFF0
                dc.w    $2804, $08EE, $0000
                dc.w    $3008, $00F0, $FFE8
                dc.w    $3008, $08F0, $0000
Offset_0x10FAB8:
                dc.w    $0009
                dc.w    $D804, $00DD, $FFF0
                dc.w    $D804, $08DD, $0000
                dc.w    $E00A, $00E5, $FFF4
                dc.w    $F80A, $00E5, $FFF4
                dc.w    $100A, $00E5, $FFF4
                dc.w    $2804, $00EE, $FFF0
                dc.w    $2804, $08EE, $0000
                dc.w    $300C, $00F3, $FFEC
                dc.w    $3000, $00F7, $000C
Offset_0x10FAF0:
                dc.w    $0009
                dc.w    $D804, $08DD, $0000
                dc.w    $D804, $00DD, $FFF0
                dc.w    $E00A, $08E5, $FFF4
                dc.w    $F80A, $08E5, $FFF4
                dc.w    $100A, $08E5, $FFF4
                dc.w    $2804, $08EE, $0000
                dc.w    $2804, $00EE, $FFF0
                dc.w    $300C, $08F3, $FFF4
                dc.w    $3000, $08F7, $FFEC
Offset_0x10FB28:
                dc.w    $0000
Offset_0x10FB2A:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x10FB32:
                dc.w    $0001
                dc.w    $F40A, $0009, $FFF4
Offset_0x10FB3A:
                dc.w    $0001
                dc.w    $F40A, $0800, $FFF4
Offset_0x10FB42:
                dc.w    $0001
                dc.w    $F40A, $0809, $FFF4
Offset_0x10FB4A:
                dc.w    $0002
                dc.w    $FC04, $00DD, $FFF0
                dc.w    $FC04, $08DD, $0000
Offset_0x10FB58:
                dc.w    $0003
                dc.w    $E006, $00DF, $FFF8
                dc.w    $F806, $00DF, $FFF8
                dc.w    $1006, $00DF, $FFF8
Offset_0x10FB6C:
                dc.w    $0003
                dc.w    $E006, $08DF, $FFF8
                dc.w    $F806, $08DF, $FFF8
                dc.w    $1006, $08DF, $FFF8
Offset_0x10FB80:
                dc.w    $0002
                dc.w    $F804, $00EE, $FFFC
                dc.w    $0008, $00F0, $FFF4
Offset_0x10FB8E:
                dc.w    $0002
                dc.w    $F804, $08EE, $FFF4
                dc.w    $0008, $08F0, $FFF4
;-------------------------------------------------------------------------------  
Big_Shaker_Splash_Mappings:                                    ; Offset_0x10FB9C
                dc.w    Offset_0x10FBAE-Big_Shaker_Splash_Mappings
                dc.w    Offset_0x10FBB6-Big_Shaker_Splash_Mappings
                dc.w    Offset_0x10FBBE-Big_Shaker_Splash_Mappings
                dc.w    Offset_0x10FBC6-Big_Shaker_Splash_Mappings
                dc.w    Offset_0x10FBCE-Big_Shaker_Splash_Mappings
                dc.w    Offset_0x10FBD6-Big_Shaker_Splash_Mappings
                dc.w    Offset_0x10FBDE-Big_Shaker_Splash_Mappings
                dc.w    Offset_0x10FBE6-Big_Shaker_Splash_Mappings
                dc.w    Offset_0x10FBEE-Big_Shaker_Splash_Mappings
Offset_0x10FBAE:
                dc.w    $0001
                dc.w    $F209, $0000, $FFF0
Offset_0x10FBB6:
                dc.w    $0001
                dc.w    $E20F, $0000, $FFF0
Offset_0x10FBBE:
                dc.w    $0001
                dc.w    $E20F, $0000, $FFF0
Offset_0x10FBC6:
                dc.w    $0001
                dc.w    $E20F, $0000, $FFF0
Offset_0x10FBCE:
                dc.w    $0001
                dc.w    $E20F, $0000, $FFF0
Offset_0x10FBD6:
                dc.w    $0001
                dc.w    $EA0E, $0000, $FFF0
Offset_0x10FBDE:
                dc.w    $0001
                dc.w    $F20D, $0000, $FFF0
Offset_0x10FBE6:
                dc.w    $0001
                dc.w    $FA0C, $0000, $FFF0
Offset_0x10FBEE:
                dc.w    $0001
                dc.w    $FA0C, $0000, $FFF0
;-------------------------------------------------------------------------------  
Big_Shaker_Splash_Dyn_Script:                                  ; Offset_0x10FBF6
                dc.w    Offset_0x10FC08-Big_Shaker_Splash_Dyn_Script
                dc.w    Offset_0x10FC0C-Big_Shaker_Splash_Dyn_Script
                dc.w    Offset_0x10FC10-Big_Shaker_Splash_Dyn_Script
                dc.w    Offset_0x10FC14-Big_Shaker_Splash_Dyn_Script
                dc.w    Offset_0x10FC18-Big_Shaker_Splash_Dyn_Script
                dc.w    Offset_0x10FC1C-Big_Shaker_Splash_Dyn_Script
                dc.w    Offset_0x10FC20-Big_Shaker_Splash_Dyn_Script
                dc.w    Offset_0x10FC24-Big_Shaker_Splash_Dyn_Script
                dc.w    Offset_0x10FC28-Big_Shaker_Splash_Dyn_Script
Offset_0x10FC08:
                dc.w    $0000
                dc.w    $0005
Offset_0x10FC0C:
                dc.w    $0000
                dc.w    $006F
Offset_0x10FC10:
                dc.w    $0000
                dc.w    $016F
Offset_0x10FC14:
                dc.w    $0000
                dc.w    $026F
Offset_0x10FC18:
                dc.w    $0000
                dc.w    $036F
Offset_0x10FC1C:
                dc.w    $0000
                dc.w    $046B
Offset_0x10FC20:
                dc.w    $0000
                dc.w    $0527
Offset_0x10FC24:
                dc.w    $0000
                dc.w    $05A3
Offset_0x10FC28:
                dc.w    $0000
                dc.w    $05E3
;------------------------------------------------------------------------------- 
Freezer_Mobile_Mappings:                                       ; Offset_0x10FC2C
                dc.w    Offset_0x10FC5E-Freezer_Mobile_Mappings
                dc.w    Offset_0x10FC7E-Freezer_Mobile_Mappings
                dc.w    Offset_0x10FC8C-Freezer_Mobile_Mappings
                dc.w    Offset_0x10FCA6-Freezer_Mobile_Mappings
                dc.w    Offset_0x10FCB4-Freezer_Mobile_Mappings
                dc.w    Offset_0x10FCC2-Freezer_Mobile_Mappings
                dc.w    Offset_0x10FCCA-Freezer_Mobile_Mappings
                dc.w    Offset_0x10FCD2-Freezer_Mobile_Mappings
                dc.w    Offset_0x10FCDA-Freezer_Mobile_Mappings
                dc.w    Offset_0x10FCE2-Freezer_Mobile_Mappings
                dc.w    Offset_0x10FCEA-Freezer_Mobile_Mappings
                dc.w    Offset_0x10FCF2-Freezer_Mobile_Mappings
                dc.w    Offset_0x10FCFA-Freezer_Mobile_Mappings
                dc.w    Offset_0x10FD02-Freezer_Mobile_Mappings
                dc.w    Offset_0x10FD0A-Freezer_Mobile_Mappings
                dc.w    Offset_0x10FD12-Freezer_Mobile_Mappings
                dc.w    Offset_0x10FD1A-Freezer_Mobile_Mappings
                dc.w    Offset_0x10FD22-Freezer_Mobile_Mappings
                dc.w    Offset_0x10FD2A-Freezer_Mobile_Mappings
                dc.w    Offset_0x10FD32-Freezer_Mobile_Mappings
                dc.w    Offset_0x10FD3A-Freezer_Mobile_Mappings
                dc.w    Offset_0x10FD42-Freezer_Mobile_Mappings
                dc.w    Offset_0x10FD4A-Freezer_Mobile_Mappings
                dc.w    Offset_0x10FD52-Freezer_Mobile_Mappings
                dc.w    Offset_0x10FD5A-Freezer_Mobile_Mappings
Offset_0x10FC5E:
                dc.w    $0005
                dc.w    $F40F, $0000, $FFDC
                dc.w    $F40F, $0010, $FFFC
                dc.w    $140C, $0020, $FFEC
                dc.w    $1400, $0024, $000C
                dc.w    $1C00, $0025, $FFFC
Offset_0x10FC7E:
                dc.w    $0002
                dc.w    $EC07, $0026, $FFF8
                dc.w    $0C04, $002E, $FFF8
Offset_0x10FC8C:
                dc.w    $0004
                dc.w    $D403, $0030, $FFF8
                dc.w    $D403, $0830, $0000
                dc.w    $F40A, $0034, $FFE8
                dc.w    $F40A, $0834, $0000
Offset_0x10FCA6:
                dc.w    $0002
                dc.w    $F801, $003D, $FFEC
                dc.w    $F80D, $003F, $FFF4
Offset_0x10FCB4:
                dc.w    $0002
                dc.w    $F801, $003D, $FFEC
                dc.w    $F80D, $0047, $FFF4
Offset_0x10FCC2:
                dc.w    $0001
                dc.w    $F805, $004F, $FFF8
Offset_0x10FCCA:
                dc.w    $0001
                dc.w    $F40A, $0053, $FFF4
Offset_0x10FCD2:
                dc.w    $0001
                dc.w    $F40A, $005C, $FFF4
Offset_0x10FCDA:
                dc.w    $0001
                dc.w    $F40A, $0065, $FFF4
Offset_0x10FCE2:
                dc.w    $0001
                dc.w    $F40A, $006E, $FFF4
Offset_0x10FCEA:
                dc.w    $0001
                dc.w    $F809, $0077, $FFF4
Offset_0x10FCF2:
                dc.w    $0001
                dc.w    $F00F, $007D, $FFF0
Offset_0x10FCFA:
                dc.w    $0001
                dc.w    $F00F, $008D, $FFF0
Offset_0x10FD02:
                dc.w    $0001
                dc.w    $F00F, $009D, $FFF0
Offset_0x10FD0A:
                dc.w    $0001
                dc.w    $F00F, $00AD, $FFF0
Offset_0x10FD12:
                dc.w    $0001
                dc.w    $F00F, $00BD, $FFF0
Offset_0x10FD1A:
                dc.w    $0001
                dc.w    $FC00, $00CD, $FFFC
Offset_0x10FD22:
                dc.w    $0001
                dc.w    $F805, $00CE, $FFF8
Offset_0x10FD2A:
                dc.w    $0001
                dc.w    $F805, $00D2, $FFF8
Offset_0x10FD32:
                dc.w    $0001
                dc.w    $F805, $00D6, $FFF8
Offset_0x10FD3A:
                dc.w    $0001
                dc.w    $F805, $00DA, $FFF8
Offset_0x10FD42:
                dc.w    $0001
                dc.w    $F805, $00DE, $FFF8
Offset_0x10FD4A:
                dc.w    $0001
                dc.w    $F00F, $0000, $FFF0
Offset_0x10FD52:
                dc.w    $0001
                dc.w    $F00F, $0010, $FFF0
Offset_0x10FD5A:
                dc.w    $0003
                dc.w    $F80C, $0020, $FFEC
                dc.w    $F800, $0024, $000C
                dc.w    $0000, $0025, $FFFC  
;-------------------------------------------------------------------------------  
Bowling_Spin_Palette_Rotation_Script:                          ; Offset_0x10FD6E
                dc.w    $0004, $0000
                dc.l    Offset_0x10FD78
                dc.w    $0000
Offset_0x10FD78:                
                dc.w    (Palette_Row_1_Offset+$14)                       ; $ED34
                dc.w    $0002, $0EEE 
                dc.w    $0000, $0A22
                dc.w    $0000, $0020
                dc.w    $0005, $FFF8, $0014
                dc.w    (Palette_Row_1_Offset+$14)                       ; $ED34
                dc.w    $0002, $0EEE 
                dc.w    $0000, $0A22
                dc.w    $0000, $0020
                dc.w    $0003, $FFF8, $0014 
                dc.w    (Palette_Row_1_Offset+$14)                       ; $ED34
                dc.w    $0002, $0EEE 
                dc.w    $0000, $0A22
                dc.w    $0000, $0020
                dc.w    $0001, $FFF8, $0014
                dc.w    (Palette_Row_1_Offset+$14)                       ; $ED34
                dc.w    $000A, $0EEE
                dc.w    $0000, $0A22
                dc.w    $0000, $0020 
                dc.w    $0000, $FFF4    
;-------------------------------------------------------------------------------
Bowling_Spin_Sparks_Palette_Rotation_Script:                   ; Offset_0x10FDC6
                dc.w    $0004, $0000
                dc.l    Offset_0x10FDD0
                dc.w    $0000
Offset_0x10FDD0:                
                dc.w    (Palette_Row_1_Offset+$14)                       ; $ED34
                dc.w    $0030, $0EEE 
                dc.w    $0000, $0A22
                dc.w    $0000, $0020
                dc.w    $0000, $FFF8, $0014
                dc.w    (Palette_Row_1_Offset+$14)                       ; $ED34
                dc.w    $0002, $0EEE 
                dc.w    $0000, $0A22
                dc.w    $0000, $0020
                dc.w    $0001, $FFF8, $0014
                dc.w    (Palette_Row_1_Offset+$14)                       ; $ED34
                dc.w    $0003, $0EEE 
                dc.w    $0000, $0A22
                dc.w    $0000, $0020
                dc.w    $0003, $FFF8, $0014
                dc.w    (Palette_Row_1_Offset+$14)                       ; $ED34
                dc.w    $0001, $0020                      
                dc.w    $005F, $FFF8, $FF94  
;-------------------------------------------------------------------------------
Bowling_Spin_Open_Palette_Rotation_Script:                     ; Offset_0x10FE18
                dc.w    $0004, $0000
                dc.l    Offset_0x10FE22
                dc.w    $0000
Offset_0x10FE22:                
                dc.w    (Palette_Row_1_Offset+$14)                       ; $ED34
                dc.w    $0000, $0EEE 
                dc.w    $0000, $0A22
                dc.w    $0000, $0020
                dc.w    $0001, $0EEE
                dc.w    $0000, $0A22
                dc.w    $0000, $0020
                dc.w    $0007, $0EEE
                dc.w    $0000, $0A22
                dc.w    $0000, $0020
                dc.w    $0002, $FFFC    
;-------------------------------------------------------------------------------  
Bowling_Spin_Mappings:                                         ; Offset_0x10FE4C
                dc.w    Offset_0x10FE78-Bowling_Spin_Mappings
                dc.w    Offset_0x10FE9E-Bowling_Spin_Mappings
                dc.w    Offset_0x10FF00-Bowling_Spin_Mappings
                dc.w    Offset_0x10FF62-Bowling_Spin_Mappings
                dc.w    Offset_0x10FFC4-Bowling_Spin_Mappings
                dc.w    Offset_0x110026-Bowling_Spin_Mappings
                dc.w    Offset_0x110088-Bowling_Spin_Mappings
                dc.w    Offset_0x1100EA-Bowling_Spin_Mappings
                dc.w    Offset_0x1100FE-Bowling_Spin_Mappings
                dc.w    Offset_0x110112-Bowling_Spin_Mappings
                dc.w    Offset_0x110126-Bowling_Spin_Mappings
                dc.w    Offset_0x110134-Bowling_Spin_Mappings
                dc.w    Offset_0x110142-Bowling_Spin_Mappings
                dc.w    Offset_0x11014A-Bowling_Spin_Mappings
                dc.w    Offset_0x110152-Bowling_Spin_Mappings
                dc.w    Offset_0x11015A-Bowling_Spin_Mappings
                dc.w    Offset_0x110168-Bowling_Spin_Mappings
                dc.w    Offset_0x110176-Bowling_Spin_Mappings
                dc.w    Offset_0x110178-Bowling_Spin_Mappings
                dc.w    Offset_0x110180-Bowling_Spin_Mappings
                dc.w    Offset_0x110188-Bowling_Spin_Mappings
                dc.w    Offset_0x110196-Bowling_Spin_Mappings
Offset_0x10FE78:
                dc.w    $0006
                dc.w    $F00F, $0000, $FFE0
                dc.w    $F00F, $0800, $0000
                dc.w    $1005, $0010, $FFF0
                dc.w    $1005, $0810, $0000
                dc.w    $1C05, $0014, $FFF0
                dc.w    $1C05, $0814, $0000
Offset_0x10FE9E:
                dc.w    $0010
                dc.w    $F00F, $0000, $FFE0
                dc.w    $F00F, $0800, $0000
                dc.w    $0A04, $0023, $FFF0
                dc.w    $0A04, $0823, $0000
                dc.w    $0C04, $0023, $FFF0
                dc.w    $0C04, $0823, $0000
                dc.w    $0E04, $0023, $FFF0
                dc.w    $0E04, $0823, $0000
                dc.w    $1004, $0023, $FFF0
                dc.w    $1004, $0823, $0000
                dc.w    $1204, $0023, $FFF0
                dc.w    $1204, $0823, $0000
                dc.w    $1404, $0023, $FFF0
                dc.w    $1404, $0823, $0000
                dc.w    $1C05, $0014, $FFF0
                dc.w    $1C05, $0814, $0000
Offset_0x10FF00:
                dc.w    $0010
                dc.w    $F00F, $0000, $FFE0
                dc.w    $F00F, $0800, $0000
                dc.w    $0B04, $0023, $FFF0
                dc.w    $0B04, $0823, $0000
                dc.w    $0E04, $0023, $FFF0
                dc.w    $0E04, $0823, $0000
                dc.w    $1104, $0023, $FFF0
                dc.w    $1104, $0823, $0000
                dc.w    $1404, $0023, $FFF0
                dc.w    $1404, $0823, $0000
                dc.w    $1704, $0023, $FFF0
                dc.w    $1704, $0823, $0000
                dc.w    $1A04, $0023, $FFF0
                dc.w    $1A04, $0823, $0000
                dc.w    $2205, $0014, $FFF0
                dc.w    $2205, $0814, $0000
Offset_0x10FF62:
                dc.w    $0010
                dc.w    $F00F, $0000, $FFE0
                dc.w    $F00F, $0800, $0000
                dc.w    $0C04, $0023, $FFF0
                dc.w    $0C04, $0823, $0000
                dc.w    $1004, $0023, $FFF0
                dc.w    $1004, $0823, $0000
                dc.w    $1404, $0023, $FFF0
                dc.w    $1404, $0823, $0000
                dc.w    $1804, $0023, $FFF0
                dc.w    $1804, $0823, $0000
                dc.w    $1C04, $0023, $FFF0
                dc.w    $1C04, $0823, $0000
                dc.w    $2004, $0023, $FFF0
                dc.w    $2004, $0823, $0000
                dc.w    $2805, $0014, $FFF0
                dc.w    $2805, $0814, $0000
Offset_0x10FFC4:
                dc.w    $0010
                dc.w    $F00F, $0000, $FFE0
                dc.w    $F00F, $0800, $0000
                dc.w    $0D04, $0023, $FFF0
                dc.w    $0D04, $0823, $0000
                dc.w    $1204, $0023, $FFF0
                dc.w    $1204, $0823, $0000
                dc.w    $1704, $0023, $FFF0
                dc.w    $1704, $0823, $0000
                dc.w    $1C04, $0023, $FFF0
                dc.w    $1C04, $0823, $0000
                dc.w    $2104, $0023, $FFF0
                dc.w    $2104, $0823, $0000
                dc.w    $2604, $0023, $FFF0
                dc.w    $2604, $0823, $0000
                dc.w    $2E05, $0014, $FFF0
                dc.w    $2E05, $0814, $0000
Offset_0x110026:
                dc.w    $0010
                dc.w    $F00F, $0000, $FFE0
                dc.w    $F00F, $0800, $0000
                dc.w    $0E04, $0023, $FFF0
                dc.w    $0E04, $0823, $0000
                dc.w    $1404, $0023, $FFF0
                dc.w    $1404, $0823, $0000
                dc.w    $1A04, $0023, $FFF0
                dc.w    $1A04, $0823, $0000
                dc.w    $2004, $0023, $FFF0
                dc.w    $2004, $0823, $0000
                dc.w    $2604, $0023, $FFF0
                dc.w    $2604, $0823, $0000
                dc.w    $2C04, $0023, $FFF0
                dc.w    $2C04, $0823, $0000
                dc.w    $3405, $0014, $FFF0
                dc.w    $3405, $0814, $0000
Offset_0x110088:
                dc.w    $0010
                dc.w    $F00F, $0000, $FFE0
                dc.w    $F00F, $0800, $0000
                dc.w    $0F04, $0023, $FFF0
                dc.w    $0F04, $0823, $0000
                dc.w    $1604, $0023, $FFF0
                dc.w    $1604, $0823, $0000
                dc.w    $1D04, $0023, $FFF0
                dc.w    $1D04, $0823, $0000
                dc.w    $2404, $0023, $FFF0
                dc.w    $2404, $0823, $0000
                dc.w    $2B04, $0023, $FFF0
                dc.w    $2B04, $0823, $0000
                dc.w    $3204, $0023, $FFF0
                dc.w    $3204, $0823, $0000
                dc.w    $3A05, $0014, $FFF0
                dc.w    $3A05, $0814, $0000
Offset_0x1100EA:
                dc.w    $0003
                dc.w    $F808, $0018, $FFE8
                dc.w    $F808, $0818, $0000
                dc.w    $0008, $0020, $FFF4
Offset_0x1100FE:
                dc.w    $0003
                dc.w    $F80C, $001B, $FFEC
                dc.w    $F800, $001F, $000C
                dc.w    $0008, $0820, $FFF4
Offset_0x110112:
                dc.w    $0003
                dc.w    $F80C, $081B, $FFF4
                dc.w    $F800, $081F, $FFEC
                dc.w    $0008, $0020, $FFF4
Offset_0x110126:
                dc.w    $0002
                dc.w    $E801, $0025, $FFF4
                dc.w    $F80B, $0027, $FFF4
Offset_0x110134:
                dc.w    $0002
                dc.w    $E803, $0033, $FFF4
                dc.w    $F807, $0037, $FFFC
Offset_0x110142:
                dc.w    $0001
                dc.w    $F805, $003F, $FFF8
Offset_0x11014A:
                dc.w    $0001
                dc.w    $F805, $0043, $FFF8
Offset_0x110152:
                dc.w    $0001
                dc.w    $F805, $0047, $FFF8
Offset_0x11015A:
                dc.w    $0002
                dc.w    $E801, $0825, $0004
                dc.w    $F80B, $0827, $FFF4
Offset_0x110168:
                dc.w    $0002
                dc.w    $E803, $0833, $0004
                dc.w    $F807, $0837, $FFF4
Offset_0x110176:
                dc.w    $0000
Offset_0x110178:
                dc.w    $0001
                dc.w    $F00F, $0000, $FFF0
Offset_0x110180:
                dc.w    $0001
                dc.w    $F00F, $0800, $FFF0
Offset_0x110188:
                dc.w    $0002
                dc.w    $FC04, $0023, $FFF0
                dc.w    $FC04, $0823, $0000
Offset_0x110196:
                dc.w    $0002
                dc.w    $F805, $0014, $FFF0
                dc.w    $F805, $0814, $0000 
;------------------------------------------------------------------------------- 
Big_Icedus_Palette_Rotation_Script:                            ; Offset_0x1101A4
                dc.w    $0004, $0000
                dc.l    Offset_0x1101AE
                dc.w    $0000
Offset_0x1101AE:                
                dc.w    (Palette_Row_1_Offset+$14)                       ; $ED34
                dc.w    $0002, $0222
                dc.w    $0007, $0C22
                dc.w    $0000, $0EE0
                dc.w    $0000, $FFF8, $0014
                dc.w    (Palette_Row_1_Offset+$14)                       ; $ED34
                dc.w    $0002, $0222
                dc.w    $0005, $0C22
                dc.w    $0000, $0EE0
                dc.w    $0000, $FFF8, $0014 
                dc.w    (Palette_Row_1_Offset+$14)                       ; $ED34
                dc.w    $0002, $0222
                dc.w    $0003, $0C22
                dc.w    $0000, $0EE0
                dc.w    $0000, $FFF8, $0014 
                dc.w    (Palette_Row_1_Offset+$14)                       ; $ED34
                dc.w    $0002, $0222
                dc.w    $0001, $0C22
                dc.w    $0000, $0EE0
                dc.w    $0000, $FFF8, $0014 
                dc.w    (Palette_Row_1_Offset+$14)                       ; $ED34
                dc.w    $0000, $0222
                dc.w    $0000, $0C22
                dc.w    $0000, $0EE0
                dc.w    $0000, $FFFC
;-------------------------------------------------------------------------------  
Big_Icedus_Palette_Rotation_Script_2:                          ; Offset_0x110210
                dc.w    $0004, $0000
                dc.l    Offset_0x11021A
                dc.w    $0000
Offset_0x11021A:                
                dc.w    (Palette_Row_1_Offset+$14)                       ; $ED34
                dc.w    $0002, $0222
                dc.w    $0001, $0C22
                dc.w    $0000, $0EE0
                dc.w    $0000, $FFF8, $0014 
                dc.w    (Palette_Row_1_Offset+$14)                       ; $ED34
                dc.w    $0002, $0222
                dc.w    $0003, $0C22
                dc.w    $0000, $0EE0
                dc.w    $0000, $FFF8, $0014
                dc.w    (Palette_Row_1_Offset+$14)                       ; $ED34
                dc.w    $0002, $0222
                dc.w    $0005, $0C22
                dc.w    $0000, $0EE0
                dc.w    $0000, $FFF8, $0014
                dc.w    (Palette_Row_1_Offset+$14)                       ; $ED34
                dc.w    $0002, $0222
                dc.w    $0007, $0C22
                dc.w    $0000, $0EE0
                dc.w    $0000, $FFF8, $0014 
                dc.w    (Palette_Row_1_Offset+$14)                       ; $ED34
                dc.w    $0004, $0222
                dc.w    $0009, $0C22
                dc.w    $0000, $0EE0
                dc.w    $0000, $FFF4                
;-------------------------------------------------------------------------------  
Big_Icedus_Angle_Lookup:                                       ; Offset_0x11027C
                dc.b    $00, $01, $02, $04, $05, $06, $07, $08
                dc.b    $09, $0B, $0C, $0D, $0E, $0F, $10, $11
                dc.b    $12, $13, $15, $16, $17, $18, $19, $1A
                dc.b    $1B, $1C, $1D, $1E, $1E, $1F, $20, $21
                dc.b    $22, $23, $24, $24, $25, $26, $27, $27
                dc.b    $28, $29, $29, $2A, $2A, $2B, $2B, $2C
                dc.b    $2C, $2D, $2D, $2E, $2E, $2E, $2F, $2F
                dc.b    $2F, $2F, $2F, $30, $30, $30, $30, $30   
;-------------------------------------------------------------------------------
Big_Icedus_Mappings:                                           ; Offset_0x1102BC
                dc.w    Offset_0x1102DA-Big_Icedus_Mappings
                dc.w    Offset_0x1102F4-Big_Icedus_Mappings
                dc.w    Offset_0x1102FC-Big_Icedus_Mappings
                dc.w    Offset_0x110304-Big_Icedus_Mappings
                dc.w    Offset_0x110312-Big_Icedus_Mappings
                dc.w    Offset_0x110320-Big_Icedus_Mappings
                dc.w    Offset_0x110328-Big_Icedus_Mappings
                dc.w    Offset_0x110330-Big_Icedus_Mappings
                dc.w    Offset_0x110338-Big_Icedus_Mappings
                dc.w    Offset_0x110340-Big_Icedus_Mappings
                dc.w    Offset_0x110348-Big_Icedus_Mappings
                dc.w    Offset_0x110350-Big_Icedus_Mappings
                dc.w    Offset_0x110358-Big_Icedus_Mappings
                dc.w    Offset_0x110360-Big_Icedus_Mappings
                dc.w    Offset_0x110368-Big_Icedus_Mappings
Offset_0x1102DA:
                dc.w    $0004
                dc.w    $E80A, $0000, $FFE8
                dc.w    $000A, $0009, $FFE8
                dc.w    $E80A, $0800, $0000
                dc.w    $000A, $0809, $0000
Offset_0x1102F4:
                dc.w    $0001
                dc.w    $F805, $0012, $FFF8
Offset_0x1102FC:
                dc.w    $0001
                dc.w    $F805, $0016, $FFF8
Offset_0x110304:
                dc.w    $0002
                dc.w    $FC04, $001A, $FFF0
                dc.w    $FC04, $081A, $0000
Offset_0x110312:
                dc.w    $0002
                dc.w    $F402, $001C, $FFF8
                dc.w    $F402, $081C, $0000
Offset_0x110320:
                dc.w    $0001
                dc.w    $F40A, $001F, $FFF4
Offset_0x110328:
                dc.w    $0001
                dc.w    $F40A, $0028, $FFF4
Offset_0x110330:
                dc.w    $0001
                dc.w    $F40A, $0031, $FFF4
Offset_0x110338:
                dc.w    $0001
                dc.w    $F40A, $003A, $FFF4
Offset_0x110340:
                dc.w    $0001
                dc.w    $F805, $0812, $FFF8
Offset_0x110348:
                dc.w    $0001
                dc.w    $F805, $0816, $FFF8
Offset_0x110350:
                dc.w    $0001
                dc.w    $F40A, $0000, $FFF4
Offset_0x110358:
                dc.w    $0001
                dc.w    $F40A, $0800, $FFF4
Offset_0x110360:
                dc.w    $0001
                dc.w    $F40A, $0009, $FFF4
Offset_0x110368:
                dc.w    $0001
                dc.w    $F40A, $0809, $FFF4  
;------------------------------------------------------------------------------- 
Hang_Mobile_Mappings:                                          ; Offset_0x110370
                dc.w    Offset_0x110390-Hang_Mobile_Mappings
                dc.w    Offset_0x1103B6-Hang_Mobile_Mappings
                dc.w    Offset_0x1103D0-Hang_Mobile_Mappings
                dc.w    Offset_0x1103D8-Hang_Mobile_Mappings
                dc.w    Offset_0x1103E0-Hang_Mobile_Mappings
                dc.w    Offset_0x1103E8-Hang_Mobile_Mappings
                dc.w    Offset_0x1103F0-Hang_Mobile_Mappings
                dc.w    Offset_0x1103F8-Hang_Mobile_Mappings
                dc.w    Offset_0x110400-Hang_Mobile_Mappings
                dc.w    Offset_0x11040E-Hang_Mobile_Mappings
                dc.w    Offset_0x11041C-Hang_Mobile_Mappings
                dc.w    Offset_0x110424-Hang_Mobile_Mappings
                dc.w    Offset_0x11042C-Hang_Mobile_Mappings
                dc.w    Offset_0x110434-Hang_Mobile_Mappings
                dc.w    Offset_0x11043C-Hang_Mobile_Mappings
                dc.w    Offset_0x110444-Hang_Mobile_Mappings
Offset_0x110390:
                dc.w    $0006
                dc.w    $F801, $0000, $FFD8
                dc.w    $F80F, $0002, $FFE0
                dc.w    $180D, $0012, $FFE0
                dc.w    $F801, $0800, $0020
                dc.w    $F80F, $0802, $0000
                dc.w    $180D, $0812, $0000
Offset_0x1103B6:
                dc.w    $0004
                dc.w    $E007, $001A, $FFF0
                dc.w    $E007, $081A, $0000
                dc.w    $0007, $101A, $FFF0
                dc.w    $0007, $181A, $0000
Offset_0x1103D0:
                dc.w    $0001
                dc.w    $F805, $0022, $FFF8
Offset_0x1103D8:
                dc.w    $0001
                dc.w    $F809, $0026, $FFF4
Offset_0x1103E0:
                dc.w    $0001
                dc.w    $F801, $002C, $FFFC
Offset_0x1103E8:
                dc.w    $0001
                dc.w    $F801, $002E, $FFFC
Offset_0x1103F0:
                dc.w    $0001
                dc.w    $F801, $082C, $FFFC
Offset_0x1103F8:
                dc.w    $0001
                dc.w    $F801, $082E, $FFFC
Offset_0x110400:
                dc.w    $0002
                dc.w    $F001, $0000, $FFEC
                dc.w    $F00F, $0002, $FFF4
Offset_0x11040E:
                dc.w    $0002
                dc.w    $F001, $0800, $000C
                dc.w    $F00F, $0802, $FFEC
Offset_0x11041C:
                dc.w    $0001
                dc.w    $F80D, $0012, $FFF0
Offset_0x110424:
                dc.w    $0001
                dc.w    $F80D, $0812, $FFF0
Offset_0x11042C:
                dc.w    $0001
                dc.w    $F007, $001A, $FFF8
Offset_0x110434:
                dc.w    $0001
                dc.w    $F007, $081A, $FFF8
Offset_0x11043C:
                dc.w    $0001
                dc.w    $F007, $101A, $FFF8
Offset_0x110444:
                dc.w    $0001
                dc.w    $F007, $181A, $FFF8 
;-------------------------------------------------------------------------------   
Screw_Mobile_Mappings:                                         ; Offset_0x11044C
                dc.w    Offset_0x1104B0-Screw_Mobile_Mappings
                dc.w    Offset_0x1104CA-Screw_Mobile_Mappings
                dc.w    Offset_0x1104D2-Screw_Mobile_Mappings
                dc.w    Offset_0x1104E6-Screw_Mobile_Mappings
                dc.w    Offset_0x1104FA-Screw_Mobile_Mappings
                dc.w    Offset_0x110508-Screw_Mobile_Mappings
                dc.w    Offset_0x11051C-Screw_Mobile_Mappings
                dc.w    Offset_0x110524-Screw_Mobile_Mappings
                dc.w    Offset_0x11052C-Screw_Mobile_Mappings
                dc.w    Offset_0x110534-Screw_Mobile_Mappings
                dc.w    Offset_0x11053C-Screw_Mobile_Mappings
                dc.w    Offset_0x110544-Screw_Mobile_Mappings
                dc.w    Offset_0x11054C-Screw_Mobile_Mappings
                dc.w    Offset_0x110554-Screw_Mobile_Mappings
                dc.w    Offset_0x11055C-Screw_Mobile_Mappings
                dc.w    Offset_0x110564-Screw_Mobile_Mappings
                dc.w    Offset_0x11056C-Screw_Mobile_Mappings
                dc.w    Offset_0x110574-Screw_Mobile_Mappings
                dc.w    Offset_0x11057C-Screw_Mobile_Mappings
                dc.w    Offset_0x110584-Screw_Mobile_Mappings
                dc.w    Offset_0x11058C-Screw_Mobile_Mappings
                dc.w    Offset_0x110594-Screw_Mobile_Mappings
                dc.w    Offset_0x1105A2-Screw_Mobile_Mappings
                dc.w    Offset_0x1105B0-Screw_Mobile_Mappings
                dc.w    Offset_0x1105BE-Screw_Mobile_Mappings
                dc.w    Offset_0x1105C6-Screw_Mobile_Mappings
                dc.w    Offset_0x1105CE-Screw_Mobile_Mappings
                dc.w    Offset_0x1105D6-Screw_Mobile_Mappings
                dc.w    Offset_0x1105DE-Screw_Mobile_Mappings
                dc.w    Offset_0x1105E6-Screw_Mobile_Mappings
                dc.w    Offset_0x1105EE-Screw_Mobile_Mappings
                dc.w    Offset_0x1105F6-Screw_Mobile_Mappings
                dc.w    Offset_0x1105FE-Screw_Mobile_Mappings
                dc.w    Offset_0x11060C-Screw_Mobile_Mappings
                dc.w    Offset_0x11061A-Screw_Mobile_Mappings
                dc.w    Offset_0x110628-Screw_Mobile_Mappings
                dc.w    Offset_0x110630-Screw_Mobile_Mappings
                dc.w    Offset_0x11063E-Screw_Mobile_Mappings
                dc.w    Offset_0x11064C-Screw_Mobile_Mappings
                dc.w    Offset_0x11065A-Screw_Mobile_Mappings
                dc.w    Offset_0x11066E-Screw_Mobile_Mappings
                dc.w    Offset_0x110682-Screw_Mobile_Mappings
                dc.w    Offset_0x110696-Screw_Mobile_Mappings
                dc.w    Offset_0x1106B0-Screw_Mobile_Mappings
                dc.w    Offset_0x1106CA-Screw_Mobile_Mappings
                dc.w    Offset_0x1106E4-Screw_Mobile_Mappings
                dc.w    Offset_0x110704-Screw_Mobile_Mappings
                dc.w    Offset_0x110724-Screw_Mobile_Mappings
                dc.w    Offset_0x110744-Screw_Mobile_Mappings
                dc.w    Offset_0x11074C-Screw_Mobile_Mappings
Offset_0x1104B0:
                dc.w    $0004
                dc.w    $FD05, $0000, $FFF4
                dc.w    $FD0D, $0004, $0004
                dc.w    $0D04, $000C, $0004
                dc.w    $0D09, $000E, $0014
Offset_0x1104CA:
                dc.w    $0001
                dc.w    $FC08, $0014, $FFF4
Offset_0x1104D2:
                dc.w    $0003
                dc.w    $FC08, $0017, $FFE4
                dc.w    $FC0C, $001A, $FFFC
                dc.w    $0404, $002A, $FFF8
Offset_0x1104E6:
                dc.w    $0003
                dc.w    $FC04, $001E, $FFEC
                dc.w    $FC08, $0020, $FFFC
                dc.w    $0404, $082A, $FFF8
Offset_0x1104FA:
                dc.w    $0002
                dc.w    $FC04, $0023, $FFF8
                dc.w    $0404, $002A, $FFF8
Offset_0x110508:
                dc.w    $0003
                dc.w    $FC04, $0025, $FFEC
                dc.w    $FC08, $0027, $FFFC
                dc.w    $0404, $082A, $FFF8
Offset_0x11051C:
                dc.w    $0001
                dc.w    $F805, $002C, $FFF8
Offset_0x110524:
                dc.w    $0001
                dc.w    $F805, $0030, $FFF8
Offset_0x11052C:
                dc.w    $0001
                dc.w    $F809, $0034, $FFF4
Offset_0x110534:
                dc.w    $0001
                dc.w    $F00A, $003A, $FFF4
Offset_0x11053C:
                dc.w    $0001
                dc.w    $E80B, $0043, $FFF4
Offset_0x110544:
                dc.w    $0001
                dc.w    $E80B, $004F, $FFF4
Offset_0x11054C:
                dc.w    $0001
                dc.w    $E80B, $005B, $FFF4
Offset_0x110554:
                dc.w    $0001
                dc.w    $F80D, $0067, $FFF0
Offset_0x11055C:
                dc.w    $0001
                dc.w    $F80D, $006F, $FFF0
Offset_0x110564:
                dc.w    $0001
                dc.w    $F80D, $0077, $FFF0
Offset_0x11056C:
                dc.w    $0001
                dc.w    $F80D, $007F, $FFF0
Offset_0x110574:
                dc.w    $0001
                dc.w    $F80D, $0087, $FFF0
Offset_0x11057C:
                dc.w    $0001
                dc.w    $F80D, $008F, $FFF0
Offset_0x110584:
                dc.w    $0001
                dc.w    $F00F, $0097, $FFF0
Offset_0x11058C:
                dc.w    $0001
                dc.w    $F00F, $00A7, $FFF0
Offset_0x110594:
                dc.w    $0002
                dc.w    $F40E, $00B7, $FFEC
                dc.w    $F402, $00C3, $000C
Offset_0x1105A2:
                dc.w    $0002
                dc.w    $F40E, $00C6, $FFEC
                dc.w    $F402, $00D2, $000C
Offset_0x1105B0:
                dc.w    $0002
                dc.w    $F40E, $00D5, $FFEC
                dc.w    $F402, $00E1, $000C
Offset_0x1105BE:
                dc.w    $0001
                dc.w    $FC08, $00E4, $FFF4
Offset_0x1105C6:
                dc.w    $0001
                dc.w    $F409, $00E7, $FFF4
Offset_0x1105CE:
                dc.w    $0001
                dc.w    $FC0C, $00ED, $FFF0
Offset_0x1105D6:
                dc.w    $0001
                dc.w    $F809, $0834, $FFF4
Offset_0x1105DE:
                dc.w    $0001
                dc.w    $F00A, $083A, $FFF4
Offset_0x1105E6:
                dc.w    $0001
                dc.w    $E80B, $0843, $FFF4
Offset_0x1105EE:
                dc.w    $0001
                dc.w    $E80B, $084F, $FFF4
Offset_0x1105F6:
                dc.w    $0001
                dc.w    $E80B, $085B, $FFF4
Offset_0x1105FE:
                dc.w    $0002
                dc.w    $F40E, $08B7, $FFF4
                dc.w    $F402, $08C3, $FFEC
Offset_0x11060C:
                dc.w    $0002
                dc.w    $F40E, $08C6, $FFF4
                dc.w    $F402, $08D2, $FFEC
Offset_0x11061A:
                dc.w    $0002
                dc.w    $F40E, $08D5, $FFF4
                dc.w    $F402, $08E1, $FFEC
Offset_0x110628:
                dc.w    $0001
                dc.w    $FC0C, $08ED, $FFF0
Offset_0x110630:
                dc.w    $0002
                dc.w    $F00D, $006F, $FFF0
                dc.w    $000D, $0067, $FFF0
Offset_0x11063E:
                dc.w    $0002
                dc.w    $F00D, $007F, $FFF0
                dc.w    $000D, $0077, $FFF0
Offset_0x11064C:
                dc.w    $0002
                dc.w    $F00D, $008F, $FFF0
                dc.w    $000D, $0087, $FFF0
Offset_0x11065A:
                dc.w    $0003
                dc.w    $E80D, $0067, $FFF0
                dc.w    $F80D, $006F, $FFF0
                dc.w    $080D, $0067, $FFF0
Offset_0x11066E:
                dc.w    $0003
                dc.w    $E80D, $0077, $FFF0
                dc.w    $F80D, $007F, $FFF0
                dc.w    $080D, $0077, $FFF0
Offset_0x110682:
                dc.w    $0003
                dc.w    $E80D, $0087, $FFF0
                dc.w    $F80D, $008F, $FFF0
                dc.w    $080D, $0087, $FFF0
Offset_0x110696:
                dc.w    $0004
                dc.w    $E00D, $006F, $FFF0
                dc.w    $F00D, $0067, $FFF0
                dc.w    $000D, $006F, $FFF0
                dc.w    $100D, $0067, $FFF0
Offset_0x1106B0:
                dc.w    $0004
                dc.w    $E00D, $007F, $FFF0
                dc.w    $F00D, $0077, $FFF0
                dc.w    $000D, $007F, $FFF0
                dc.w    $100D, $0077, $FFF0
Offset_0x1106CA:
                dc.w    $0004
                dc.w    $E00D, $008F, $FFF0
                dc.w    $F00D, $0087, $FFF0
                dc.w    $000D, $008F, $FFF0
                dc.w    $100D, $0087, $FFF0
Offset_0x1106E4:
                dc.w    $0005
                dc.w    $D80D, $0067, $FFF0
                dc.w    $E80D, $006F, $FFF0
                dc.w    $F80D, $0067, $FFF0
                dc.w    $080D, $006F, $FFF0
                dc.w    $180D, $0067, $FFF0
Offset_0x110704:
                dc.w    $0005
                dc.w    $D80D, $0077, $FFF0
                dc.w    $E80D, $007F, $FFF0
                dc.w    $F80D, $0077, $FFF0
                dc.w    $080D, $007F, $FFF0
                dc.w    $180D, $0077, $FFF0
Offset_0x110724:
                dc.w    $0005
                dc.w    $D80D, $0087, $FFF0
                dc.w    $E80D, $008F, $FFF0
                dc.w    $F80D, $0087, $FFF0
                dc.w    $080D, $008F, $FFF0
                dc.w    $180D, $0087, $FFF0
Offset_0x110744:
                dc.w    $0001
                dc.w    $F409, $0834, $FFF4
Offset_0x11074C:
                dc.w    $0000
;------------------------------------------------------------------------------- 
Drill_Mobile_Debris_Mappings:                                  ; Offset_0x11074E
                dc.w    Offset_0x110756-Drill_Mobile_Debris_Mappings
                dc.w    Offset_0x11075E-Drill_Mobile_Debris_Mappings
                dc.w    Offset_0x110766-Drill_Mobile_Debris_Mappings
                dc.w    Offset_0x11076E-Drill_Mobile_Debris_Mappings
Offset_0x110756:
                dc.w    $0001
                dc.w    $F809, $0000, $FFF4
Offset_0x11075E:
                dc.w    $0001
                dc.w    $F805, $0006, $FFF8
Offset_0x110766:
                dc.w    $0001
                dc.w    $FC00, $000A, $FFFC
Offset_0x11076E:
                dc.w    $0001
                dc.w    $F809, $0800, $FFF4
;------------------------------------------------------------------------------- 
Barrier_Eggman_Mappings:                                       ; Offset_0x110776
                dc.w    Offset_0x11078C-Barrier_Eggman_Mappings
                dc.w    Offset_0x11079A-Barrier_Eggman_Mappings
                dc.w    Offset_0x1107A8-Barrier_Eggman_Mappings
                dc.w    Offset_0x1107B6-Barrier_Eggman_Mappings
                dc.w    Offset_0x1107C4-Barrier_Eggman_Mappings
                dc.w    Offset_0x1107F6-Barrier_Eggman_Mappings
                dc.w    Offset_0x110804-Barrier_Eggman_Mappings
                dc.w    Offset_0x110842-Barrier_Eggman_Mappings
                dc.w    Offset_0x110880-Barrier_Eggman_Mappings
                dc.w    Offset_0x1108BE-Barrier_Eggman_Mappings
                dc.w    Offset_0x1108C6-Barrier_Eggman_Mappings
Offset_0x11078C:
                dc.w    $0002
                dc.w    $F40A, $0000, $FFE8
                dc.w    $F40A, $0800, $0000
Offset_0x11079A:
                dc.w    $0002
                dc.w    $F801, $0009, $FFF8
                dc.w    $F801, $0809, $0000
Offset_0x1107A8:
                dc.w    $0002
                dc.w    $EC0A, $000B, $FFF4
                dc.w    $0409, $0014, $FFF4
Offset_0x1107B6:
                dc.w    $0002
                dc.w    $EC0A, $001A, $FFF4
                dc.w    $0409, $0023, $FFF4
Offset_0x1107C4:
                dc.w    $0008
                dc.w    $C003, $0029, $FFF8
                dc.w    $C003, $0829, $0000
                dc.w    $E003, $0029, $FFF8
                dc.w    $E003, $0829, $0000
                dc.w    $0003, $0029, $FFF8
                dc.w    $0003, $0829, $0000
                dc.w    $2003, $0029, $FFF8
                dc.w    $2003, $0829, $0000
Offset_0x1107F6:
                dc.w    $0002
                dc.w    $FC08, $002D, $FFE8
                dc.w    $FC08, $082D, $0000
Offset_0x110804:
                dc.w    $000A
                dc.w    $C003, $0030, $FFF8
                dc.w    $C003, $0830, $0000
                dc.w    $E003, $0030, $FFF8
                dc.w    $E003, $0830, $0000
                dc.w    $0003, $0030, $FFF8
                dc.w    $0003, $0830, $0000
                dc.w    $2003, $0030, $FFF8
                dc.w    $2003, $0830, $0000
                dc.w    $4003, $0030, $FFF8
                dc.w    $4003, $0830, $0000
Offset_0x110842:
                dc.w    $000A
                dc.w    $C007, $0034, $FFF0
                dc.w    $C007, $0834, $0000
                dc.w    $E007, $0034, $FFF0
                dc.w    $E007, $0834, $0000
                dc.w    $0007, $0034, $FFF0
                dc.w    $0007, $0834, $0000
                dc.w    $2007, $0034, $FFF0
                dc.w    $2007, $0834, $0000
                dc.w    $4007, $0034, $FFF0
                dc.w    $4007, $0834, $0000
Offset_0x110880:
                dc.w    $000A
                dc.w    $C00B, $003C, $FFE8
                dc.w    $C00B, $083C, $0000
                dc.w    $E00B, $003C, $FFE8
                dc.w    $E00B, $083C, $0000
                dc.w    $000B, $003C, $FFE8
                dc.w    $000B, $083C, $0000
                dc.w    $200B, $003C, $FFE8
                dc.w    $200B, $083C, $0000
                dc.w    $400B, $003C, $FFE8
                dc.w    $400B, $083C, $0000
Offset_0x1108BE:
                dc.w    $0001
                dc.w    $FC04, $0048, $FFF8
Offset_0x1108C6:
                dc.w    $0000
;-------------------------------------------------------------------------------  
Robotnik_Stand_Mappings:                                       ; Offset_0x1108C8
                dc.w    Offset_0x1108D0-Robotnik_Stand_Mappings
                dc.w    Offset_0x1108EA-Robotnik_Stand_Mappings
                dc.w    Offset_0x110904-Robotnik_Stand_Mappings
                dc.w    Offset_0x11091E-Robotnik_Stand_Mappings
Offset_0x1108D0:
                dc.w    $0004
                dc.w    $E40D, $0000, $FFF0
                dc.w    $F40E, $0008, $FFF0
                dc.w    $0C04, $0014, $FFF8
                dc.w    $140C, $0016, $FFF0
Offset_0x1108EA:
                dc.w    $0004
                dc.w    $E408, $001A, $FFF8
                dc.w    $EC0F, $001D, $FFF0
                dc.w    $0C04, $002D, $FFF8
                dc.w    $140C, $002F, $FFF0
Offset_0x110904:
                dc.w    $0004
                dc.w    $E40D, $0033, $FFF0
                dc.w    $F40E, $0008, $FFF0
                dc.w    $0C04, $0014, $FFF8
                dc.w    $140C, $0016, $FFF0
Offset_0x11091E:
                dc.w    $0004
                dc.w    $E40D, $003B, $FFF0
                dc.w    $F40E, $0008, $FFF0
                dc.w    $0C04, $0014, $FFF8
                dc.w    $140C, $0016, $FFF0   
;-------------------------------------------------------------------------------  
Crushing_Column_Mappings:                                      ; Offset_0x110938
                dc.w    Offset_0x110954-Crushing_Column_Mappings
                dc.w    Offset_0x1109B6-Crushing_Column_Mappings
                dc.w    Offset_0x110A3C-Crushing_Column_Mappings
                dc.w    Offset_0x110A92-Crushing_Column_Mappings
                dc.w    Offset_0x110AA0-Crushing_Column_Mappings
                dc.w    Offset_0x110AA8-Crushing_Column_Mappings
                dc.w    Offset_0x110AB0-Crushing_Column_Mappings
                dc.w    Offset_0x110AE2-Crushing_Column_Mappings
                dc.w    Offset_0x110AF6-Crushing_Column_Mappings
                dc.w    Offset_0x110B04-Crushing_Column_Mappings
                dc.w    Offset_0x110B24-Crushing_Column_Mappings
                dc.w    Offset_0x110B32-Crushing_Column_Mappings
                dc.w    Offset_0x110B34-Crushing_Column_Mappings
                dc.w    Offset_0x110B8A-Crushing_Column_Mappings
Offset_0x110954:
                dc.w    $0010
                dc.w    $D40D, $0000, $FFD0
                dc.w    $D40D, $0008, $FFF0
                dc.w    $D40D, $0010, $0010
                dc.w    $E40D, $0018, $FFD0
                dc.w    $E40D, $0018, $FFF0
                dc.w    $E40D, $0020, $0010
                dc.w    $F40D, $0028, $FFD0
                dc.w    $F40D, $1828, $FFF0
                dc.w    $F40D, $0030, $0010
                dc.w    $040D, $0828, $FFD0
                dc.w    $040D, $0028, $FFF0
                dc.w    $040D, $0030, $0010
                dc.w    $140D, $0038, $FFD0
                dc.w    $140D, $0040, $FFF0
                dc.w    $140C, $0048, $0010
                dc.w    $240C, $0048, $FFD0
Offset_0x1109B6:
                dc.w    $0016
                dc.w    $DC0D, $0000, $FFB0
                dc.w    $DC0D, $0008, $FFD0
                dc.w    $DC0D, $0808, $FFF0
                dc.w    $DC0D, $0800, $0010
                dc.w    $DC0D, $0000, $0030
                dc.w    $EC0D, $0018, $FFB0
                dc.w    $EC0D, $0018, $FFD0
                dc.w    $EC0D, $0018, $FFF0
                dc.w    $EC0D, $0018, $0010
                dc.w    $EC0D, $0818, $0030
                dc.w    $FC0D, $0028, $FFB0
                dc.w    $FC0D, $0028, $FFD0
                dc.w    $FC0D, $0828, $FFF0
                dc.w    $FC0D, $0828, $0010
                dc.w    $FC0D, $0028, $0030
                dc.w    $0C0D, $0840, $FFB0
                dc.w    $0C0D, $0838, $FFD0
                dc.w    $0C0D, $0038, $FFF0
                dc.w    $0C0D, $0040, $0010
                dc.w    $0C0D, $0840, $0030
                dc.w    $1C0C, $0848, $FFD0
                dc.w    $1C0C, $0048, $FFF0
Offset_0x110A3C:
                dc.w    $000E
                dc.w    $900F, $004C, $FFE0
                dc.w    $900F, $084C, $0000
                dc.w    $B00F, $005C, $FFE0
                dc.w    $B00F, $006C, $0000
                dc.w    $D00F, $186C, $FFE0
                dc.w    $D00F, $185C, $0000
                dc.w    $F00F, $005C, $FFE0
                dc.w    $F00F, $006C, $0000
                dc.w    $100F, $186C, $FFE0
                dc.w    $100F, $185C, $0000
                dc.w    $300F, $005C, $FFE0
                dc.w    $300F, $006C, $0000
                dc.w    $500F, $104C, $FFE0
                dc.w    $500F, $184C, $0000
Offset_0x110A92:
                dc.w    $0002
                dc.w    $F00F, $004C, $FFE0
                dc.w    $F00F, $084C, $0000
Offset_0x110AA0:
                dc.w    $0001
                dc.w    $F007, $008C, $FFF8
Offset_0x110AA8:
                dc.w    $0001
                dc.w    $F00B, $0094, $FFF4
Offset_0x110AB0:
                dc.w    $0008
                dc.w    $C00F, $005C, $FFE0
                dc.w    $C00F, $006C, $0000
                dc.w    $E00F, $186C, $FFE0
                dc.w    $E00F, $185C, $0000
                dc.w    $000F, $005C, $FFE0
                dc.w    $000F, $006C, $0000
                dc.w    $200F, $186C, $FFE0
                dc.w    $200F, $185C, $0000
Offset_0x110AE2:
                dc.w    $0003
                dc.w    $E007, $00A0, $FFF0
                dc.w    $E007, $08A0, $0000
                dc.w    $0007, $008C, $FFF8
Offset_0x110AF6:
                dc.w    $0002
                dc.w    $F40D, $0038, $FFF0
                dc.w    $040C, $0048, $FFF0
Offset_0x110B04:
                dc.w    $0005
                dc.w    $DC0D, $00AC, $FFF0
                dc.w    $EC0D, $0018, $FFF0
                dc.w    $FC0D, $0028, $FFF0
                dc.w    $0C0D, $0038, $FFF0
                dc.w    $1C0C, $0048, $FFF0
Offset_0x110B24:
                dc.w    $0002
                dc.w    $F00F, $007C, $FFE0
                dc.w    $F00F, $187C, $0000
Offset_0x110B32:
                dc.w    $0000
Offset_0x110B34:
                dc.w    $000E
                dc.w    $900F, $004C, $FFE0
                dc.w    $900F, $084C, $0000
                dc.w    $B00F, $005C, $FFE0
                dc.w    $B00F, $006C, $0000
                dc.w    $D00F, $186C, $FFE0
                dc.w    $D00F, $185C, $0000
                dc.w    $F00F, $005C, $FFE0
                dc.w    $F00F, $006C, $0000
                dc.w    $100F, $186C, $FFE0
                dc.w    $100F, $185C, $0000
                dc.w    $300F, $005C, $FFE0
                dc.w    $300F, $006C, $0000
                dc.w    $500F, $186C, $FFE0
                dc.w    $500F, $185C, $0000
Offset_0x110B8A:
                dc.w    $0008
                dc.w    $C00F, $186C, $FFE0
                dc.w    $C00F, $185C, $0000
                dc.w    $E00F, $005C, $FFE0
                dc.w    $E00F, $006C, $0000
                dc.w    $000F, $186C, $FFE0
                dc.w    $000F, $185C, $0000
                dc.w    $200F, $104C, $FFE0
                dc.w    $200F, $184C, $0000  
;------------------------------------------------------------------------------- 
Iz_Platform_Mappings:                                          ; Offset_0x110BBC
                dc.w    Offset_0x110C0C-Iz_Platform_Mappings
                dc.w    Offset_0x110C26-Iz_Platform_Mappings
                dc.w    Offset_0x110C34-Iz_Platform_Mappings
                dc.w    Offset_0x110C4E-Iz_Platform_Mappings
                dc.w    Offset_0x110C5C-Iz_Platform_Mappings
                dc.w    Offset_0x110C64-Iz_Platform_Mappings
                dc.w    Offset_0x110C72-Iz_Platform_Mappings
                dc.w    Offset_0x110C80-Iz_Platform_Mappings
                dc.w    Offset_0x110C9A-Iz_Platform_Mappings
                dc.w    Offset_0x110CA2-Iz_Platform_Mappings
                dc.w    Offset_0x110CAA-Iz_Platform_Mappings
                dc.w    Offset_0x110CB2-Iz_Platform_Mappings
                dc.w    Offset_0x110CBA-Iz_Platform_Mappings
                dc.w    Offset_0x110CC2-Iz_Platform_Mappings
                dc.w    Offset_0x110CCA-Iz_Platform_Mappings
                dc.w    Offset_0x110CD2-Iz_Platform_Mappings
                dc.w    Offset_0x110CDA-Iz_Platform_Mappings
                dc.w    Offset_0x110CE2-Iz_Platform_Mappings
                dc.w    Offset_0x110CEA-Iz_Platform_Mappings
                dc.w    Offset_0x110CF2-Iz_Platform_Mappings
                dc.w    Offset_0x110CFA-Iz_Platform_Mappings
                dc.w    Offset_0x110D02-Iz_Platform_Mappings
                dc.w    Offset_0x110D0A-Iz_Platform_Mappings
                dc.w    Offset_0x110D12-Iz_Platform_Mappings
                dc.w    Offset_0x110D1A-Iz_Platform_Mappings
                dc.w    Offset_0x110D22-Iz_Platform_Mappings
                dc.w    Offset_0x110D2A-Iz_Platform_Mappings
                dc.w    Offset_0x110D4A-Iz_Platform_Mappings
                dc.w    Offset_0x110D88-Iz_Platform_Mappings
                dc.w    Offset_0x110D90-Iz_Platform_Mappings
                dc.w    Offset_0x110D98-Iz_Platform_Mappings
                dc.w    Offset_0x110DA6-Iz_Platform_Mappings
                dc.w    Offset_0x110DB4-Iz_Platform_Mappings
                dc.w    Offset_0x110DC2-Iz_Platform_Mappings
                dc.w    Offset_0x110DCA-Iz_Platform_Mappings
                dc.w    Offset_0x110DD2-Iz_Platform_Mappings
                dc.w    Offset_0x110DDA-Iz_Platform_Mappings
                dc.w    Offset_0x110DE2-Iz_Platform_Mappings
                dc.w    Offset_0x110DEA-Iz_Platform_Mappings
                dc.w    Offset_0x110DF2-Iz_Platform_Mappings
Offset_0x110C0C:
                dc.w    $0004
                dc.w    $EC0F, $0000, $FFE0
                dc.w    $0C08, $0010, $FFE8
                dc.w    $EC0F, $0800, $0000
                dc.w    $0C08, $0810, $0000
Offset_0x110C26:
                dc.w    $0002
                dc.w    $F805, $0013, $FFF0
                dc.w    $F805, $0013, $0000
Offset_0x110C34:
                dc.w    $0004
                dc.w    $EC09, $0017, $FFEC
                dc.w    $EC06, $001D, $0004
                dc.w    $FC06, $0023, $FFEC
                dc.w    $0409, $0029, $FFFC
Offset_0x110C4E:
                dc.w    $0002
                dc.w    $F00B, $002F, $FFE8
                dc.w    $F00B, $082F, $0000
Offset_0x110C5C:
                dc.w    $0001
                dc.w    $F00F, $003B, $FFF0
Offset_0x110C64:
                dc.w    $0002
                dc.w    $E80E, $004B, $FFF0
                dc.w    $000E, $104B, $FFF0
Offset_0x110C72:
                dc.w    $0002
                dc.w    $F406, $0057, $FFF0
                dc.w    $F406, $0857, $0000
Offset_0x110C80:
                dc.w    $0004
                dc.w    $F808, $005D, $FFF0
                dc.w    $F009, $0060, $0008
                dc.w    $000D, $0066, $FFE0
                dc.w    $000D, $0866, $0000
Offset_0x110C9A:
                dc.w    $0001
                dc.w    $F805, $006E, $FFF8
Offset_0x110CA2:
                dc.w    $0001
                dc.w    $F805, $0072, $FFF8
Offset_0x110CAA:
                dc.w    $0001
                dc.w    $FC00, $0076, $FFFC
Offset_0x110CB2:
                dc.w    $0001
                dc.w    $FC00, $0077, $FFFC
Offset_0x110CBA:
                dc.w    $0001
                dc.w    $FC00, $0078, $FFFC
Offset_0x110CC2:
                dc.w    $0001
                dc.w    $FC00, $0079, $FFFC
Offset_0x110CCA:
                dc.w    $0001
                dc.w    $FC00, $007A, $FFFC
Offset_0x110CD2:
                dc.w    $0001
                dc.w    $FC00, $007B, $FFFC
Offset_0x110CDA:
                dc.w    $0001
                dc.w    $FC00, $007C, $FFFC
Offset_0x110CE2:
                dc.w    $0001
                dc.w    $FC00, $007D, $FFFC
Offset_0x110CEA:
                dc.w    $0001
                dc.w    $F805, $007E, $FFF8
Offset_0x110CF2:
                dc.w    $0001
                dc.w    $F805, $0082, $FFF8
Offset_0x110CFA:
                dc.w    $0001
                dc.w    $F805, $0086, $FFF8
Offset_0x110D02:
                dc.w    $0001
                dc.w    $F805, $008A, $FFF8
Offset_0x110D0A:
                dc.w    $0001
                dc.w    $FC00, $008E, $FFFC
Offset_0x110D12:
                dc.w    $0001
                dc.w    $F805, $008F, $FFF8
Offset_0x110D1A:
                dc.w    $0001
                dc.w    $F805, $0093, $FFF8
Offset_0x110D22:
                dc.w    $0001
                dc.w    $F40A, $0097, $FFF4
Offset_0x110D2A:
                dc.w    $0005
                dc.w    $F001, $0000, $FFE8
                dc.w    $F005, $0002, $FFF8
                dc.w    $F001, $0800, $0010
                dc.w    $000D, $0006, $FFE0
                dc.w    $000D, $0806, $0000
Offset_0x110D4A:
                dc.w    $000A
                dc.w    $D00F, $000E, $FFD8
                dc.w    $D00F, $001E, $FFF8
                dc.w    $F00F, $002E, $FFD8
                dc.w    $F00F, $101E, $FFF8
                dc.w    $100F, $100E, $FFD8
                dc.w    $100F, $003E, $FFF8
                dc.w    $D002, $004E, $0018
                dc.w    $E806, $0051, $0018
                dc.w    $0006, $0057, $0018
                dc.w    $1806, $1051, $0018
Offset_0x110D88:
                dc.w    $0001
                dc.w    $F40A, $005D, $FFF4
Offset_0x110D90:
                dc.w    $0001
                dc.w    $F40A, $0066, $FFF4
Offset_0x110D98:
                dc.w    $0002
                dc.w    $F007, $0000, $FFF0
                dc.w    $F007, $0800, $0000
Offset_0x110DA6:
                dc.w    $0002
                dc.w    $F40A, $0008, $FFE8
                dc.w    $F40A, $0808, $0000
Offset_0x110DB4:
                dc.w    $0002
                dc.w    $F80D, $0011, $FFE0
                dc.w    $F80D, $0019, $0000
Offset_0x110DC2:
                dc.w    $0001
                dc.w    $F007, $0021, $FFF8
Offset_0x110DCA:
                dc.w    $0001
                dc.w    $F00F, $0029, $FFF0
Offset_0x110DD2:
                dc.w    $0001
                dc.w    $F805, $087E, $FFF8
Offset_0x110DDA:
                dc.w    $0001
                dc.w    $F805, $1886, $FFF8
Offset_0x110DE2:
                dc.w    $0001
                dc.w    $F60A, $085D, $FFF5
Offset_0x110DEA:
                dc.w    $0001
                dc.w    $F40A, $1066, $FFF5
Offset_0x110DF2:
                dc.w    $0000  
;------------------------------------------------------------------------------- 
End_Panel_Dyn_Script:                                          ; Offset_0x110DF4
                dc.w    Offset_0x110E02-End_Panel_Dyn_Script
                dc.w    Offset_0x110E08-End_Panel_Dyn_Script
                dc.w    Offset_0x110E0E-End_Panel_Dyn_Script
                dc.w    Offset_0x110E14-End_Panel_Dyn_Script
                dc.w    Offset_0x110E1A-End_Panel_Dyn_Script
                dc.w    Offset_0x110E1E-End_Panel_Dyn_Script
                dc.w    Offset_0x110E22-End_Panel_Dyn_Script
Offset_0x110E02:
                dc.w    $0001
                dc.w    $020B, $02CB
Offset_0x110E08:
                dc.w    $0001
                dc.w    $038B, $044B
Offset_0x110E0E:
                dc.w    $0001
                dc.w    $050B, $05CB
Offset_0x110E14:
                dc.w    $0001
                dc.w    $000B, $000B
Offset_0x110E1A:
                dc.w    $0000
                dc.w    $00CF
Offset_0x110E1E:
                dc.w    $0000
                dc.w    $01C3
Offset_0x110E22:
                dc.w    $0000
                dc.w    $00CF
;------------------------------------------------------------------------------- 
End_Panel_Mappings:                                            ; Offset_0x110E26   
                dc.w    Offset_0x110E34-End_Panel_Mappings
                dc.w    Offset_0x110E42-End_Panel_Mappings
                dc.w    Offset_0x110E50-End_Panel_Mappings
                dc.w    Offset_0x110E5E-End_Panel_Mappings
                dc.w    Offset_0x110E6C-End_Panel_Mappings
                dc.w    Offset_0x110E74-End_Panel_Mappings
                dc.w    Offset_0x110E7C-End_Panel_Mappings
Offset_0x110E34:
                dc.w    $0002
                dc.w    $F00B, $0000, $FFE8
                dc.w    $F00B, $000C, $0000
Offset_0x110E42:
                dc.w    $0002
                dc.w    $F00B, $0000, $FFE8
                dc.w    $F00B, $000C, $0000
Offset_0x110E50:
                dc.w    $0002
                dc.w    $F00B, $0000, $FFE8
                dc.w    $F00B, $000C, $0000
Offset_0x110E5E:
                dc.w    $0002
                dc.w    $F00B, $0000, $FFE8
                dc.w    $F00B, $080C, $0000
Offset_0x110E6C:
                dc.w    $0001
                dc.w    $F00F, $0000, $FFF0
Offset_0x110E74:
                dc.w    $0001
                dc.w    $F003, $0000, $FFFC
Offset_0x110E7C:
                dc.w    $0001
                dc.w    $F00F, $0800, $FFF0  
;-------------------------------------------------------------------------------   
End_Panel_Stars_Mappings:                                      ; Offset_0x110E84
                dc.w    Offset_0x110E86-End_Panel_Stars_Mappings
Offset_0x110E86:
                dc.w    $0001
                dc.w    $F801, $0000, $FFFC                
;------------------------------------------------------------------------------- 
Art_Fire_Breath:                                               ; Offset_0x110E8E
                incbin  'data\aiz\firebrth.nem'
Art_Flame_Mobile:                                              ; Offset_0x1114FC
                incbin  'data\aiz\flamembl.kmd'
                dc.w    $0000, $0000, $0000
Art_Fire_Breath_Small:                                         ; Offset_0x11343E
                incbin  'data\aiz\firebtsm.nem'
Art_Rhinobot:                                                  ; Offset_0x1135C6
                incbin  'data\aiz\rhinobot.dat'            
Art_Tulipon:                                                   ; Offset_0x114066
                incbin  'data\aiz\tulipon.kmd'
                dc.w    $0000 
Art_Monkey_Dude:                                               ; Offset_0x1142A8
                incbin  'data\aiz\monkdude.kmd'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000
Art_Catakiller_Jr:                                             ; Offset_0x11449A
                incbin  'data\aiz\catakljr.kmd'
                dc.w    $0000, $0000      
Art_Big_Shaker:                                                ; Offset_0x11469C
                incbin  'data\hz\bigshakr.nem' 
Art_Screw_Mobile:                                              ; Offset_0x11553A
                incbin  'data\hz\screwmob.nem'    
Art_Buggernaut:                                                ; Offset_0x11667C
                incbin  'data\hz\buggernt.nem'                       
Art_Jawz:                                                      ; Offset_0x116750
                incbin  'data\hz\jawz.kmd'
Art_Mega_Chopper:                                              ; Offset_0x1168C2
                incbin  'data\hz\megachpr.kmd'
                dc.w    $0000, $0000, $0000
Art_Blastoid:                                                  ; Offset_0x1169C4
                incbin  'data\hz\blastoid.kmd'
                dc.w    $0000, $0000 
Art_Turbo_Spiker:                                              ; Offset_0x116B66
                incbin  'data\hz\turbospk.kmd'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000   
Art_Pointdexter:                                               ; Offset_0x116F88
                incbin  'data\hz\pntdexter.kmd'
Art_Tunnelbot:                                                 ; Offset_0x11722A
                incbin  'data\mgz\tunnelbt.kmd'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000
Art_Spire:                                                     ; Offset_0x1174CC
                incbin  'data\mgz\spire.nem'
Art_Drill_Mobile:                                              ; Offset_0x11753E
                incbin  'data\mgz\drillmob.nem'
Art_Drill_Mobile_Scaling:                                      ; Offset_0x1187B6
                incbin  'data\mgz\drillmob.dat'
Art_Rocks:                                                     ; Offset_0x1197B6
                incbin  'data\mgz\rocks.kmd'
                dc.w    $0000, $0000
Art_Bubbles:                                                   ; Offset_0x1198E8
                incbin  'data\mgz\bubbles.dat' 
Art_Spiker:                                                    ; Offset_0x11A308
                incbin  'data\mgz\spiker.kmd'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000
Art_Mantis:                                                    ; Offset_0x11A51A
                incbin  'data\mgz\mantis.kmd'
                dc.w    $0000 
Art_Bowling_Spin:                                              ; Offset_0x11A78C
                incbin  'data\cnz\bowlspin.nem'
Art_Graviton_Mobile:                                           ; Offset_0x11AC48
                incbin  'data\cnz\graviton.nem'
Art_Clamer:                                                    ; Offset_0x11B15C
                incbin  'data\cnz\clamer.dat'
Art_Spikeball:                                                 ; Offset_0x11C29C
                incbin  'data\cnz\spikball.kmd'
Art_Sparkle:                                                   ; Offset_0x11C30E
                incbin  'data\cnz\sparkle.kmd'
                dc.w    $0000, $0000
Art_Batbot:                                                    ; Offset_0x11C630
                incbin  'data\cnz\batbot.kmd'
                dc.w    $0000, $0000
Art_Balloon:                                                   ; Offset_0x11C852
                incbin  'data\cnz\balloon.kmd'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000
Art_Gapsule:                                                   ; Offset_0x11C8F4
                incbin  'data\fbz\gapsule.nem'   
Art_Laser_Beam:                                                ; Offset_0x11CEBA  
                incbin  'data\fbz\lasrbeam.nem'             
Art_Hang_Mobile:                                               ; Offset_0x11D3BC
                incbin  'data\fbz\hangmobl.nem'                
Art_Blaster:                                                   ; Offset_0x11D79E
                incbin  'data\fbz\blaster.kmd'
                dc.w    $0000   
Art_Technosqueek:                                              ; Offset_0x11DAA0
                incbin  'data\fbz\technosq.kmd'
                dc.w    $0000, $0000, $0000, $0000
Art_Iz_Ice_Platform_And_Miscellaneous:                         ; Offset_0x11DD52
                incbin  'data\iz\ptfrmisc.nem'
Art_Iz_Ice_Rock_And_Miscellaneous:                             ; Offset_0x11E976
                incbin  'data\iz\rockmisc.nem'
Art_Iz_SnowSlip_And_Miscellaneous:                             ; Offset_0x11EDF8
                incbin  'data\iz\snslmisc.nem'                
Art_Freezer_Mobile:                                            ; Offset_0x11F1B8
                incbin  'data\iz\fzrmobil.nem'
Art_Big_Icedus:                                                ; Offset_0x11FF66
                incbin  'data\iz\bigicdus.nem'
Art_Penguinator:                                               ; Offset_0x1203EE  
                incbin  'data\iz\pengntor.dat'
Art_Ice_Block:                                                 ; Offset_0x1213CE
                incbin  'data\iz\iceblock.kmd'
                dc.w    $0000, $0000, $0000, $0000
Art_Orbinaut:                                                  ; Offset_0x121460
                incbin  'data\iz\orbinaut.kmd'
                dc.w    $0000, $0000, $0000, $0000, $0000                
Art_Twin_Hammer:                                               ; Offset_0x1215F2
                incbin  'data\lbz\twinhamr.nem'
Art_Beam_Rocket:                                               ; Offset_0x121946
                incbin  'data\lbz\beamrckt.nem'  
Art_Ball_Shooter:                                              ; Offset_0x1224EC
                incbin  'data\lbz\ballshtr.kmd'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000
Art_Snale_Blaster:                                             ; Offset_0x12281E                
                incbin  'data\lbz\snalebst.kmd'
                dc.w    $0000, $0000, $0000
Art_Ribot:                                                     ; Offset_0x122A70    
                incbin  'data\lbz\ribot.kmd'
                dc.w    $0000, $0000, $0000
Art_Orbinaut_2:                                                ; Offset_0x122BA2  
                incbin  'data\lbz\orbinaut.kmd'
                dc.w    $0000
Art_Corkey:                                                    ; Offset_0x122C84
                incbin  'data\lbz\corkey.kmd'
                dc.w    $0000, $0000, $0000
Art_Flybot_767:                                                ; Offset_0x122D46
                incbin  'data\lbz\flybt767.dat'                
Art_Twin_Hammer_Box:                                           ; Offset_0x124066
                incbin  'data\lbz\twinhbox.nem'    
Art_LBz_Knuckles_Bomb:                                         ; Offset_0x1244C6
                incbin  'data\lbz\kte_bomb.nem'                                        
Art_Boss_Explosion:                                            ; Offset_0x124504
                incbin  'data\art\bexplosn.nem'     
Art_Fire_Breath_Flames:                                        ; Offset_0x124854
                incbin  'data\aiz\firebtfm.nem' 
Art_FBz_Boss_Flames:                                           ; Offset_0x124DA6
                incbin  'data\fbz\bossflms.nem'                  
Art_Robotnik_In_Egg_Mobile:                                    ; Offset_0x125122
                incbin  'data\art\rbtnkegm.nem'  
Art_FBz_Robotnik_Faces:                                        ; Offset_0x12567E
                incbin  'data\fbz\rbtkface.nem'
Art_FBz_Robotnik_Stand:                                        ; Offset_0x1258F0
                incbin  'data\fbz\rbtnkstd.nem'
Art_FBz_Robotnik:                                              ; Offset_0x125D06
                incbin  'data\fbz\robotnik.nem'              
Art_End_Panel_Dynamic:                                         ; Offset_0x12616A
                incbin  'data\art\endpanel.dat'                
Art_End_Panel_Post                                             ; Offset_0x126E6A
                incbin  'data\art\post.nem'
Art_Egg_Prison:                                                ; Offset_0x126E84
                incbin  'data\art\eggprisn.nem'                 
Art_Knuckles_2:                                                ; Offset_0x127328
                incbin  'data\art\knuckls2.dat' 
Art_Tornado:                                                   ; Offset_0x12C208
                incbin  'data\art\tornado.kmd'
                dc.w    $0000
Art_AIz_Swinging_Vine:                                         ; Offset_0x12C9AA
                incbin  'data\aiz\swngvine.nem'
Art_AIz_Slide_Rope:                                            ; Offset_0x12CB10
                incbin  'data\aiz\sliderop.nem'
Art_AIz_Background_Tree:                                       ; Offset_0x12CC34
                incbin  'data\aiz\bg_tree.nem'
Art_AIz_Rocks_And_Tree:                                        ; Offset_0x12CD7E
                incbin  'data\aiz\rocktree.nem'  
Art_AIz_Cork_Floor:                                            ; Offset_0x12D5C6
                incbin  'data\aiz\corkflr.nem'   
Art_AIz_Miscellaneous:                                         ; Offset_0x12D84E
                incbin  'data\aiz\misclns.nem'
Art_Hz_Spiked_Ball:                                            ; Offset_0x12EBDA
                incbin  'data\hz\spikball.nem'
Art_Hz_Water_Surface:                                          ; Offset_0x12ECA2
                incbin  'data\hz\wsurface.nem'
Art_Hz_Switch:                                                 ; Offset_0x12EDC2
                incbin  'data\hz\switch.nem'  
Art_Hz_Miscellaneous:                                          ; Offset_0x12EE76
                incbin  'data\hz\misclns.nem'
Art_Hz_Water_Rush:                                             ; Offset_0x12F436
                incbin  'data\hz\waterush.nem'
Art_Hz_Large_Fan:                                              ; Offset_0x12F9EE
                incbin  'data\hz\largefan.kmd'
                dc.w    $0000, $0000, $0000
Art_Hz_Geyser_Horizontal:                                      ; Offset_0x12FCF0
                incbin  'data\hz\geyser_h.kmd'
                dc.w    $0000, $0000
Art_Hz_Geyser_Vertical:                                        ; Offset_0x130482  
                incbin  'data\hz\geyser_v.kmd'
                dc.w    $0000, $0000, $0000, $0000
Art_Hz_Sliding_Tube:                                           ; Offset_0x130C24
                incbin  'data\hz\slidtube.nem'
Art_Hz_Bridge_And_Blocks:                                      ; Offset_0x13113A
                incbin  'data\hz\bridgebk.nem'                
Art_Water_Splash:                                              ; Offset_0x131482
                incbin  'data\art\waterspl.dat'   
Art_Water_Splash_2:                                            ; Offset_0x131C02 
                incbin  'data\art\watersp2.dat'   
Art_Hz_Enemies:         ; N�o usado ; Left over ???            ; Offset_0x132802
                incbin  'data\hz\enemies.nem'
Art_Hz_Block_Wall:                                             ; Offset_0x1330E4
                incbin  'data\hz\blckwall.nem'  
Art_MGz_Wheel_And_Miscellaneous:                               ; Offset_0x1331FE
                incbin  'data\mgz\wheelmsc.nem'
Art_MGz_Spiked_Platform_And_Miscellaneous:                     ; Offset_0x133C3C    
                incbin  'data\mgz\spkptmsc.nem'
Art_MGz_Direction_Indicators:                                  ; Offset_0x13424C
                incbin  'data\mgz\dirindic.nem'
Art_CNz_Balloons_Bumpers_And_Miscellaneous:                    ; Offset_0x134486
                incbin  'data\cnz\blbpmisc.nem'
Art_CNz_Platform:                                              ; Offset_0x135244
                incbin  'data\cnz\platform.nem'
Art_LBz_Miscellaneous:                                         ; Offset_0x1353AE
                incbin  'data\lbz\misclns.nem'
Art_LBz_Tube_Elevator:                                         ; Offset_0x135ECC
                incbin  'data\lbz\tubelevt.nem'
Art_LBz_Spin_Launcher_And_Miscellaneous:                       ; Offset_0x136150
                incbin  'data\lbz\spnlmisc.nem'
Art_LRz_Rocks:                                                 ; Offset_0x13658C
                incbin  'data\lrz\rocks.nem' 
Art_H_Springs_Switch_2P:                                       ; Offset_0x1366D4
                incbin  'data\art\hspng_2p.nem'
Art_V_Springs_Spikes_2P:                                       ; Offset_0x136848
                incbin  'data\art\vspng_2p.nem'
Art_Items_2P:                                                  ; Offset_0x136A3A
                incbin  'data\art\items_2p.nem'
Art_Goal_Marker_2P:                                            ; Offset_0x136F1E
                incbin  'data\art\goalmark.nem'
Art_Head_up_display_Sprites_2P:                                ; Offset_0x137096
                incbin  'data\art\hud_2p.nem'
Art_Lap_Numbers_2P:                                            ; Offset_0x1376F0
                incbin  'data\art\number2p.nem'
Art_Point_And_Arrows_2P:                                       ; Offset_0x137BB0
                incbin  'data\art\pointarw.nem' 
Art_BPz_Ballons_And_Miscellaneous:                             ; Offset_0x137C4A
                incbin  'data\bpz\balloons.nem'
Art_DPz_Sand_And_Miscellaneous:                                ; Offset_0x138494
                incbin  'data\dpz\sandmisc.nem'
Art_CGz_Platform_And_Miscellaneous:                            ; Offset_0x1391AA
                incbin  'data\cgz\ptfrmisc.nem'
Art_EMz_Rock_And_Miscellaneous:                                ; Offset_0x13951E
                incbin  'data\emz\rockmisc.nem'
;-------------------------------------------------------------------------------
Angel_Island_2_Boss_Ship:                                      ; Offset_0x1397B0
                incbin  'data\aiz\bossship.kmd'
                dc.w    $0000
Level_Results_Sonic:                                           ; Offset_0x13A272
                incbin  'data\art\lr_sonic.kmd'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000 
Level_Results_Miles:                                           ; Offset_0x13A3D4
                incbin  'data\art\lr_miles.kmd'
                dc.w    $0000, $0000, $0000, $0000
Level_Results_Tails:                                           ; Offset_0x13A526
                incbin  'data\art\lr_tails.kmd'  
                dc.w    $0000
Level_Results_Knuckles:                                        ; Offset_0x13A668
                incbin  'data\art\lr_kte.kmd'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000
Title_Card_Results:                                            ; Offset_0x13A8DA
                incbin  'data\art\tc_res.kmd'
                dc.w    $0000, $0000, $0000
Title_Card_Number_1:                                           ; Offset_0x13AB6C
                incbin  'data\art\tc_1.kmd'
                dc.w    $0000, $0000, $0000, $0000   
Title_Card_Number_2:                                           ; Offset_0x13AC2E
                incbin  'data\art\tc_2.kmd'
                dc.w    $0000, $0000, $0000, $0000
Title_Card_ZONE_ACT:                                           ; Offset_0x13AD10
                incbin  'data\art\tc_zone.kmd'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000 
TC_Angel_Island:                                               ; Offset_0x13AEF2
                incbin  'data\art\tc_aiz.kmd'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000
TC_Hidrocity:                                                  ; Offset_0x13B004
                incbin  'data\art\tc_hz.kmd'
                dc.w    $0000, $0000, $0000
TC_Marble_Garden:                                              ; Offset_0x13B156
                incbin  'data\art\tc_mgz.kmd'
                dc.w    $0000
TC_Carnival_Night:                                             ; Offset_0x13B318
                incbin  'data\art\tc_cnz.kmd'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000 
TC_Flying_Battery:                                             ; Offset_0x13B4AA
                incbin  'data\art\tc_fbz.kmd'
                dc.w    $0000, $0000, $0000, $0000
TC_Icecap:                                                     ; Offset_0x13B60C
                incbin  'data\art\tc_iz.kmd'
                dc.w    $0000, $0000, $0000, $0000
TC_Launch_Base:                                                ; Offset_0x13B6DE
TC_Mushroom_Valley:                                            ; Offset_0x13B6DE
TC_Sandopolis:                                                 ; Offset_0x13B6DE
TC_Lava_Reef:                                                  ; Offset_0x13B6DE
TC_Sky_Sanctuary:                                              ; Offset_0x13B6DE
TC_Death_Egg:                                                  ; Offset_0x13B6DE
TC_The_Doomsday:                                               ; Offset_0x13B6DE 
                incbin  'data\art\tc_lbz.kmd'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000  
Angel_Island_1_Blocks:                                         ; Offset_0x13B830
                incbin  'data\aiz\bl_act1.kos'
                dc.w     $0000
Angel_Island_1_Blocks_2:                                       ; Offset_0x13BA30  
                incbin  'data\aiz\bl2_act1.kos'
                dc.w     $0000, $0000, $0000, $0000, $0000, $0000, $0000
Angel_Island_1_Blocks_3:                                       ; Offset_0x13C680
                incbin  'data\aiz\bl3_act1.kos' 
                dc.w     $0000, $0000, $0000
Angel_Island_1_Tiles:                                          ; Offset_0x13D750
                incbin  'data\aiz\tl_act1.kmd'
Angel_Island_1_Tiles_2:                                        ; Offset_0x13E552
                incbin  'data\aiz\tl2_act1.kmd'
Angel_Island_1_Tiles_3:                                        ; Offset_0x141584
                incbin  'data\aiz\tl3_act1.kmd'
Angel_Island_1_Chunks:                                         ; Offset_0x143D96
Angel_Island_1_Chunks_2:                                       ; Offset_0x143D96
                incbin  'data\aiz\ck_act1.kos'
Angel_Island_1_Flames:                                         ; Offset_0x1476A6
                incbin  'data\aiz\flames.kmd'
                dc.w     $0000, $0000, $0000, $0000, $0000, $0000, $0000
Angel_Island_2_Blocks:                                         ; Offset_0x148128
                incbin  'data\aiz\bl_act2.kos'
Angel_Island_2_Blocks_2:                                       ; Offset_0x1489A8
                incbin  'data\aiz\bl2_act2.kos'
Angel_Island_2_Blocks_3:                                       ; Offset_0x149448
                incbin  'data\aiz\bl3_act2.kos'
Angel_Island_2_Tiles:                                          ; Offset_0x1496B8
                incbin  'data\aiz\tl_act2.kmd'
Angel_Island_2_Tiles_2:                                        ; Offset_0x14A1BA
                incbin  'data\aiz\tl2_act2.kmd'
Angel_Island_2_Tiles_3:                                        ; Offset_0x14CA3C
                incbin  'data\aiz\tl3_act2.kmd'
Angel_Island_2_Chunks:                                         ; Offset_0x14EA6E
Angel_Island_2_Chunks_2:                                       ; Offset_0x14EA6E
                incbin  'data\aiz\ck_act2.kos'       
Hydrocity_1_Blocks:                                            ; Offset_0x152B8E
Hydrocity_2_Blocks:                                            ; Offset_0x152B8E
                incbin  'data\hz\blocks.kos'
        ;        dc.w     $0000   
Hydrocity_1_Tiles:                                             ; Offset_0x152F7E
Hydrocity_2_Tiles:                                             ; Offset_0x152F7E
                incbin  'data\hz\tiles.kmd'
        ;        dc.w     $0000, $0000, $0000, $0000
Hydrocity_1_Chunks:                                            ; Offset_0x153B70
Hydrocity_2_Chunks:                                            ; Offset_0x153B70
                incbin  'data\hz\chunks.kos'
        ;        dc.w     $0000, $0000
Hydrocity_1_Blocks_2:                                          ; Offset_0x153E60  
                incbin  'data\hz\bl2_act1.kos'   
        ;        dc.w     $0000, $0000, $0000
Hydrocity_1_Tiles_2:                                           ; Offset_0x1546F0
                incbin  'data\hz\tl2_act1.kmd'  
        ;        dc.w     $0000, $0000, $0000, $0000, $0000                           
Hydrocity_1_Chunks_2:                                          ; Offset_0x156742
                incbin  'data\hz\ck2_act1.kos'
        ;        dc.w     $0000
Hydrocity_2_Blocks_2:                                          ; Offset_0x158562
                incbin  'data\hz\bl2_act2.kos'
                dc.w     $0000, $0000, $0000, $0000
Hydrocity_2_Tiles_2:                                           ; Offset_0x158DF2
                incbin  'data\hz\tl2_act2.kmd'
                dc.w     $0000, $0000, $0000
Hydrocity_2_Chunks_2:                                          ; Offset_0x15AC74  
                incbin  'data\hz\ck2_act2.kos'
                dc.w     $0000                                
Marble_Garden_1_Blocks:                                        ; Offset_0x15C744 
Marble_Garden_2_Blocks:                                        ; Offset_0x15C744
                incbin  'data\mgz\blocks.kos'
                dc.w     $0000, $0000
Marble_Garden_1_Tiles:                                         ; Offset_0x15D0A4
Marble_Garden_2_Tiles:                                         ; Offset_0x15D0A4
                incbin  'data\mgz\tiles.kmd'
                dc.w     $0000, $0000, $0000, $0000, $0000
Marble_Garden_1_Chunks:                                        ; Offset_0x15F926
Marble_Garden_2_Chunks:                                        ; Offset_0x15F926
                incbin  'data\mgz\chunks.kos'
                dc.w     $0000 
Marble_Garden_1_Blocks_2:                                      ; Offset_0x161C56
                incbin  'data\mgz\bl2_act1.kos'
                dc.w     $0000, $0000
Marble_Garden_1_Tiles_2:                                       ; Offset_0x161F56
                incbin  'data\mgz\tl2_act1.kmd'
                dc.w     $0000, $0000, $0000, $0000
Marble_Garden_1_Chunks_2:                                      ; Offset_0x162628
                incbin  'data\mgz\ck2_act1.kos'
                dc.w     $0000 
Marble_Garden_2_Blocks_2:                                      ; Offset_0x162E58
                incbin  'data\mgz\bl2_act2.kos'
                dc.w     $0000, $0000, $0000, $0000
Marble_Garden_2_Tiles_2:                                       ; Offset_0x1632A8                                                                                                                
                incbin  'data\mgz\tl2_act2.kmd'
                dc.w     $0000, $0000, $0000, $0000, $0000, $0000, $0000
Marble_Garden_2_Chunks_2:                                      ; Offset_0x16403A  
                incbin  'data\mgz\ck2_act2.kos'
                dc.w     $0000
Marble_Garden_2_Dynamic_Chunks:                                ; Offset_0x1649DA
                incbin  'data\mgz\dynchunk.dat'                    
Carnival_Night_1_Blocks:                                       ; Offset_0x165A5A
Carnival_Night_1_Blocks_2:                                     ; Offset_0x165A5A  
Carnival_Night_2_Blocks:                                       ; Offset_0x165A5A
Carnival_Night_2_Blocks_2:                                     ; Offset_0x165A5A 
                incbin  'data\cnz\blocks.kos'
                dc.w     $0000, $0000, $0000, $0000, $0000, $0000, $0000
Carnival_Night_1_Tiles:                                        ; Offset_0x166A9A
Carnival_Night_1_Tiles_2:                                      ; Offset_0x166A9A
Carnival_Night_2_Tiles:                                        ; Offset_0x166A9A
Carnival_Night_2_Tiles_2:                                      ; Offset_0x166A9A
                incbin  'data\cnz\tiles.kmd'
                dc.w     $0000, $0000, $0000
Carnival_Night_1_Chunks:                                       ; Offset_0x169CBC
Carnival_Night_1_Chunks_2:                                     ; Offset_0x169CBC
Carnival_Night_2_Chunks:                                       ; Offset_0x169CBC
Carnival_Night_2_Chunks_2:                                     ; Offset_0x169CBC  
                incbin  'data\cnz\chunks.kos'
                dc.w     $0000, $0000, $0000
Flying_Battery_1_Blocks:                                       ; Offset_0x16CDCC                   
Flying_Battery_1_Blocks_2:                                     ; Offset_0x16CDCC 
                incbin  'data\fbz\bl_act1.kos'
                dc.w     $0000, $0000, $0000, $0000
Flying_Battery_1_Tiles:                                        ; Offset_0x16DB1C
Flying_Battery_1_Tiles_2:                                      ; Offset_0x16DB1C
                incbin  'data\fbz\tl_act1.kmd'
                dc.w     $0000, $0000, $0000, $0000
Flying_Battery_1_Chunks:                                       ; Offset_0x1705EE
Flying_Battery_1_Chunks_2:                                     ; Offset_0x1705EE
                incbin  'data\fbz\ck_act1.kos'
                dc.w     $0000, $0000, $0000, $0000
Flying_Battery_2_Blocks:                                       ; Offset_0x17315E
Flying_Battery_2_Blocks_2:                                     ; Offset_0x17315E
                incbin  'data\fbz\bl_act2.kos'
Flying_Battery_2_Tiles:                                        ; Offset_0x173E9E
Flying_Battery_2_Tiles_2:                                      ; Offset_0x173E9E
                incbin  'data\fbz\tl_act2.kmd'
                dc.w     $0000, $0000
Flying_Battery_2_Chunks:                                       ; Offset_0x176ED0
Flying_Battery_2_Chunks_2:                                     ; Offset_0x176ED0  
                incbin  'data\fbz\ck_act2.kos'
                dc.w     $0000, $0000, $0000, $0000, $0000, $0000, $0000
Icecap_1_Blocks:                                               ; Offset_0x179A00
Icecap_2_Blocks:                                               ; Offset_0x179A00
                incbin  'data\iz\blocks.kos' 
                dc.w     $0000               
Icecap_1_Tiles:                                                ; Offset_0x179CF0
Icecap_2_Tiles:                                                ; Offset_0x179CF0
                incbin  'data\iz\tiles.kmd'
                dc.w     $0000, $0000
Icecap_1_Chunks:                                               ; Offset_0x17B102
Icecap_2_Chunks:                                               ; Offset_0x17B102
                incbin  'data\iz\chunks.kos'
                dc.w     $0000, $0000, $0000, $0000, $0000
Icecap_1_Blocks_2:                                             ; Offset_0x17B412
                incbin  'data\iz\bl2_act1.kos'  
Icecap_1_Tiles_2:                                              ; Offset_0x17BF62
                incbin  'data\iz\tl2_act1.kmd'  
                dc.w     $0000, $0000, $0000, $0000, $0000, $0000   
Icecap_1_Chunks_2:                                             ; Offset_0x17DEF4
                incbin  'data\iz\ck2_act1.kos'
                dc.w     $0000, $0000, $0000, $0000, $0000
Icecap_2_Blocks_2:                                             ; Offset_0x17FB24                
                incbin  'data\iz\bl2_act2.kos'
                dc.w     $0000, $0000, $0000, $0000, $0000, $0000, $0000 
Icecap_2_Tiles_2:                                              ; Offset_0x180734
                incbin  'data\iz\tl2_act2.kmd' 
                dc.w     $0000, $0000, $0000, $0000, $0000
Icecap_2_Chunks_2:                                             ; Offset_0x182746 
                incbin  'data\iz\ck2_act2.kos'
                dc.w     $0000
Launch_Base_1_Blocks:                                          ; Offset_0x184196
Launch_Base_2_Blocks:                                          ; Offset_0x184196
                incbin  'data\lbz\blocks.kos'
Launch_Base_1_Blocks_2:                                        ; Offset_0x184646   
                incbin  'data\lbz\bl2_act1.kos'
                dc.w     $0000, $0000, $0000, $0000, $0000
Launch_Base_1_Tiles:                                           ; Offset_0x185206
Launch_Base_2_Tiles:                                           ; Offset_0x185206
                incbin  'data\lbz\tiles.kmd'
                dc.w     $0000, $0000, $0000, $0000, $0000, $0000
Launch_Base_1_Tiles_2:                                         ; Offset_0x186688                                       
                incbin  'data\lbz\tl2_act1.kmd'
                dc.w     $0000, $0000
Launch_Base_Unreferenced_Chunks: ; N�o usado ; Left over ???   ; Offset_0x1885CA
                incbin  'data\lbz\cnkunref.kos'
                dc.w     $0000, $0000
Launch_Base_1_Chunks:                                          ; Offset_0x18872A
Launch_Base_1_Chunks_2:                                        ; Offset_0x18872A  
                incbin  'data\lbz\ck_act1.kos'
                dc.w     $0000, $0000, $0000, $0000
Launch_Base_2_Blocks_2:                                        ; Offset_0x18B6DA         
                incbin  'data\lbz\bl2_act2.kos'
                dc.w     $0000, $0000, $0000, $0000, $0000
Launch_Base_2_Blocks_3:                                        ; Offset_0x18C21A
                incbin  'data\lbz\bl3_act2.kos'
                dc.w     $0000, $0000, $0000, $0000, $0000, $0000, $00000
Launch_Base_2_Tiles_2:                                         ; Offset_0x18D03A
                incbin  'data\lbz\tl2_act2.kmd'
                dc.w     $0000, $0000, $0000    
Launch_Base_2_Tiles_3:                                         ; Offset_0x18EB6C
                incbin  'data\lbz\tl3_act2.kmd'
Launch_Base_2_Chunks:                                          ; Offset_0x190A3E
Launch_Base_2_Chunks_2:                                        ; Offset_0x190A3E
                incbin  'data\lbz\ck_act2.kos'    
                dc.w     $0000, $0000, $0000, $0000, $0000
Launch_Base_2_Chunks_3:                                        ; Offset_0x192F2E  
                incbin  'data\lbz\ck3_act2.kos'   
                dc.w     $0000, $0000, $0000, $0000, $0000, $0000, $00000
Mushroom_Valley_1_Blocks:                                      ; Offset_0x193C2E
Mushroom_Valley_1_Blocks_2:                                    ; Offset_0x193C2E 
Mushroom_Valley_2_Blocks:                                      ; Offset_0x193C2E
Mushroom_Valley_2_Blocks_2:                                    ; Offset_0x193C2E               
Mushroom_Valley_1_Tiles:                                       ; Offset_0x193C2E
Mushroom_Valley_1_Tiles_2:                                     ; Offset_0x193C2E
Mushroom_Valley_2_Tiles:                                       ; Offset_0x193C2E
Mushroom_Valley_2_Tiles_2:                                     ; Offset_0x193C2E
Mushroom_Valley_1_Chunks:                                      ; Offset_0x193C2E
Mushroom_Valley_1_Chunks_2:                                    ; Offset_0x193C2E
Mushroom_Valley_2_Chunks:                                      ; Offset_0x193C2E
Mushroom_Valley_2_Chunks_2:                                    ; Offset_0x193C2E
                     
Lava_Reef_1_Blocks:                                            ; Offset_0x193C2E
Lava_Reef_1_Blocks_2:                                          ; Offset_0x193C2E                     
Lava_Reef_1_Tiles:                                             ; Offset_0x193C2E
Lava_Reef_1_Tiles_2:                                           ; Offset_0x193C2E
Lava_Reef_1_Chunks:                                            ; Offset_0x193C2E
Lava_Reef_1_Chunks_2:                                          ; Offset_0x193C2E
Lava_Reef_2_Blocks:                                            ; Offset_0x193C2E
Lava_Reef_2_Blocks_2:                                          ; Offset_0x193C2E                
Lava_Reef_2_Tiles:                                             ; Offset_0x193C2E
Lava_Reef_2_Tiles_2:                                           ; Offset_0x193C2E
Lava_Reef_2_Chunks:                                            ; Offset_0x193C2E
Lava_Reef_2_Chunks_2:                                          ; Offset_0x193C2E
   
Azure_Lake_Blocks:                                             ; Offset_0x193C2E
                incbin  'data\alz\blocks.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000
Azure_Lake_Tiles:                                              ; Offset_0x1946EE
                incbin  'data\alz\tiles.kmd'
Azure_Lake_Chunks:                                             ; Offset_0x1974A0
                incbin  'data\alz\chunks.kos'      
Balloon_Park_Blocks:                                           ; Offset_0x197B30 
                incbin  'data\bpz\blocks.kos'
Balloon_Park_Tiles:                                            ; Offset_0x198400
                incbin  'data\bpz\tiles.kmd'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000
Balloon_Park_Chunks:                                           ; Offset_0x19A3E2
                incbin  'data\bpz\chunks.kos'
                dc.w    $0000
Desert_Palace_Blocks:                                          ; Offset_0x19AAD2 
                incbin  'data\dpz\blocks.kos'
Desert_Palace_Tiles:                                           ; Offset_0x19B4B2
                incbin  'data\dpz\tiles.kmd'
                dc.w    $0000, $0000, $0000, $0000, $0000
Desert_Palace_Chunks:                                          ; Offset_0x19CFA4 
                incbin  'data\dpz\chunks.kos'    
                dc.w    $0000, $0000, $0000, $0000, $0000   
Chrome_Gadget_Blocks:                                          ; Offset_0x19D5D4 
                incbin  'data\cgz\blocks.kos'
                dc.w    $0000, $0000, $0000, $0000
Chrome_Gadget_Tiles:                                           ; Offset_0x19DD24
                incbin  'data\cgz\tiles.kmd'
                dc.w    $0000, $0000
Chrome_Gadget_Chunks:                                          ; Offset_0x1A02C6  
                incbin  'data\cgz\chunks.kos'   
Endless_Mine_Blocks:                                           ; Offset_0x1A0786 
                incbin  'data\emz\blocks.kos' 
Endless_Mine_Tiles:                                            ; Offset_0x1A1236
                incbin  'data\emz\tiles.kmd'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000
Endless_Mine_Chunks:                                           ; Offset_0x1A3E68  
                incbin  'data\emz\chunks.kos'
                dc.w    $0000, $0000
BS_Gumball_Machine_Blocks:                                     ; Offset_0x1A4578
                incbin  'data\bs_gm\blocks.kos'
                dc.w    $0000, $0000, $0000
BS_Gumball_Machine_Tiles:                                      ; Offset_0x1A4938
                incbin  'data\bs_gm\tiles.kmd'
BS_Gumball_Machine_Chunks:                                     ; Offset_0x1A52AA 
                incbin  'data\bs_gm\chunks.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000
BS_Glowing_Spheres_Blocks:                                     ; Offset_0x1A55FA
                incbin  'data\bs_gs\blocks.kos'
                dc.w    $0000
BS_Glowing_Spheres_Tiles:                                      ; Offset_0x1A589A
                incbin  'data\bs_gs\tiles.kmd'
BS_Glowing_Spheres_Chunks:                                     ; Offset_0x1A680C  
                incbin  'data\bs_gs\chunks.kos'
                dc.w    $0000, $0000
BS_Slot_Machine_Blocks:                                        ; Offset_0x1A6B0C  
                incbin  'data\bs_sm\blocks.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000
BS_Slot_Machine_Tiles:                                         ; Offset_0x1A77CC
                incbin  'data\bs_sm\tiles.kmd'
                dc.w    $0000, $0000, $0000, $0000
BS_Slot_Machine_Chunks:                                        ; Offset_0x1AA46E  
                incbin  'data\bs_sm\chunks.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000
;-------------------------------------------------------------------------------  
; Offset_0x1AACAE:                
                incbin  'data\unknown\unkdata.bin'
                dc.w    $0000, $0000, $0000, $0000
; Offset_0x1AAE0E  
                incbin  'data\unknown\chunks_1.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000
; Offset_0x1AB64E:                
                incbin  'data\unknown\unkdata2.bin' 
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000    
; Offset_0x1ABC6C:
                incbin  'data\unknown\unkdata3.bin' 
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000  
; Offset_0x1ABD5C:
                incbin  'data\unknown\unkdata4.bin' 
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000  
; Offset_0x1ABDDC:          
                incbin  'data\unknown\unkdata5.bin' 
        ;        dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000
Left_Over_Lava_Reef_Blocks:
                incbin  'data\lrz\Blocks.kos' 
Left_Over_Lava_Reef_Tiles:                                     ; Offset_0x1AEF34
                incbin  'data\lrz\tiles_1.kmd'    
        ;        dc.w    $0000, $0000, $0000 
Left_Over_Lava_Reef_Chunks_2:                                  ; Offset_0x1B2ED6  
                incbin  'data\lrz\chunks_2.kos'  
Left_Over_Azure_Lake_Blocks:                                   ; Offset_0x1B5DB6
                incbin  'data\alz\blocks_1.kos'  
                dc.w    $0000, $0000, $0000     
Left_Over_Azure_Lake_Tiles:                                    ; Offset_0x1B66D6
                incbin  'data\alz\tiles_1.kmd'    
                dc.w    $0000, $0000, $0000, $0000
Left_Over_Azure_Lake_Chunks:                                   ; Offset_0x1B8EE8                
                incbin  'data\alz\chunks_1.kos'
                dc.w    $0000, $0000, $0000 
; Offset_0x1B9568:                 
                incbin  'data\unknown\blocks.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000  
; Offset_0x1B95D8
                incbin  'data\unknown\tiles.kmd'    
                dc.w    $0000, $0000, $0000, $0000, $0000    
; Offset_0x1B99FA:                 
                incbin  'data\unknown\chunks.kos'  
; Offset_0x1B9B7A:                  
                incbin  'data\unknown\blocks_2.kos'    
                dc.w    $0000, $0000, $0000
; Offset_0x1B9C0A:
                incbin  'data\unknown\tiles_2.kmd'    
                dc.w    $0000, $0000   
; Offset_0x1BA05C:                 
                incbin  'data\unknown\chunks_2.kos'   
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000    
; Offset_0x1BA24C:          
                incbin  'data\unknown\blocks_3.kos'   
                dc.w    $0000   
; Offset_0x1BA29C:        
                incbin  'data\unknown\tiles_3.kmd'  
                dc.w    $0000, $0000, $0000, $0000, $0000
; Offset_0x1BA6BE:                 
                incbin  'data\unknown\chunks_3.kos' 
; Offset_0x1BA82E:     
                incbin  'data\unknown\blocks_4.kos' 
; Offset_0x1BA8DE: 
                incbin  'data\unknown\tiles_4.kmd'
                dc.w    $0000, $0000, $0000, $0000, $0000    
; Offset_0x1BAD00:                 
                incbin  'data\unknown\chunks_4.kos'   
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000   
Left_Over_BS_Gumball_Machine_Blocks:                           ; Offset_0x1BAF10
                incbin  'data\bs_gm\blocks_1.kos'  
                dc.w    $0000, $0000, $0000
Left_Over_BS_Gumball_Machine_Tiles:                            ; Offset_0x1BB2D0 
                incbin  'data\bs_gm\tiles_1.kmd'
Left_Over_BS_Gumball_Machine_Chunks:                           ; Offset_0x1BBC42
                incbin  'data\bs_gm\chunks_1.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000   
; Offset_0x1BBF92:     
                incbin  'data\unknown\unkdata6.bin'  
                dc.w    $0000, $0000, $0000, $0000, $0000     
; Offset_0x1BC81C:
                incbin  'data\unknown\tiles_5.kos'  
; Offset_0x1BCF2C:    
                incbin  'data\unknown\tiles5a.kos'   
                dc.w    $0000, $0000, $0000  
; Offset_0x1BD43C:         
                incbin  'data\unknown\chunks_5.kos'   
                dc.w    $0000, $0000, $0000
Left_Over_Balloon_Park_Blocks:                                 ; Offset_0x1BDABC   
                incbin  'data\bpz\blocks_1.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000
Left_Over_Balloon_Park_Tiles:                                  ; Offset_0x1BE39C                 
                incbin  'data\bpz\tiles.kmd'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000
Left_Over_Balloon_Park_Chunks:                                 ; Offset_0x1C037E     
                incbin  'data\bpz\chunks_1.kos'   
                dc.w    $0000
Left_Over_Desert_Palace_Blocks:                                ; Offset_0x1C0A6E     
                incbin  'data\dpz\blocks_1.kos' 
                dc.w    $0000, $0000, $0000
Left_Over_Desert_Palace_Tiles:                                 ; Offset_0x1C142E
                incbin  'data\dpz\tiles_1.kmd' 
                dc.w    $0000, $0000, $0000, $0000, $0000
Left_Over_Desert_Palace_Chunks:                                ; Offset_0x1C2E20 
                incbin  'data\dpz\chunks_1.kos' 
                dc.w    $0000, $0000, $0000, $0000, $0000
; Offset_0x1C3430:     
                incbin  'data\unknown\blocks_6.kos' 
                dc.w    $0000, $0000, $0000, $0000, $0000
; Offset_0x1C3B80:
                incbin  'data\unknown\unkdata7.bin'  
Left_Over_Water_Surface_Scroll_Data:                           ; Offset_0x1C4000
                incbin  'data\hz\wsurfscr.dat'
Left_Over_AngleMap:                                            ; Offset_0x1C5040
                incbin  'data\all\anglemap.dat'
Left_Over_Collision_Array_1:                                   ; Offset_0x1C5240
                incbin  'data\all\c_array1.dat' 
Left_Over_Collision_Array_2_Incomplete:                        ; Offset_0x1C7240
                incbin  'data\all\carray2i.dat'                                
;-------------------------------------------------------------------------------                  
Water_Surface_Scroll_Data:                                     ; Offset_0x1C8000
                incbin  'data\hz\wsurfscr.dat'
AngleMap:                                                      ; Offset_0x1C9040 
                incbin  'data\all\anglemap.dat'
Collision_Array_1:                                             ; Offset_0x1C9240
                incbin  'data\all\c_array1.dat'
Collision_Array_2:                                             ; Offset_0x1CB240
                incbin  'data\all\c_array2.dat' 
;-------------------------------------------------------------------------------                  
Collision_Index:                                               ; Offset_0x1CD240                
                dc.l    Angel_Island_1_Collision               ; Offset_0x1CD300
                dc.l    Angel_Island_2_Collision               ; Offset_0x1CDF00
                dc.l    Hydrocity_1_Collision                  ; Offset_0x1CEB00
                dc.l    Hydrocity_2_Collision                  ; Offset_0x1CF700
                dc.l    Marble_Garden_1_Collision              ; Offset_0x1D0300
                dc.l    Marble_Garden_2_Collision              ; Offset_0x1D0F00
                dc.l    Carnival_Night_1_Collision             ; Offset_0x1D1B00
                dc.l    Carnival_Night_2_Collision             ; Offset_0x1D1B00
                dc.l    Flying_Battery_1_Collision             ; Offset_0x1D2700
                dc.l    Flying_Battery_2_Collision             ; Offset_0x1D3300
                dc.l    Icecap_1_Collision                     ; Offset_0x1D3F00
                dc.l    Icecap_2_Collision                     ; Offset_0x1D4B00
                dc.l    Launch_Base_1_Collision                ; Offset_0x1D5700
                dc.l    Launch_Base_2_Collision                ; Offset_0x1D6300
                dc.l    Mushroom_Valley_1_Collision            ; Offset_0x1D6F00
                dc.l    Mushroom_Valley_2_Collision            ; Offset_0x1D6F00
                dc.l    Sandopolis_1_Collision                 ; Offset_0x1D6F00
                dc.l    Sandopolis_2_Collision                 ; Offset_0x1D6F00
                dc.l    Lava_Reef_1_Collision                  ; Offset_0x1D6F00
                dc.l    Lava_Reef_2_Collision                  ; Offset_0x1D6F00
                dc.l    Sky_Sanctuary_1_Collision              ; Offset_0x1D6F00
                dc.l    Sky_Sanctuary_2_Collision              ; Offset_0x1D6F00
                dc.l    Death_Egg_1_Collision                  ; Offset_0x1D6F00
                dc.l    Death_Egg_2_Collision                  ; Offset_0x1D6F00
                dc.l    The_Doomsday_1_Collision               ; Offset_0x1D6F00
                dc.l    The_Doomsday_2_Collision               ; Offset_0x1D6F00
                dc.l    Ending_Collision                       ; Offset_0x1D6F00
                dc.l    Ending_Collision                       ; Offset_0x1D6F00
                dc.l    Azure_Lake_Collision                   ; Offset_0x1D6F00
                dc.l    Azure_Lake_Collision                   ; Offset_0x1D6F00
                dc.l    Balloon_Park_Collision                 ; Offset_0x1D7B00
                dc.l    Balloon_Park_Collision                 ; Offset_0x1D7B00
                dc.l    Desert_Palace_Collision                ; Offset_0x1D8700
                dc.l    Desert_Palace_Collision                ; Offset_0x1D8700
                dc.l    Chrome_Gadget_Collision                ; Offset_0x1D9300
                dc.l    Chrome_Gadget_Collision                ; Offset_0x1D9300
                dc.l    Endless_Mine_Collision                 ; Offset_0x1D9F00
                dc.l    Endless_Mine_Collision                 ; Offset_0x1D9F00
                dc.l    BS_Gumball_Machine_Collision           ; Offset_0x1DAB00
                dc.l    BS_Gumball_Machine_Collision           ; Offset_0x1DAB00
                dc.l    BS_Glowing_Spheres_Collision           ; Offset_0x1DB700
                dc.l    BS_Glowing_Spheres_Collision           ; Offset_0x1DB700
                dc.l    BS_Slot_Machine_Collision              ; Offset_0x1DC300
                dc.l    BS_Slot_Machine_Collision              ; Offset_0x1DC300
                dc.l    Lava_Reef_Boss_Collision               ; Offset_0x1DC300
                dc.l    Hidden_Palace_Collision                ; Offset_0x1DC300
                dc.l    Death_Egg_Final_Boss_Collision         ; Offset_0x1DC300
                dc.l    Hidden_Palace_Portal_Collision         ; Offset_0x1DC300


Angel_Island_1_Collision:                                      ; Offset_0x1CD300
                incbin  'data\aiz\aiz1_col.dat'                        
Angel_Island_2_Collision:                                      ; Offset_0x1CDF00
                incbin  'data\aiz\aiz2_col.dat'   
Hydrocity_1_Collision:                                         ; Offset_0x1CEB00
                incbin  'data\hz\hz1_col.dat' 
Hydrocity_2_Collision:                                         ; Offset_0x1CF700                
                incbin  'data\hz\hz2_col.dat' 
Marble_Garden_1_Collision:                                     ; Offset_0x1D0300 
                incbin  'data\mgz\mgz1_col.dat'
Marble_Garden_2_Collision:                                     ; Offset_0x1D0F00  
                incbin  'data\mgz\mgz2_col.dat'
Carnival_Night_1_Collision:                                    ; Offset_0x1D1B00
Carnival_Night_2_Collision:                                    ; Offset_0x1D1B00
                incbin  'data\cnz\cnz_col.dat'
Flying_Battery_1_Collision:                                    ; Offset_0x1D2700
                incbin  'data\fbz\fbz1_col.dat'                 
Flying_Battery_2_Collision:                                    ; Offset_0x1D3300
                incbin  'data\fbz\fbz2_col.dat'   
Icecap_1_Collision:                                            ; Offset_0x1D3F00 
                incbin  'data\iz\iz1_col.dat'
Icecap_2_Collision:                                            ; Offset_0x1D4B00
                incbin  'data\iz\iz2_col.dat'
Launch_Base_1_Collision:                                       ; Offset_0x1D5700 
                incbin  'data\lbz\lbz1_col.dat'
Launch_Base_2_Collision:                                       ; Offset_0x1D6300 
                incbin  'data\lbz\lbz2_col.dat'
Mushroom_Valley_1_Collision:                                   ; Offset_0x1D6F00
Mushroom_Valley_2_Collision:                                   ; Offset_0x1D6F00  
Sandopolis_1_Collision:                                        ; Offset_0x1D6F00 
Sandopolis_2_Collision:                                        ; Offset_0x1D6F00 
Lava_Reef_1_Collision:                                         ; Offset_0x1D6F00
Lava_Reef_2_Collision:                                         ; Offset_0x1D6F00
Sky_Sanctuary_1_Collision:                                     ; Offset_0x1D6F00
Sky_Sanctuary_2_Collision:                                     ; Offset_0x1D6F00
Death_Egg_1_Collision:                                         ; Offset_0x1D6F00
Death_Egg_2_Collision:                                         ; Offset_0x1D6F00
The_Doomsday_1_Collision:                                      ; Offset_0x1D6F00
The_Doomsday_2_Collision:                                      ; Offset_0x1D6F00
Ending_Collision:                                              ; Offset_0x1D6F00
Azure_Lake_Collision:                                          ; Offset_0x1D6F00
                incbin  'data\alz\alz_col.dat'
Balloon_Park_Collision:                                        ; Offset_0x1D7B00
                incbin  'data\bpz\bpz_col.dat'                
Desert_Palace_Collision:                                       ; Offset_0x1D8700 
                incbin  'data\dpz\dpz_col.dat'
Chrome_Gadget_Collision:                                       ; Offset_0x1D9300
                incbin  'data\cgz\cgz_col.dat'
Endless_Mine_Collision:                                        ; Offset_0x1D9F00 
                incbin  'data\emz\emz_col.dat'
BS_Gumball_Machine_Collision:                                  ; Offset_0x1DAB00                    
                incbin  'data\bs_gm\bsgm_col.dat'
BS_Glowing_Spheres_Collision:                                  ; Offset_0x1DB700
                incbin  'data\bs_gs\bsgs_col.dat'
BS_Slot_Machine_Collision:                                     ; Offset_0x1DC300
Lava_Reef_Boss_Collision:                                      ; Offset_0x1DC300
Hidden_Palace_Collision:                                       ; Offset_0x1DC300
Death_Egg_Final_Boss_Collision:                                ; Offset_0x1DC300
Hidden_Palace_Portal_Collision:                                ; Offset_0x1DC300
                incbin  'data\bs_sm\bssm_col.dat'       
                
;------------------------------------------------------------------------------- 
; Mapa das fases
; ->>>
;-------------------------------------------------------------------------------    
Level_Layout:                                                  ; Offset_0x1DCF00
                dc.l    AIz_Map_Act1                           ; Offset_0x1DCFC0
                dc.l    AIz_Map_Act2                           ; Offset_0x1DD80C
                dc.l    Hz_Map_Act1                            ; Offset_0x1DE572
                dc.l    Hz_Map_Act2                            ; Offset_0x1DF0FA
                dc.l    MGz_Map_Act1                           ; Offset_0x1DFFA2
                dc.l    MGz_Map_Act2                           ; Offset_0x1E0C32
                dc.l    CNz_Map_Act1                           ; Offset_0x1E19E2
                dc.l    CNz_Map_Act2                           ; Offset_0x1E2518
                dc.l    FBz_Map_Act1                           ; Offset_0x1E340E
                dc.l    FBz_Map_Act2                           ; Offset_0x1E4278
                dc.l    Iz_Map_Act1                            ; Offset_0x1E4EB2
                dc.l    Iz_Map_Act2                            ; Offset_0x1E5E7A
                dc.l    LBz_Map_Act1                           ; Offset_0x1E6CCA
                dc.l    LBz_Map_Act2                           ; Offset_0x1E7C76
                dc.l    MVz_Map_Act1                           ; Offset_0x1E8B9E
                dc.l    MVz_Map_Act2                           ; Offset_0x1E8B9E
                dc.l    Sz_Map_Act1                            ; Offset_0x1E8B9E
                dc.l    Sz_Map_Act2                            ; Offset_0x1E8B9E
                dc.l    LRz_Map_Act1                           ; Offset_0x1E8B9E
                dc.l    LRz_Map_Act2                           ; Offset_0x1E8B9E
                dc.l    SSz_Map_Act1                           ; Offset_0x1E8B9E
                dc.l    SSz_Map_Act2                           ; Offset_0x1E8B9E
                dc.l    DEz_Map_Act1                           ; Offset_0x1E8B9E
                dc.l    DEz_Map_Act2                           ; Offset_0x1E8B9E
                dc.l    TDz_Map_Act1                           ; Offset_0x1E8B9E
                dc.l    TDz_Map_Act2                           ; Offset_0x1E8B9E
                dc.l    End_Seq_1                              ; Offset_0x1E8B9E
                dc.l    End_Seq_2                              ; Offset_0x1E8B9E
                dc.l    ALz_Map                                ; Offset_0x1E8B9E
                dc.l    ALz_Map                                ; Offset_0x1E8B9E
                dc.l    BPz_Map                                ; Offset_0x1E8D6A
                dc.l    BPz_Map                                ; Offset_0x1E8D6A
                dc.l    DPz_Map                                ; Offset_0x1E8EBE
                dc.l    DPz_Map                                ; Offset_0x1E8EBE
                dc.l    CGz_Map                                ; Offset_0x1E8FB6
                dc.l    CGz_Map                                ; Offset_0x1E8FB6
                dc.l    EMz_Map                                ; Offset_0x1E90AE
                dc.l    EMz_Map                                ; Offset_0x1E90AE
                dc.l    BS_GM_Map                              ; Offset_0x1E91A6
                dc.l    BS_GM_Map                              ; Offset_0x1E91A6
                dc.l    BS_GS_Map                              ; Offset_0x1E9286
                dc.l    BS_GS_Map                              ; Offset_0x1E9286
                dc.l    BS_SM_Map                              ; Offset_0x1E940E
                dc.l    BS_SM_Map                              ; Offset_0x1E940E
                dc.l    LRz_Boss_Map                           ; Offset_0x1E940E
                dc.l    HPz_Map                                ; Offset_0x1E940E
                dc.l    DEz_Boss_Map                           ; Offset_0x1E940E
                dc.l    HPz_Portal_Map                         ; Offset_0x1E940E     
;-------------------------------------------------------------------------------
AIz_Map_Act1:                                                  ; Offset_0x1DCFC0
                incbin  'data\aiz\aiz_map1.dat'
AIz_Map_Act2:                                                  ; Offset_0x1DD80C
                incbin  'data\aiz\aiz_map2.dat'
Hz_Map_Act1:                                                   ; Offset_0x1DE572
                incbin  'data\hz\hz_map1.dat'
Hz_Map_Act2:                                                   ; Offset_0x1DF0FA
                incbin  'data\hz\hz_map2.dat'
MGz_Map_Act1:                                                  ; Offset_0x1DFFA2
                incbin  'data\mgz\mgz_map1.dat'
MGz_Map_Act2:                                                  ; Offset_0x1E0C32
                incbin  'data\mgz\mgz_map2.dat'
CNz_Map_Act1:                                                  ; Offset_0x1E19E2
                incbin  'data\cnz\cnz_map1.dat'
CNz_Map_Act2:                                                  ; Offset_0x1E2518
                incbin  'data\cnz\cnz_map2.dat'
FBz_Map_Act1:                                                  ; Offset_0x1E340E
                incbin  'data\fbz\fbz_map1.dat'
FBz_Map_Act2:                                                  ; Offset_0x1E4278
                incbin  'data\fbz\fbz_map2.dat'
Iz_Map_Act1:                                                   ; Offset_0x1E4EB2
                incbin  'data\iz\iz_map1.dat'
Iz_Map_Act2:                                                   ; Offset_0x1E5E7A
                incbin  'data\iz\iz_map2.dat'
LBz_Map_Act1:                                                  ; Offset_0x1E6CCA
                incbin  'data\lbz\lbz_map1.dat'
LBz_Map_Act2:                                                  ; Offset_0x1E7C76
                incbin  'data\lbz\lbz_map2.dat'
MVz_Map_Act1:                                                  ; Offset_0x1E8B9E
MVz_Map_Act2:                                                  ; Offset_0x1E8B9E
Sz_Map_Act1:                                                   ; Offset_0x1E8B9E
Sz_Map_Act2:                                                   ; Offset_0x1E8B9E
LRz_Map_Act1:                                                  ; Offset_0x1E8B9E
LRz_Map_Act2:                                                  ; Offset_0x1E8B9E
SSz_Map_Act1:                                                  ; Offset_0x1E8B9E
SSz_Map_Act2:                                                  ; Offset_0x1E8B9E
DEz_Map_Act1:                                                  ; Offset_0x1E8B9E
DEz_Map_Act2:                                                  ; Offset_0x1E8B9E
TDz_Map_Act1:                                                  ; Offset_0x1E8B9E
TDz_Map_Act2:                                                  ; Offset_0x1E8B9E
End_Seq_1:                                                     ; Offset_0x1E8B9E
End_Seq_2:                                                     ; Offset_0x1E8B9E
ALz_Map:                                                       ; Offset_0x1E8B9E
                incbin  'data\alz\alz_map.dat'
BPz_Map:                                                       ; Offset_0x1E8D6A
                incbin  'data\bpz\bpz_map.dat'
DPz_Map:                                                       ; Offset_0x1E8EBE
                incbin  'data\dpz\dpz_map.dat'
CGz_Map:                                                       ; Offset_0x1E8FB6
                incbin  'data\cgz\cgz_map.dat'
EMz_Map:                                                       ; Offset_0x1E90AE
                incbin  'data\emz\emz_map.dat'
BS_GM_Map:                                                     ; Offset_0x1E91A6
                incbin  'data\bs_gm\bsgm_map.dat'
BS_GS_Map:                                                     ; Offset_0x1E9286
                incbin  'data\bs_gs\bsgs_map.dat'
BS_SM_Map:                                                     ; Offset_0x1E940E
LRz_Boss_Map:                                                  ; Offset_0x1E940E
HPz_Map:                                                       ; Offset_0x1E940E
DEz_Boss_Map:                                                  ; Offset_0x1E940E
HPz_Portal_Map:                                                ; Offset_0x1E940E  
                incbin  'data\bs_sm\bssm_map.dat'           
;------------------------------------------------------------------------------- 
; Mapa das fases
; <<<-
;-------------------------------------------------------------------------------                             

;-------------------------------------------------------------------------------                 
PalPointers:                                                   ; Offset_0x1E94F4
                dc.l    Pal_S2_Sega_Bg                         ; Offset_0x1E96D4
                dc.w    Palette_Row_0_Offset&$FFFF
                dc.w    $001F
                dc.l    Pal_S2_Title_Screen_Miles              ; Offset_0x1E9754
                dc.w    Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Pal_S2B_Level_Select_Menu              ; Offset_0x1E9774
                dc.w    Palette_Row_0_Offset&$FFFF
                dc.w    $001F
                dc.l    Pal_Level_Sonic_Miles                  ; Offset_0x1E97F4
                dc.w    Palette_Row_0_Offset&$FFFF
                dc.w    $0007
                dc.l    Pal_Level_Select_Menu                  ; Offset_0x1E9834 
                dc.w    Palette_Row_0_Offset&$FFFF                  
                dc.w    $001F
                dc.l    Pal_Knuckles                           ; Offset_0x1E98B4  
                dc.w    Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Pal_S2_Sega_Bg                         ; Offset_0x1E96D4   
                dc.w    Palette_Row_0_Offset&$FFFF                  
                dc.w    $001F
                dc.l    Pal_S2_Sega_Bg                         ; Offset_0x1E96D4
                dc.w    Palette_Row_0_Offset&$FFFF                  
                dc.w    $001F
                dc.l    Pal_S2_Sega_Bg                         ; Offset_0x1E96D4
                dc.w    Palette_Row_0_Offset&$FFFF                  
                dc.w    $001F
                dc.l    Pal_S2_Sega_Bg                         ; Offset_0x1E96D4
                dc.w    Palette_Row_0_Offset&$FFFF                  
                dc.w    $001F
                dc.l    Pal_Angel_Island_Act_1                 ; Offset_0x1E98D4 
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017
                dc.l    Pal_Angel_Island_Act_2                 ; Offset_0x1E9994
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017
                dc.l    Pal_Hydrocity_Act_1                    ; Offset_0x1E9B54
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017
                dc.l    Pal_Hydrocity_Act_2                    ; Offset_0x1E9BB4
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017
                dc.l    Pal_Marble_Garden_Act_1                ; Offset_0x1E9D14
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017
                dc.l    Pal_Marble_Garden_Act_2                ; Offset_0x1E9D14
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017
                dc.l    Pal_Carnival_Night_Act_1               ; Offset_0x1E9D74
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017
                dc.l    Pal_Carnival_Night_Act_2               ; Offset_0x1E9D74
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017
                dc.l    Pal_Flying_Battery_Act_1               ; Offset_0x1E9DD4
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017
                dc.l    Pal_Flying_Battery_Act_2               ; Offset_0x1E9DD4
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017
                dc.l    Pal_Icecap_Act_1                       ; Offset_0x1E9E34
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017
                dc.l    Pal_Icecap_Act_2                       ; Offset_0x1E9E94
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017
                dc.l    Pal_Launch_Base_Act_1                  ; Offset_0x1E9EF4
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017
                dc.l    Pal_Launch_Base_Act_2                  ; Offset_0x1E9FD4
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017 
                dc.l    Pal_Mushroom_Valley_Act_1              ; Offset_0x1EA114
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017 
                dc.l    Pal_Mushroom_Valley_Act_2              ; Offset_0x1EA114
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017 
                dc.l    Pal_Sandopolis_Act_1                   ; Offset_0x1EA114
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017 
                dc.l    Pal_Sandopolis_Act_2                   ; Offset_0x1EA114
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017 
                dc.l    Pal_Lava_Reef_Act_1                    ; Offset_0x1EA114
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017 
                dc.l    Pal_Lava_Reef_Act_2                    ; Offset_0x1EA114
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017 
                dc.l    Pal_Sky_Sanctuary_Act_1                ; Offset_0x1EA114
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017 
                dc.l    Pal_Sky_Sanctuary_Act_2                ; Offset_0x1EA114
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017 
                dc.l    Pal_Death_Egg_Act_1                    ; Offset_0x1EA114
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017 
                dc.l    Pal_Death_Egg_Act_2                    ; Offset_0x1EA114
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017                 
                dc.l    Pal_The_Doomsday_Act_1                 ; Offset_0x1EA114
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017     
                dc.l    Pal_The_Doomsday_Act_2                 ; Offset_0x1EA114
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017    
                dc.l    Pal_Ending_1                           ; Offset_0x1EA114
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017  
                dc.l    Pal_Ending_2                           ; Offset_0x1EA114
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017  
                dc.l    Pal_Azure_Lake                         ; Offset_0x1EA114
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017  
                dc.l    Pal_Azure_Lake                         ; Offset_0x1EA114
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017  
                dc.l    Pal_Balloon_Park                       ; Offset_0x1EA174
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017 
                dc.l    Pal_Balloon_Park                       ; Offset_0x1EA174
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017 
                dc.l    Pal_Angel_Island_Act_1_After_Knuckles  ; Offset_0x1E9934
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017 
                dc.l    Pal_Angel_Island_Act_1_Underwater      ; Offset_0x1E9A54
                dc.w    Palette_Row_0_Offset&$FFFF                  
                dc.w    $001F 
                dc.l    Pal_Angel_Island_Act_2_Underwater      ; Offset_0x1E9AD4
                dc.w    Palette_Row_0_Offset&$FFFF                  
                dc.w    $001F 
                dc.l    Pal_Launch_Base_Act_1_Underwater       ; Offset_0x1E9F54
                dc.w    Palette_Row_0_Offset&$FFFF                  
                dc.w    $001F 
                dc.l    Pal_Launch_Base_Act_2_Underwater       ; Offset_0x1EA034
                dc.w    Palette_Row_0_Offset&$FFFF                  
                dc.w    $001F 
                dc.l    Pal_Launch_Base_Act_2_Underwater_2     ; Offset_0x1EA0B4
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017 
                dc.l    Pal_Angel_Island_Act_2_2               ; Offset_0x1E99F4
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017 
                dc.l    Pal_Hydrocity_Act_1_Underwater         ; Offset_0x1E9C14
                dc.w    Palette_Row_0_Offset&$FFFF                  
                dc.w    $001F 
                dc.l    Pal_Hydrocity_Act_2_Underwater         ; Offset_0x1E9C94
                dc.w    Palette_Row_0_Offset&$FFFF                  
                dc.w    $001F
                dc.l    Pal_Bonus_Stage_Gumball_Machine        ; Offset_0x1EA2F4
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017 
                dc.l    Pal_Desert_Palace                      ; Offset_0x1EA1D4
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017 
                dc.l    Pal_Chrome_Gadget                      ; Offset_0x1EA234
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017
                dc.l    Pal_Endless_Mine                       ; Offset_0x1EA294
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017
                dc.l    Pal_Bonus_Stage_Glowing_Spheres        ; Offset_0x1EA354
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017
                dc.l    Pal_Bonus_Stage_Slot_Machine           ; Offset_0x1EA3B4
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017
                dc.l    Pal_Angel_Island_Act_1_After_Knuckles  ; Offset_0x1E9934
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017
                dc.l    Pal_Angel_Island_Act_1_After_Knuckles  ; Offset_0x1E9934
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017
                dc.l    Pal_Angel_Island_Act_1_After_Knuckles  ; Offset_0x1E9934                
                dc.w    Palette_Row_1_Offset&$FFFF                  
                dc.w    $0017                       
Pal_S2_Sega_Bg:                                                ; Offset_0x1E96D4
                incbin  'data\all\sega_bg.pal'
Pal_S2_Title_Screen_Miles:                                     ; Offset_0x1E9754
                incbin  'data\all\ts_miles.pal'     
Pal_S2B_Level_Select_Menu:                                     ; Offset_0x1E9774
                incbin  'data\all\s2b_menu.pal'     
Pal_Level_Sonic_Miles:                                         ; Offset_0x1E97F4
                incbin  'data\all\sonic.pal'   
Pal_Level_Select_Menu:                                         ; Offset_0x1E9834
                incbin  'data\menus\menu.pal'    
Pal_Knuckles:                                                  ; Offset_0x1E98B4   
                incbin  'data\all\knuckles.pal'       
Pal_Angel_Island_Act_1:                                        ; Offset_0x1E98D4 
                incbin  'data\aiz\aiz_1.pal'
Pal_Angel_Island_Act_1_After_Knuckles:                         ; Offset_0x1E9934  
                incbin  'data\aiz\aiz_1_a.pal'               
Pal_Angel_Island_Act_2:                                        ; Offset_0x1E9994 
                incbin  'data\aiz\aiz_2.pal'
Pal_Angel_Island_Act_2_2:                                      ; Offset_0x1E99F4   
                incbin  'data\aiz\aiz_2_a.pal'                   
Pal_Angel_Island_Act_1_Underwater:                             ; Offset_0x1E9A54
                incbin  'data\aiz\aiz_1_uw.pal'
Pal_Angel_Island_Act_2_Underwater:                             ; Offset_0x1E9AD4
                incbin  'data\aiz\aiz_2_uw.pal'
Pal_Hydrocity_Act_1:                                           ; Offset_0x1E9B54
                incbin  'data\hz\hz_1.pal'
Pal_Hydrocity_Act_2:                                           ; Offset_0x1E9BB4
                incbin  'data\hz\hz_2.pal'
Pal_Hydrocity_Act_1_Underwater:                                ; Offset_0x1E9C14
                incbin  'data\hz\hz_1_uw.pal'
Pal_Hydrocity_Act_2_Underwater:                                ; Offset_0x1E9C94
                incbin  'data\hz\hz_2_uw.pal'
Pal_Marble_Garden_Act_1:                                       ; Offset_0x1E9D14
Pal_Marble_Garden_Act_2:                                       ; Offset_0x1E9D14
                incbin  'data\mgz\mgz.pal'   
Pal_Carnival_Night_Act_1:                                      ; Offset_0x1E9D74
Pal_Carnival_Night_Act_2:                                      ; Offset_0x1E9D74
                incbin  'data\cnz\cnz.pal'
Pal_Flying_Battery_Act_1:                                      ; Offset_0x1E9DD4
Pal_Flying_Battery_Act_2:                                      ; Offset_0x1E9DD4
                incbin  'data\fbz\fbz.pal'
Pal_Icecap_Act_1:                                              ; Offset_0x1E9E34   
                incbin  'data\iz\iz_1.pal'
Pal_Icecap_Act_2:                                              ; Offset_0x1E9E94
                incbin  'data\iz\iz_2.pal'
Pal_Launch_Base_Act_1:                                         ; Offset_0x1E9EF4   
                incbin  'data\lbz\lbz_1.pal'
Pal_Launch_Base_Act_1_Underwater:                              ; Offset_0x1E9F54
                incbin  'data\lbz\lbz_1_uw.pal'
Pal_Launch_Base_Act_2:                                         ; Offset_0x1E9FD4                
                incbin  'data\lbz\lbz_2.pal'
Pal_Launch_Base_Act_2_Underwater:                              ; Offset_0x1EA034   
                incbin  'data\lbz\lbz_2_uw.pal'    
Pal_Launch_Base_Act_2_Underwater_2:                            ; Offset_0x1EA0B4   
                incbin  'data\lbz\lbz2_uw2.pal'             
Pal_Mushroom_Valley_Act_1:                                     ; Offset_0x1EA114
Pal_Mushroom_Valley_Act_2:                                     ; Offset_0x1EA114                    
Pal_Sandopolis_Act_1:                                          ; Offset_0x1EA114 
Pal_Sandopolis_Act_2:                                          ; Offset_0x1EA114 
Pal_Lava_Reef_Act_1:                                           ; Offset_0x1EA114
Pal_Lava_Reef_Act_2:                                           ; Offset_0x1EA114 
Pal_Sky_Sanctuary_Act_1:                                       ; Offset_0x1EA114 
Pal_Sky_Sanctuary_Act_2:                                       ; Offset_0x1EA114 
Pal_Death_Egg_Act_1:                                           ; Offset_0x1EA114
Pal_Death_Egg_Act_2:                                           ; Offset_0x1EA114
Pal_The_Doomsday_Act_1:                                        ; Offset_0x1EA114
Pal_The_Doomsday_Act_2:                                        ; Offset_0x1EA114
Pal_Ending_1:                                                  ; Offset_0x1EA114
Pal_Ending_2:                                                  ; Offset_0x1EA114
Pal_Azure_Lake:                                                ; Offset_0x1EA114
                incbin  'data\alz\alz.pal'
Pal_Balloon_Park:                                              ; Offset_0x1EA174
                incbin  'data\bpz\bpz.pal'
Pal_Desert_Palace:                                             ; Offset_0x1EA1D4
                incbin  'data\dpz\dpz.pal'
Pal_Chrome_Gadget:                                             ; Offset_0x1EA234
                incbin  'data\cgz\cgz.pal'
Pal_Endless_Mine:                                              ; Offset_0x1EA294
                incbin  'data\emz\emz.pal'
Pal_Bonus_Stage_Gumball_Machine:                               ; Offset_0x1EA2F4
                incbin  'data\bs_gm\bs_gm.pal'
Pal_Bonus_Stage_Glowing_Spheres:                               ; Offset_0x1EA354
                incbin  'data\bs_gs\bs_gs.pal'
Pal_Bonus_Stage_Slot_Machine:                                  ; Offset_0x1EA3B4
                incbin  'data\bs_sm\bs_sm.pal'
;-------------------------------------------------------------------------------
LRz_Rocks_Layout:                                              ; Offset_0x1EA414                                      
                incbin  'data\lrz\rockspos.dat'
LRz_Incomplete_Map_Part_1:                                     ; Offset_0x1EAF4A  
                incbin  'data\lrz\IncM1.dat'      
LRz_Map_Act_2:                                                 ; Offset_0x1EB85E  
                incbin  'data\lrz\lrz2_map.dat'   
LRz_Map_Act_1:                                                 ; Offset_0x1EC4CE
                incbin  'data\lrz\lrz_map1.dat'     
LRz_Map_Act_1_2:                                               ; Offset_0x1ED2F6
                incbin  'data\lrz\lrz_map2.dat'   
LRz_Map_Act_1_3:                                               ; Offset_0x1EE11E
                incbin  'data\lrz\lrz_map3.dat'   
LRz_Map_Act_1_4:                                               ; Offset_0x1EEF46
                incbin  'data\lrz\lrz_map4.dat'    
LRz_Map_Act_1_5:                                               ; Offset_0x1EFD6E
                incbin  'data\lrz\lrz_map5.dat' 
LRz_Map_Act_1_6:                                               ; Offset_0x1F0B96
                incbin  'data\lrz\lrz_map6.dat'                   
Left_Over_ALz_Map:                                             ; Offset_0x1F19BE
                incbin  'data\alz\lo_map.dat'                     
Left_Over_BPz_Map:                                             ; Offset_0x1F1B2A
                incbin  'data\bpz\lo_map.dat' 
Left_Over_DPz_Map:                                             ; Offset_0x1F1C04
                incbin  'data\dpz\lo_map.dat'                    
Left_Over_CGz_Map:                                             ; Offset_0x1F1D58
                incbin  'data\cgz\lo_map.dat'                                                              
Left_Over_EMz_Map:                                             ; Offset_0x1F1F9A
                incbin  'data\emz\lo_map.dat'                   
Left_Over_BS_GM_Map:                                           ; Offset_0x1F20EE
                incbin  'data\bs_gm\bsgm_map.dat'
;-------------------------------------------------------------------------------                
Left_Over_PalPointers:                                         ; Offset_0x1F21CE
                dc.l    Left_Over_Pal_S2_Sega_Bg               ; Offset_0x1F25AE
                dc.w    S2_Palette_Row_0_Offset&$FFFF
                dc.w    $001F
                dc.l    Left_Over_Pal_S2_Title_Screen_Miles    ; Offset_0x1F262E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Left_Over_Pal_S2B_Level_Select_Menu    ; Offset_0x1F264E
                dc.w    S2_Palette_Row_0_Offset&$FFFF
                dc.w    $001F
                dc.l    Left_Over_Pal_Level_Sonic_Miles        ; Offset_0x1F26CE
                dc.w    S2_Palette_Row_0_Offset&$FFFF
                dc.w    $0007
                dc.l    Left_Over_Pal_Level_Select_Menu        ; Offset_0x1F270E
                dc.w    S2_Palette_Row_0_Offset&$FFFF
                dc.w    $001F
                dc.l    Left_Over_Pal_Knuckles                 ; Offset_0x1F278E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Left_Over_Pal_S2_Sega_Bg               ; Offset_0x1F25AE
                dc.w    S2_Palette_Row_0_Offset&$FFFF
                dc.w    $001F
                dc.l    Left_Over_Pal_S2_Sega_Bg               ; Offset_0x1F25AE
                dc.w    S2_Palette_Row_0_Offset&$FFFF
                dc.w    $001F
                dc.l    Left_Over_Pal_S2_Sega_Bg               ; Offset_0x1F25AE
                dc.w    S2_Palette_Row_0_Offset&$FFFF
                dc.w    $001F
                dc.l    Left_Over_Pal_S2_Sega_Bg               ; Offset_0x1F25AE
                dc.w    S2_Palette_Row_0_Offset&$FFFF
                dc.w    $001F
                dc.l    Left_Over_Pal_Angel_Island_Act_1       ; Offset_0x1F27AE
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Angel_Island_Act_2       ; Offset_0x1F286E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Hydrocity_Act_1          ; Offset_0x1F2A2E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Hydrocity_Act_2          ; Offset_0x1F2A8E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Marble_Garden_Act_1      ; Offset_0x1F2B6E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Marble_Garden_Act_2      ; Offset_0x1F2B6E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Carnival_Night_Act_1     ; Offset_0x1F2BCE
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Carnival_Night_Act_2     ; Offset_0x1F2BCE
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Flying_Battery_Act_1     ; Offset_0x1F2C2E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Flying_Battery_Act_2     ; Offset_0x1F2C2E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Icecap_Act_1             ; Offset_0x1F2C8E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Icecap_Act_2             ; Offset_0x1F2C8E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Launch_Base_Act_1        ; Offset_0x1F2CEE
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Launch_Base_Act_2        ; Offset_0x1F2DCE
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Mushroom_Valley_Act_1    ; Offset_0x1F2F0E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Mushroom_Valley_Act_2    ; Offset_0x1F2F0E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Sandopolis_Act_1         ; Offset_0x1F2F6E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Sandopolis_Act_2         ; Offset_0x1F2F6E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Lava_Reef_Act_1          ; Offset_0x1F2FCE
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Lava_Reef_Act_2          ; Offset_0x1F302E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Sky_Sanctuary_Act_1      ; Offset_0x1F308E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Sky_Sanctuary_Act_2      ; Offset_0x1F308E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Death_Egg_Act_1          ; Offset_0x1F30EE
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Death_Egg_Act_2          ; Offset_0x1F30EE
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_The_Doomsday_Act_1       ; Offset_0x1F314E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_The_Doomsday_Act_2       ; Offset_0x1F314E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Ending_1                 ; Offset_0x1F31AE
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Ending_2                 ; Offset_0x1F31AE
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Azure_Lake               ; Offset_0x1F31AE
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Azure_Lake               ; Offset_0x1F31AE
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Angel_Island_Act_1_2     ; Offset_0x1F320E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Angel_Island_Act_1_2     ; Offset_0x1F320E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    LO_Pal_Angel_Island_Act_1_After_Knuckles ; Offset_0x1F280E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    LO_Pal_Angel_Island_Act_1_Underwater   ; Offset_0x1F292E
                dc.w    S2_Palette_Row_0_Offset&$FFFF
                dc.w    $001F
                dc.l    LO_Pal_Angel_Island_Act_2_Underwater   ; Offset_0x1F29AE
                dc.w    S2_Palette_Row_0_Offset&$FFFF
                dc.w    $001F
                dc.l    LO_Pal_Launch_Base_Act_1_Underwater    ; Offset_0x1F2D4E
                dc.w    S2_Palette_Row_0_Offset&$FFFF
                dc.w    $001F
                dc.l    LO_Pal_Launch_Base_Act_2_Underwater    ; Offset_0x1F2E2E
                dc.w    S2_Palette_Row_0_Offset&$FFFF
                dc.w    $001F
                dc.l    LO_Pal_Launch_Base_Act_2_Underwater_2  ; Offset_0x1F2EAE
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Angel_Island_Act_2_2     ; Offset_0x1F28CE
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Hydrocity_Act_1_Underwater ; Offset_0x1F2AEE
                dc.w    S2_Palette_Row_0_Offset&$FFFF
                dc.w    $001F
                dc.l    Left_Over_Pal_Hydrocity_Act_2_Underwater ; Offset_0x1F2AEE
                dc.w    S2_Palette_Row_0_Offset&$FFFF
                dc.w    $001F
                dc.l    Left_Over_Pal_Bonus_Stage_Gumball_Machine ; Offset_0x1F326E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    LO_Pal_Angel_Island_Act_1_After_Knuckles ; Offset_0x1F280E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    LO_Pal_Angel_Island_Act_1_After_Knuckles ; Offset_0x1F280E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    LO_Pal_Angel_Island_Act_1_After_Knuckles ; Offset_0x1F280E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    LO_Pal_Angel_Island_Act_1_After_Knuckles ; Offset_0x1F280E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    LO_Pal_Angel_Island_Act_1_After_Knuckles ; Offset_0x1F280E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    LO_Pal_Angel_Island_Act_1_After_Knuckles ; Offset_0x1F280E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    LO_Pal_Angel_Island_Act_1_After_Knuckles ; Offset_0x1F280E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    LO_Pal_Angel_Island_Act_1_After_Knuckles ; Offset_0x1F280E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Offset_0x1F32CE
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F32CE
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F32EE
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F32EE
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F32EE
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F32EE
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F32EE
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F32EE
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F32EE
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F32EE
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F32EE
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F32EE
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F32EE
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F32EE
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F32EE
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F32EE
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F330E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F330E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F330E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F330E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F330E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F330E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F330E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F330E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F330E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F330E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F332E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F334E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F336E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F336E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F336E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F336E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F338E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F338E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F338E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F338E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F338E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F338E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F338E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F338E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F338E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F338E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F338E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F338E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F338E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F338E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F338E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F338E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F338E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F338E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F338E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F338E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F338E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F338E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F338E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F338E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F338E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F338E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F338E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F338E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F338E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F338E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F338E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Offset_0x1F338E
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007         
Left_Over_Pal_S2_Sega_Bg:                                      ; Offset_0x1F25AE
                incbin  'data\all\sega_bg.pal'
Left_Over_Pal_S2_Title_Screen_Miles:                           ; Offset_0x1F262E
                incbin  'data\all\ts_miles.pal' 
Left_Over_Pal_S2B_Level_Select_Menu:                           ; Offset_0x1F264E
                incbin  'data\all\s2b_menu.pal'      
Left_Over_Pal_Level_Sonic_Miles:                               ; Offset_0x1F26CE
                incbin  'data\all\sonic.pal'   
Left_Over_Pal_Level_Select_Menu:                               ; Offset_0x1F270E
                incbin  'data\menus\menu.pal'    
Left_Over_Pal_Knuckles:                                        ; Offset_0x1F278E   
                incbin  'data\all\knuckles.pal'        
Left_Over_Pal_Angel_Island_Act_1:                              ; Offset_0x1F27AE 
                incbin  'data\aiz\aiz_1.pal'
LO_Pal_Angel_Island_Act_1_After_Knuckles:                      ; Offset_0x1F280E  
                incbin  'data\aiz\aiz_1_a.pal'     
Left_Over_Pal_Angel_Island_Act_2:                              ; Offset_0x1F286E 
                incbin  'data\aiz\aiz_2.pal'
Left_Over_Pal_Angel_Island_Act_2_2:                            ; Offset_0x1F28CE   
                incbin  'data\aiz\aiz_2_a.pal'   
LO_Pal_Angel_Island_Act_1_Underwater:                          ; Offset_0x1F292E
                incbin  'data\aiz\aiz_1_uw.pal'                
LO_Pal_Angel_Island_Act_2_Underwater:                          ; Offset_0x1F29AE
                incbin  'data\aiz\aiz_2_uw.pal'                      
Left_Over_Pal_Hydrocity_Act_1:                                 ; Offset_0x1F2A2E
                incbin  'data\hz\hz_1_lo.pal'  
Left_Over_Pal_Hydrocity_Act_2:                                 ; Offset_0x1F2A8E
                incbin  'data\hz\hz_2_lo.pal'
Left_Over_Pal_Hydrocity_Act_1_Underwater:                      ; Offset_0x1F2AEE
Left_Over_Pal_Hydrocity_Act_2_Underwater:  
                incbin  'data\hz\hz_uwlo.pal'                
Left_Over_Pal_Marble_Garden_Act_1:                             ; Offset_0x1F2B6E
Left_Over_Pal_Marble_Garden_Act_2:                             ; Offset_0x1F2B6E
                incbin  'data\mgz\mgz.pal'  
Left_Over_Pal_Carnival_Night_Act_1:                            ; Offset_0x1F2BCE
Left_Over_Pal_Carnival_Night_Act_2:                            ; Offset_0x1F2BCE
                incbin  'data\cnz\cnz_lo.pal'
Left_Over_Pal_Flying_Battery_Act_1:                            ; Offset_0x1F2C2E
Left_Over_Pal_Flying_Battery_Act_2:                            ; Offset_0x1F2C2E
                incbin  'data\fbz\fbz.pal'   
Left_Over_Pal_Icecap_Act_1:                                    ; Offset_0x1F2C8E 
Left_Over_Pal_Icecap_Act_2:                                    ; Offset_0x1F2C8E  
                incbin  'data\iz\iz_lo.pal'
Left_Over_Pal_Launch_Base_Act_1:                               ; Offset_0x1F2CEE   
                incbin  'data\lbz\lbz_1_lo.pal'
LO_Pal_Launch_Base_Act_1_Underwater:                           ; Offset_0x1F2D4E
                incbin  'data\lbz\lbz_1_uw.pal'
Left_Over_Pal_Launch_Base_Act_2:                               ; Offset_0x1F2DCE                
                incbin  'data\lbz\lbz_2_lo.pal'
LO_Pal_Launch_Base_Act_2_Underwater:                           ; Offset_0x1F2E2E    
                incbin  'data\lbz\lbz_2_uw.pal'      
LO_Pal_Launch_Base_Act_2_Underwater_2:                         ; Offset_0x1F2EAE   
                incbin  'data\lbz\lbz2_uw2.pal'         
Left_Over_Pal_Mushroom_Valley_Act_1:                           ; Offset_0x1F2F0E
Left_Over_Pal_Mushroom_Valley_Act_2:                           ; Offset_0x1F2F0E
                incbin  'data\mvz\mvz.pal'    
Left_Over_Pal_Sandopolis_Act_1:                                ; Offset_0x1F2F6E 
Left_Over_Pal_Sandopolis_Act_2:                                ; Offset_0x1F2F6E 
                incbin  'data\sz\sz.pal'   
Left_Over_Pal_Lava_Reef_Act_1:                                 ; Offset_0x1F2FCE
                incbin  'data\lrz\lrz_1.pal' 
Left_Over_Pal_Lava_Reef_Act_2:                                 ; Offset_0x1F302E 
                incbin  'data\lrz\lrz_2.pal' 
Left_Over_Pal_Sky_Sanctuary_Act_1:                             ; Offset_0x1F308E 
Left_Over_Pal_Sky_Sanctuary_Act_2:                             ; Offset_0x1F308E
                incbin  'data\ssz\ssz.pal'
Left_Over_Pal_Death_Egg_Act_1:                                 ; Offset_0x1F30EE
Left_Over_Pal_Death_Egg_Act_2:                                 ; Offset_0x1F30EE
                incbin  'data\dez\dez.pal'
Left_Over_Pal_The_Doomsday_Act_1:                              ; Offset_0x1F314E
Left_Over_Pal_The_Doomsday_Act_2:                              ; Offset_0x1F314E
                incbin  'data\tdz\tdz.pal'
Left_Over_Pal_Ending_1:                                        ; Offset_0x1F31AE
Left_Over_Pal_Ending_2:                                        ; Offset_0x1F31AE

Left_Over_Pal_Azure_Lake:                                      ; Offset_0x1F31AE
                incbin  'data\alz\alz_lo.pal'
Left_Over_Pal_Angel_Island_Act_1_2:                            ; Offset_0x1F320E
                incbin  'data\aiz\aiz_1_lo.pal'         
Left_Over_Pal_Bonus_Stage_Gumball_Machine:                     ; Offset_0x1F326E
                incbin  'data\bs_gm\bs_gm.pal'       
Offset_0x1F32CE:
                dc.w    $0886, $0EEE, $04AE, $026E, $024A, $00EE, $000E, $0224
                dc.w    $00AE, $008E, $08AE, $0020, $0ECC, $0CAA, $0866, $0020
Offset_0x1F32EE:
                dc.w    $0EE0, $0EEE, $006E, $004A, $0028, $00EE, $0000, $00E0
                dc.w    $00A0, $0060, $0020, $0020, $0EA8, $0A60, $0640, $0000
Offset_0x1F330E:
                dc.w    $0EE0, $0EEE, $0CCC, $0888, $0666, $00EE, $000E, $0224
                dc.w    $00CE, $00AE, $004A, $0222, $0AAA, $0864, $0642, $0000
Offset_0x1F332E:
                dc.w    $00EE, $0EEE, $068C, $046A, $0246, $00EE, $0088, $0000
                dc.w    $08AC, $068C, $0448, $0222, $02AC, $004A, $0224, $0222
Offset_0x1F334E:
                dc.w    $00EE, $0EEE, $0000, $0000, $0000, $0000, $0000, $0224
                dc.w    $06AE, $004C, $0228, $0222, $0EAA, $0A64, $0642, $0020
Offset_0x1F336E:
                dc.w    $0886, $0EEE, $0000, $0000, $00E0, $00EE, $000E, $0224
                dc.w    $00AE, $008E, $024A, $0222, $0EAA, $0A64, $0642, $0000
Offset_0x1F338E:
;-------------------------------------------------------------------------------
Left_Over_LRz_Rocks_Layout:                                    ; Offset_0x1F338E                                      
                incbin  'data\lrz\rockspos.dat'
LRz_Incomplete_Map_Part_2_2:                                   ; Offset_0x1F3EC4  
                incbin  'data\lrz\incm1_p2.dat' 
Left_Over_ALz_Map_2:                                           ; Offset_0x1F4456
                incbin  'data\alz\lo_map.dat' 
Left_Over_BPz_Map_2:                                           ; Offset_0x1F45C2
                incbin  'data\bpz\lo_map_2.dat'                                  
Left_Over_DPz_Map_2:                                           ; Offset_0x1F46A6
                incbin  'data\dpz\lo_map_2.dat'   
Left_Over_CGz_Map_2:                                           ; Offset_0x1F478E
                incbin  'data\cgz\lo_map_2.dat'                                                              
Left_Over_EMz_Map_2:                                           ; Offset_0x1F4A56
                incbin  'data\emz\lo_map.dat'                   
Left_Over_BS_GM_Map_2:                                         ; Offset_0x1F4BAA
                incbin  'data\bs_gm\lo_map.dat'                                
;-------------------------------------------------------------------------------
Left_Over_PalPointers_2:                                       ; Offset_0x1F4C8A
                dc.l    Left_Over_Pal_S2_Sega_Bg_2             ; Offset_0x1F4E6A
                dc.w    S2_Palette_Row_0_Offset&$FFFF
                dc.w    $001F
                dc.l    Left_Over_Pal_S2_Title_Screen_Miles_2  ; Offset_0x1F4EEA
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Left_Over_Pal_S2B_Level_Select_Menu_2  ; Offset_0x1F4F0A
                dc.w    S2_Palette_Row_0_Offset&$FFFF
                dc.w    $001F
                dc.l    Left_Over_Pal_Level_Sonic_Miles_2      ; Offset_0x1F4F8A
                dc.w    S2_Palette_Row_0_Offset&$FFFF
                dc.w    $0007
                dc.l    Left_Over_Pal_Level_Select_Menu_2      ; Offset_0x1F4FCA
                dc.w    S2_Palette_Row_0_Offset&$FFFF
                dc.w    $001F
                dc.l    Left_Over_Pal_Knuckles_2               ; Offset_0x1F504A
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0007
                dc.l    Left_Over_Pal_S2_Sega_Bg_2             ; Offset_0x1F4E6A
                dc.w    S2_Palette_Row_0_Offset&$FFFF
                dc.w    $001F
                dc.l    Left_Over_Pal_S2_Sega_Bg_2             ; Offset_0x1F4E6A
                dc.w    S2_Palette_Row_0_Offset&$FFFF
                dc.w    $001F
                dc.l    Left_Over_Pal_S2_Sega_Bg_2             ; Offset_0x1F4E6A
                dc.w    S2_Palette_Row_0_Offset&$FFFF
                dc.w    $001F
                dc.l    Left_Over_Pal_S2_Sega_Bg_2             ; Offset_0x1F4E6A
                dc.w    S2_Palette_Row_0_Offset&$FFFF
                dc.w    $001F
                dc.l    Left_Over_Pal_Angel_Island_Act_1_2a    ; Offset_0x1F506A
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Angel_Island_Act_2_2a    ; Offset_0x1F512A
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Hydrocity_Act_1_2        ; Offset_0x1F52EA
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Hydrocity_Act_2_2        ; Offset_0x1F534A
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Marble_Garden_Act_1_2    ; Offset_0x1F542A
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Marble_Garden_Act_2_2    ; Offset_0x1F542A
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Carnival_Night_Act_1_2   ; Offset_0x1F548A
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Carnival_Night_Act_2_2   ; Offset_0x1F548A
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Flying_Battery_Act_1_2   ; Offset_0x1F54EA
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Flying_Battery_Act_2_2   ; Offset_0x1F54EA
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Icecap_Act_1_2           ; Offset_0x1F554A
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Icecap_Act_2_2           ; Offset_0x1F55AA
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Launch_Base_Act_1_2      ; Offset_0x1F560A
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Launch_Base_Act_2_2      ; Offset_0x1F56EA
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Mushroom_Valley_Act_1_2  ; Offset_0x1F582A
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Mushroom_Valley_Act_2_2  ; Offset_0x1F582A
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Sandopolis_Act_1_2       ; Offset_0x1F588A
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Sandopolis_Act_2_2       ; Offset_0x1F588A
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Lava_Reef_Act_1_2        ; Offset_0x1F58EA
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Lava_Reef_Act_2_2        ; Offset_0x1F594A
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Sky_Sanctuary_Act_1_2    ; Offset_0x1F59AA
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Sky_Sanctuary_Act_2_2    ; Offset_0x1F59AA
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Death_Egg_Act_1_2        ; Offset_0x1F5A0A
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Death_Egg_Act_2_2        ; Offset_0x1F5A0A
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_The_Doomsday_Act_1_2     ; Offset_0x1F5A6A
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_The_Doomsday_Act_2_2     ; Offset_0x1F5A6A
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Ending_1_2               ; Offset_0x1F5ACA
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Ending_2_2               ; Offset_0x1F5ACA
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Azure_Lake_2             ; Offset_0x1F5ACA
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Azure_Lake_2             ; Offset_0x1F5ACA
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Balloon_Park             ; Offset_0x1F5B2A
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Balloon_Park             ; Offset_0x1F5B2A
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    LO_Pal_Angel_Island_Act_1_After_Knuckles_2 ; Offset_0x1F50CA
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    LO_Pal_Angel_Island_Act_1_Underwater_2 ; Offset_0x1F51EA
                dc.w    S2_Palette_Row_0_Offset&$FFFF
                dc.w    $001F
                dc.l    LO_Pal_Angel_Island_Act_2_Underwater_2 ; Offset_0x1F526A
                dc.w    S2_Palette_Row_0_Offset&$FFFF
                dc.w    $001F
                dc.l    LO_Pal_Launch_Base_Act_1_Underwater_2  ; Offset_0x1F566A
                dc.w    S2_Palette_Row_0_Offset&$FFFF
                dc.w    $001F
                dc.l    LO_Pal_Launch_Base_Act_2_Underwater_2_2a ; Offset_0x1F574A
                dc.w    S2_Palette_Row_0_Offset&$FFFF
                dc.w    $001F
                dc.l    LO_Pal_Launch_Base_Act_2_Underwater_2_2_2 ; Offset_0x1F57CA
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Angel_Island_Act_2_2_2   ; Offset_0x1F518A
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Hydrocity_Act_1_Underwater_2 ; Offset_0x1F53AA
                dc.w    S2_Palette_Row_0_Offset&$FFFF
                dc.w    $001F
                dc.l    Left_Over_Pal_Hydrocity_Act_2_Underwater_2 ; Offset_0x1F53AA
                dc.w    S2_Palette_Row_0_Offset&$FFFF
                dc.w    $001F
                dc.l    Left_Over_Pal_Bonus_Stage_Gumball_Machine_2 ; Offset_0x1F5CAA
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Pal_Desert_Palace        ; Offset_0x1F5B8A
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    Left_Over_Pal_Chrome_Gadget            ; Offset_0x1F5BEA
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    LO_Pal_Angel_Island_Act_1_Before_Knuckles_2 ; Offset_0x1F5C4A
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    LO_Pal_Angel_Island_Act_1_After_Knuckles_2 ; Offset_0x1F50CA
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    LO_Pal_Angel_Island_Act_1_After_Knuckles_2 ; Offset_0x1F50CA
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    LO_Pal_Angel_Island_Act_1_After_Knuckles_2 ; Offset_0x1F50CA
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    LO_Pal_Angel_Island_Act_1_After_Knuckles_2 ; Offset_0x1F50CA
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017
                dc.l    LO_Pal_Angel_Island_Act_1_After_Knuckles_2 ; Offset_0x1F50CA
                dc.w    S2_Palette_Row_1_Offset&$FFFF
                dc.w    $0017                

Left_Over_Pal_S2_Sega_Bg_2:                                    ; Offset_0x1F4E6A
                incbin  'data\all\sega_bg.pal'
Left_Over_Pal_S2_Title_Screen_Miles_2:                         ; Offset_0x1F4EEA
                incbin  'data\all\ts_miles.pal'                 
Left_Over_Pal_S2B_Level_Select_Menu_2:                         ; Offset_0x1F4F0A
                incbin  'data\all\s2b_menu.pal' 
Left_Over_Pal_Level_Sonic_Miles_2:                             ; Offset_0x1F4F8A
                incbin  'data\all\sonic.pal'   
Left_Over_Pal_Level_Select_Menu_2:                             ; Offset_0x1F4FCA
                incbin  'data\menus\menu.pal'    
Left_Over_Pal_Knuckles_2:                                      ; Offset_0x1F504A   
                incbin  'data\all\knuckles.pal'  
Left_Over_Pal_Angel_Island_Act_1_2a:                           ; Offset_0x1F506A 
                incbin  'data\aiz\aiz_1.pal'
LO_Pal_Angel_Island_Act_1_After_Knuckles_2:                    ; Offset_0x1F50CA  
                incbin  'data\aiz\aiz_1_a.pal'     
Left_Over_Pal_Angel_Island_Act_2_2a:                           ; Offset_0x1F512A 
                incbin  'data\aiz\aiz_2.pal'      
Left_Over_Pal_Angel_Island_Act_2_2_2:                          ; Offset_0x1F518A   
                incbin  'data\aiz\aiz_2_a.pal'                                                       
LO_Pal_Angel_Island_Act_1_Underwater_2:                        ; Offset_0x1F51EA
                incbin  'data\aiz\aiz_1_uw.pal'                
LO_Pal_Angel_Island_Act_2_Underwater_2:                        ; Offset_0x1F526A
                incbin  'data\aiz\aiz_2_uw.pal'          
Left_Over_Pal_Hydrocity_Act_1_2:                               ; Offset_0x1F52EA
                incbin  'data\hz\hz_1_lo2.pal'  
Left_Over_Pal_Hydrocity_Act_2_2:                               ; Offset_0x1F534A
                incbin  'data\hz\hz_2_lo2.pal'
Left_Over_Pal_Hydrocity_Act_1_Underwater_2:                    ; Offset_0x1F53AA
Left_Over_Pal_Hydrocity_Act_2_Underwater_2:  
                incbin  'data\hz\hz_uwlo.pal'    
Left_Over_Pal_Marble_Garden_Act_1_2:                           ; Offset_0x1F542A
Left_Over_Pal_Marble_Garden_Act_2_2:                           ; Offset_0x1F542A
                incbin  'data\mgz\mgz.pal'              
Left_Over_Pal_Carnival_Night_Act_1_2:                          ; Offset_0x1F548A
Left_Over_Pal_Carnival_Night_Act_2_2:                          ; Offset_0x1F548A
                incbin  'data\cnz\cnz.pal'             
Left_Over_Pal_Flying_Battery_Act_1_2:                          ; Offset_0x1F54EA
Left_Over_Pal_Flying_Battery_Act_2_2:                          ; Offset_0x1F54EA
                incbin  'data\fbz\fbz.pal'  
Left_Over_Pal_Icecap_Act_1_2:                                  ; Offset_0x1F554A   
                incbin  'data\iz\iz_1_lo.pal'
Left_Over_Pal_Icecap_Act_2_2:                                  ; Offset_0x1F55AA
                incbin  'data\iz\iz_2_lo.pal'

Left_Over_Pal_Launch_Base_Act_1_2:                             ; Offset_0x1F560A   
                incbin  'data\lbz\lbz_1_lo.pal'
LO_Pal_Launch_Base_Act_1_Underwater_2:                         ; Offset_0x1F566A
                incbin  'data\lbz\lbz_1_uw.pal'   
Left_Over_Pal_Launch_Base_Act_2_2:                             ; Offset_0x1F56EA                
                incbin  'data\lbz\lbz2_lo2.pal'
LO_Pal_Launch_Base_Act_2_Underwater_2_2a:                      ; Offset_0x1F574A   
                incbin  'data\lbz\lbz_2_uw.pal'    
LO_Pal_Launch_Base_Act_2_Underwater_2_2_2:                     ; Offset_0x1F57CA   
                incbin  'data\lbz\lbz2_uw2.pal'    
Left_Over_Pal_Mushroom_Valley_Act_1_2:                         ; Offset_0x1F582A
Left_Over_Pal_Mushroom_Valley_Act_2_2:                         ; Offset_0x1F582A
                incbin  'data\mvz\mvz.pal'    
Left_Over_Pal_Sandopolis_Act_1_2:                              ; Offset_0x1F588A 
Left_Over_Pal_Sandopolis_Act_2_2:                              ; Offset_0x1F588A 
                incbin  'data\sz\sz.pal'   
Left_Over_Pal_Lava_Reef_Act_1_2:                               ; Offset_0x1F58EA
                incbin  'data\lrz\lrz_1.pal' 
Left_Over_Pal_Lava_Reef_Act_2_2:                               ; Offset_0x1F594A 
                incbin  'data\lrz\lrz_2.pal' 
Left_Over_Pal_Sky_Sanctuary_Act_1_2:                           ; Offset_0x1F59AA 
Left_Over_Pal_Sky_Sanctuary_Act_2_2:                           ; Offset_0x1F59AA
                incbin  'data\ssz\ssz.pal'
Left_Over_Pal_Death_Egg_Act_1_2:                               ; Offset_0x1F5A0A
Left_Over_Pal_Death_Egg_Act_2_2:                               ; Offset_0x1F5A0A
                incbin  'data\dez\dez.pal'
Left_Over_Pal_The_Doomsday_Act_1_2:                            ; Offset_0x1F5A6A
Left_Over_Pal_The_Doomsday_Act_2_2:                            ; Offset_0x1F5A6A
                incbin  'data\tdz\tdz.pal'
Left_Over_Pal_Ending_1_2:                                      ; Offset_0x1F5ACA
Left_Over_Pal_Ending_2_2:                                      ; Offset_0x1F5ACA

Left_Over_Pal_Azure_Lake_2:                                    ; Offset_0x1F5ACA
                incbin  'data\alz\alz_lo_2.pal'
Left_Over_Pal_Balloon_Park:                                    ; Offset_0x1F5B2A
                incbin  'data\bpz\bpz_lo.pal'     
Left_Over_Pal_Pal_Desert_Palace:                               ; Offset_0x1F5B8A
                incbin  'data\dpz\dpz_lo.pal'
Left_Over_Pal_Chrome_Gadget:                                   ; Offset_0x1F5BEA
                incbin  'data\cgz\cgz_lo.pal'
LO_Pal_Angel_Island_Act_1_Before_Knuckles_2                    ; Offset_0x1F5C4A
                incbin  'data\aiz\aiz_1_lo.pal'
Left_Over_Pal_Bonus_Stage_Gumball_Machine_2:                   ; Offset_0x1F5CAA
                incbin  'data\bs_gm\bs_gm.pal'  
Left_Over_LRz_Rocks_Layout_2:                                  ; Offset_0x1F5D0A                                      
                incbin  'data\lrz\rockspos.dat'
Left_Over_Incomplete_LRz_Rocks_Layout_2:                       ; Offset_0x1F6840
                incbin  'data\lrz\incrockp.dat' 
Left_Over_LRz_Rocks_Layout_2a:                                ; Offset_0x1F5D0A                                      
                incbin  'data\lrz\rockpos2.dat'
;-------------------------------------------------------------------------------                                                                                                                                                         
                align    $1F7000  ; $FF Fill 
;-------------------------------------------------------------------------------
Player_Start_Speed_Array:                                      ; Offset_0x1F7000
                dc.w    $0600, $0010, $0020, $0000
                dc.w    $04C0, $001C, $0070, $0000
                dc.w    $0580, $0010, $0200, $0000
;-------------------------------------------------------------------------------                
Player_Start_Position_Array:                                   ; Offset_0x1F7018
                dc.w    $1380, $041C, $0060, $02F9  ; AIz 
                dc.w    $0280, $0020, $0220, $082C  ; Hz 
                dc.w    $0040, $0070, $0060, $08BE  ; MGz
                dc.w    $0060, $06CC, $0060, $022C  ; CNz
                dc.w    $0060, $06EC, $0060, $05EC  ; FBz
                dc.w    $00D0, $0060, $0060, $06ED  ; Iz
                dc.w    $0090, $05AC, $0630, $03EC  ; LBz
                dc.w    $0080, $06AA, $0080, $03AA  ; MVz
                dc.w    $0230, $01AC, $0230, $01AC  ; Sz
                dc.w    $0100, $0020, $0100, $0020  ; LRz
                dc.w    $0060, $06AC, $0060, $056C  ; SSz
                dc.w    $0060, $06AC, $0060, $05AC  ; DEz
                dc.w    $0060, $02AC, $0060, $058C  ; TDz
                dc.w    $0060, $01EC, $0060, $012C  ; End Seq
                dc.w    $0430, $018C, $0030, $008C  ; ALz
                dc.w    $05C0, $0264, $0060, $012C  ; BPz
                dc.w    $0758, $0144, $0060, $0070  ; DPz
                dc.w    $0454, $002C, $0060, $0070  ; CGz
                dc.w    $0830, $0190, $0060, $0070  ; EMz
                dc.w    $0100, $0120, $0060, $0070  ; BS GM
                dc.w    $0060, $0070, $0060, $0070  ; BS GS
                dc.w    $0060, $0070, $0060, $0070  ; BS SM
                dc.w    $0060, $0070, $0060, $0070  ; LRz Boss / HPz
                dc.w    $0060, $0070, $0060, $0070  ; DEz Boss / HPz Portal                                               
;===============================================================================
; Array do posicionamento dos objetos das fases
; ->>>
;===============================================================================
Objects_Layout:                                                ; Offset_0x1F70D8
                dc.l    AIz_Obj_Act1                           ; Offset_0x1F72DE
                dc.l    AIz_Obj_Act2                           ; Offset_0x1F75C6
                dc.l    Hz_Obj_Act1                            ; Offset_0x1F7F46
                dc.l    Hz_Obj_Act2                            ; Offset_0x1F8762
                dc.l    MGz_Obj_Act1                           ; Offset_0x1F970E
                dc.l    MGz_Obj_Act2                           ; Offset_0x1FA4A2
                dc.l    CNz_Obj_Act1                           ; Offset_0x1FB0FE
                dc.l    CNz_Obj_Act2                           ; Offset_0x1FB9FE
                dc.l    FBz_Obj_Act1                           ; Offset_0x1FC970
                dc.l    FBz_Obj_Act2                           ; Offset_0x1FC982
                dc.l    Iz_Obj_Act1                            ; Offset_0x1FCA0E
                dc.l    Iz_Obj_Act2                            ; Offset_0x1FCDF8
                dc.l    LBz_Obj_Act1                           ; Offset_0x1FD896
                dc.l    LBz_Obj_Act2                           ; Offset_0x1FE100
                dc.l    MVz_Obj_Act1                           ; Offset_0x1FF620
                dc.l    MVz_Obj_Act2                           ; Offset_0x1FF722
                dc.l    Sz_Obj_Act1                            ; Offset_0x1FF7F4
                dc.l    Sz_Obj_Act2                            ; Offset_0x1FF800
                dc.l    LRz_Obj_Act1                           ; Offset_0x1FF81E
                dc.l    LRz_Obj_Act2                           ; Offset_0x1FF82A
                dc.l    SSz_Obj_Act1                           ; Offset_0x1FF848
                dc.l    SSz_Obj_Act2                           ; Offset_0x1FF854
                dc.l    DEz_Obj_Act1                           ; Offset_0x1FF872
                dc.l    DEz_Obj_Act2                           ; Offset_0x1FF87E
                dc.l    TDz_Obj_Act1                           ; Offset_0x1FF89C
                dc.l    TDz_Obj_Act2                           ; Offset_0x1FF8A8
                dc.l    SSz_KTe_Boss_Obj_Act1                  ; Offset_0x1FF8C6
                dc.l    SSz_KTe_Boss_Obj_Act2                  ; Offset_0x1FF8D2
                dc.l    ALz_Obj_Act1                           ; Offset_0x1FF8F0
                dc.l    ALz_Obj_Act2                           ; Offset_0x1FF92C
                dc.l    BPz_Obj_Act1                           ; Offset_0x1FF94A
                dc.l    BPz_Obj_Act2                           ; Offset_0x1FF99E
                dc.l    DPz_Obj_Act1                           ; Offset_0x1FF9BC
                dc.l    DPz_Obj_Act2                           ; Offset_0x1FFA28
                dc.l    CGZ_Obj_Act1                           ; Offset_0x1FFA46
                dc.l    CGZ_Obj_Act2                           ; Offset_0x1FFAA6
                dc.l    EMz_Obj_Act1                           ; Offset_0x1FFAC4
                dc.l    EMz_Obj_Act2                           ; Offset_0x1FFAEE
                dc.l    BS_GM_Obj_Act1                         ; Offset_0x1FFB0C
                dc.l    BS_GM_Obj_Act2                         ; Offset_0x1FFB18
                dc.l    BS_GS_Obj_Act1                         ; Offset_0x1FFB36
                dc.l    BS_GS_Obj_Act2                         ; Offset_0x1FFB42
                dc.l    BS_SM_Obj_Act1                         ; Offset_0x1FFB60
                dc.l    BS_SM_Obj_Act2                         ; Offset_0x1FFB6C
                dc.l    LRz_Act2_Boss_Obj                      ; Offset_0x1FFB8A
                dc.l    HPz_Obj                                ; Offset_0x1FFB96
                dc.l    DEz_Final_Boss_Obj                     ; Offset_0x1FFBB4
                dc.l    HPz_Obj_2                              ; Offset_0x1FFBC0
;===============================================================================
; Array do posicionamento dos objetos das fases
; <<<-
;===============================================================================  

;===============================================================================
; Array do posicionamento dos an�is das fases
; ->>>
;===============================================================================                  
Rings_Layout:                                                  ; Offset_0x1F7198                  
                dc.l    AIz_Rng_Act1                           ; Offset_0x1F7A4C
                dc.l    AIz_Rng_Act2                           ; Offset_0x1F7BE4
                dc.l    Hz_Rng_Act1                            ; Offset_0x1F8FA8
                dc.l    Hz_Rng_Act2                            ; Offset_0x1F93F0
                dc.l    MGz_Rng_Act1                           ; Offset_0x1F9F18
                dc.l    MGz_Rng_Act2                           ; Offset_0x1FABD4
                dc.l    CNz_Rng_Act1                           ; Offset_0x1FC4A2
                dc.l    CNz_Rng_Act2                           ; Offset_0x1FC7DA
                dc.l    FBz_Rng_Act1                           ; Offset_0x1FC99A
                dc.l    FBz_Rng_Act2                           ; Offset_0x1FC9C2
                dc.l    Iz_Rng_Act1                            ; Offset_0x1FD344
                dc.l    Iz_Rng_Act2                            ; Offset_0x1FD550
                dc.l    LBz_Rng_Act1                           ; Offset_0x1FE8F8
                dc.l    LBz_Rng_Act2                           ; Offset_0x1FEC88
                dc.l    MVz_Rng_Act1                           ; Offset_0x1FF7E2
                dc.l    MVz_Rng_Act2                           ; Offset_0x1FF7E8
                dc.l    Sz_Rng_Act1                            ; Offset_0x1FF80C
                dc.l    Sz_Rng_Act2                            ; Offset_0x1FF812
                dc.l    LRz_Rng_Act1                           ; Offset_0x1FF836
                dc.l    LRz_Rng_Act2                           ; Offset_0x1FF83C
                dc.l    SSz_Rng_Act1                           ; Offset_0x1FF860
                dc.l    SSz_Rng_Act2                           ; Offset_0x1FF866
                dc.l    DEz_Rng_Act1                           ; Offset_0x1FF88A
                dc.l    DEz_Rng_Act2                           ; Offset_0x1FF890
                dc.l    TDz_Rng_Act1                           ; Offset_0x1FF8B4
                dc.l    TDz_Rng_Act2                           ; Offset_0x1FF8BA
                dc.l    SSz_KTe_Boss_Rng_Act1                  ; Offset_0x1FF8DE
                dc.l    SSz_KTe_Boss_Rng_Act2                  ; Offset_0x1FF8E4
                dc.l    ALz_Rng_Act1                           ; Offset_0x1FF938
                dc.l    ALz_Rng_Act2                           ; Offset_0x1FF93E
                dc.l    BPz_Rng_Act1                           ; Offset_0x1FF9AA
                dc.l    BPz_Rng_Act2                           ; Offset_0x1FF9B0
                dc.l    DPz_Rng_Act1                           ; Offset_0x1FFA34
                dc.l    DPz_Rng_Act2                           ; Offset_0x1FFA3A
                dc.l    CGZ_Rng_Act1                           ; Offset_0x1FFAB2
                dc.l    CGZ_Rng_Act2                           ; Offset_0x1FFAB8
                dc.l    EMz_Rng_Act1                           ; Offset_0x1FFAFA
                dc.l    EMz_Rng_Act2                           ; Offset_0x1FFB00
                dc.l    BS_GM_Rng_Act1                         ; Offset_0x1FFB24
                dc.l    BS_GM_Rng_Act2                         ; Offset_0x1FFB2A
                dc.l    BS_GS_Rng_Act1                         ; Offset_0x1FFB4E
                dc.l    BS_GS_Rng_Act2                         ; Offset_0x1FFB54
                dc.l    BS_SM_Rng_Act1                         ; Offset_0x1FFB78
                dc.l    BS_SM_Rng_Act2                         ; Offset_0x1FFB7E
                dc.l    LRz_Act2_Boss_Rng                      ; Offset_0x1FFBA2
                dc.l    HPz_Rng                                ; Offset_0x1FFBA8
                dc.l    DEz_Final_Boss_Rng                     ; Offset_0x1FFBCC
                dc.l    HPz_Rng_2                              ; Offset_0x1FFBD2
;===============================================================================
; Array do posicionamento dos an�is das fases
; <<<-
;===============================================================================   
                
;===============================================================================
; Ponteiro para origem e destino dos tuneis trasportadores usados na LBz de
; ->>>     acordo com o sub-tipo do objeto
;===============================================================================
LBz_Automatic_Tunnel_From_To_Data:                             ; Offset_0x1F7258                
                dc.l    Teleport_Data_0x00                     ; Offset_0x1FF0C8
                dc.l    Teleport_Data_0x01                     ; Offset_0x1FF0F2
                dc.l    Teleport_Data_0x02                     ; Offset_0x1FF11C
                dc.l    Teleport_Data_0x03                     ; Offset_0x1FF156
                dc.l    Teleport_Data_0x04                     ; Offset_0x1FF180
                dc.l    Teleport_Data_0x05                     ; Offset_0x1FF1BA
                dc.l    Teleport_Data_0x06                     ; Offset_0x1FF1E4
                dc.l    Teleport_Data_0x07                     ; Offset_0x1FF21E
                dc.l    Teleport_Data_0x08                     ; Offset_0x1FF248
                dc.l    Teleport_Data_0x09                     ; Offset_0x1FF282
                dc.l    Teleport_Data_0x0A                     ; Offset_0x1FF2AC
                dc.l    Teleport_Data_0x0B                     ; Offset_0x1FF2E6
                dc.l    Teleport_Data_0x0C                     ; Offset_0x1FF310
                dc.l    Teleport_Data_0x0D                     ; Offset_0x1FF3E6
                dc.l    Teleport_Data_0x0E                     ; Offset_0x1FF44C
                dc.l    Teleport_Data_0x0F                     ; Offset_0x1FF44C
                dc.l    Teleport_Data_0x10                     ; Offset_0x1FF44C
                dc.l    Teleport_Data_0x11                     ; Offset_0x1FF4CA
                dc.l    Teleport_Data_0x12                     ; Offset_0x1FF548
                dc.l    Teleport_Data_0x13                     ; Offset_0x1FF5C6
                dc.l    Teleport_Data_0x14                     ; Offset_0x1FF5F0
;===============================================================================
; Ponteiro para origem e destino dos tuneis trasportadores usados na LBz de
; <<<-     acordo com o sub-tipo do objeto
;===============================================================================                
                dc.l    Offset_0x1FF61A
                dc.l    Offset_0x1FF61A
                dc.l    Offset_0x1FF61A
                dc.l    Offset_0x1FF61A
                dc.l    Offset_0x1FF61A
                dc.l    Offset_0x1FF61A
                dc.l    Offset_0x1FF61A
                dc.l    Offset_0x1FF61A
                dc.l    Offset_0x1FF61A
                dc.l    Offset_0x1FF61A
                dc.l    Offset_0x1FF61A  

                dc.w    $FFFF, $0000, $0000 
;-------------------------------------------------------------------------------
AIz_Obj_Act1:                                                  ; Offset_0x1F72DE
                incbin  'data\aiz\obj_act1.dat'     
AIz_Obj_Act2:                                                  ; Offset_0x1F75C6    
                incbin  'data\aiz\obj_act2.dat'
AIz_Rng_Act1:                                                  ; Offset_0x1F7A4C
                incbin  'data\aiz\rng_act1.dat'
AIz_Rng_Act2:                                                  ; Offset_0x1F7BE4    
                incbin  'data\aiz\rng_act2.dat'
;-------------------------------------------------------------------------------                
                dc.w    $FFFF, $0000, $0000   
Hz_Obj_Act1:                                                   ; Offset_0x1F7F46
                incbin  'data\hz\obj_act1.dat'
Hz_Obj_Act2:                                                   ; Offset_0x1F8762
                incbin  'data\hz\obj_act2.dat'   
Hz_Rng_Act1:                                                   ; Offset_0x1F8FA8
                incbin  'data\hz\rng_act1.dat'
Hz_Rng_Act2:                                                   ; Offset_0x1F93F0
                incbin  'data\hz\rng_act2.dat'
;-------------------------------------------------------------------------------                
                dc.w    $FFFF, $0000, $0000                      
MGz_Obj_Act1:                                                  ; Offset_0x1F970E
                incbin  'data\mgz\obj_act1.dat'
MGz_Rng_Act1:                                                  ; Offset_0x1F9F18
                incbin  'data\mgz\rng_act1.dat'
;-------------------------------------------------------------------------------                
                dc.w    $FFFF, $0000, $0000                  
MGz_Obj_Act2:                                                  ; Offset_0x1FA4A2    
                incbin  'data\mgz\obj_act2.dat'
MGz_Rng_Act2:                                                  ; Offset_0x1FABD4
                incbin  'data\mgz\rng_act2.dat'
;-------------------------------------------------------------------------------                
                dc.w    $FFFF, $0000, $0000   
CNz_Obj_Act1:                                                  ; Offset_0x1FB0FE
                incbin  'data\cnz\obj_act1.dat'
CNz_Obj_Act2:                                                  ; Offset_0x1FB9FE
                incbin  'data\cnz\obj_act2.dat'
CNz_Rng_Act1:                                                  ; Offset_0x1FC4A2
                incbin  'data\cnz\rng_act1.dat'
CNz_Rng_Act2:                                                  ; Offset_0x1FC7DA                                
                incbin  'data\cnz\rng_act2.dat'
;-------------------------------------------------------------------------------                
                dc.w    $FFFF, $0000, $0000
FBz_Obj_Act1:                                                  ; Offset_0x1FC970
                incbin  'data\fbz\obj_act1.dat'
FBz_Obj_Act2:                                                  ; Offset_0x1FC982 
                incbin  'data\fbz\obj_act2.dat'                  
FBz_Rng_Act1:                                                  ; Offset_0x1FC99A
                incbin  'data\fbz\rng_act1.dat'
FBz_Rng_Act2:                                                  ; Offset_0x1FC9C2  
                incbin  'data\fbz\rng_act2.dat'
; Offset_0x1FC9EA:
                dc.w    $23B0, $8608, $2A00
                dc.w    $23B0, $8610, $2A02
                dc.w    $23B0, $8618, $2A04
                dc.w    $23B0, $8620, $2A06
                dc.w    $23B0, $8628, $2A08 
                dc.w    $FFFF, $0000, $0000                 
;-------------------------------------------------------------------------------                                              
Iz_Obj_Act1:                                                   ; Offset_0x1FCA0E
                incbin  'data\iz\obj_act1.dat'
Iz_Obj_Act2:                                                   ; Offset_0x1FCDF8
                incbin  'data\iz\obj_act2.dat'
Iz_Rng_Act1:                                                   ; Offset_0x1FD344
                incbin  'data\iz\rng_act1.dat'
Iz_Rng_Act2:                                                   ; Offset_0x1FD550
                incbin  'data\iz\rng_act2.dat'
;-------------------------------------------------------------------------------                
                dc.w    $FFFF, $0000, $0000                
LBz_Obj_Act1:                                                  ; Offset_0x1FD896
                incbin  'data\lbz\obj_act1.dat'
LBz_Obj_Act2:                                                  ; Offset_0x1FE100  
                incbin  'data\lbz\obj_act2.dat'
LBz_Rng_Act1:                                                  ; Offset_0x1FE8F8
                incbin  'data\lbz\rng_act1.dat'
LBz_Rng_Act2:                                                  ; Offset_0x1FEC88  
                incbin  'data\lbz\rng_act2.dat'
;-------------------------------------------------------------------------------                
Teleport_Data_0x00: ; $2400                                    ; Offset_0x1FF0C8
                dc.w    $0028
                dc.w    $3E40, $0250
                dc.w    $3E40, $0260
                dc.w    $3E50, $0270
                dc.w    $3E90, $0270
                dc.w    $3EA0, $0260
                dc.w    $3EA0, $0060
                dc.w    $3E90, $0050
                dc.w    $3E50, $0050
                dc.w    $3E40, $0060
                dc.w    $3E40, $00D0
Teleport_Data_0x01: ; $2401                                    ; Offset_0x1FF0F2
                dc.w    $0028
                dc.w    $3F40, $0250
                dc.w    $3F40, $0260
                dc.w    $3F30, $0270
                dc.w    $3EF0, $0270
                dc.w    $3EE0, $0260
                dc.w    $3EE0, $0060
                dc.w    $3EF0, $0050
                dc.w    $3F30, $0050
                dc.w    $3F40, $0060
                dc.w    $3F40, $00D0
Teleport_Data_0x02: ; $2402                                    ; Offset_0x1FF11C
                dc.w    $0038
                dc.w    $0D40, $0770
                dc.w    $0D48, $0770
                dc.w    $0D50, $0770
                dc.w    $0D58, $0770
                dc.w    $0D60, $0770
                dc.w    $0DB0, $0770
                dc.w    $0DD0, $077C
                dc.w    $0DE0, $079C
                dc.w    $0DD6, $07BC
                dc.w    $0DB6, $07CE
                dc.w    $0D96, $07CE
                dc.w    $0D86, $07C8
                dc.w    $0D70, $07A8
                dc.w    $0D70, $0688
Teleport_Data_0x03: ; $2403                                    ; Offset_0x1FF156
                dc.w    $0028
                dc.w    $0D30, $0770
                dc.w    $0DB0, $0770
                dc.w    $0DD0, $077C
                dc.w    $0DE0, $079C
                dc.w    $0DD6, $07BC
                dc.w    $0DB6, $07CE
                dc.w    $0D96, $07CE
                dc.w    $0D86, $07C8
                dc.w    $0D70, $07A8
                dc.w    $0D70, $0748
Teleport_Data_0x04: ; $2404                                     ; Offset_0x1FF180
                dc.w    $0038
                dc.w    $2CC0, $09F0
                dc.w    $2CC8, $09F0
                dc.w    $2CD0, $09F0
                dc.w    $2CD8, $09F0
                dc.w    $2CE0, $09F0
                dc.w    $2D30, $09F0
                dc.w    $2D50, $09FC
                dc.w    $2D60, $0A1C
                dc.w    $2D56, $0A3C
                dc.w    $2D36, $0A4E
                dc.w    $2D16, $0A4E
                dc.w    $2D06, $0A48
                dc.w    $2CF0, $0A28
                dc.w    $2CF0, $0908
Teleport_Data_0x05: ; $2405                                    ; Offset_0x1FF1BA
                dc.w    $0028
                dc.w    $2CB0, $09F0
                dc.w    $2D30, $09F0
                dc.w    $2D50, $09FC
                dc.w    $2D60, $0A1C
                dc.w    $2D56, $0A3C
                dc.w    $2D36, $0A4E
                dc.w    $2D16, $0A4E
                dc.w    $2D06, $0A48
                dc.w    $2CF0, $0A28
                dc.w    $2CF0, $09C8
Teleport_Data_0x06: ; $2406                                    ; Offset_0x1FF1E4
                dc.w    $0038
                dc.w    $3640, $0A70
                dc.w    $3648, $0A70
                dc.w    $3650, $0A70
                dc.w    $3658, $0A70
                dc.w    $3660, $0A70
                dc.w    $36B0, $0A70
                dc.w    $36D0, $0A7C
                dc.w    $36E0, $0A9C
                dc.w    $36D6, $0ABC
                dc.w    $36B6, $0ACE
                dc.w    $3696, $0ACE
                dc.w    $3686, $0AC8
                dc.w    $3670, $0AA8
                dc.w    $3670, $0988
Teleport_Data_0x07: ; $2407                                    ; Offset_0x1FF21E
                dc.w    $0028
                dc.w    $3630, $0A70
                dc.w    $36B0, $0A70
                dc.w    $36D0, $0A7C
                dc.w    $36E0, $0A9C
                dc.w    $36D6, $0ABC
                dc.w    $36B6, $0ACE
                dc.w    $3696, $0ACE
                dc.w    $3686, $0AC8
                dc.w    $3670, $0AA8
                dc.w    $3670, $0A48
Teleport_Data_0x08: ; $2408                                    ; Offset_0x1FF248
                dc.w    $0038
                dc.w    $37C0, $07F0
                dc.w    $37C8, $07F0
                dc.w    $37D0, $07F0
                dc.w    $37D8, $07F0
                dc.w    $37E0, $07F0
                dc.w    $3830, $07F0
                dc.w    $3850, $07FC
                dc.w    $3860, $081C
                dc.w    $3856, $083C
                dc.w    $3836, $084E
                dc.w    $3816, $084E
                dc.w    $3806, $0848
                dc.w    $37F0, $0828
                dc.w    $37F0, $0708
Teleport_Data_0x09: ; $2409                                    ; Offset_0x1FF282
                dc.w    $0028
                dc.w    $37B0, $07F0
                dc.w    $3830, $07F0
                dc.w    $3850, $07FC
                dc.w    $3860, $081C
                dc.w    $3856, $083C
                dc.w    $3836, $084E
                dc.w    $3816, $084E
                dc.w    $3806, $0848
                dc.w    $37F0, $0828
                dc.w    $37F0, $07C8
Teleport_Data_0x0A:  ; $240A                                   ; Offset_0x1FF2AC
                dc.w    $0038
                dc.w    $29C0, $0470
                dc.w    $29C8, $0470
                dc.w    $29D0, $0470
                dc.w    $29D8, $0470
                dc.w    $29E0, $0470
                dc.w    $2A30, $0470
                dc.w    $2A50, $047C
                dc.w    $2A60, $049C
                dc.w    $2A56, $04BC
                dc.w    $2A36, $04CE
                dc.w    $2A16, $04CE
                dc.w    $2A06, $04C8
                dc.w    $29F0, $04A8
                dc.w    $29F0, $0388
Teleport_Data_0x0B: ; $240B                                    ; Offset_0x1FF2E6
                dc.w    $0028
                dc.w    $29B0, $0470
                dc.w    $2A30, $0470
                dc.w    $2A50, $047C
                dc.w    $2A60, $049C
                dc.w    $2A56, $04BC
                dc.w    $2A36, $04CE
                dc.w    $2A16, $04CE
                dc.w    $2A06, $04C8
                dc.w    $29F0, $04A8
                dc.w    $29F0, $0448
Teleport_Data_0x0C: ; $240C                                    ; Offset_0x1FF310
                dc.w    $00D4
                dc.w    $26C0, $0510
                dc.w    $26C0, $06E0
                dc.w    $26B2, $0701
                dc.w    $2690, $0710
                dc.w    $25F0, $0710
                dc.w    $25CE, $0701
                dc.w    $25C0, $06E0
                dc.w    $25C0, $04B0
                dc.w    $25B0, $0480
                dc.w    $2590, $0460
                dc.w    $2560, $0450
                dc.w    $24D0, $0450
                dc.w    $2490, $043B
                dc.w    $2450, $041F
                dc.w    $2400, $0410
                dc.w    $2300, $0410
                dc.w    $22C5, $0419
                dc.w    $2250, $0465
                dc.w    $2200, $0470
                dc.w    $21A0, $0460
                dc.w    $213D, $0419
                dc.w    $2100, $0410
                dc.w    $20C5, $0419
                dc.w    $2050, $0465
                dc.w    $2000, $0470
                dc.w    $1FA0, $0460
                dc.w    $1F3D, $0419
                dc.w    $1F00, $0410
                dc.w    $1EC5, $0419
                dc.w    $1E50, $0465
                dc.w    $1E00, $0470
                dc.w    $1C70, $0470
                dc.w    $1C40, $0440
                dc.w    $1C40, $0320
                dc.w    $1C50, $0300
                dc.w    $1C70, $02F0
                dc.w    $1F80, $02F0
                dc.w    $1FD0, $02E5
                dc.w    $2045, $0299
                dc.w    $2080, $0290
                dc.w    $20C0, $02A7
                dc.w    $2170, $0357
                dc.w    $21B0, $0370
                dc.w    $2400, $0370
                dc.w    $2440, $0380
                dc.w    $2480, $0390
                dc.w    $24B0, $0382
                dc.w    $24C0, $0360
                dc.w    $24C0, $00C0
                dc.w    $2490, $0090
                dc.w    $244D, $00A0
                dc.w    $2440, $00C0
                dc.w    $2440, $0100
Teleport_Data_0x0D: ; $240D                                    ; Offset_0x1FF3E6
                dc.w    $0064
                dc.w    $33C0, $0110
                dc.w    $33C0, $01E0
                dc.w    $33D0, $0200
                dc.w    $3400, $0210
                dc.w    $3450, $0220
                dc.w    $34A0, $0270
                dc.w    $34C0, $02A0
                dc.w    $34C0, $0460
                dc.w    $34CE, $0480
                dc.w    $34F0, $0490
                dc.w    $3710, $0490
                dc.w    $372E, $0480
                dc.w    $3740, $0460
                dc.w    $3740, $0330
                dc.w    $3720, $0310
                dc.w    $35F0, $0310
                dc.w    $35CE, $0300
                dc.w    $35C0, $02E0
                dc.w    $35C0, $0040
                dc.w    $35CC, $0020
                dc.w    $3600, $0010
                dc.w    $3690, $0010
                dc.w    $36B4, $0020
                dc.w    $36C0, $0040
                dc.w    $36C0, $0090
Teleport_Data_0x0E: ; $240E                                    ; Offset_0x1FF44C
Teleport_Data_0x0F: ; $240F                                    ; Offset_0x1FF44C
Teleport_Data_0x10: ; $2410                                    ; Offset_0x1FF44C
                dc.w    $007C
                dc.w    $0F60, $05C8
                dc.w    $0F60, $0950
                dc.w    $0F64, $0980
                dc.w    $0F68, $0990
                dc.w    $0F73, $09B0
                dc.w    $0F82, $09D0
                dc.w    $0F8C, $09E0
                dc.w    $0F98, $09F0
                dc.w    $0FA5, $0A00
                dc.w    $0FB5, $0A10
                dc.w    $0FC5, $0A1C
                dc.w    $0FD5, $0A28
                dc.w    $0FF5, $0A38
                dc.w    $1005, $0A40
                dc.w    $1025, $0A4A
                dc.w    $1035, $0A4C
                dc.w    $1055, $0A50
                dc.w    $1265, $0A50
                dc.w    $12A5, $0A48
                dc.w    $12C5, $0A3C
                dc.w    $12E5, $0A2C
                dc.w    $12F5, $0A20
                dc.w    $1305, $0A14
                dc.w    $1315, $0A08
                dc.w    $1320, $09F8
                dc.w    $132F, $09E8
                dc.w    $1343, $09C8
                dc.w    $1350, $09A8
                dc.w    $135A, $0988
                dc.w    $1360, $0958
                dc.w    $1360, $0878
Teleport_Data_0x11: ; $2411                                    ; Offset_0x1FF4CA
                dc.w    $007C
                dc.w    $3760, $01C8
                dc.w    $3760, $0510
                dc.w    $375A, $0540
                dc.w    $3750, $0560
                dc.w    $3743, $0580
                dc.w    $372F, $05A0
                dc.w    $3720, $05B0
                dc.w    $3715, $05C0
                dc.w    $3705, $05CC
                dc.w    $36F5, $05D8
                dc.w    $36E5, $05E4
                dc.w    $36C5, $05F4
                dc.w    $36A5, $0600
                dc.w    $3665, $0608
                dc.w    $3655, $0608
                dc.w    $3635, $0604
                dc.w    $3625, $0602
                dc.w    $3605, $05F8
                dc.w    $35F5, $05F0
                dc.w    $35D5, $05E0
                dc.w    $35C5, $05D4
                dc.w    $35B5, $05C8
                dc.w    $35A5, $05B8
                dc.w    $3598, $05A8
                dc.w    $358C, $0598
                dc.w    $3582, $0588
                dc.w    $3573, $0568
                dc.w    $3568, $0548
                dc.w    $3564, $0538
                dc.w    $3560, $0508
                dc.w    $3560, $0478
Teleport_Data_0x12: ; $2412                                    ; Offset_0x1FF548
                dc.w    $007C
                dc.w    $3460, $05C8
                dc.w    $3460, $0690
                dc.w    $345A, $06C0
                dc.w    $3450, $06E0
                dc.w    $3443, $0700
                dc.w    $342F, $0720
                dc.w    $3420, $0730
                dc.w    $3415, $0740
                dc.w    $3405, $074C
                dc.w    $33F5, $0758
                dc.w    $33E5, $0764
                dc.w    $33C5, $0774
                dc.w    $33A5, $0780
                dc.w    $3365, $0788
                dc.w    $3355, $0788
                dc.w    $3335, $0784
                dc.w    $3325, $0782
                dc.w    $3305, $0778
                dc.w    $32F5, $0770
                dc.w    $32D5, $0760
                dc.w    $32C5, $0754
                dc.w    $32B5, $0748
                dc.w    $32A5, $0738
                dc.w    $3298, $0728
                dc.w    $328C, $0718
                dc.w    $3282, $0708
                dc.w    $3273, $06E8
                dc.w    $3268, $06C8
                dc.w    $3264, $06B8
                dc.w    $3260, $0688
                dc.w    $3260, $05F8
Teleport_Data_0x13: ; $2413                                    ; Offset_0x1FF5C6
                dc.w    $0028
                dc.w    $1C70, $0730
                dc.w    $1C70, $06C0
                dc.w    $1C62, $06A0
                dc.w    $1C42, $0692
                dc.w    $1C32, $0692
                dc.w    $1C12, $069B
                dc.w    $1C00, $06BB
                dc.w    $1C08, $06DB
                dc.w    $1C28, $06F0
                dc.w    $1CA8, $06F0
Teleport_Data_0x14:                                            ; Offset_0x1FF5F0    
                dc.w    $0028
                dc.w    $3670, $0830
                dc.w    $3670, $07C0
                dc.w    $3662, $07A0
                dc.w    $3642, $0792
                dc.w    $3632, $0792
                dc.w    $3612, $079B
                dc.w    $3600, $07BB
                dc.w    $3608, $07DB
                dc.w    $3628, $07F0
                dc.w    $36A8, $07F0     
;-------------------------------------------------------------------------------                        
Offset_0x1FF61A:
                dc.w    $FFFF, $0000, $0000
;-------------------------------------------------------------------------------                
MVz_Obj_Act1:                                                  ; Offset_0x1FF620
                incbin  'data\mvz\obj_act1.dat'
MVz_Obj_Act2:                                                  ; Offset_0x1FF722 
                incbin  'data\mvz\obj_act2.dat'
MVz_Rng_Act1:                                                  ; Offset_0x1FF7E2
                incbin  'data\mvz\rng_act1.dat'
MVz_Rng_Act2:                                                  ; Offset_0x1FF7E8
                incbin  'data\mvz\rng_act2.dat'
;------------------------------------------------------------------------------- 
                dc.w    $FFFF, $0000, $0000
Sz_Obj_Act1:                                                   ; Offset_0x1FF7F4
                incbin  'data\sz\obj_act1.dat'
Sz_Obj_Act2:                                                   ; Offset_0x1FF800 
                incbin  'data\sz\obj_act2.dat'
Sz_Rng_Act1:                                                   ; Offset_0x1FF80C
                incbin  'data\sz\rng_act1.dat'
Sz_Rng_Act2:                                                   ; Offset_0x1FF812
                incbin  'data\sz\rng_act2.dat' 
;------------------------------------------------------------------------------- 
                dc.w    $FFFF, $0000, $0000
LRz_Obj_Act1:                                                  ; Offset_0x1FF81E
                incbin  'data\lrz\obj_act1.dat'
LRz_Obj_Act2:                                                  ; Offset_0x1FF82A
                incbin  'data\lrz\obj_act2.dat'
LRz_Rng_Act1:                                                  ; Offset_0x1FF836
                incbin  'data\lrz\rng_act1.dat'
LRz_Rng_Act2:                                                  ; Offset_0x1FF83C
                incbin  'data\lrz\rng_act2.dat'
;------------------------------------------------------------------------------- 
                dc.w    $FFFF, $0000, $0000
SSz_Obj_Act1:                                                  ; Offset_0x1FF848
                incbin  'data\ssz\obj_act1.dat'
SSz_Obj_Act2:                                                  ; Offset_0x1FF854 
                incbin  'data\ssz\obj_act2.dat'
SSz_Rng_Act1:                                                  ; Offset_0x1FF860
                incbin  'data\ssz\rng_act1.dat'
SSz_Rng_Act2:                                                  ; Offset_0x1FF866
                incbin  'data\ssz\rng_act2.dat'
;------------------------------------------------------------------------------- 
                dc.w    $FFFF, $0000, $0000                
DEz_Obj_Act1:                                                  ; Offset_0x1FF872
                incbin  'data\dez\obj_act1.dat'
DEz_Obj_Act2:                                                  ; Offset_0x1FF87E
                incbin  'data\dez\obj_act2.dat'
DEz_Rng_Act1:                                                  ; Offset_0x1FF88A
                incbin  'data\dez\rng_act1.dat'
DEz_Rng_Act2:                                                  ; Offset_0x1FF890
                incbin  'data\dez\rng_act2.dat'
;------------------------------------------------------------------------------- 
                dc.w    $FFFF, $0000, $0000                   
TDz_Obj_Act1:                                                  ; Offset_0x1FF89C
                incbin  'data\tdz\obj_act1.dat'
TDz_Obj_Act2:                                                  ; Offset_0x1FF8A8
                incbin  'data\tdz\obj_act2.dat'
TDz_Rng_Act1:                                                  ; Offset_0x1FF8B4
                incbin  'data\tdz\rng_act1.dat'
TDz_Rng_Act2:                                                  ; Offset_0x1FF8BA
                incbin  'data\tdz\rng_act2.dat' 
;------------------------------------------------------------------------------- 
                dc.w    $FFFF, $0000, $0000     
SSz_KTe_Boss_Obj_Act1:                                         ; Offset_0x1FF8C6
                incbin  'data\ssz\obj_act3.dat'
SSz_KTe_Boss_Obj_Act2:                                         ; Offset_0x1FF8D2  
                incbin  'data\ssz\obj_act4.dat'
SSz_KTe_Boss_Rng_Act1:                                         ; Offset_0x1FF8DE
                incbin  'data\ssz\rng_act3.dat'
SSz_KTe_Boss_Rng_Act2:                                         ; Offset_0x1FF8E4
                incbin  'data\ssz\rng_act4.dat'       
;------------------------------------------------------------------------------- 
                dc.w    $FFFF, $0000, $0000                                        
ALz_Obj_Act1:                                                  ; Offset_0x1FF8F0
                incbin  'data\alz\obj_act1.dat'
ALz_Obj_Act2:                                                  ; Offset_0x1FF92C  
                incbin  'data\alz\obj_act2.dat'
ALz_Rng_Act1:                                                  ; Offset_0x1FF938
                incbin  'data\alz\rng_act1.dat'
ALz_Rng_Act2:                                                  ; Offset_0x1FF93E
                incbin  'data\alz\rng_act2.dat'
;------------------------------------------------------------------------------- 
                dc.w    $FFFF, $0000, $0000                 
BPz_Obj_Act1:                                                  ; Offset_0x1FF94A
                incbin  'data\bpz\obj_act1.dat'
BPz_Obj_Act2:                                                  ; Offset_0x1FF99E 
                incbin  'data\bpz\obj_act2.dat'
BPz_Rng_Act1:                                                  ; Offset_0x1FF9AA
                incbin  'data\bpz\rng_act1.dat'
BPz_Rng_Act2:                                                  ; Offset_0x1FF9B0
                incbin  'data\bpz\rng_act2.dat'
;------------------------------------------------------------------------------- 
                dc.w    $FFFF, $0000, $0000                   
DPz_Obj_Act1:                                                  ; Offset_0x1FF9BC
                incbin  'data\dpz\obj_act1.dat'
DPz_Obj_Act2:                                                  ; Offset_0x1FFA28 
                incbin  'data\dpz\obj_act2.dat'
DPz_Rng_Act1:                                                  ; Offset_0x1FFA34
                incbin  'data\dpz\rng_act1.dat'
DPz_Rng_Act2:                                                  ; Offset_0x1FFA3A
                incbin  'data\dpz\rng_act2.dat'
;------------------------------------------------------------------------------- 
                dc.w    $FFFF, $0000, $0000                   
CGZ_Obj_Act1:                                                  ; Offset_0x1FFA46
                incbin  'data\cgz\obj_act1.dat'
CGZ_Obj_Act2:                                                  ; Offset_0x1FFAA6 
                incbin  'data\cgz\obj_act2.dat'
CGZ_Rng_Act1:                                                  ; Offset_0x1FFAB2
                incbin  'data\cgz\rng_act1.dat'
CGZ_Rng_Act2:                                                  ; Offset_0x1FFAB8
                incbin  'data\cgz\rng_act2.dat'
;------------------------------------------------------------------------------- 
                dc.w    $FFFF, $0000, $0000                 
EMz_Obj_Act1:                                                  ; Offset_0x1FFAC4
                incbin  'data\emz\obj_act1.dat'
EMz_Obj_Act2:                                                  ; Offset_0x1FFAEE 
                incbin  'data\emz\obj_act2.dat'
EMz_Rng_Act1:                                                  ; Offset_0x1FFAFA
                incbin  'data\emz\rng_act1.dat'
EMz_Rng_Act2:                                                  ; Offset_0x1FFB00
                incbin  'data\emz\rng_act2.dat'
;------------------------------------------------------------------------------- 
                dc.w    $FFFF, $0000, $0000                   
BS_GM_Obj_Act1:                                                ; Offset_0x1FFB0C
                incbin  'data\bs_gm\obj_act1.dat'
BS_GM_Obj_Act2:                                                ; Offset_0x1FFB18  
                incbin  'data\bs_gm\obj_act2.dat'
BS_GM_Rng_Act1:                                                ; Offset_0x1FFB24
                incbin  'data\bs_gm\rng_act1.dat'
BS_GM_Rng_Act2:                                                ; Offset_0x1FFB2A
                incbin  'data\bs_gm\rng_act2.dat'
;------------------------------------------------------------------------------- 
                dc.w    $FFFF, $0000, $0000                   
BS_GS_Obj_Act1:                                                ; Offset_0x1FFB36
                incbin  'data\bs_gs\obj_act1.dat'
BS_GS_Obj_Act2:                                                ; Offset_0x1FFB42
                incbin  'data\bs_gs\obj_act2.dat'
BS_GS_Rng_Act1:                                                ; Offset_0x1FFB4E
                incbin  'data\bs_gs\rng_act1.dat'
BS_GS_Rng_Act2:                                                ; Offset_0x1FFB54
                incbin  'data\bs_gs\rng_act2.dat'
;------------------------------------------------------------------------------- 
                dc.w    $FFFF, $0000, $0000                     
BS_SM_Obj_Act1:                                                ; Offset_0x1FFB60
                incbin  'data\bs_sm\obj_act1.dat'
BS_SM_Obj_Act2:                                                ; Offset_0x1FFB6C 
                incbin  'data\bs_sm\obj_act2.dat'
BS_SM_Rng_Act1:                                                ; Offset_0x1FFB78
                incbin  'data\bs_sm\rng_act1.dat'
BS_SM_Rng_Act2:                                                ; Offset_0x1FFB7E
                incbin  'data\bs_sm\rng_act2.dat'
;------------------------------------------------------------------------------- 
                dc.w    $FFFF, $0000, $0000                   
LRz_Act2_Boss_Obj:                                             ; Offset_0x1FFB8A  
                incbin  'data\lrz\obj_act3.dat'
HPz_Obj:                                                       ; Offset_0x1FFB96
                incbin  'data\hpz\obj_act1.dat'
LRz_Act2_Boss_Rng:                                             ; Offset_0x1FFBA2
                incbin  'data\lrz\rng_act3.dat'
HPz_Rng:                                                       ; Offset_0x1FFBA8
                incbin  'data\hpz\rng_act1.dat'
;------------------------------------------------------------------------------- 
                dc.w    $FFFF, $0000, $0000                   
DEz_Final_Boss_Obj:                                            ; Offset_0x1FFBB4
                incbin  'data\dez\obj_act3.dat'
HPz_Obj_2:                                                     ; Offset_0x1FFBC0 
                incbin  'data\hpz\obj_act2.dat'
DEz_Final_Boss_Rng:                                            ; Offset_0x1FFBCC
                incbin  'data\dez\rng_act3.dat'
HPz_Rng_2:                                                     ; Offset_0x1FFBD2
                incbin  'data\hpz\rng_act2.dat'
;-------------------------------------------------------------------------------
; Offset_0x1FFBD8:
                dc.w    $0948, $08E0
                dc.w    $09A8, $04D0
                dc.w    $09C0, $04D0
                dc.w    $09D8, $04D0
                dc.w    $0AA8, $04F0
                dc.w    $0AC0, $04F0
                dc.w    $0AD8, $04F0
                dc.w    $0B28, $0290
                dc.w    $0B40, $0290
                dc.w    $0B58, $0290
                dc.w    $0C50, $03E8
                dc.w    $0C50, $0400
                dc.w    $0C50, $0418
                dc.w    $0C50, $03D0
                dc.w    $0CE8, $0168
                dc.w    $0CF0, $08F8
                dc.w    $0D00, $0168
                dc.w    $0D08, $08F8
                dc.w    $0D18, $0168
                dc.w    $0D20, $08F8
                dc.w    $0D28, $0470
                dc.w    $0D40, $0470
                dc.w    $0D58, $0470
                dc.w    $0EA8, $03A8
                dc.w    $0EC0, $03A8
                dc.w    $0ED8, $03A8
                dc.w    $0FC8, $04E0
                dc.w    $0FE0, $04E0
                dc.w    $0FF8, $04E0
                dc.w    $1110, $05D0
                dc.w    $1128, $05D0
                dc.w    $1140, $05D0
                dc.w    $1158, $05D0
                dc.w    $1168, $0890
                dc.w    $1180, $0890
                dc.w    $1198, $0890
                dc.w    $11C0, $0270
                dc.w    $11C8, $09C0
                dc.w    $11D8, $0270
                dc.w    $11E0, $09C0
                dc.w    $11F0, $0270
                dc.w    $11F8, $09C0
                dc.w    $1248, $03F0
                dc.w    $1260, $03F0
                dc.w    $1270, $0670
                dc.w    $1278, $03F0
                dc.w    $1288, $0670
                dc.w    $12A0, $0670
                dc.w    $13B0, $05B8
                dc.w    $13B0, $05D0
                dc.w    $13B0, $0588
                dc.w    $13B0, $05A0
                dc.w    $1408, $0860
                dc.w    $1420, $0860
                dc.w    $1438, $0860
                dc.w    $1448, $0108
                dc.w    $1460, $0108
                dc.w    $1478, $0108
                dc.w    $1518, $0350
                dc.w    $1530, $0350
                dc.w    $1548, $0350
                dc.w    $1568, $00D0
                dc.w    $1574, $00B8
                dc.w    $1580, $00D0
                dc.w    $1580, $00A0
                dc.w    $158C, $00B8
                dc.w    $1598, $00D0
                dc.w    $15D8, $0A40
                dc.w    $15F0, $0A40
                dc.w    $1608, $0A40
                dc.w    $1728, $04D0
                dc.w    $1740, $04D0
                dc.w    $1758, $04D0
                dc.w    $1768, $0268
                dc.w    $1770, $04D0
                dc.w    $1780, $0268
                dc.w    $1798, $0268
                dc.w    $17D0, $0588
                dc.w    $17D0, $05A0
                dc.w    $17D0, $0570
                dc.w    $1898, $03E8
                dc.w    $18C0, $03E8
                dc.w    $18E8, $03E8
                dc.w    $192C, $0058
                dc.w    $193C, $0048
                dc.w    $193C, $0068
                dc.w    $194C, $0058
                dc.w    $19E8, $0960
                dc.w    $1A00, $0960
                dc.w    $1A18, $0960
                dc.w    $1BA0, $01D0
                dc.w    $1BA8, $06D0
                dc.w    $1BB8, $01D0
                dc.w    $1BC0, $06D0
                dc.w    $1BD0, $01D0
                dc.w    $1BD8, $06D0
                dc.w    $1BE8, $01D0
                dc.w    $1C00, $01D0
                dc.w    $1C90, $02B0
                dc.w    $1CA8, $02B0
                dc.w    $1CC0, $02B0
                dc.w    $1CD8, $02B0
                dc.w    $1CF0, $02B0
                dc.w    $1D90, $00D0
                dc.w    $1DA8, $00D0
                dc.w    $1DC0, $00D0
                dc.w    $1DD8, $00D0
                dc.w    $1DF0, $00D0
                dc.w    $1FA8, $0A20
                dc.w    $1FC0, $0A20
                dc.w    $1FD8, $0A20
                dc.w    $23E0, $0530
                dc.w    $23E0, $04D0
                dc.w    $23E0, $04E8
                dc.w    $23E0, $0500
                dc.w    $23E0, $0518
                dc.w    $2480, $09A0
                dc.w    $2490, $0560
                dc.w    $2498, $09A0
                dc.w    $24A8, $0560
                dc.w    $24B0, $09A0
                dc.w    $24C0, $0560
                dc.w    $2528, $0218
                dc.w    $2528, $01D0
                dc.w    $2528, $01E8
                dc.w    $2528, $0200
                dc.w    $2540, $0218
                dc.w    $2540, $01D0
                dc.w    $2540, $01E8
                dc.w    $2540, $0200
                dc.w    $25C8, $08C0
                dc.w    $25E0, $08C0
                dc.w    $25F8, $08C0
                dc.w    $2614, $0528
                dc.w    $262C, $0528
                dc.w    $26E0, $02E8
                dc.w    $26F8, $02E8
                dc.w    $2710, $02E8
                dc.w    $271C, $04D8
                dc.w    $2730, $04D8
                dc.w    $2730, $04C4
                dc.w    $2730, $04EC
                dc.w    $2744, $04D8
                dc.w    $2808, $07A0
                dc.w    $2820, $07A0
                dc.w    $2838, $07A0
                dc.w    $2890, $0850
                dc.w    $2898, $0620
                dc.w    $28A8, $0850
                dc.w    $28B0, $0608
                dc.w    $28C0, $0430
                dc.w    $28C0, $0850
                dc.w    $28C8, $05F0
                dc.w    $28D8, $0430
                dc.w    $28D8, $0850
                dc.w    $28E0, $05D8
                dc.w    $28F0, $0430
                dc.w    $28F0, $0850
                dc.w    $28F8, $05C0
                dc.w    $2908, $0248
                dc.w    $2920, $0248
                dc.w    $2938, $0248
                dc.w    $2968, $0340
                dc.w    $2980, $0340
                dc.w    $2988, $0A20
                dc.w    $2998, $0340
                dc.w    $29A0, $0A20
                dc.w    $29B8, $0A20
                dc.w    $29D0, $0930
                dc.w    $29E8, $0930
                dc.w    $2A00, $0930
                dc.w    $2A18, $0930
                dc.w    $2A30, $0930
                dc.w    $2B30, $0068
                dc.w    $2B30, $0080
                dc.w    $2B30, $0020
                dc.w    $2B30, $0038
                dc.w    $2B30, $0050
                dc.w    $2C20, $08D0
                dc.w    $2C38, $08D0
                dc.w    $2C50, $08D0
                dc.w    $2C68, $08D0
                dc.w    $2C80, $08D0
                dc.w    $2D28, $09F0
                dc.w    $2D40, $09F0
                dc.w    $2D58, $09F0
                dc.w    $2FE8, $0120
                dc.w    $3000, $0120
                dc.w    $3018, $0120
                dc.w    $3128, $0290
                dc.w    $3140, $0290
                dc.w    $3158, $0290
                dc.w    $3188, $0330
                dc.w    $31A0, $0330
                dc.w    $31B8, $0330
                dc.w    $340C, $00D8
                dc.w    $3420, $00C4
                dc.w    $3420, $00EC
                dc.w    $3420, $00D8
                dc.w    $3434, $00D8
                dc.w    $3440, $05D0
                dc.w    $3458, $05D0
                dc.w    $3470, $05D0
                dc.w    $3488, $05D0
                dc.w    $34A0, $05D0
                dc.w    $3628, $0370
                dc.w    $3638, $05E0
                dc.w    $3640, $0370
                dc.w    $3644, $05F4
                dc.w    $3650, $05E0
                dc.w    $3658, $0370
                dc.w    $365C, $05F4
                dc.w    $3668, $05E0
                dc.w    $3674, $05F4
                dc.w    $3680, $05E0
                dc.w    $368C, $05F4
                dc.w    $3698, $05E0
                dc.w    $36A4, $05F4
                dc.w    $36B0, $05E0
                dc.w    $3730, $0080
                dc.w    $3748, $0080
                dc.w    $3760, $0080
                dc.w    $3890, $06E0
                dc.w    $3890, $06F8
                dc.w    $38A8, $06E0
                dc.w    $38A8, $06F8
                dc.w    $38B0, $0460
                dc.w    $38B0, $0478
                dc.w    $38B0, $0490
                dc.w    $38B0, $04A8
                dc.w    $38B0, $04C0
                dc.w    $38B0, $04D8
                dc.w    $38C0, $06E0
                dc.w    $38C0, $06F8
                dc.w    $3A20, $0420
                dc.w    $3A38, $0420
                dc.w    $3A50, $0420
                dc.w    $3D08, $00A8
                dc.w    $3D20, $00A8
                dc.w    $3D38, $00A8
                dc.w    $3DE8, $00D0
                dc.w    $3E00, $00D0
                dc.w    $3E18, $00D0
                dc.w    $3E70, $02D0
                dc.w    $3E88, $02D0
                dc.w    $3EA0, $02D0
                dc.w    $3F18, $0280
                dc.w    $3F30, $0298
                dc.w    $3F30, $0280
                dc.w    $3F30, $0268
                dc.w    $3F48, $0280
                dc.w    $FFFF, $FFFF
;-------------------------------------------------------------------------------                
; Offset_0x1FFFC8:
                dc.w    $0028, $3E40
                dc.w    $0250, $3E40
                dc.w    $0260, $3E50
                dc.w    $0270, $3E90
                dc.w    $0270, $3EA0
                dc.w    $0260, $3EA0
                dc.w    $0060, $3E90
                dc.w    $0050, $3E50
                dc.w    $0050, $3E40
                dc.w    $0060, $3E40
                dc.w    $00D0, $0028
                dc.w    $3F40, $0250
                dc.w    $3F40, $0260
                dc.w    $3F30, $0270

EndOfRom:
		END                